
LevelMeterMainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f34  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000fa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f3  00800060  00800060  00000fa8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fb5  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011b6  00000000  00000000  00004409  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001224  00000000  00000000  000055bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c1c  00000000  00000000  000067e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010e9  00000000  00000000  00007400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002107  00000000  00000000  000084e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a0  00000000  00000000  0000a5f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_3>
  10:	0c 94 03 02 	jmp	0x406	; 0x406 <__vector_4>
  14:	0c 94 ca 02 	jmp	0x594	; 0x594 <__vector_5>
  18:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_6>
  1c:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_7>
  20:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__vector_8>
  24:	0c 94 83 01 	jmp	0x306	; 0x306 <__vector_9>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__vector_11>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__vector_13>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 43 02 	jmp	0x486	; 0x486 <__vector_19>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	f7 03       	fmuls	r23, r23
  56:	fa 03       	fmulsu	r23, r18
  58:	fd 03       	fmulsu	r23, r21
  5a:	00 04       	cpc	r0, r0
  5c:	03 04       	cpc	r0, r3
  5e:	06 04       	cpc	r0, r6
  60:	09 04       	cpc	r0, r9
  62:	0c 04       	cpc	r0, r12

00000064 <__trampolines_end>:
  64:	30 31       	cpi	r19, 0x10	; 16
  66:	32 33       	cpi	r19, 0x32	; 50
  68:	34 35       	cpi	r19, 0x54	; 84
  6a:	36 37       	cpi	r19, 0x76	; 118
  6c:	38 39       	cpi	r19, 0x98	; 152
  6e:	41 42       	sbci	r20, 0x21	; 33
  70:	43 44       	sbci	r20, 0x43	; 67
  72:	45 46       	sbci	r20, 0x65	; 101
	...

00000075 <__c.2183>:
  75:	6c 45 3d 25 64 0a 0a 00                             lE=%d...

0000007d <__c.2181>:
  7d:	64 43 3d 25 64 0a 0a 00                             dC=%d...

00000085 <__c.2179>:
  85:	6d 54 3d 25 64 2c 30 78 25 78 0a 00                 mT=%d,0x%x..

00000091 <__c.2177>:
  91:	77 4d 3d 25 64 0a 00                                wM=%d..

00000098 <__c.2162>:
  98:	4d 61 69 6e 20 62 6f 61 72 64 20 68 65 72 65 21     Main board here!
  a8:	0a 00                                               ..

000000aa <ssdCharTble>:
  aa:	c0 f9 a4 b0 99 92 82 f8 80 90 88 83 c6 a1 86 8e     ................
  ba:	ff fe f7 00                                         ....

000000be <__ctors_end>:
  be:	11 24       	eor	r1, r1
  c0:	1f be       	out	0x3f, r1	; 63
  c2:	cf e5       	ldi	r28, 0x5F	; 95
  c4:	d4 e0       	ldi	r29, 0x04	; 4
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	a0 e6       	ldi	r26, 0x60	; 96
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a3 35       	cpi	r26, 0x53	; 83
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 01 06 	call	0xc02	; 0xc02 <main>
  de:	0c 94 98 07 	jmp	0xf30	; 0xf30 <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
  e6:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
  e8:	8f b7       	in	r24, 0x3f	; 63
  ea:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
  ec:	71 83       	std	Z+1, r23	; 0x01
  ee:	60 83       	st	Z, r22
	buffer->size = size;
  f0:	53 83       	std	Z+3, r21	; 0x03
  f2:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
  f4:	17 82       	std	Z+7, r1	; 0x07
  f6:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
  f8:	15 82       	std	Z+5, r1	; 0x05
  fa:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
  fc:	8f bf       	out	0x3f, r24	; 63
  fe:	08 95       	ret

00000100 <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
 100:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
 102:	9f b7       	in	r25, 0x3f	; 63
 104:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
 106:	44 81       	ldd	r20, Z+4	; 0x04
 108:	55 81       	ldd	r21, Z+5	; 0x05
 10a:	41 15       	cp	r20, r1
 10c:	51 05       	cpc	r21, r1
 10e:	c9 f0       	breq	.+50     	; 0x142 <bufferGetFromFront+0x42>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
 110:	26 81       	ldd	r18, Z+6	; 0x06
 112:	37 81       	ldd	r19, Z+7	; 0x07
 114:	a0 81       	ld	r26, Z
 116:	b1 81       	ldd	r27, Z+1	; 0x01
 118:	a2 0f       	add	r26, r18
 11a:	b3 1f       	adc	r27, r19
 11c:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
 11e:	2f 5f       	subi	r18, 0xFF	; 255
 120:	3f 4f       	sbci	r19, 0xFF	; 255
 122:	37 83       	std	Z+7, r19	; 0x07
 124:	26 83       	std	Z+6, r18	; 0x06
		if(buffer->dataindex >= buffer->size)
 126:	62 81       	ldd	r22, Z+2	; 0x02
 128:	73 81       	ldd	r23, Z+3	; 0x03
 12a:	26 17       	cp	r18, r22
 12c:	37 07       	cpc	r19, r23
 12e:	20 f0       	brcs	.+8      	; 0x138 <bufferGetFromFront+0x38>
		{
			buffer->dataindex -= buffer->size;
 130:	26 1b       	sub	r18, r22
 132:	37 0b       	sbc	r19, r23
 134:	37 83       	std	Z+7, r19	; 0x07
 136:	26 83       	std	Z+6, r18	; 0x06
		}
		buffer->datalength--;
 138:	41 50       	subi	r20, 0x01	; 1
 13a:	51 09       	sbc	r21, r1
 13c:	55 83       	std	Z+5, r21	; 0x05
 13e:	44 83       	std	Z+4, r20	; 0x04
 140:	01 c0       	rjmp	.+2      	; 0x144 <bufferGetFromFront+0x44>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
 142:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
 144:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
 146:	08 95       	ret

00000148 <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
 148:	fc 01       	movw	r30, r24
 14a:	36 2f       	mov	r19, r22
	// begin critical section
	CRITICAL_SECTION_START;
 14c:	2f b7       	in	r18, 0x3f	; 63
 14e:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
 150:	a4 81       	ldd	r26, Z+4	; 0x04
 152:	b5 81       	ldd	r27, Z+5	; 0x05
 154:	62 81       	ldd	r22, Z+2	; 0x02
 156:	73 81       	ldd	r23, Z+3	; 0x03
 158:	a6 17       	cp	r26, r22
 15a:	b7 07       	cpc	r27, r23
 15c:	98 f4       	brcc	.+38     	; 0x184 <bufferAddToEnd+0x3c>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
 15e:	86 81       	ldd	r24, Z+6	; 0x06
 160:	97 81       	ldd	r25, Z+7	; 0x07
 162:	8a 0f       	add	r24, r26
 164:	9b 1f       	adc	r25, r27
 166:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__udivmodhi4>
 16a:	a0 81       	ld	r26, Z
 16c:	b1 81       	ldd	r27, Z+1	; 0x01
 16e:	a8 0f       	add	r26, r24
 170:	b9 1f       	adc	r27, r25
 172:	3c 93       	st	X, r19
		// increment the length
		buffer->datalength++;
 174:	84 81       	ldd	r24, Z+4	; 0x04
 176:	95 81       	ldd	r25, Z+5	; 0x05
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	95 83       	std	Z+5, r25	; 0x05
 17c:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
 17e:	2f bf       	out	0x3f, r18	; 63
		// return success
		return -1;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	08 95       	ret
	}
	// end critical section
	CRITICAL_SECTION_END;
 184:	2f bf       	out	0x3f, r18	; 63
	// return failure
	return 0;
 186:	80 e0       	ldi	r24, 0x00	; 0
}
 188:	08 95       	ret

0000018a <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
 18a:	90 93 61 00 	sts	0x0061, r25
 18e:	80 93 60 00 	sts	0x0060, r24
 192:	08 95       	ret

00000194 <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
 194:	cf 93       	push	r28
 196:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
 198:	8a 30       	cpi	r24, 0x0A	; 10
 19a:	31 f4       	brne	.+12     	; 0x1a8 <rprintfChar+0x14>
		rputchar('\r');
 19c:	e0 91 60 00 	lds	r30, 0x0060
 1a0:	f0 91 61 00 	lds	r31, 0x0061
 1a4:	8d e0       	ldi	r24, 0x0D	; 13
 1a6:	09 95       	icall
	// send character
	rputchar(c);
 1a8:	e0 91 60 00 	lds	r30, 0x0060
 1ac:	f0 91 61 00 	lds	r31, 0x0061
 1b0:	8c 2f       	mov	r24, r28
}
 1b2:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
 1b4:	09 94       	ijmp

000001b6 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
 1b6:	8f 70       	andi	r24, 0x0F	; 15
 1b8:	e8 2f       	mov	r30, r24
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	ec 59       	subi	r30, 0x9C	; 156
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	84 91       	lpm	r24, Z
 1c2:	0c 94 ca 00 	jmp	0x194	; 0x194 <rprintfChar>

000001c6 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
 1c6:	5f 92       	push	r5
 1c8:	6f 92       	push	r6
 1ca:	7f 92       	push	r7
 1cc:	8f 92       	push	r8
 1ce:	9f 92       	push	r9
 1d0:	af 92       	push	r10
 1d2:	bf 92       	push	r11
 1d4:	cf 92       	push	r12
 1d6:	df 92       	push	r13
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	1f 92       	push	r1
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	ec 89       	ldd	r30, Y+20	; 0x14
 1ec:	fd 89       	ldd	r31, Y+21	; 0x15
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
 1ee:	3e 01       	movw	r6, r28
 1f0:	26 e1       	ldi	r18, 0x16	; 22
 1f2:	62 0e       	add	r6, r18
 1f4:	71 1c       	adc	r7, r1
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
					rprintfChar('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 1f6:	3a e0       	ldi	r19, 0x0A	; 10
 1f8:	a3 2e       	mov	r10, r19
 1fa:	b1 2c       	mov	r11, r1
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 1fc:	3b 89       	ldd	r19, Y+19	; 0x13
 1fe:	33 23       	and	r19, r19
 200:	81 f0       	breq	.+32     	; 0x222 <rprintf1RamRom+0x5c>
 202:	8f 01       	movw	r16, r30
 204:	0f 5f       	subi	r16, 0xFF	; 255
 206:	1f 4f       	sbci	r17, 0xFF	; 255
 208:	84 91       	lpm	r24, Z
 20a:	85 32       	cpi	r24, 0x25	; 37
 20c:	89 f0       	breq	.+34     	; 0x230 <rprintf1RamRom+0x6a>
		{	// Until '%' or '\0'
			if (!format_flag)
 20e:	88 23       	and	r24, r24
 210:	09 f4       	brne	.+2      	; 0x214 <rprintf1RamRom+0x4e>
 212:	66 c0       	rjmp	.+204    	; 0x2e0 <rprintf1RamRom+0x11a>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
 214:	0e 94 ca 00 	call	0x194	; 0x194 <rprintfChar>
 218:	63 01       	movw	r12, r6
 21a:	78 01       	movw	r14, r16
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
 21c:	36 01       	movw	r6, r12
 21e:	f7 01       	movw	r30, r14
 220:	ed cf       	rjmp	.-38     	; 0x1fc <rprintf1RamRom+0x36>
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 222:	80 81       	ld	r24, Z
 224:	85 32       	cpi	r24, 0x25	; 37
 226:	59 f0       	breq	.+22     	; 0x23e <rprintf1RamRom+0x78>
 228:	8f 01       	movw	r16, r30
 22a:	0f 5f       	subi	r16, 0xFF	; 255
 22c:	1f 4f       	sbci	r17, 0xFF	; 255
 22e:	ef cf       	rjmp	.-34     	; 0x20e <rprintf1RamRom+0x48>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
 230:	7f 01       	movw	r14, r30
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	e8 0e       	add	r14, r24
 236:	f1 1c       	adc	r15, r1
 238:	f8 01       	movw	r30, r16
 23a:	84 91       	lpm	r24, Z
 23c:	05 c0       	rjmp	.+10     	; 0x248 <rprintf1RamRom+0x82>
 23e:	7f 01       	movw	r14, r30
 240:	22 e0       	ldi	r18, 0x02	; 2
 242:	e2 0e       	add	r14, r18
 244:	f1 1c       	adc	r15, r1
 246:	81 81       	ldd	r24, Z+1	; 0x01
 248:	84 36       	cpi	r24, 0x64	; 100
 24a:	a1 f0       	breq	.+40     	; 0x274 <rprintf1RamRom+0xae>
 24c:	88 37       	cpi	r24, 0x78	; 120
 24e:	61 f0       	breq	.+24     	; 0x268 <rprintf1RamRom+0xa2>
 250:	83 36       	cpi	r24, 0x63	; 99
 252:	31 f4       	brne	.+12     	; 0x260 <rprintf1RamRom+0x9a>
		{
			case 'c': format_flag = va_arg(ap,int);
 254:	f3 01       	movw	r30, r6
 256:	80 81       	ld	r24, Z
 258:	93 01       	movw	r18, r6
 25a:	2e 5f       	subi	r18, 0xFE	; 254
 25c:	3f 4f       	sbci	r19, 0xFF	; 255
 25e:	39 01       	movw	r6, r18
			default:  rprintfChar(format_flag); continue;
 260:	0e 94 ca 00 	call	0x194	; 0x194 <rprintfChar>
 264:	63 01       	movw	r12, r6
 266:	da cf       	rjmp	.-76     	; 0x21c <rprintf1RamRom+0x56>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 268:	20 e1       	ldi	r18, 0x10	; 16
 26a:	82 2e       	mov	r8, r18
 26c:	91 2c       	mov	r9, r1
 26e:	00 e0       	ldi	r16, 0x00	; 0
 270:	10 e1       	ldi	r17, 0x10	; 16
 272:	05 c0       	rjmp	.+10     	; 0x27e <rprintf1RamRom+0xb8>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 274:	9a e0       	ldi	r25, 0x0A	; 10
 276:	89 2e       	mov	r8, r25
 278:	91 2c       	mov	r9, r1
 27a:	00 e1       	ldi	r16, 0x10	; 16
 27c:	17 e2       	ldi	r17, 0x27	; 39
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 27e:	63 01       	movw	r12, r6
 280:	32 e0       	ldi	r19, 0x02	; 2
 282:	c3 0e       	add	r12, r19
 284:	d1 1c       	adc	r13, r1
 286:	f3 01       	movw	r30, r6
 288:	60 80       	ld	r6, Z
 28a:	71 80       	ldd	r7, Z+1	; 0x01
			if (format_flag == 'd')
 28c:	84 36       	cpi	r24, 0x64	; 100
 28e:	a1 f4       	brne	.+40     	; 0x2b8 <rprintf1RamRom+0xf2>
			{
				if (((int)u_val) < 0)
 290:	77 fe       	sbrs	r7, 7
 292:	0f c0       	rjmp	.+30     	; 0x2b2 <rprintf1RamRom+0xec>
				{
					u_val = - u_val;
 294:	71 94       	neg	r7
 296:	61 94       	neg	r6
 298:	71 08       	sbc	r7, r1
					rprintfChar('-');
 29a:	8d e2       	ldi	r24, 0x2D	; 45
 29c:	0e 94 ca 00 	call	0x194	; 0x194 <rprintfChar>
 2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <rprintf1RamRom+0xec>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 2a2:	c8 01       	movw	r24, r16
 2a4:	b5 01       	movw	r22, r10
 2a6:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__udivmodhi4>
 2aa:	8b 01       	movw	r16, r22
 2ac:	62 30       	cpi	r22, 0x02	; 2
 2ae:	71 05       	cpc	r23, r1
 2b0:	18 f0       	brcs	.+6      	; 0x2b8 <rprintf1RamRom+0xf2>
 2b2:	60 16       	cp	r6, r16
 2b4:	71 06       	cpc	r7, r17
 2b6:	a8 f3       	brcs	.-22     	; 0x2a2 <rprintf1RamRom+0xdc>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
 2b8:	c3 01       	movw	r24, r6
 2ba:	b8 01       	movw	r22, r16
 2bc:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__udivmodhi4>
 2c0:	58 2e       	mov	r5, r24
 2c2:	86 2f       	mov	r24, r22
 2c4:	99 83       	std	Y+1, r25	; 0x01
 2c6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <rprintfu04>
				u_val %= div_val;
 2ca:	65 2c       	mov	r6, r5
 2cc:	99 81       	ldd	r25, Y+1	; 0x01
 2ce:	79 2e       	mov	r7, r25
				div_val /= base;
 2d0:	c8 01       	movw	r24, r16
 2d2:	b4 01       	movw	r22, r8
 2d4:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__udivmodhi4>
 2d8:	8b 01       	movw	r16, r22
			} while (div_val);
 2da:	67 2b       	or	r22, r23
 2dc:	69 f7       	brne	.-38     	; 0x2b8 <rprintf1RamRom+0xf2>
 2de:	9e cf       	rjmp	.-196    	; 0x21c <rprintf1RamRom+0x56>
		}
	}
	va_end(ap);
}
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0f 90       	pop	r0
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	ff 90       	pop	r15
 2f0:	ef 90       	pop	r14
 2f2:	df 90       	pop	r13
 2f4:	cf 90       	pop	r12
 2f6:	bf 90       	pop	r11
 2f8:	af 90       	pop	r10
 2fa:	9f 90       	pop	r9
 2fc:	8f 90       	pop	r8
 2fe:	7f 90       	pop	r7
 300:	6f 90       	pop	r6
 302:	5f 90       	pop	r5
 304:	08 95       	ret

00000306 <__vector_9>:
	OCR1B = pwmDuty;
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
 306:	1f 92       	push	r1
 308:	0f 92       	push	r0
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	0f 92       	push	r0
 30e:	11 24       	eor	r1, r1
 310:	2f 93       	push	r18
 312:	3f 93       	push	r19
 314:	4f 93       	push	r20
 316:	5f 93       	push	r21
 318:	6f 93       	push	r22
 31a:	7f 93       	push	r23
 31c:	8f 93       	push	r24
 31e:	9f 93       	push	r25
 320:	af 93       	push	r26
 322:	bf 93       	push	r27
 324:	ef 93       	push	r30
 326:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
 328:	80 91 f6 00 	lds	r24, 0x00F6
 32c:	90 91 f7 00 	lds	r25, 0x00F7
 330:	a0 91 f8 00 	lds	r26, 0x00F8
 334:	b0 91 f9 00 	lds	r27, 0x00F9
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	a1 1d       	adc	r26, r1
 33c:	b1 1d       	adc	r27, r1
 33e:	80 93 f6 00 	sts	0x00F6, r24
 342:	90 93 f7 00 	sts	0x00F7, r25
 346:	a0 93 f8 00 	sts	0x00F8, r26
 34a:	b0 93 f9 00 	sts	0x00F9, r27

	// increment pause counter
	TimerPauseReg++;
 34e:	80 91 fa 00 	lds	r24, 0x00FA
 352:	90 91 fb 00 	lds	r25, 0x00FB
 356:	a0 91 fc 00 	lds	r26, 0x00FC
 35a:	b0 91 fd 00 	lds	r27, 0x00FD
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	a1 1d       	adc	r26, r1
 362:	b1 1d       	adc	r27, r1
 364:	80 93 fa 00 	sts	0x00FA, r24
 368:	90 93 fb 00 	sts	0x00FB, r25
 36c:	a0 93 fc 00 	sts	0x00FC, r26
 370:	b0 93 fd 00 	sts	0x00FD, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
 374:	80 91 62 00 	lds	r24, 0x0062
 378:	90 91 63 00 	lds	r25, 0x0063
 37c:	89 2b       	or	r24, r25
 37e:	29 f0       	breq	.+10     	; 0x38a <__vector_9+0x84>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
 380:	e0 91 62 00 	lds	r30, 0x0062
 384:	f0 91 63 00 	lds	r31, 0x0063
 388:	09 95       	icall
}
 38a:	ff 91       	pop	r31
 38c:	ef 91       	pop	r30
 38e:	bf 91       	pop	r27
 390:	af 91       	pop	r26
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	7f 91       	pop	r23
 398:	6f 91       	pop	r22
 39a:	5f 91       	pop	r21
 39c:	4f 91       	pop	r20
 39e:	3f 91       	pop	r19
 3a0:	2f 91       	pop	r18
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	0f 90       	pop	r0
 3a8:	1f 90       	pop	r1
 3aa:	18 95       	reti

000003ac <__vector_8>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
 3ac:	1f 92       	push	r1
 3ae:	0f 92       	push	r0
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	2f 93       	push	r18
 3b8:	3f 93       	push	r19
 3ba:	4f 93       	push	r20
 3bc:	5f 93       	push	r21
 3be:	6f 93       	push	r22
 3c0:	7f 93       	push	r23
 3c2:	8f 93       	push	r24
 3c4:	9f 93       	push	r25
 3c6:	af 93       	push	r26
 3c8:	bf 93       	push	r27
 3ca:	ef 93       	push	r30
 3cc:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
 3ce:	80 91 64 00 	lds	r24, 0x0064
 3d2:	90 91 65 00 	lds	r25, 0x0065
 3d6:	89 2b       	or	r24, r25
 3d8:	29 f0       	breq	.+10     	; 0x3e4 <__vector_8+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
 3da:	e0 91 64 00 	lds	r30, 0x0064
 3de:	f0 91 65 00 	lds	r31, 0x0065
 3e2:	09 95       	icall
}
 3e4:	ff 91       	pop	r31
 3e6:	ef 91       	pop	r30
 3e8:	bf 91       	pop	r27
 3ea:	af 91       	pop	r26
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	7f 91       	pop	r23
 3f2:	6f 91       	pop	r22
 3f4:	5f 91       	pop	r21
 3f6:	4f 91       	pop	r20
 3f8:	3f 91       	pop	r19
 3fa:	2f 91       	pop	r18
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <__vector_4>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
 406:	1f 92       	push	r1
 408:	0f 92       	push	r0
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	0f 92       	push	r0
 40e:	11 24       	eor	r1, r1
 410:	2f 93       	push	r18
 412:	3f 93       	push	r19
 414:	4f 93       	push	r20
 416:	5f 93       	push	r21
 418:	6f 93       	push	r22
 41a:	7f 93       	push	r23
 41c:	8f 93       	push	r24
 41e:	9f 93       	push	r25
 420:	af 93       	push	r26
 422:	bf 93       	push	r27
 424:	ef 93       	push	r30
 426:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
 428:	80 91 fe 00 	lds	r24, 0x00FE
 42c:	90 91 ff 00 	lds	r25, 0x00FF
 430:	a0 91 00 01 	lds	r26, 0x0100
 434:	b0 91 01 01 	lds	r27, 0x0101
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	a1 1d       	adc	r26, r1
 43c:	b1 1d       	adc	r27, r1
 43e:	80 93 fe 00 	sts	0x00FE, r24
 442:	90 93 ff 00 	sts	0x00FF, r25
 446:	a0 93 00 01 	sts	0x0100, r26
 44a:	b0 93 01 01 	sts	0x0101, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
 44e:	80 91 6c 00 	lds	r24, 0x006C
 452:	90 91 6d 00 	lds	r25, 0x006D
 456:	89 2b       	or	r24, r25
 458:	29 f0       	breq	.+10     	; 0x464 <__stack+0x5>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
 45a:	e0 91 6c 00 	lds	r30, 0x006C
 45e:	f0 91 6d 00 	lds	r31, 0x006D
 462:	09 95       	icall
}
 464:	ff 91       	pop	r31
 466:	ef 91       	pop	r30
 468:	bf 91       	pop	r27
 46a:	af 91       	pop	r26
 46c:	9f 91       	pop	r25
 46e:	8f 91       	pop	r24
 470:	7f 91       	pop	r23
 472:	6f 91       	pop	r22
 474:	5f 91       	pop	r21
 476:	4f 91       	pop	r20
 478:	3f 91       	pop	r19
 47a:	2f 91       	pop	r18
 47c:	0f 90       	pop	r0
 47e:	0f be       	out	0x3f, r0	; 63
 480:	0f 90       	pop	r0
 482:	1f 90       	pop	r1
 484:	18 95       	reti

00000486 <__vector_19>:

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_COMP_vect)
{
 486:	1f 92       	push	r1
 488:	0f 92       	push	r0
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	0f 92       	push	r0
 48e:	11 24       	eor	r1, r1
 490:	2f 93       	push	r18
 492:	3f 93       	push	r19
 494:	4f 93       	push	r20
 496:	5f 93       	push	r21
 498:	6f 93       	push	r22
 49a:	7f 93       	push	r23
 49c:	8f 93       	push	r24
 49e:	9f 93       	push	r25
 4a0:	af 93       	push	r26
 4a2:	bf 93       	push	r27
 4a4:	ef 93       	push	r30
 4a6:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
 4a8:	80 91 70 00 	lds	r24, 0x0070
 4ac:	90 91 71 00 	lds	r25, 0x0071
 4b0:	89 2b       	or	r24, r25
 4b2:	29 f0       	breq	.+10     	; 0x4be <__vector_19+0x38>
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
 4b4:	e0 91 70 00 	lds	r30, 0x0070
 4b8:	f0 91 71 00 	lds	r31, 0x0071
 4bc:	09 95       	icall
}
 4be:	ff 91       	pop	r31
 4c0:	ef 91       	pop	r30
 4c2:	bf 91       	pop	r27
 4c4:	af 91       	pop	r26
 4c6:	9f 91       	pop	r25
 4c8:	8f 91       	pop	r24
 4ca:	7f 91       	pop	r23
 4cc:	6f 91       	pop	r22
 4ce:	5f 91       	pop	r21
 4d0:	4f 91       	pop	r20
 4d2:	3f 91       	pop	r19
 4d4:	2f 91       	pop	r18
 4d6:	0f 90       	pop	r0
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	0f 90       	pop	r0
 4dc:	1f 90       	pop	r1
 4de:	18 95       	reti

000004e0 <__vector_6>:
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
 4e0:	1f 92       	push	r1
 4e2:	0f 92       	push	r0
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	0f 92       	push	r0
 4e8:	11 24       	eor	r1, r1
 4ea:	2f 93       	push	r18
 4ec:	3f 93       	push	r19
 4ee:	4f 93       	push	r20
 4f0:	5f 93       	push	r21
 4f2:	6f 93       	push	r22
 4f4:	7f 93       	push	r23
 4f6:	8f 93       	push	r24
 4f8:	9f 93       	push	r25
 4fa:	af 93       	push	r26
 4fc:	bf 93       	push	r27
 4fe:	ef 93       	push	r30
 500:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
 502:	80 91 66 00 	lds	r24, 0x0066
 506:	90 91 67 00 	lds	r25, 0x0067
 50a:	89 2b       	or	r24, r25
 50c:	29 f0       	breq	.+10     	; 0x518 <__vector_6+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
 50e:	e0 91 66 00 	lds	r30, 0x0066
 512:	f0 91 67 00 	lds	r31, 0x0067
 516:	09 95       	icall
}
 518:	ff 91       	pop	r31
 51a:	ef 91       	pop	r30
 51c:	bf 91       	pop	r27
 51e:	af 91       	pop	r26
 520:	9f 91       	pop	r25
 522:	8f 91       	pop	r24
 524:	7f 91       	pop	r23
 526:	6f 91       	pop	r22
 528:	5f 91       	pop	r21
 52a:	4f 91       	pop	r20
 52c:	3f 91       	pop	r19
 52e:	2f 91       	pop	r18
 530:	0f 90       	pop	r0
 532:	0f be       	out	0x3f, r0	; 63
 534:	0f 90       	pop	r0
 536:	1f 90       	pop	r1
 538:	18 95       	reti

0000053a <__vector_7>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
 53a:	1f 92       	push	r1
 53c:	0f 92       	push	r0
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	0f 92       	push	r0
 542:	11 24       	eor	r1, r1
 544:	2f 93       	push	r18
 546:	3f 93       	push	r19
 548:	4f 93       	push	r20
 54a:	5f 93       	push	r21
 54c:	6f 93       	push	r22
 54e:	7f 93       	push	r23
 550:	8f 93       	push	r24
 552:	9f 93       	push	r25
 554:	af 93       	push	r26
 556:	bf 93       	push	r27
 558:	ef 93       	push	r30
 55a:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
 55c:	80 91 68 00 	lds	r24, 0x0068
 560:	90 91 69 00 	lds	r25, 0x0069
 564:	89 2b       	or	r24, r25
 566:	29 f0       	breq	.+10     	; 0x572 <__vector_7+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
 568:	e0 91 68 00 	lds	r30, 0x0068
 56c:	f0 91 69 00 	lds	r31, 0x0069
 570:	09 95       	icall
}
 572:	ff 91       	pop	r31
 574:	ef 91       	pop	r30
 576:	bf 91       	pop	r27
 578:	af 91       	pop	r26
 57a:	9f 91       	pop	r25
 57c:	8f 91       	pop	r24
 57e:	7f 91       	pop	r23
 580:	6f 91       	pop	r22
 582:	5f 91       	pop	r21
 584:	4f 91       	pop	r20
 586:	3f 91       	pop	r19
 588:	2f 91       	pop	r18
 58a:	0f 90       	pop	r0
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	0f 90       	pop	r0
 590:	1f 90       	pop	r1
 592:	18 95       	reti

00000594 <__vector_5>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
 594:	1f 92       	push	r1
 596:	0f 92       	push	r0
 598:	0f b6       	in	r0, 0x3f	; 63
 59a:	0f 92       	push	r0
 59c:	11 24       	eor	r1, r1
 59e:	2f 93       	push	r18
 5a0:	3f 93       	push	r19
 5a2:	4f 93       	push	r20
 5a4:	5f 93       	push	r21
 5a6:	6f 93       	push	r22
 5a8:	7f 93       	push	r23
 5aa:	8f 93       	push	r24
 5ac:	9f 93       	push	r25
 5ae:	af 93       	push	r26
 5b0:	bf 93       	push	r27
 5b2:	ef 93       	push	r30
 5b4:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
 5b6:	80 91 6a 00 	lds	r24, 0x006A
 5ba:	90 91 6b 00 	lds	r25, 0x006B
 5be:	89 2b       	or	r24, r25
 5c0:	29 f0       	breq	.+10     	; 0x5cc <__vector_5+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
 5c2:	e0 91 6a 00 	lds	r30, 0x006A
 5c6:	f0 91 6b 00 	lds	r31, 0x006B
 5ca:	09 95       	icall
}
 5cc:	ff 91       	pop	r31
 5ce:	ef 91       	pop	r30
 5d0:	bf 91       	pop	r27
 5d2:	af 91       	pop	r26
 5d4:	9f 91       	pop	r25
 5d6:	8f 91       	pop	r24
 5d8:	7f 91       	pop	r23
 5da:	6f 91       	pop	r22
 5dc:	5f 91       	pop	r21
 5de:	4f 91       	pop	r20
 5e0:	3f 91       	pop	r19
 5e2:	2f 91       	pop	r18
 5e4:	0f 90       	pop	r0
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	0f 90       	pop	r0
 5ea:	1f 90       	pop	r1
 5ec:	18 95       	reti

000005ee <__vector_3>:

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMP_vect)
{
 5ee:	1f 92       	push	r1
 5f0:	0f 92       	push	r0
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	0f 92       	push	r0
 5f6:	11 24       	eor	r1, r1
 5f8:	2f 93       	push	r18
 5fa:	3f 93       	push	r19
 5fc:	4f 93       	push	r20
 5fe:	5f 93       	push	r21
 600:	6f 93       	push	r22
 602:	7f 93       	push	r23
 604:	8f 93       	push	r24
 606:	9f 93       	push	r25
 608:	af 93       	push	r26
 60a:	bf 93       	push	r27
 60c:	ef 93       	push	r30
 60e:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
 610:	80 91 6e 00 	lds	r24, 0x006E
 614:	90 91 6f 00 	lds	r25, 0x006F
 618:	89 2b       	or	r24, r25
 61a:	29 f0       	breq	.+10     	; 0x626 <__vector_3+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
 61c:	e0 91 6e 00 	lds	r30, 0x006E
 620:	f0 91 6f 00 	lds	r31, 0x006F
 624:	09 95       	icall
}
 626:	ff 91       	pop	r31
 628:	ef 91       	pop	r30
 62a:	bf 91       	pop	r27
 62c:	af 91       	pop	r26
 62e:	9f 91       	pop	r25
 630:	8f 91       	pop	r24
 632:	7f 91       	pop	r23
 634:	6f 91       	pop	r22
 636:	5f 91       	pop	r21
 638:	4f 91       	pop	r20
 63a:	3f 91       	pop	r19
 63c:	2f 91       	pop	r18
 63e:	0f 90       	pop	r0
 640:	0f be       	out	0x3f, r0	; 63
 642:	0f 90       	pop	r0
 644:	1f 90       	pop	r1
 646:	18 95       	reti

00000648 <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (unsigned char *)uartRxData, UART_RX_BUFFER_SIZE);
 648:	40 e4       	ldi	r20, 0x40	; 64
 64a:	50 e0       	ldi	r21, 0x00	; 0
 64c:	64 eb       	ldi	r22, 0xB4	; 180
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	83 e0       	ldi	r24, 0x03	; 3
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	0e 94 73 00 	call	0xe6	; 0xe6 <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (unsigned char *)uartTxData, UART_TX_BUFFER_SIZE);
 658:	40 e4       	ldi	r20, 0x40	; 64
 65a:	50 e0       	ldi	r21, 0x00	; 0
 65c:	64 e7       	ldi	r22, 0x74	; 116
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	8c e0       	ldi	r24, 0x0C	; 12
 662:	91 e0       	ldi	r25, 0x01	; 1
 664:	0c 94 73 00 	jmp	0xe6	; 0xe6 <bufferInit>

00000668 <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
 668:	0e 94 24 03 	call	0x648	; 0x648 <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
 66c:	10 92 73 00 	sts	0x0073, r1
 670:	10 92 72 00 	sts	0x0072, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
 674:	88 ed       	ldi	r24, 0xD8	; 216
 676:	8a b9       	out	0x0a, r24	; 10
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
 678:	8f e5       	ldi	r24, 0x5F	; 95
 67a:	89 b9       	out	0x09, r24	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 67c:	10 bc       	out	0x20, r1	; 32
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
 67e:	8f ef       	ldi	r24, 0xFF	; 255
 680:	80 93 02 01 	sts	0x0102, r24
	uartBufferedTx = FALSE;
 684:	10 92 0b 01 	sts	0x010B, r1
	// clear overflow count
	uartRxOverflow = 0;
 688:	10 92 15 01 	sts	0x0115, r1
 68c:	10 92 14 01 	sts	0x0114, r1
	// enable interrupts
	sei();
 690:	78 94       	sei
 692:	08 95       	ret

00000694 <uartSetBaudRate>:
	UartRxFunc = rx_func;
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
 694:	0f 93       	push	r16
 696:	1f 93       	push	r17
 698:	8b 01       	movw	r16, r22
 69a:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
 69c:	dc 01       	movw	r26, r24
 69e:	cb 01       	movw	r24, r22
 6a0:	90 5e       	subi	r25, 0xE0	; 224
 6a2:	a3 4e       	sbci	r26, 0xE3	; 227
 6a4:	bf 4f       	sbci	r27, 0xFF	; 255
 6a6:	bc 01       	movw	r22, r24
 6a8:	cd 01       	movw	r24, r26
 6aa:	43 e0       	ldi	r20, 0x03	; 3
 6ac:	66 0f       	add	r22, r22
 6ae:	77 1f       	adc	r23, r23
 6b0:	88 1f       	adc	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	4a 95       	dec	r20
 6b6:	d1 f7       	brne	.-12     	; 0x6ac <uartSetBaudRate+0x18>
 6b8:	a9 01       	movw	r20, r18
 6ba:	98 01       	movw	r18, r16
 6bc:	e4 e0       	ldi	r30, 0x04	; 4
 6be:	22 0f       	add	r18, r18
 6c0:	33 1f       	adc	r19, r19
 6c2:	44 1f       	adc	r20, r20
 6c4:	55 1f       	adc	r21, r21
 6c6:	ea 95       	dec	r30
 6c8:	d1 f7       	brne	.-12     	; 0x6be <uartSetBaudRate+0x2a>
 6ca:	0e 94 70 07 	call	0xee0	; 0xee0 <__udivmodsi4>
 6ce:	21 50       	subi	r18, 0x01	; 1
 6d0:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
 6d2:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 6d4:	30 bd       	out	0x20, r19	; 32
	#endif
}
 6d6:	1f 91       	pop	r17
 6d8:	0f 91       	pop	r16
 6da:	08 95       	ret

000006dc <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
 6dc:	90 91 02 01 	lds	r25, 0x0102
 6e0:	99 23       	and	r25, r25
 6e2:	e1 f3       	breq	.-8      	; 0x6dc <uartSendByte>
	// send byte
	outb(UDR, txData);
 6e4:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
 6e6:	10 92 02 01 	sts	0x0102, r1
 6ea:	08 95       	ret

000006ec <__vector_13>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_TRANS)
{
 6ec:	1f 92       	push	r1
 6ee:	0f 92       	push	r0
 6f0:	0f b6       	in	r0, 0x3f	; 63
 6f2:	0f 92       	push	r0
 6f4:	11 24       	eor	r1, r1
 6f6:	2f 93       	push	r18
 6f8:	3f 93       	push	r19
 6fa:	4f 93       	push	r20
 6fc:	5f 93       	push	r21
 6fe:	6f 93       	push	r22
 700:	7f 93       	push	r23
 702:	8f 93       	push	r24
 704:	9f 93       	push	r25
 706:	af 93       	push	r26
 708:	bf 93       	push	r27
 70a:	ef 93       	push	r30
 70c:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
 70e:	80 91 0b 01 	lds	r24, 0x010B
 712:	88 23       	and	r24, r24
 714:	71 f0       	breq	.+28     	; 0x732 <__vector_13+0x46>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
 716:	80 91 10 01 	lds	r24, 0x0110
 71a:	90 91 11 01 	lds	r25, 0x0111
 71e:	89 2b       	or	r24, r25
 720:	31 f0       	breq	.+12     	; 0x72e <__vector_13+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
 722:	8c e0       	ldi	r24, 0x0C	; 12
 724:	91 e0       	ldi	r25, 0x01	; 1
 726:	0e 94 80 00 	call	0x100	; 0x100 <bufferGetFromFront>
 72a:	8c b9       	out	0x0c, r24	; 12
 72c:	05 c0       	rjmp	.+10     	; 0x738 <__vector_13+0x4c>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
 72e:	10 92 0b 01 	sts	0x010B, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
 732:	8f ef       	ldi	r24, 0xFF	; 255
 734:	80 93 02 01 	sts	0x0102, r24
	}
}
 738:	ff 91       	pop	r31
 73a:	ef 91       	pop	r30
 73c:	bf 91       	pop	r27
 73e:	af 91       	pop	r26
 740:	9f 91       	pop	r25
 742:	8f 91       	pop	r24
 744:	7f 91       	pop	r23
 746:	6f 91       	pop	r22
 748:	5f 91       	pop	r21
 74a:	4f 91       	pop	r20
 74c:	3f 91       	pop	r19
 74e:	2f 91       	pop	r18
 750:	0f 90       	pop	r0
 752:	0f be       	out	0x3f, r0	; 63
 754:	0f 90       	pop	r0
 756:	1f 90       	pop	r1
 758:	18 95       	reti

0000075a <__vector_11>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_RECV)
{
 75a:	1f 92       	push	r1
 75c:	0f 92       	push	r0
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	0f 92       	push	r0
 762:	11 24       	eor	r1, r1
 764:	2f 93       	push	r18
 766:	3f 93       	push	r19
 768:	4f 93       	push	r20
 76a:	5f 93       	push	r21
 76c:	6f 93       	push	r22
 76e:	7f 93       	push	r23
 770:	8f 93       	push	r24
 772:	9f 93       	push	r25
 774:	af 93       	push	r26
 776:	bf 93       	push	r27
 778:	ef 93       	push	r30
 77a:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
 77c:	8c b1       	in	r24, 0x0c	; 12

	// if there's a user function to handle this receive event
	if(UartRxFunc)
 77e:	20 91 72 00 	lds	r18, 0x0072
 782:	30 91 73 00 	lds	r19, 0x0073
 786:	23 2b       	or	r18, r19
 788:	31 f0       	breq	.+12     	; 0x796 <__vector_11+0x3c>
	{
		// call it and pass the received data
		UartRxFunc(c);
 78a:	e0 91 72 00 	lds	r30, 0x0072
 78e:	f0 91 73 00 	lds	r31, 0x0073
 792:	09 95       	icall
 794:	10 c0       	rjmp	.+32     	; 0x7b6 <__vector_11+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
 796:	68 2f       	mov	r22, r24
 798:	83 e0       	ldi	r24, 0x03	; 3
 79a:	91 e0       	ldi	r25, 0x01	; 1
 79c:	0e 94 a4 00 	call	0x148	; 0x148 <bufferAddToEnd>
 7a0:	81 11       	cpse	r24, r1
 7a2:	09 c0       	rjmp	.+18     	; 0x7b6 <__vector_11+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
 7a4:	80 91 14 01 	lds	r24, 0x0114
 7a8:	90 91 15 01 	lds	r25, 0x0115
 7ac:	01 96       	adiw	r24, 0x01	; 1
 7ae:	90 93 15 01 	sts	0x0115, r25
 7b2:	80 93 14 01 	sts	0x0114, r24
		}
	}
}
 7b6:	ff 91       	pop	r31
 7b8:	ef 91       	pop	r30
 7ba:	bf 91       	pop	r27
 7bc:	af 91       	pop	r26
 7be:	9f 91       	pop	r25
 7c0:	8f 91       	pop	r24
 7c2:	7f 91       	pop	r23
 7c4:	6f 91       	pop	r22
 7c6:	5f 91       	pop	r21
 7c8:	4f 91       	pop	r20
 7ca:	3f 91       	pop	r19
 7cc:	2f 91       	pop	r18
 7ce:	0f 90       	pop	r0
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	0f 90       	pop	r0
 7d4:	1f 90       	pop	r1
 7d6:	18 95       	reti

000007d8 <AppDisplay.isra.0>:
* Returns    : true, power on control has finised. false, is processing
*********************************************************************************************************
*/
void AppDisplay(DISP_CODE DispCode, WORK_MODE mode)
{
	switch(DispCode)
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	88 30       	cpi	r24, 0x08	; 8
 7dc:	91 05       	cpc	r25, r1
 7de:	00 f5       	brcc	.+64     	; 0x820 <AppDisplay.isra.0+0x48>
 7e0:	fc 01       	movw	r30, r24
 7e2:	e6 5d       	subi	r30, 0xD6	; 214
 7e4:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(REMOTE_ADDR, SSD_0HZ, SSD_RED);
 7e6:	40 e0       	ldi	r20, 0x00	; 0
 7e8:	60 e0       	ldi	r22, 0x00	; 0
* Returns    : true, power on control has finised. false, is processing
*********************************************************************************************************
*/
void AppDisplay(DISP_CODE DispCode, WORK_MODE mode)
{
	switch(DispCode)
 7ea:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__tablejump2__>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(START_CHAR, SSD_0HZ, SSD_RED);
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	14 c0       	rjmp	.+40     	; 0x81c <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(CURRENT_VALUE, SSD_0HZ, SSD_RED);
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	11 c0       	rjmp	.+34     	; 0x81c <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(FULL_WAREHOUSE, SSD_0HZ, SSD_RED);
 7fa:	82 e0       	ldi	r24, 0x02	; 2
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	0e c0       	rjmp	.+28     	; 0x81c <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(EMPTY_WAREHOUSE, SSD_0HZ, SSD_RED);
 800:	83 e0       	ldi	r24, 0x03	; 3
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	0b c0       	rjmp	.+22     	; 0x81c <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(ALARM_H_PERCENT, SSD_0HZ, SSD_RED);
 806:	84 e0       	ldi	r24, 0x04	; 4
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	08 c0       	rjmp	.+16     	; 0x81c <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(ALARM_L_PERCENT, SSD_0HZ, SSD_RED);
 80c:	85 e0       	ldi	r24, 0x05	; 5
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	05 c0       	rjmp	.+10     	; 0x81c <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(RESPONSE_TIME, SSD_0HZ, SSD_RED);
 812:	86 e0       	ldi	r24, 0x06	; 6
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	02 c0       	rjmp	.+4      	; 0x81c <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(REMOTE_ADDR, SSD_0HZ, SSD_RED);
 818:	87 e0       	ldi	r24, 0x07	; 7
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <SSDDisplayDec>
 820:	08 95       	ret

00000822 <McuInit>:

void McuInit(void)
{
	// initialize our libraries
	// initialize the UART (serial port)
	uartInit();		/* sei() call in the function */
 822:	0e 94 34 03 	call	0x668	; 0x668 <uartInit>
	// set the baud rate of the UART for our debug/reporting output
	uartSetBaudRate(9600);
 826:	60 e8       	ldi	r22, 0x80	; 128
 828:	75 e2       	ldi	r23, 0x25	; 37
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 4a 03 	call	0x694	; 0x694 <uartSetBaudRate>
	// initialize rprintf system
	rprintfInit(uartSendByte);
 832:	8e e6       	ldi	r24, 0x6E	; 110
 834:	93 e0       	ldi	r25, 0x03	; 3
 836:	0c 94 c5 00 	jmp	0x18a	; 0x18a <rprintfInit>

0000083a <ApplInit>:
*********************************************************************************************************
*/

void ApplInit(void)
{
	ButtonInit();
 83a:	0e 94 08 07 	call	0xe10	; 0xe10 <ButtonInit>
	LEDInit();
 83e:	0e 94 a9 05 	call	0xb52	; 0xb52 <LEDInit>
	SSDInit();
 842:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SSDInit>
*/

void ApplDataInit(void)
{
	/* Following for initial power on display steps */
	appl.workMode = PWR_ON;
 846:	e6 e1       	ldi	r30, 0x16	; 22
 848:	f1 e0       	ldi	r31, 0x01	; 1
 84a:	14 86       	std	Z+12, r1	; 0x0c
	appl.CurEvent = NULL_EVENT;
 84c:	15 86       	std	Z+13, r1	; 0x0d
	appl.LastEvent = NULL_EVENT;
 84e:	16 86       	std	Z+14, r1	; 0x0e
	appl.second = 0;
 850:	17 86       	std	Z+15, r1	; 0x0f
	appl.ModeTimer = TIME_SWITCH_TOTAL;
 852:	80 ee       	ldi	r24, 0xE0	; 224
 854:	91 e0       	ldi	r25, 0x01	; 1
 856:	93 8b       	std	Z+19, r25	; 0x13
 858:	82 8b       	std	Z+18, r24	; 0x12
	appl.DispCode= START_CHAR;
 85a:	14 8a       	std	Z+20, r1	; 0x14
	appl.PwrOnSteps = DISP_START;
 85c:	15 8a       	std	Z+21, r1	; 0x15
	ButtonInit();
	LEDInit();
	SSDInit();
	ApplDataInit();
	
	rprintf("Main board here!\n" );	
 85e:	88 e9       	ldi	r24, 0x98	; 152
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	9f 93       	push	r25
 864:	8f 93       	push	r24
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	8f 93       	push	r24
 86a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rprintf1RamRom>
 86e:	0f 90       	pop	r0
 870:	0f 90       	pop	r0
 872:	0f 90       	pop	r0
 874:	08 95       	ret

00000876 <AppCycleUpdate>:
*
* Returns    : none
*********************************************************************************************************
*/
void AppCycleUpdate(void)
{	
 876:	cf 93       	push	r28
	char tempChar;
	static uint16_t cnt;
	cnt++;
 878:	80 91 f4 00 	lds	r24, 0x00F4
 87c:	90 91 f5 00 	lds	r25, 0x00F5
 880:	01 96       	adiw	r24, 0x01	; 1
 882:	90 93 f5 00 	sts	0x00F5, r25
 886:	80 93 f4 00 	sts	0x00F4, r24
* Returns    : none
*********************************************************************************************************
*/
void AppUpdateTimers(void)
{
	if(++appl.second > TIMER_1_SEC_60HZ) 
 88a:	80 91 25 01 	lds	r24, 0x0125
 88e:	8f 5f       	subi	r24, 0xFF	; 255
 890:	8d 33       	cpi	r24, 0x3D	; 61
 892:	18 f4       	brcc	.+6      	; 0x89a <AppCycleUpdate+0x24>
 894:	80 93 25 01 	sts	0x0125, r24
 898:	02 c0       	rjmp	.+4      	; 0x89e <AppCycleUpdate+0x28>
	{
		appl.second = 0;
 89a:	10 92 25 01 	sts	0x0125, r1
#endif
#endif
		
	}
	
	if(appl.ModeTimer != TIMER_TIMEOUT && appl.ModeTimer != TIMER_INT_DISABLED) appl.ModeTimer--;
 89e:	80 91 28 01 	lds	r24, 0x0128
 8a2:	90 91 29 01 	lds	r25, 0x0129
 8a6:	01 97       	sbiw	r24, 0x01	; 1
 8a8:	8e 3f       	cpi	r24, 0xFE	; 254
 8aa:	2f ef       	ldi	r18, 0xFF	; 255
 8ac:	92 07       	cpc	r25, r18
 8ae:	20 f4       	brcc	.+8      	; 0x8b8 <AppCycleUpdate+0x42>
 8b0:	90 93 29 01 	sts	0x0129, r25
 8b4:	80 93 28 01 	sts	0x0128, r24
	cnt++;
	
	AppUpdateTimers();

	/* work mode convert according to ModeTimer and push button events */
	switch(appl.workMode)
 8b8:	c0 91 22 01 	lds	r28, 0x0122
 8bc:	c1 30       	cpi	r28, 0x01	; 1
 8be:	09 f4       	brne	.+2      	; 0x8c2 <AppCycleUpdate+0x4c>
 8c0:	4e c0       	rjmp	.+156    	; 0x95e <AppCycleUpdate+0xe8>
 8c2:	18 f0       	brcs	.+6      	; 0x8ca <AppCycleUpdate+0x54>
 8c4:	c2 30       	cpi	r28, 0x02	; 2
 8c6:	81 f1       	breq	.+96     	; 0x928 <AppCycleUpdate+0xb2>
 8c8:	ef c0       	rjmp	.+478    	; 0xaa8 <AppCycleUpdate+0x232>
	{
		case PWR_ON:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
 8ca:	80 91 28 01 	lds	r24, 0x0128
 8ce:	90 91 29 01 	lds	r25, 0x0129
 8d2:	9c 01       	movw	r18, r24
 8d4:	21 50       	subi	r18, 0x01	; 1
 8d6:	31 09       	sbc	r19, r1
 8d8:	2e 3f       	cpi	r18, 0xFE	; 254
 8da:	3f 4f       	sbci	r19, 0xFF	; 255
 8dc:	78 f5       	brcc	.+94     	; 0x93c <AppCycleUpdate+0xc6>
			{
				if(appl.ModeTimer % (TIME_CONTENT_SWITCH - 1) == 0)
 8de:	6b e3       	ldi	r22, 0x3B	; 59
 8e0:	70 e0       	ldi	r23, 0x00	; 0
 8e2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__udivmodhi4>
 8e6:	89 2b       	or	r24, r25
 8e8:	39 f4       	brne	.+14     	; 0x8f8 <AppCycleUpdate+0x82>
				{
					AppDisplay(++appl.DispCode,PWR_ON);
 8ea:	80 91 2a 01 	lds	r24, 0x012A
 8ee:	8f 5f       	subi	r24, 0xFF	; 255
 8f0:	80 93 2a 01 	sts	0x012A, r24
 8f4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <AppDisplay.isra.0>
				}
				
				if(ButtonJMP1HeldEvent() && (ButtonGetHoldTime() == TIME_B_HELD_RST))	/* Press/Held JMP1 after power on will set to factory default */
 8f8:	0e 94 9b 05 	call	0xb36	; 0xb36 <ButtonJMP1HeldEvent>
 8fc:	88 23       	and	r24, r24
 8fe:	09 f4       	brne	.+2      	; 0x902 <AppCycleUpdate+0x8c>
 900:	d3 c0       	rjmp	.+422    	; 0xaa8 <AppCycleUpdate+0x232>
 902:	0e 94 51 07 	call	0xea2	; 0xea2 <ButtonGetHoldTime>
 906:	cc 97       	sbiw	r24, 0x3c	; 60
 908:	09 f0       	breq	.+2      	; 0x90c <AppCycleUpdate+0x96>
 90a:	ce c0       	rjmp	.+412    	; 0xaa8 <AppCycleUpdate+0x232>
				{
					/* Following for initial power on display steps */
					appl.ModeTimer = TIME_SWITCH_TOTAL;
 90c:	80 ee       	ldi	r24, 0xE0	; 224
 90e:	91 e0       	ldi	r25, 0x01	; 1
 910:	90 93 29 01 	sts	0x0129, r25
 914:	80 93 28 01 	sts	0x0128, r24
					appl.workMode = PWR_ON;
 918:	10 92 22 01 	sts	0x0122, r1
					appl.LastEvent = JP1_HELD;
 91c:	84 e0       	ldi	r24, 0x04	; 4
 91e:	80 93 24 01 	sts	0x0124, r24
					appl.DispCode= START_CHAR;
 922:	10 92 2a 01 	sts	0x012A, r1
 926:	c0 c0       	rjmp	.+384    	; 0xaa8 <AppCycleUpdate+0x232>
				AppDisplay(appl.DispCode,NORMAL);
			}
			break;
			
		case SETTING:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
 928:	80 91 28 01 	lds	r24, 0x0128
 92c:	90 91 29 01 	lds	r25, 0x0129
 930:	9c 01       	movw	r18, r24
 932:	21 50       	subi	r18, 0x01	; 1
 934:	31 09       	sbc	r19, r1
 936:	2e 3f       	cpi	r18, 0xFE	; 254
 938:	3f 4f       	sbci	r19, 0xFF	; 255
 93a:	c0 f1       	brcs	.+112    	; 0x9ac <AppCycleUpdate+0x136>
					appl.workMode = PWR_ON;
					appl.LastEvent = JP1_HELD;
					appl.DispCode= START_CHAR;
				}
			}
			else if(appl.ModeTimer == TIMER_TIMEOUT)
 93c:	89 2b       	or	r24, r25
 93e:	09 f0       	breq	.+2      	; 0x942 <AppCycleUpdate+0xcc>
 940:	b3 c0       	rjmp	.+358    	; 0xaa8 <AppCycleUpdate+0x232>
			{
				appl.ModeTimer = TIMER_INT_DISABLED;	/* Disable count */
 942:	8f ef       	ldi	r24, 0xFF	; 255
 944:	9f ef       	ldi	r25, 0xFF	; 255
 946:	90 93 29 01 	sts	0x0129, r25
 94a:	80 93 28 01 	sts	0x0128, r24
				appl.workMode = NORMAL;					/* convert to NORMAL */
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	80 93 22 01 	sts	0x0122, r24
				appl.LastEvent = NULL_EVENT;			/* update  LastEvent */
 954:	10 92 24 01 	sts	0x0124, r1
				appl.DispCode = CURRENT_VALUE;			/* Initial to display material value in setting mode */
 958:	80 93 2a 01 	sts	0x012A, r24
 95c:	a5 c0       	rjmp	.+330    	; 0xaa8 <AppCycleUpdate+0x232>
			}
			break;
			
		case NORMAL:			
			if(ButtonGetReleased())
 95e:	0e 94 56 07 	call	0xeac	; 0xeac <ButtonGetReleased>
 962:	88 23       	and	r24, r24
 964:	99 f0       	breq	.+38     	; 0x98c <AppCycleUpdate+0x116>
			{
				if(ButtonJMP2ReleasedEvent())
 966:	0e 94 9f 05 	call	0xb3e	; 0xb3e <ButtonJMP2ReleasedEvent>
 96a:	88 23       	and	r24, r24
 96c:	61 f0       	breq	.+24     	; 0x986 <AppCycleUpdate+0x110>
				{
					appl.ModeTimer = TIME_D_CODE_HELD;	/* Disable count */
 96e:	84 eb       	ldi	r24, 0xB4	; 180
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	90 93 29 01 	sts	0x0129, r25
 976:	80 93 28 01 	sts	0x0128, r24
					appl.workMode = SETTING; 			/* convert to SETTING */
 97a:	82 e0       	ldi	r24, 0x02	; 2
 97c:	80 93 22 01 	sts	0x0122, r24
					appl.LastEvent = JP2_PRESS;			/* update  LastEvent */
 980:	c0 93 24 01 	sts	0x0124, r28
 984:	91 c0       	rjmp	.+290    	; 0xaa8 <AppCycleUpdate+0x232>
				}
				else if(ButtonJMP1ReleasedEvent())
 986:	0e 94 97 05 	call	0xb2e	; 0xb2e <ButtonJMP1ReleasedEvent>
 98a:	8e c0       	rjmp	.+284    	; 0xaa8 <AppCycleUpdate+0x232>
				{
				}
			}
			else if(ButtonGetHeld())
 98c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <ButtonGetHeld>
 990:	88 23       	and	r24, r24
 992:	39 f0       	breq	.+14     	; 0x9a2 <AppCycleUpdate+0x12c>
			{
				if(ButtonJMP2HeldEvent())//(ButtonJMP2HeldEvent() && (ButtonGetHoldTime()%(TIMER_1_SEC_60HZ/2) == 0))
 994:	0e 94 a4 05 	call	0xb48	; 0xb48 <ButtonJMP2HeldEvent>
 998:	81 11       	cpse	r24, r1
 99a:	5f c0       	rjmp	.+190    	; 0xa5a <AppCycleUpdate+0x1e4>
				{
					appl.ModeTimer = TIME_D_CODE_HELD;	/* Disable count */
					appl.workMode = SETTING; 			/* convert to SETTING */
					appl.LastEvent = JP2_HELD;			/* update  LastEvent */
				}
				else if(ButtonJMP1HeldEvent())
 99c:	0e 94 9b 05 	call	0xb36	; 0xb36 <ButtonJMP1HeldEvent>
 9a0:	83 c0       	rjmp	.+262    	; 0xaa8 <AppCycleUpdate+0x232>
				}
			}
			else
			{
				/* Display current material, and display color change according to value compare with user setting */
				AppDisplay(appl.DispCode,NORMAL);
 9a2:	80 91 2a 01 	lds	r24, 0x012A
 9a6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <AppDisplay.isra.0>
 9aa:	7e c0       	rjmp	.+252    	; 0xaa8 <AppCycleUpdate+0x232>
			break;
			
		case SETTING:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
			{
				if(ButtonGetReleased())
 9ac:	0e 94 56 07 	call	0xeac	; 0xeac <ButtonGetReleased>
 9b0:	88 23       	and	r24, r24
 9b2:	b1 f1       	breq	.+108    	; 0xa20 <AppCycleUpdate+0x1aa>
				{
					if(ButtonJMP2ReleasedEvent())
 9b4:	0e 94 9f 05 	call	0xb3e	; 0xb3e <ButtonJMP2ReleasedEvent>
 9b8:	88 23       	and	r24, r24
 9ba:	b1 f0       	breq	.+44     	; 0x9e8 <AppCycleUpdate+0x172>
					{
						if(--appl.DispCode < CURRENT_VALUE)
 9bc:	80 91 2a 01 	lds	r24, 0x012A
 9c0:	81 50       	subi	r24, 0x01	; 1
 9c2:	09 f4       	brne	.+2      	; 0x9c6 <AppCycleUpdate+0x150>
						{
							appl.DispCode = REMOTE_ADDR;
 9c4:	87 e0       	ldi	r24, 0x07	; 7
 9c6:	80 93 2a 01 	sts	0x012A, r24
						}
						AppDisplay(appl.DispCode,SETTING);
 9ca:	80 91 2a 01 	lds	r24, 0x012A
 9ce:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <AppDisplay.isra.0>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
 9d2:	84 eb       	ldi	r24, 0xB4	; 180
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	90 93 29 01 	sts	0x0129, r25
 9da:	80 93 28 01 	sts	0x0128, r24
						appl.workMode = SETTING;			/* convert to SETTING */
 9de:	82 e0       	ldi	r24, 0x02	; 2
 9e0:	80 93 22 01 	sts	0x0122, r24
						appl.LastEvent = JP2_PRESS; 		/* update  LastEvent */
 9e4:	81 e0       	ldi	r24, 0x01	; 1
 9e6:	5e c0       	rjmp	.+188    	; 0xaa4 <AppCycleUpdate+0x22e>
					}
					else if(ButtonJMP1ReleasedEvent())
 9e8:	0e 94 97 05 	call	0xb2e	; 0xb2e <ButtonJMP1ReleasedEvent>
 9ec:	88 23       	and	r24, r24
 9ee:	09 f4       	brne	.+2      	; 0x9f2 <AppCycleUpdate+0x17c>
 9f0:	5b c0       	rjmp	.+182    	; 0xaa8 <AppCycleUpdate+0x232>
					{
						SSDDisplayDec(--appl.FullWarehouse, SSD_0HZ, SSD_GREEN);
 9f2:	80 91 18 01 	lds	r24, 0x0118
 9f6:	90 91 19 01 	lds	r25, 0x0119
 9fa:	01 97       	sbiw	r24, 0x01	; 1
 9fc:	90 93 19 01 	sts	0x0119, r25
 a00:	80 93 18 01 	sts	0x0118, r24
 a04:	41 e0       	ldi	r20, 0x01	; 1
 a06:	60 e0       	ldi	r22, 0x00	; 0
 a08:	0e 94 59 06 	call	0xcb2	; 0xcb2 <SSDDisplayDec>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
 a0c:	84 eb       	ldi	r24, 0xB4	; 180
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	90 93 29 01 	sts	0x0129, r25
 a14:	80 93 28 01 	sts	0x0128, r24
						appl.workMode = SETTING;			/* convert to SETTING */
 a18:	c0 93 22 01 	sts	0x0122, r28
						appl.LastEvent = JP1_PRESS;			/* update  LastEvent */
 a1c:	83 e0       	ldi	r24, 0x03	; 3
 a1e:	42 c0       	rjmp	.+132    	; 0xaa4 <AppCycleUpdate+0x22e>
					}
				}
				else if(ButtonGetHeld())
 a20:	0e 94 59 07 	call	0xeb2	; 0xeb2 <ButtonGetHeld>
 a24:	88 23       	and	r24, r24
 a26:	09 f4       	brne	.+2      	; 0xa2a <AppCycleUpdate+0x1b4>
 a28:	3f c0       	rjmp	.+126    	; 0xaa8 <AppCycleUpdate+0x232>
				{
					if(ButtonJMP2HeldEvent() && (ButtonGetHoldTime()%(TIMER_1_SEC_60HZ/6) == 0))	/* fast increase */
 a2a:	0e 94 a4 05 	call	0xb48	; 0xb48 <ButtonJMP2HeldEvent>
 a2e:	88 23       	and	r24, r24
 a30:	f1 f0       	breq	.+60     	; 0xa6e <AppCycleUpdate+0x1f8>
 a32:	0e 94 51 07 	call	0xea2	; 0xea2 <ButtonGetHoldTime>
 a36:	6a e0       	ldi	r22, 0x0A	; 10
 a38:	70 e0       	ldi	r23, 0x00	; 0
 a3a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__udivmodhi4>
 a3e:	89 2b       	or	r24, r25
 a40:	b1 f4       	brne	.+44     	; 0xa6e <AppCycleUpdate+0x1f8>
					{
						if(++appl.DispCode > REMOTE_ADDR)
 a42:	80 91 2a 01 	lds	r24, 0x012A
 a46:	8f 5f       	subi	r24, 0xFF	; 255
 a48:	88 30       	cpi	r24, 0x08	; 8
 a4a:	08 f0       	brcs	.+2      	; 0xa4e <AppCycleUpdate+0x1d8>
						{
							appl.DispCode = CURRENT_VALUE;
 a4c:	81 e0       	ldi	r24, 0x01	; 1
 a4e:	80 93 2a 01 	sts	0x012A, r24
						}
						AppDisplay(appl.DispCode,SETTING);
 a52:	80 91 2a 01 	lds	r24, 0x012A
 a56:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <AppDisplay.isra.0>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
 a5a:	84 eb       	ldi	r24, 0xB4	; 180
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	90 93 29 01 	sts	0x0129, r25
 a62:	80 93 28 01 	sts	0x0128, r24
						appl.workMode = SETTING;			/* convert to SETTING */
 a66:	82 e0       	ldi	r24, 0x02	; 2
 a68:	80 93 22 01 	sts	0x0122, r24
 a6c:	1b c0       	rjmp	.+54     	; 0xaa4 <AppCycleUpdate+0x22e>
						appl.LastEvent = JP2_HELD;			/* update  LastEvent */
					}
					else if(ButtonJMP1HeldEvent())
 a6e:	0e 94 9b 05 	call	0xb36	; 0xb36 <ButtonJMP1HeldEvent>
 a72:	88 23       	and	r24, r24
 a74:	c9 f0       	breq	.+50     	; 0xaa8 <AppCycleUpdate+0x232>
					{
						SSDDisplayDec(++appl.FullWarehouse, SSD_0HZ, SSD_AMBER);
 a76:	80 91 18 01 	lds	r24, 0x0118
 a7a:	90 91 19 01 	lds	r25, 0x0119
 a7e:	01 96       	adiw	r24, 0x01	; 1
 a80:	90 93 19 01 	sts	0x0119, r25
 a84:	80 93 18 01 	sts	0x0118, r24
 a88:	42 e0       	ldi	r20, 0x02	; 2
 a8a:	60 e0       	ldi	r22, 0x00	; 0
 a8c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <SSDDisplayDec>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
 a90:	84 eb       	ldi	r24, 0xB4	; 180
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	90 93 29 01 	sts	0x0129, r25
 a98:	80 93 28 01 	sts	0x0128, r24
						appl.workMode = SETTING;			/* convert to SETTING */
 a9c:	82 e0       	ldi	r24, 0x02	; 2
 a9e:	80 93 22 01 	sts	0x0122, r24
						appl.LastEvent = JP1_HELD;			/* update  LastEvent */
 aa2:	84 e0       	ldi	r24, 0x04	; 4
 aa4:	80 93 24 01 	sts	0x0124, r24
			break;						
	}

#if 1		
#if (FOR_DEBUG==1)
	rprintf("wM=%d\n",appl.workMode);
 aa8:	80 91 22 01 	lds	r24, 0x0122
 aac:	1f 92       	push	r1
 aae:	8f 93       	push	r24
 ab0:	81 e9       	ldi	r24, 0x91	; 145
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	9f 93       	push	r25
 ab6:	8f 93       	push	r24
 ab8:	c1 e0       	ldi	r28, 0x01	; 1
 aba:	cf 93       	push	r28
 abc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rprintf1RamRom>
	rprintf("mT=%d,0x%x\n",appl.ModeTimer,appl.ModeTimer);
 ac0:	80 91 28 01 	lds	r24, 0x0128
 ac4:	90 91 29 01 	lds	r25, 0x0129
 ac8:	9f 93       	push	r25
 aca:	8f 93       	push	r24
 acc:	9f 93       	push	r25
 ace:	8f 93       	push	r24
 ad0:	85 e8       	ldi	r24, 0x85	; 133
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	9f 93       	push	r25
 ad6:	8f 93       	push	r24
 ad8:	cf 93       	push	r28
 ada:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rprintf1RamRom>
	rprintf("dC=%d\n\n",appl.DispCode);
 ade:	80 91 2a 01 	lds	r24, 0x012A
 ae2:	1f 92       	push	r1
 ae4:	8f 93       	push	r24
 ae6:	8d e7       	ldi	r24, 0x7D	; 125
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	9f 93       	push	r25
 aec:	8f 93       	push	r24
 aee:	cf 93       	push	r28
 af0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rprintf1RamRom>
	rprintf("lE=%d\n\n",appl.LastEvent);
 af4:	80 91 24 01 	lds	r24, 0x0124
 af8:	1f 92       	push	r1
 afa:	8f 93       	push	r24
 afc:	85 e7       	ldi	r24, 0x75	; 117
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	9f 93       	push	r25
 b02:	8f 93       	push	r24
 b04:	cf 93       	push	r28
 b06:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rprintf1RamRom>
 b0a:	8d b7       	in	r24, 0x3d	; 61
 b0c:	9e b7       	in	r25, 0x3e	; 62
 b0e:	46 96       	adiw	r24, 0x16	; 22
 b10:	0f b6       	in	r0, 0x3f	; 63
 b12:	f8 94       	cli
 b14:	9e bf       	out	0x3e, r25	; 62
 b16:	0f be       	out	0x3f, r0	; 63
 b18:	8d bf       	out	0x3d, r24	; 61
			appl.PwrOnSteps = DISP_START;
			appl.ModeTimer = TIME_SWITCH_TOTAL;
		}
	}
#endif	
}
 b1a:	cf 91       	pop	r28
 b1c:	08 95       	ret

00000b1e <ButtonInitEx>:
void ButtonInitEx(void)
{	
	/* 
	Set PC1-PC0 as input, the tow IO with external pull up 10K resistor.
	*/
	DDRC &= ((1<<DDC1) | (1<<DDC0));
 b1e:	84 b3       	in	r24, 0x14	; 20
 b20:	83 70       	andi	r24, 0x03	; 3
 b22:	84 bb       	out	0x14, r24	; 20
 b24:	08 95       	ret

00000b26 <ButtonGetIO_StateEx>:
*/
ButtonDataType ButtonGetIO_StateEx(void)
{
	ButtonDataType io_state;
	
	io_state = (~PINC) & ((1<<PINC1) | (1<<PINC0));	/* Get PC1-PC0 IO state */
 b26:	83 b3       	in	r24, 0x13	; 19
 b28:	80 95       	com	r24
	
	return  io_state;
}
 b2a:	83 70       	andi	r24, 0x03	; 3
 b2c:	08 95       	ret

00000b2e <ButtonJMP1ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP1) 
 b2e:	80 91 4d 01 	lds	r24, 0x014D
	{
		return true;
	}
    
    return false;
}
 b32:	81 70       	andi	r24, 0x01	; 1
 b34:	08 95       	ret

00000b36 <ButtonJMP1HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1HeldEvent(void)
{
	if (button.buttonsHeld.JMP1) 
 b36:	80 91 4e 01 	lds	r24, 0x014E
	{
		return true;
	}
    
    return false;
}
 b3a:	81 70       	andi	r24, 0x01	; 1
 b3c:	08 95       	ret

00000b3e <ButtonJMP2ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP2) 
 b3e:	80 91 4d 01 	lds	r24, 0x014D
	{
		return true;
	}
    
    return false;
}
 b42:	86 95       	lsr	r24
 b44:	81 70       	andi	r24, 0x01	; 1
 b46:	08 95       	ret

00000b48 <ButtonJMP2HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2HeldEvent(void)
{
	if (button.buttonsHeld.JMP2) 
 b48:	80 91 4e 01 	lds	r24, 0x014E
	{
		return true;
	}
    
    return false;
}
 b4c:	86 95       	lsr	r24
 b4e:	81 70       	andi	r24, 0x01	; 1
 b50:	08 95       	ret

00000b52 <LEDInit>:
	uint8_t i;
	
	/* 
	Set PB2-PB1 as output to drive to LEDs, default turn off all LEDs
	*/
	DDRB &= ~((1<<DDB2) | (1<<DDB1));
 b52:	87 b3       	in	r24, 0x17	; 23
 b54:	89 7f       	andi	r24, 0xF9	; 249
 b56:	87 bb       	out	0x17, r24	; 23
	DDRB |= ((1<<DDB2) | (1<<DDB1));
 b58:	87 b3       	in	r24, 0x17	; 23
 b5a:	86 60       	ori	r24, 0x06	; 6
 b5c:	87 bb       	out	0x17, r24	; 23
	PORTB |= ((1<<DDB2) | (1<<DDB1));
 b5e:	88 b3       	in	r24, 0x18	; 24
 b60:	86 60       	ori	r24, 0x06	; 6
 b62:	88 bb       	out	0x18, r24	; 24
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
 b64:	e1 e4       	ldi	r30, 0x41	; 65
 b66:	f1 e0       	ldi	r31, 0x01	; 1
 b68:	80 81       	ld	r24, Z
 b6a:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
 b6c:	84 60       	ori	r24, 0x04	; 4
 b6e:	88 60       	ori	r24, 0x08	; 8
 b70:	80 83       	st	Z, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
 b72:	9c e3       	ldi	r25, 0x3C	; 60
 b74:	91 83       	std	Z+1, r25	; 0x01
	DDRB |= ((1<<DDB2) | (1<<DDB1));
	PORTB |= ((1<<DDB2) | (1<<DDB1));
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
 b76:	a3 e4       	ldi	r26, 0x43	; 67
 b78:	b1 e0       	ldi	r27, 0x01	; 1
 b7a:	8c 91       	ld	r24, X
 b7c:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
 b7e:	84 60       	ori	r24, 0x04	; 4
 b80:	88 60       	ori	r24, 0x08	; 8
 b82:	8c 93       	st	X, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
 b84:	93 83       	std	Z+3, r25	; 0x03
 b86:	08 95       	ret

00000b88 <LEDCycleUpdate>:
*
*********************************************************************************************************
*/

void LEDCycleUpdate(void)
{
 b88:	a2 e4       	ldi	r26, 0x42	; 66
 b8a:	b1 e0       	ldi	r27, 0x01	; 1
 b8c:	40 e0       	ldi	r20, 0x00	; 0
 b8e:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
 b90:	ca 01       	movw	r24, r20
 b92:	88 0f       	add	r24, r24
 b94:	99 1f       	adc	r25, r25
 b96:	fc 01       	movw	r30, r24
 b98:	ef 5b       	subi	r30, 0xBF	; 191
 b9a:	fe 4f       	sbci	r31, 0xFE	; 254
 b9c:	30 81       	ld	r19, Z
 b9e:	37 70       	andi	r19, 0x07	; 7
		ft = LEDs[i].flashTimer;
 ba0:	2c 91       	ld	r18, X
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
 ba2:	34 30       	cpi	r19, 0x04	; 4
 ba4:	19 f0       	breq	.+6      	; 0xbac <LEDCycleUpdate+0x24>
	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
		ft = LEDs[i].flashTimer;
		
		ft += rate;
 ba6:	23 0f       	add	r18, r19
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
 ba8:	2d 33       	cpi	r18, 0x3D	; 61
 baa:	38 f0       	brcs	.+14     	; 0xbba <LEDCycleUpdate+0x32>
		{
			ft = 0;
			LEDs[i].led.state = S_OFF;
 bac:	fc 01       	movw	r30, r24
 bae:	ef 5b       	subi	r30, 0xBF	; 191
 bb0:	fe 4f       	sbci	r31, 0xFE	; 254
 bb2:	20 81       	ld	r18, Z
 bb4:	28 60       	ori	r18, 0x08	; 8
 bb6:	20 83       	st	Z, r18
		ft = LEDs[i].flashTimer;
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
		{
			ft = 0;
 bb8:	20 e0       	ldi	r18, 0x00	; 0
			LEDs[i].led.state = S_OFF;
		}
		LEDs[i].flashTimer = ft;
 bba:	2c 93       	st	X, r18
		
		if((rate == LED_0HZ) || (ft > (LED_ONE_SEC/2)))
 bbc:	33 23       	and	r19, r19
 bbe:	11 f0       	breq	.+4      	; 0xbc4 <LEDCycleUpdate+0x3c>
 bc0:	2f 31       	cpi	r18, 0x1F	; 31
 bc2:	30 f0       	brcs	.+12     	; 0xbd0 <LEDCycleUpdate+0x48>
		{
			LEDs[i].led.state = S_ON;
 bc4:	fc 01       	movw	r30, r24
 bc6:	ef 5b       	subi	r30, 0xBF	; 191
 bc8:	fe 4f       	sbci	r31, 0xFE	; 254
 bca:	80 81       	ld	r24, Z
 bcc:	87 7f       	andi	r24, 0xF7	; 247
 bce:	80 83       	st	Z, r24
 bd0:	12 96       	adiw	r26, 0x02	; 2
{
	LED_RATE rate;
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
 bd2:	41 30       	cpi	r20, 0x01	; 1
 bd4:	51 05       	cpc	r21, r1
 bd6:	19 f0       	breq	.+6      	; 0xbde <LEDCycleUpdate+0x56>
 bd8:	41 e0       	ldi	r20, 0x01	; 1
 bda:	50 e0       	ldi	r21, 0x00	; 0
 bdc:	d9 cf       	rjmp	.-78     	; 0xb90 <LEDCycleUpdate+0x8>
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */

	if(LEDs[0].led.state == S_OFF)
 bde:	80 91 41 01 	lds	r24, 0x0141
 be2:	83 ff       	sbrs	r24, 3
 be4:	02 c0       	rjmp	.+4      	; 0xbea <LEDCycleUpdate+0x62>
	{
		state |= (1<<DDB1);
 be6:	82 e0       	ldi	r24, 0x02	; 2
 be8:	01 c0       	rjmp	.+2      	; 0xbec <LEDCycleUpdate+0x64>
*
*********************************************************************************************************
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */
 bea:	80 e0       	ldi	r24, 0x00	; 0
	if(LEDs[0].led.state == S_OFF)
	{
		state |= (1<<DDB1);
	}
	
	if(LEDs[1].led.state == S_OFF)
 bec:	90 91 43 01 	lds	r25, 0x0143
 bf0:	93 fd       	sbrc	r25, 3
	{
		state |= (1<<DDB2);
 bf2:	84 60       	ori	r24, 0x04	; 4
	}

	PORTB &= ~((1<<DDB2) | (1<<DDB1));
 bf4:	98 b3       	in	r25, 0x18	; 24
 bf6:	99 7f       	andi	r25, 0xF9	; 249
 bf8:	98 bb       	out	0x18, r25	; 24
	PORTB |= state;
 bfa:	98 b3       	in	r25, 0x18	; 24
 bfc:	89 2b       	or	r24, r25
 bfe:	88 bb       	out	0x18, r24	; 24
 c00:	08 95       	ret

00000c02 <main>:
int main(void)
{	
	/*
	Calll all initial function
	*/
	McuInit();
 c02:	0e 94 11 04 	call	0x822	; 0x822 <McuInit>
	ApplInit();
 c06:	0e 94 1d 04 	call	0x83a	; 0x83a <ApplInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 c0a:	81 e0       	ldi	r24, 0x01	; 1
 c0c:	90 ef       	ldi	r25, 0xF0	; 240
 c0e:	01 97       	sbiw	r24, 0x01	; 1
 c10:	f1 f7       	brne	.-4      	; 0xc0e <main+0xc>
	
	while(1)
	{
		_delay_us(16667);
		//_delay_ms(20);
		ButtonCycleUpdate();
 c12:	0e 94 0a 07 	call	0xe14	; 0xe14 <ButtonCycleUpdate>
		AppCycleUpdate();
 c16:	0e 94 3b 04 	call	0x876	; 0x876 <AppCycleUpdate>
		LEDCycleUpdate();
 c1a:	0e 94 c4 05 	call	0xb88	; 0xb88 <LEDCycleUpdate>
		SSDCycleUpdate();
 c1e:	0e 94 12 06 	call	0xc24	; 0xc24 <SSDCycleUpdate>
	}
 c22:	f3 cf       	rjmp	.-26     	; 0xc0a <main+0x8>

00000c24 <SSDCycleUpdate>:
*
*********************************************************************************************************
*/

void SSDCycleUpdate(void)
{
 c24:	0f 93       	push	r16
 c26:	1f 93       	push	r17
*/
void SSDShitfOutData(void)
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
 c28:	40 91 47 01 	lds	r20, 0x0147
 c2c:	50 91 48 01 	lds	r21, 0x0148
 c30:	60 91 49 01 	lds	r22, 0x0149
 c34:	70 91 4a 01 	lds	r23, 0x014A
 c38:	80 e2       	ldi	r24, 0x20	; 32
	
	for(i = 0; i < 32; i++)
	{
		bitVal = 0;
		if(DispValTemp & 0x80000000)
 c3a:	8a 01       	movw	r16, r20
 c3c:	9b 01       	movw	r18, r22
		{
			bitVal = 1;
		}
		DispValTemp <<= 1;
 c3e:	44 0f       	add	r20, r20
 c40:	55 1f       	adc	r21, r21
 c42:	66 1f       	adc	r22, r22
 c44:	77 1f       	adc	r23, r23

		SSD_CLK_CLR();
 c46:	af 98       	cbi	0x15, 7	; 21
		SSD_DAT_CLR();
 c48:	ae 98       	cbi	0x15, 6	; 21
		if(bitVal)
 c4a:	37 fd       	sbrc	r19, 7
		{
			SSD_DAT_SET();
 c4c:	ae 9a       	sbi	0x15, 6	; 21
		}
		SSD_CLK_SET();
 c4e:	af 9a       	sbi	0x15, 7	; 21
 c50:	81 50       	subi	r24, 0x01	; 1
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
	
	for(i = 0; i < 32; i++)
 c52:	99 f7       	brne	.-26     	; 0xc3a <SSDCycleUpdate+0x16>
void SSDUpdateOnOff(void)
{
	SSD_RATE rate;
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
 c54:	90 91 45 01 	lds	r25, 0x0145
 c58:	97 70       	andi	r25, 0x07	; 7
	ft = SSD.flashTimer;
 c5a:	80 91 46 01 	lds	r24, 0x0146
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
 c5e:	94 30       	cpi	r25, 0x04	; 4
 c60:	19 f0       	breq	.+6      	; 0xc68 <SSDCycleUpdate+0x44>
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
	ft = SSD.flashTimer;
	
	ft += rate;
 c62:	89 0f       	add	r24, r25
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
 c64:	8d 33       	cpi	r24, 0x3D	; 61
 c66:	30 f0       	brcs	.+12     	; 0xc74 <SSDCycleUpdate+0x50>
	{
		ft = 0;
		SSD.ssd.state = SSD_OFF;
 c68:	80 91 45 01 	lds	r24, 0x0145
 c6c:	8f 7d       	andi	r24, 0xDF	; 223
 c6e:	80 93 45 01 	sts	0x0145, r24
	ft = SSD.flashTimer;
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
	{
		ft = 0;
 c72:	80 e0       	ldi	r24, 0x00	; 0
		SSD.ssd.state = SSD_OFF;
	}
	SSD.flashTimer = ft;
 c74:	80 93 46 01 	sts	0x0146, r24
	
	if((rate == SSD_0HZ) || (ft > (SSD_ONE_SEC/2)))
 c78:	99 23       	and	r25, r25
 c7a:	11 f0       	breq	.+4      	; 0xc80 <SSDCycleUpdate+0x5c>
 c7c:	8f 31       	cpi	r24, 0x1F	; 31
 c7e:	28 f0       	brcs	.+10     	; 0xc8a <SSDCycleUpdate+0x66>
	{
		SSD.ssd.state = SSD_ON;
 c80:	80 91 45 01 	lds	r24, 0x0145
 c84:	80 62       	ori	r24, 0x20	; 32
 c86:	80 93 45 01 	sts	0x0145, r24
*
*********************************************************************************************************
*/
void SSDUpdateComPin(void)
{
	if(SSD.ssd.state == SSD_OFF)		/* if ssd is in off state, cut power to green and color */
 c8a:	80 91 45 01 	lds	r24, 0x0145
 c8e:	85 fd       	sbrc	r24, 5
 c90:	02 c0       	rjmp	.+4      	; 0xc96 <SSDCycleUpdate+0x72>
	{
		SSD_RED_CLR();
 c92:	ac 98       	cbi	0x15, 4	; 21
 c94:	03 c0       	rjmp	.+6      	; 0xc9c <SSDCycleUpdate+0x78>
		SSD_GRN_CLR();
	}
	else
	{
		if(SSD.ssd.color == SSD_RED)		/* dispay red color */
 c96:	88 71       	andi	r24, 0x18	; 24
 c98:	19 f4       	brne	.+6      	; 0xca0 <SSDCycleUpdate+0x7c>
		{
			SSD_RED_SET();	/* give power to red ssd common pin */
 c9a:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_CLR();	/* cut power to green ssd common pin */
 c9c:	ad 98       	cbi	0x15, 5	; 21
 c9e:	06 c0       	rjmp	.+12     	; 0xcac <SSDCycleUpdate+0x88>
		}
		else if(SSD.ssd.color == SSD_GREEN) /* dispay green color */
 ca0:	88 30       	cpi	r24, 0x08	; 8
 ca2:	11 f4       	brne	.+4      	; 0xca8 <SSDCycleUpdate+0x84>
		{
			SSD_RED_CLR();
 ca4:	ac 98       	cbi	0x15, 4	; 21
 ca6:	01 c0       	rjmp	.+2      	; 0xcaa <SSDCycleUpdate+0x86>
			SSD_GRN_SET();
		}
		else								/* dispay amber color */
		{
			SSD_RED_SET();
 ca8:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_SET();
 caa:	ad 9a       	sbi	0x15, 5	; 21
void SSDCycleUpdate(void)
{
	SSDShitfOutData();
	SSDUpdateOnOff();
	SSDUpdateComPin();
}
 cac:	1f 91       	pop	r17
 cae:	0f 91       	pop	r16
 cb0:	08 95       	ret

00000cb2 <SSDDisplayDec>:
* Notes      :none
*
*********************************************************************************************************
*/
void SSDDisplayDec(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
 cb2:	0f 93       	push	r16
 cb4:	1f 93       	push	r17
 cb6:	cf 93       	push	r28
 cb8:	df 93       	push	r29
 cba:	8c 01       	movw	r16, r24
 cbc:	36 2f       	mov	r19, r22
uint32_t SSDHex2Dec(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = hexValue/1000;
 cbe:	68 ee       	ldi	r22, 0xE8	; 232
 cc0:	73 e0       	ldi	r23, 0x03	; 3
 cc2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__udivmodhi4>
 cc6:	c6 2f       	mov	r28, r22
	dataSTR.hundred   = hexValue%1000/100;
 cc8:	64 e6       	ldi	r22, 0x64	; 100
 cca:	70 e0       	ldi	r23, 0x00	; 0
 ccc:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__udivmodhi4>
 cd0:	d6 2f       	mov	r29, r22
	dataSTR.tens      = hexValue%1000%100/10;
 cd2:	6a e0       	ldi	r22, 0x0A	; 10
 cd4:	70 e0       	ldi	r23, 0x00	; 0
 cd6:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__udivmodhi4>
 cda:	56 2f       	mov	r21, r22
{
	SSD_DISP_T ValueCopy;
	
	SSD.DispVal.value = SSDHex2Dec(DispData);
	ValueCopy.value = SSD.DispVal.value;
	SSD.ssd.rate = rate;
 cdc:	37 70       	andi	r19, 0x07	; 7
 cde:	60 91 45 01 	lds	r22, 0x0145
 ce2:	60 7e       	andi	r22, 0xE0	; 224
	SSD.ssd.color = color;
 ce4:	43 70       	andi	r20, 0x03	; 3
 ce6:	94 2f       	mov	r25, r20
 ce8:	99 0f       	add	r25, r25
 cea:	99 0f       	add	r25, r25
 cec:	99 0f       	add	r25, r25
 cee:	46 2f       	mov	r20, r22
 cf0:	43 2b       	or	r20, r19
 cf2:	49 2b       	or	r20, r25
 cf4:	40 93 45 01 	sts	0x0145, r20
	
	/* Set display null for all 4 seven segment displays */
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
 cf8:	ea eb       	ldi	r30, 0xBA	; 186
 cfa:	f0 e0       	ldi	r31, 0x00	; 0
 cfc:	94 91       	lpm	r25, Z
 cfe:	90 93 4a 01 	sts	0x014A, r25
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
 d02:	94 91       	lpm	r25, Z
 d04:	90 93 49 01 	sts	0x0149, r25
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
 d08:	94 91       	lpm	r25, Z
 d0a:	90 93 48 01 	sts	0x0148, r25
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
 d0e:	e4 91       	lpm	r30, Z
 d10:	28 2f       	mov	r18, r24
 d12:	30 e0       	ldi	r19, 0x00	; 0

	/* Set display remove zero before number */
	if(DispData > 1000)
 d14:	09 3e       	cpi	r16, 0xE9	; 233
 d16:	83 e0       	ldi	r24, 0x03	; 3
 d18:	18 07       	cpc	r17, r24
 d1a:	78 f0       	brcs	.+30     	; 0xd3a <SSDDisplayDec+0x88>
	{
		SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[ValueCopy.thousands]);
 d1c:	ec 2f       	mov	r30, r28
 d1e:	f0 e0       	ldi	r31, 0x00	; 0
 d20:	e6 55       	subi	r30, 0x56	; 86
 d22:	ff 4f       	sbci	r31, 0xFF	; 255
 d24:	84 91       	lpm	r24, Z
 d26:	80 93 4a 01 	sts	0x014A, r24
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
 d2a:	ed 2f       	mov	r30, r29
 d2c:	f0 e0       	ldi	r31, 0x00	; 0
 d2e:	e6 55       	subi	r30, 0x56	; 86
 d30:	ff 4f       	sbci	r31, 0xFF	; 255
 d32:	e4 91       	lpm	r30, Z
 d34:	e0 93 49 01 	sts	0x0149, r30
 d38:	0e c0       	rjmp	.+28     	; 0xd56 <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 100)
 d3a:	05 36       	cpi	r16, 0x65	; 101
 d3c:	11 05       	cpc	r17, r1
 d3e:	40 f0       	brcs	.+16     	; 0xd50 <SSDDisplayDec+0x9e>
	{
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
 d40:	ed 2f       	mov	r30, r29
 d42:	f0 e0       	ldi	r31, 0x00	; 0
 d44:	e6 55       	subi	r30, 0x56	; 86
 d46:	ff 4f       	sbci	r31, 0xFF	; 255
 d48:	84 91       	lpm	r24, Z
 d4a:	80 93 49 01 	sts	0x0149, r24
 d4e:	03 c0       	rjmp	.+6      	; 0xd56 <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 10)
 d50:	0b 30       	cpi	r16, 0x0B	; 11
 d52:	11 05       	cpc	r17, r1
 d54:	38 f0       	brcs	.+14     	; 0xd64 <SSDDisplayDec+0xb2>
	{
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
 d56:	e5 2f       	mov	r30, r21
 d58:	f0 e0       	ldi	r31, 0x00	; 0
 d5a:	e6 55       	subi	r30, 0x56	; 86
 d5c:	ff 4f       	sbci	r31, 0xFF	; 255
 d5e:	e4 91       	lpm	r30, Z
 d60:	e0 93 48 01 	sts	0x0148, r30
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else
	{
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
 d64:	f9 01       	movw	r30, r18
 d66:	e6 55       	subi	r30, 0x56	; 86
 d68:	ff 4f       	sbci	r31, 0xFF	; 255
 d6a:	e4 91       	lpm	r30, Z
 d6c:	e0 93 47 01 	sts	0x0147, r30
	}
}
 d70:	df 91       	pop	r29
 d72:	cf 91       	pop	r28
 d74:	1f 91       	pop	r17
 d76:	0f 91       	pop	r16
 d78:	08 95       	ret

00000d7a <SSDDisplayHex>:
uint32_t SSDHex2Hex(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = (hexValue >> 12) & 0x000f;
 d7a:	39 2f       	mov	r19, r25
 d7c:	32 95       	swap	r19
 d7e:	3f 70       	andi	r19, 0x0F	; 15
	dataSTR.hundred   = (hexValue >> 8) & 0x000f;
 d80:	29 2f       	mov	r18, r25
 d82:	2f 70       	andi	r18, 0x0F	; 15
	dataSTR.tens      = (hexValue >> 4) & 0x000f;
 d84:	fc 01       	movw	r30, r24
 d86:	94 e0       	ldi	r25, 0x04	; 4
 d88:	f6 95       	lsr	r31
 d8a:	e7 95       	ror	r30
 d8c:	9a 95       	dec	r25
 d8e:	e1 f7       	brne	.-8      	; 0xd88 <SSDDisplayHex+0xe>
 d90:	9e 2f       	mov	r25, r30
 d92:	9f 70       	andi	r25, 0x0F	; 15
	dataSTR.units     = (hexValue >> 0) & 0x000f;
 d94:	8f 70       	andi	r24, 0x0F	; 15
*
*********************************************************************************************************
*/
void SSDDisplayHex(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
	SSD.DispVal.value = SSDHex2Hex(DispData);
 d96:	a5 e4       	ldi	r26, 0x45	; 69
 d98:	b1 e0       	ldi	r27, 0x01	; 1
	SSD.ssd.rate = rate;
 d9a:	67 70       	andi	r22, 0x07	; 7
 d9c:	7c 91       	ld	r23, X
 d9e:	70 7e       	andi	r23, 0xE0	; 224
	SSD.ssd.color = color;
 da0:	43 70       	andi	r20, 0x03	; 3
 da2:	54 2f       	mov	r21, r20
 da4:	55 0f       	add	r21, r21
 da6:	55 0f       	add	r21, r21
 da8:	55 0f       	add	r21, r21
 daa:	47 2f       	mov	r20, r23
 dac:	46 2b       	or	r20, r22
 dae:	45 2b       	or	r20, r21
 db0:	4c 93       	st	X, r20
	
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD.DispVal.thousands]);
 db2:	e3 2f       	mov	r30, r19
 db4:	f0 e0       	ldi	r31, 0x00	; 0
 db6:	e6 55       	subi	r30, 0x56	; 86
 db8:	ff 4f       	sbci	r31, 0xFF	; 255
 dba:	34 91       	lpm	r19, Z
 dbc:	15 96       	adiw	r26, 0x05	; 5
 dbe:	3c 93       	st	X, r19
 dc0:	15 97       	sbiw	r26, 0x05	; 5
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD.DispVal.hundred]);
 dc2:	e2 2f       	mov	r30, r18
 dc4:	f0 e0       	ldi	r31, 0x00	; 0
 dc6:	e6 55       	subi	r30, 0x56	; 86
 dc8:	ff 4f       	sbci	r31, 0xFF	; 255
 dca:	24 91       	lpm	r18, Z
 dcc:	14 96       	adiw	r26, 0x04	; 4
 dce:	2c 93       	st	X, r18
 dd0:	14 97       	sbiw	r26, 0x04	; 4
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD.DispVal.tens]);
 dd2:	e9 2f       	mov	r30, r25
 dd4:	f0 e0       	ldi	r31, 0x00	; 0
 dd6:	e6 55       	subi	r30, 0x56	; 86
 dd8:	ff 4f       	sbci	r31, 0xFF	; 255
 dda:	e4 91       	lpm	r30, Z
 ddc:	13 96       	adiw	r26, 0x03	; 3
 dde:	ec 93       	st	X, r30
 de0:	13 97       	sbiw	r26, 0x03	; 3
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD.DispVal.units]);
 de2:	e8 2f       	mov	r30, r24
 de4:	f0 e0       	ldi	r31, 0x00	; 0
 de6:	e6 55       	subi	r30, 0x56	; 86
 de8:	ff 4f       	sbci	r31, 0xFF	; 255
 dea:	e4 91       	lpm	r30, Z
 dec:	12 96       	adiw	r26, 0x02	; 2
 dee:	ec 93       	st	X, r30
 df0:	08 95       	ret

00000df2 <SSDInit>:
void SSDInit(void)
{	
	/* 
	Set PB7-PB4 as output to drive seven segment display, default display turn off
	*/
	DDRC &= ~((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
 df2:	84 b3       	in	r24, 0x14	; 20
 df4:	8f 70       	andi	r24, 0x0F	; 15
 df6:	84 bb       	out	0x14, r24	; 20
	DDRC |= ((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
 df8:	84 b3       	in	r24, 0x14	; 20
 dfa:	80 6f       	ori	r24, 0xF0	; 240
 dfc:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~((1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4));
 dfe:	85 b3       	in	r24, 0x15	; 21
 e00:	8f 70       	andi	r24, 0x0F	; 15
 e02:	85 bb       	out	0x15, r24	; 21

	SSDDisplayHex(0, SSD_R_OFF, SSD_RED);	/* Initial turn off all SSDs */
 e04:	40 e0       	ldi	r20, 0x00	; 0
 e06:	64 e0       	ldi	r22, 0x04	; 4
 e08:	80 e0       	ldi	r24, 0x00	; 0
 e0a:	90 e0       	ldi	r25, 0x00	; 0
 e0c:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <SSDDisplayHex>

00000e10 <ButtonInit>:
* Returns    : none
*********************************************************************************************************
*/
void ButtonInit(void)
{
	ButtonInitEx();
 e10:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <ButtonInitEx>

00000e14 <ButtonCycleUpdate>:
* Notes      : None
*
*/
ButtonDataType ButtonGetIO_State(void)
{
	return  ButtonGetIO_StateEx();
 e14:	0e 94 93 05 	call	0xb26	; 0xb26 <ButtonGetIO_StateEx>
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
 e18:	90 91 4b 01 	lds	r25, 0x014B
 e1c:	89 2b       	or	r24, r25
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
 e1e:	10 92 4b 01 	sts	0x014B, r1
	b = button.buttonsLastCycle.bVal;
 e22:	90 91 4c 01 	lds	r25, 0x014C
	holdTime = button.buttonHoldTime;
 e26:	20 91 51 01 	lds	r18, 0x0151
 e2a:	30 91 52 01 	lds	r19, 0x0152
	
	if (button.buttonsReleased.bVal != 0) {		
 e2e:	40 91 4d 01 	lds	r20, 0x014D
 e32:	44 23       	and	r20, r20
 e34:	19 f0       	breq	.+6      	; 0xe3c <ButtonCycleUpdate+0x28>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
 e36:	40 93 4f 01 	sts	0x014F, r20
 e3a:	05 c0       	rjmp	.+10     	; 0xe46 <ButtonCycleUpdate+0x32>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
 e3c:	2d 33       	cpi	r18, 0x3D	; 61
 e3e:	31 05       	cpc	r19, r1
 e40:	10 f0       	brcs	.+4      	; 0xe46 <ButtonCycleUpdate+0x32>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
 e42:	10 92 4f 01 	sts	0x014F, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
 e46:	10 92 4d 01 	sts	0x014D, r1
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
 e4a:	10 92 50 01 	sts	0x0150, r1
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
 e4e:	89 13       	cpse	r24, r25
 e50:	0f c0       	rjmp	.+30     	; 0xe70 <ButtonCycleUpdate+0x5c>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
 e52:	2f 5f       	subi	r18, 0xFF	; 255
 e54:	3f 4f       	sbci	r19, 0xFF	; 255
 e56:	24 32       	cpi	r18, 0x24	; 36
 e58:	31 05       	cpc	r19, r1
 e5a:	18 f4       	brcc	.+6      	; 0xe62 <ButtonCycleUpdate+0x4e>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
 e5c:	10 92 4e 01 	sts	0x014E, r1
 e60:	02 c0       	rjmp	.+4      	; 0xe66 <ButtonCycleUpdate+0x52>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
 e62:	80 93 4e 01 	sts	0x014E, r24
		}	
		button.buttonHoldTime = holdTime;
 e66:	30 93 52 01 	sts	0x0152, r19
 e6a:	20 93 51 01 	sts	0x0151, r18
 e6e:	08 95       	ret
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
 e70:	80 93 4c 01 	sts	0x014C, r24
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
 e74:	80 95       	com	r24
 e76:	89 23       	and	r24, r25
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
 e78:	90 91 4e 01 	lds	r25, 0x014E
 e7c:	98 23       	and	r25, r24
 e7e:	81 f4       	brne	.+32     	; 0xea0 <ButtonCycleUpdate+0x8c>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
 e80:	10 92 52 01 	sts	0x0152, r1
 e84:	10 92 51 01 	sts	0x0151, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
 e88:	23 50       	subi	r18, 0x03	; 3
 e8a:	31 09       	sbc	r19, r1
 e8c:	20 32       	cpi	r18, 0x20	; 32
 e8e:	31 05       	cpc	r19, r1
 e90:	38 f4       	brcc	.+14     	; 0xea0 <ButtonCycleUpdate+0x8c>
				button.buttonsReleased.bVal = buttons;	
 e92:	80 93 4d 01 	sts	0x014D, r24
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
 e96:	90 91 4f 01 	lds	r25, 0x014F
 e9a:	89 23       	and	r24, r25
 e9c:	80 93 50 01 	sts	0x0150, r24
 ea0:	08 95       	ret

00000ea2 <ButtonGetHoldTime>:
*/

uint16_t ButtonGetHoldTime(void)
{
	return button.buttonHoldTime;
}
 ea2:	80 91 51 01 	lds	r24, 0x0151
 ea6:	90 91 52 01 	lds	r25, 0x0152
 eaa:	08 95       	ret

00000eac <ButtonGetReleased>:
*/

ButtonDataType ButtonGetReleased(void)
{
	return button.buttonsReleased.bVal;
}
 eac:	80 91 4d 01 	lds	r24, 0x014D
 eb0:	08 95       	ret

00000eb2 <ButtonGetHeld>:
*/

ButtonDataType ButtonGetHeld (void)
{
	return button.buttonsHeld.bVal;
}
 eb2:	80 91 4e 01 	lds	r24, 0x014E
 eb6:	08 95       	ret

00000eb8 <__udivmodhi4>:
 eb8:	aa 1b       	sub	r26, r26
 eba:	bb 1b       	sub	r27, r27
 ebc:	51 e1       	ldi	r21, 0x11	; 17
 ebe:	07 c0       	rjmp	.+14     	; 0xece <__udivmodhi4_ep>

00000ec0 <__udivmodhi4_loop>:
 ec0:	aa 1f       	adc	r26, r26
 ec2:	bb 1f       	adc	r27, r27
 ec4:	a6 17       	cp	r26, r22
 ec6:	b7 07       	cpc	r27, r23
 ec8:	10 f0       	brcs	.+4      	; 0xece <__udivmodhi4_ep>
 eca:	a6 1b       	sub	r26, r22
 ecc:	b7 0b       	sbc	r27, r23

00000ece <__udivmodhi4_ep>:
 ece:	88 1f       	adc	r24, r24
 ed0:	99 1f       	adc	r25, r25
 ed2:	5a 95       	dec	r21
 ed4:	a9 f7       	brne	.-22     	; 0xec0 <__udivmodhi4_loop>
 ed6:	80 95       	com	r24
 ed8:	90 95       	com	r25
 eda:	bc 01       	movw	r22, r24
 edc:	cd 01       	movw	r24, r26
 ede:	08 95       	ret

00000ee0 <__udivmodsi4>:
 ee0:	a1 e2       	ldi	r26, 0x21	; 33
 ee2:	1a 2e       	mov	r1, r26
 ee4:	aa 1b       	sub	r26, r26
 ee6:	bb 1b       	sub	r27, r27
 ee8:	fd 01       	movw	r30, r26
 eea:	0d c0       	rjmp	.+26     	; 0xf06 <__udivmodsi4_ep>

00000eec <__udivmodsi4_loop>:
 eec:	aa 1f       	adc	r26, r26
 eee:	bb 1f       	adc	r27, r27
 ef0:	ee 1f       	adc	r30, r30
 ef2:	ff 1f       	adc	r31, r31
 ef4:	a2 17       	cp	r26, r18
 ef6:	b3 07       	cpc	r27, r19
 ef8:	e4 07       	cpc	r30, r20
 efa:	f5 07       	cpc	r31, r21
 efc:	20 f0       	brcs	.+8      	; 0xf06 <__udivmodsi4_ep>
 efe:	a2 1b       	sub	r26, r18
 f00:	b3 0b       	sbc	r27, r19
 f02:	e4 0b       	sbc	r30, r20
 f04:	f5 0b       	sbc	r31, r21

00000f06 <__udivmodsi4_ep>:
 f06:	66 1f       	adc	r22, r22
 f08:	77 1f       	adc	r23, r23
 f0a:	88 1f       	adc	r24, r24
 f0c:	99 1f       	adc	r25, r25
 f0e:	1a 94       	dec	r1
 f10:	69 f7       	brne	.-38     	; 0xeec <__udivmodsi4_loop>
 f12:	60 95       	com	r22
 f14:	70 95       	com	r23
 f16:	80 95       	com	r24
 f18:	90 95       	com	r25
 f1a:	9b 01       	movw	r18, r22
 f1c:	ac 01       	movw	r20, r24
 f1e:	bd 01       	movw	r22, r26
 f20:	cf 01       	movw	r24, r30
 f22:	08 95       	ret

00000f24 <__tablejump2__>:
 f24:	ee 0f       	add	r30, r30
 f26:	ff 1f       	adc	r31, r31
 f28:	05 90       	lpm	r0, Z+
 f2a:	f4 91       	lpm	r31, Z
 f2c:	e0 2d       	mov	r30, r0
 f2e:	09 94       	ijmp

00000f30 <_exit>:
 f30:	f8 94       	cli

00000f32 <__stop_program>:
 f32:	ff cf       	rjmp	.-2      	; 0xf32 <__stop_program>
