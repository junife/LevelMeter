
LevelMeterMainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000126e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000012e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010c  00800060  00800060  000012e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b8  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000037d4  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001453  00000000  00000000  00004fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013fe  00000000  00000000  0000642f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d1c  00000000  00000000  00007830  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001241  00000000  00000000  0000854c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002467  00000000  00000000  0000978d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  0000bbf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
       8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
       c:	0c 94 98 03 	jmp	0x730	; 0x730 <__vector_3>
      10:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_4>
      14:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__vector_5>
      18:	0c 94 11 03 	jmp	0x622	; 0x622 <__vector_6>
      1c:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__vector_7>
      20:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__vector_8>
      24:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_9>
      28:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      2c:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__vector_11>
      30:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      34:	0c 94 17 04 	jmp	0x82e	; 0x82e <__vector_13>
      38:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      3c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      40:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      48:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      4c:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__vector_19>
      50:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      54:	9f 04       	cpc	r9, r15
      56:	a4 04       	cpc	r10, r4
      58:	b0 04       	cpc	r11, r0
      5a:	b5 04       	cpc	r11, r5
      5c:	ba 04       	cpc	r11, r10
      5e:	bf 04       	cpc	r11, r15
      60:	c4 04       	cpc	r12, r4
      62:	c9 04       	cpc	r12, r9

00000064 <__trampolines_end>:
      64:	30 31       	cpi	r19, 0x10	; 16
      66:	32 33       	cpi	r19, 0x32	; 50
      68:	34 35       	cpi	r19, 0x54	; 84
      6a:	36 37       	cpi	r19, 0x76	; 118
      6c:	38 39       	cpi	r19, 0x98	; 152
      6e:	41 42       	sbci	r20, 0x21	; 33
      70:	43 44       	sbci	r20, 0x43	; 67
      72:	45 46       	sbci	r20, 0x65	; 101
	...

00000075 <__c.2088>:
      75:	64 43 3d 25 64 0a 0a 00                             dC=%d...

0000007d <__c.2084>:
      7d:	54 79 70 65 3d 25 63 0a 00                          Type=%c..

00000086 <__c.2071>:
      86:	4d 61 69 6e 20 62 6f 61 72 64 20 68 65 72 65 21     Main board here!
      96:	0a 00                                               ..

00000098 <__c.1852>:
      98:	6d 69 25 64 0d 0a 00                                mi%d...

0000009f <__c.1850>:
      9f:	6d 61 25 64 0a 00                                   ma%d..

000000a5 <__c.1848>:
      a5:	61 25 64 0a 00                                      a%d..

000000aa <__c.1846>:
      aa:	73 25 64 0a 00                                      s%d..

000000af <__c.1844>:
      af:	73 61 25 64 0a 00                                   sa%d..

000000b5 <ssdCharTble>:
      b5:	c0 f9 a4 b0 99 92 82 f8 80 90 88 83 c6 a1 86 8e     ................
      c5:	ff fe f7                                            ...

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf e5       	ldi	r28, 0x5F	; 95
      ce:	d4 e0       	ldi	r29, 0x04	; 4
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_clear_bss>:
      d4:	21 e0       	ldi	r18, 0x01	; 1
      d6:	a0 e6       	ldi	r26, 0x60	; 96
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
      dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
      de:	ac 36       	cpi	r26, 0x6C	; 108
      e0:	b2 07       	cpc	r27, r18
      e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
      e4:	0e 94 dd 06 	call	0xdba	; 0xdba <main>
      e8:	0c 94 35 09 	jmp	0x126a	; 0x126a <_exit>

000000ec <__bad_interrupt>:
      ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f0 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
      f0:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
      f2:	8f b7       	in	r24, 0x3f	; 63
      f4:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
      f6:	71 83       	std	Z+1, r23	; 0x01
      f8:	60 83       	st	Z, r22
	buffer->size = size;
      fa:	53 83       	std	Z+3, r21	; 0x03
      fc:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
      fe:	17 82       	std	Z+7, r1	; 0x07
     100:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
     102:	15 82       	std	Z+5, r1	; 0x05
     104:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
     106:	8f bf       	out	0x3f, r24	; 63
     108:	08 95       	ret

0000010a <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
     10a:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
     10c:	9f b7       	in	r25, 0x3f	; 63
     10e:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
     110:	44 81       	ldd	r20, Z+4	; 0x04
     112:	55 81       	ldd	r21, Z+5	; 0x05
     114:	41 15       	cp	r20, r1
     116:	51 05       	cpc	r21, r1
     118:	c9 f0       	breq	.+50     	; 0x14c <bufferGetFromFront+0x42>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
     11a:	26 81       	ldd	r18, Z+6	; 0x06
     11c:	37 81       	ldd	r19, Z+7	; 0x07
     11e:	a0 81       	ld	r26, Z
     120:	b1 81       	ldd	r27, Z+1	; 0x01
     122:	a2 0f       	add	r26, r18
     124:	b3 1f       	adc	r27, r19
     126:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
     128:	2f 5f       	subi	r18, 0xFF	; 255
     12a:	3f 4f       	sbci	r19, 0xFF	; 255
     12c:	37 83       	std	Z+7, r19	; 0x07
     12e:	26 83       	std	Z+6, r18	; 0x06
		if(buffer->dataindex >= buffer->size)
     130:	62 81       	ldd	r22, Z+2	; 0x02
     132:	73 81       	ldd	r23, Z+3	; 0x03
     134:	26 17       	cp	r18, r22
     136:	37 07       	cpc	r19, r23
     138:	20 f0       	brcs	.+8      	; 0x142 <bufferGetFromFront+0x38>
		{
			buffer->dataindex -= buffer->size;
     13a:	26 1b       	sub	r18, r22
     13c:	37 0b       	sbc	r19, r23
     13e:	37 83       	std	Z+7, r19	; 0x07
     140:	26 83       	std	Z+6, r18	; 0x06
		}
		buffer->datalength--;
     142:	41 50       	subi	r20, 0x01	; 1
     144:	51 09       	sbc	r21, r1
     146:	55 83       	std	Z+5, r21	; 0x05
     148:	44 83       	std	Z+4, r20	; 0x04
     14a:	01 c0       	rjmp	.+2      	; 0x14e <bufferGetFromFront+0x44>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
     14c:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
     14e:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
     150:	08 95       	ret

00000152 <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     152:	fc 01       	movw	r30, r24
     154:	36 2f       	mov	r19, r22
	// begin critical section
	CRITICAL_SECTION_START;
     156:	2f b7       	in	r18, 0x3f	; 63
     158:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     15a:	a4 81       	ldd	r26, Z+4	; 0x04
     15c:	b5 81       	ldd	r27, Z+5	; 0x05
     15e:	62 81       	ldd	r22, Z+2	; 0x02
     160:	73 81       	ldd	r23, Z+3	; 0x03
     162:	a6 17       	cp	r26, r22
     164:	b7 07       	cpc	r27, r23
     166:	98 f4       	brcc	.+38     	; 0x18e <bufferAddToEnd+0x3c>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     168:	86 81       	ldd	r24, Z+6	; 0x06
     16a:	97 81       	ldd	r25, Z+7	; 0x07
     16c:	8a 0f       	add	r24, r26
     16e:	9b 1f       	adc	r25, r27
     170:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__udivmodhi4>
     174:	a0 81       	ld	r26, Z
     176:	b1 81       	ldd	r27, Z+1	; 0x01
     178:	a8 0f       	add	r26, r24
     17a:	b9 1f       	adc	r27, r25
     17c:	3c 93       	st	X, r19
		// increment the length
		buffer->datalength++;
     17e:	84 81       	ldd	r24, Z+4	; 0x04
     180:	95 81       	ldd	r25, Z+5	; 0x05
     182:	01 96       	adiw	r24, 0x01	; 1
     184:	95 83       	std	Z+5, r25	; 0x05
     186:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     188:	2f bf       	out	0x3f, r18	; 63
		// return success
		return -1;
     18a:	8f ef       	ldi	r24, 0xFF	; 255
     18c:	08 95       	ret
	}
	// end critical section
	CRITICAL_SECTION_END;
     18e:	2f bf       	out	0x3f, r18	; 63
	// return failure
	return 0;
     190:	80 e0       	ldi	r24, 0x00	; 0
}
     192:	08 95       	ret

00000194 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
     194:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     196:	4f b7       	in	r20, 0x3f	; 63
     198:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
     19a:	82 81       	ldd	r24, Z+2	; 0x02
     19c:	93 81       	ldd	r25, Z+3	; 0x03
     19e:	24 81       	ldd	r18, Z+4	; 0x04
     1a0:	35 81       	ldd	r19, Z+5	; 0x05
	// end critical section
	CRITICAL_SECTION_END;
     1a2:	4f bf       	out	0x3f, r20	; 63
	return bytesleft;
}
     1a4:	82 1b       	sub	r24, r18
     1a6:	93 0b       	sbc	r25, r19
     1a8:	08 95       	ret

000001aa <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
     1aa:	90 93 61 00 	sts	0x0061, r25
     1ae:	80 93 60 00 	sts	0x0060, r24
     1b2:	08 95       	ret

000001b4 <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
     1b4:	cf 93       	push	r28
     1b6:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
     1b8:	8a 30       	cpi	r24, 0x0A	; 10
     1ba:	31 f4       	brne	.+12     	; 0x1c8 <rprintfChar+0x14>
		rputchar('\r');
     1bc:	e0 91 60 00 	lds	r30, 0x0060
     1c0:	f0 91 61 00 	lds	r31, 0x0061
     1c4:	8d e0       	ldi	r24, 0x0D	; 13
     1c6:	09 95       	icall
	// send character
	rputchar(c);
     1c8:	e0 91 60 00 	lds	r30, 0x0060
     1cc:	f0 91 61 00 	lds	r31, 0x0061
     1d0:	8c 2f       	mov	r24, r28
}
     1d2:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     1d4:	09 94       	ijmp

000001d6 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
     1d6:	8f 70       	andi	r24, 0x0F	; 15
     1d8:	e8 2f       	mov	r30, r24
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	ec 59       	subi	r30, 0x9C	; 156
     1de:	ff 4f       	sbci	r31, 0xFF	; 255
     1e0:	84 91       	lpm	r24, Z
     1e2:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <rprintfChar>

000001e6 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
     1e6:	5f 92       	push	r5
     1e8:	6f 92       	push	r6
     1ea:	7f 92       	push	r7
     1ec:	8f 92       	push	r8
     1ee:	9f 92       	push	r9
     1f0:	af 92       	push	r10
     1f2:	bf 92       	push	r11
     1f4:	cf 92       	push	r12
     1f6:	df 92       	push	r13
     1f8:	ef 92       	push	r14
     1fa:	ff 92       	push	r15
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	1f 92       	push	r1
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	ec 89       	ldd	r30, Y+20	; 0x14
     20c:	fd 89       	ldd	r31, Y+21	; 0x15
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
     20e:	3e 01       	movw	r6, r28
     210:	26 e1       	ldi	r18, 0x16	; 22
     212:	62 0e       	add	r6, r18
     214:	71 1c       	adc	r7, r1
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
					rprintfChar('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     216:	3a e0       	ldi	r19, 0x0A	; 10
     218:	a3 2e       	mov	r10, r19
     21a:	b1 2c       	mov	r11, r1
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     21c:	3b 89       	ldd	r19, Y+19	; 0x13
     21e:	33 23       	and	r19, r19
     220:	81 f0       	breq	.+32     	; 0x242 <rprintf1RamRom+0x5c>
     222:	8f 01       	movw	r16, r30
     224:	0f 5f       	subi	r16, 0xFF	; 255
     226:	1f 4f       	sbci	r17, 0xFF	; 255
     228:	84 91       	lpm	r24, Z
     22a:	85 32       	cpi	r24, 0x25	; 37
     22c:	89 f0       	breq	.+34     	; 0x250 <rprintf1RamRom+0x6a>
		{	// Until '%' or '\0'
			if (!format_flag)
     22e:	88 23       	and	r24, r24
     230:	09 f4       	brne	.+2      	; 0x234 <rprintf1RamRom+0x4e>
     232:	66 c0       	rjmp	.+204    	; 0x300 <rprintf1RamRom+0x11a>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
     234:	0e 94 da 00 	call	0x1b4	; 0x1b4 <rprintfChar>
     238:	63 01       	movw	r12, r6
     23a:	78 01       	movw	r14, r16
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
     23c:	36 01       	movw	r6, r12
     23e:	f7 01       	movw	r30, r14
     240:	ed cf       	rjmp	.-38     	; 0x21c <rprintf1RamRom+0x36>
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     242:	80 81       	ld	r24, Z
     244:	85 32       	cpi	r24, 0x25	; 37
     246:	59 f0       	breq	.+22     	; 0x25e <rprintf1RamRom+0x78>
     248:	8f 01       	movw	r16, r30
     24a:	0f 5f       	subi	r16, 0xFF	; 255
     24c:	1f 4f       	sbci	r17, 0xFF	; 255
     24e:	ef cf       	rjmp	.-34     	; 0x22e <rprintf1RamRom+0x48>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
     250:	7f 01       	movw	r14, r30
     252:	82 e0       	ldi	r24, 0x02	; 2
     254:	e8 0e       	add	r14, r24
     256:	f1 1c       	adc	r15, r1
     258:	f8 01       	movw	r30, r16
     25a:	84 91       	lpm	r24, Z
     25c:	05 c0       	rjmp	.+10     	; 0x268 <rprintf1RamRom+0x82>
     25e:	7f 01       	movw	r14, r30
     260:	22 e0       	ldi	r18, 0x02	; 2
     262:	e2 0e       	add	r14, r18
     264:	f1 1c       	adc	r15, r1
     266:	81 81       	ldd	r24, Z+1	; 0x01
     268:	84 36       	cpi	r24, 0x64	; 100
     26a:	a1 f0       	breq	.+40     	; 0x294 <rprintf1RamRom+0xae>
     26c:	88 37       	cpi	r24, 0x78	; 120
     26e:	61 f0       	breq	.+24     	; 0x288 <rprintf1RamRom+0xa2>
     270:	83 36       	cpi	r24, 0x63	; 99
     272:	31 f4       	brne	.+12     	; 0x280 <rprintf1RamRom+0x9a>
		{
			case 'c': format_flag = va_arg(ap,int);
     274:	f3 01       	movw	r30, r6
     276:	80 81       	ld	r24, Z
     278:	93 01       	movw	r18, r6
     27a:	2e 5f       	subi	r18, 0xFE	; 254
     27c:	3f 4f       	sbci	r19, 0xFF	; 255
     27e:	39 01       	movw	r6, r18
			default:  rprintfChar(format_flag); continue;
     280:	0e 94 da 00 	call	0x1b4	; 0x1b4 <rprintfChar>
     284:	63 01       	movw	r12, r6
     286:	da cf       	rjmp	.-76     	; 0x23c <rprintf1RamRom+0x56>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
     288:	20 e1       	ldi	r18, 0x10	; 16
     28a:	82 2e       	mov	r8, r18
     28c:	91 2c       	mov	r9, r1
     28e:	00 e0       	ldi	r16, 0x00	; 0
     290:	10 e1       	ldi	r17, 0x10	; 16
     292:	05 c0       	rjmp	.+10     	; 0x29e <rprintf1RamRom+0xb8>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
     294:	9a e0       	ldi	r25, 0x0A	; 10
     296:	89 2e       	mov	r8, r25
     298:	91 2c       	mov	r9, r1
     29a:	00 e1       	ldi	r16, 0x10	; 16
     29c:	17 e2       	ldi	r17, 0x27	; 39
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
     29e:	63 01       	movw	r12, r6
     2a0:	32 e0       	ldi	r19, 0x02	; 2
     2a2:	c3 0e       	add	r12, r19
     2a4:	d1 1c       	adc	r13, r1
     2a6:	f3 01       	movw	r30, r6
     2a8:	60 80       	ld	r6, Z
     2aa:	71 80       	ldd	r7, Z+1	; 0x01
			if (format_flag == 'd')
     2ac:	84 36       	cpi	r24, 0x64	; 100
     2ae:	a1 f4       	brne	.+40     	; 0x2d8 <rprintf1RamRom+0xf2>
			{
				if (((int)u_val) < 0)
     2b0:	77 fe       	sbrs	r7, 7
     2b2:	0f c0       	rjmp	.+30     	; 0x2d2 <rprintf1RamRom+0xec>
				{
					u_val = - u_val;
     2b4:	71 94       	neg	r7
     2b6:	61 94       	neg	r6
     2b8:	71 08       	sbc	r7, r1
					rprintfChar('-');
     2ba:	8d e2       	ldi	r24, 0x2D	; 45
     2bc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <rprintfChar>
     2c0:	08 c0       	rjmp	.+16     	; 0x2d2 <rprintf1RamRom+0xec>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     2c2:	c8 01       	movw	r24, r16
     2c4:	b5 01       	movw	r22, r10
     2c6:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__udivmodhi4>
     2ca:	8b 01       	movw	r16, r22
     2cc:	62 30       	cpi	r22, 0x02	; 2
     2ce:	71 05       	cpc	r23, r1
     2d0:	18 f0       	brcs	.+6      	; 0x2d8 <rprintf1RamRom+0xf2>
     2d2:	60 16       	cp	r6, r16
     2d4:	71 06       	cpc	r7, r17
     2d6:	a8 f3       	brcs	.-22     	; 0x2c2 <rprintf1RamRom+0xdc>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
     2d8:	c3 01       	movw	r24, r6
     2da:	b8 01       	movw	r22, r16
     2dc:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__udivmodhi4>
     2e0:	58 2e       	mov	r5, r24
     2e2:	86 2f       	mov	r24, r22
     2e4:	99 83       	std	Y+1, r25	; 0x01
     2e6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <rprintfu04>
				u_val %= div_val;
     2ea:	65 2c       	mov	r6, r5
     2ec:	99 81       	ldd	r25, Y+1	; 0x01
     2ee:	79 2e       	mov	r7, r25
				div_val /= base;
     2f0:	c8 01       	movw	r24, r16
     2f2:	b4 01       	movw	r22, r8
     2f4:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__udivmodhi4>
     2f8:	8b 01       	movw	r16, r22
			} while (div_val);
     2fa:	67 2b       	or	r22, r23
     2fc:	69 f7       	brne	.-38     	; 0x2d8 <rprintf1RamRom+0xf2>
     2fe:	9e cf       	rjmp	.-196    	; 0x23c <rprintf1RamRom+0x56>
		}
	}
	va_end(ap);
}
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0f 90       	pop	r0
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	ff 90       	pop	r15
     310:	ef 90       	pop	r14
     312:	df 90       	pop	r13
     314:	cf 90       	pop	r12
     316:	bf 90       	pop	r11
     318:	af 90       	pop	r10
     31a:	9f 90       	pop	r9
     31c:	8f 90       	pop	r8
     31e:	7f 90       	pop	r7
     320:	6f 90       	pop	r6
     322:	5f 90       	pop	r5
     324:	08 95       	ret

00000326 <timer0SetPrescaler>:
#endif

void timer0SetPrescaler(u08 prescale)
{
	// set prescaler on timer 0
	outb(TCCR0, (inb(TCCR0) & ~TIMER_PRESCALE_MASK) | prescale);
     326:	93 b7       	in	r25, 0x33	; 51
     328:	98 7f       	andi	r25, 0xF8	; 248
     32a:	89 2b       	or	r24, r25
     32c:	83 bf       	out	0x33, r24	; 51
     32e:	08 95       	ret

00000330 <timer0Init>:
}

void timer0Init()
{
	// initialize timer 0
	timer0SetPrescaler( TIMER0PRESCALE );	// set prescaler
     330:	85 e0       	ldi	r24, 0x05	; 5
     332:	0e 94 93 01 	call	0x326	; 0x326 <timer0SetPrescaler>
	outb(TCNT0, 0);							// reset TCNT0
     336:	12 be       	out	0x32, r1	; 50
	sbi(TIMSK, TOIE0);						// enable TCNT0 overflow interrupt
     338:	89 b7       	in	r24, 0x39	; 57
     33a:	81 60       	ori	r24, 0x01	; 1
     33c:	89 bf       	out	0x39, r24	; 57
	sbi(TIMSK, OCIE0);						// enable OCR0 Output Compare Match Interrupt
     33e:	89 b7       	in	r24, 0x39	; 57
     340:	82 60       	ori	r24, 0x02	; 2
     342:	89 bf       	out	0x39, r24	; 57
}

void timer0ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer0Reg0 = 0;	// initialize time registers
     344:	10 92 fb 00 	sts	0x00FB, r1
     348:	10 92 fc 00 	sts	0x00FC, r1
     34c:	10 92 fd 00 	sts	0x00FD, r1
     350:	10 92 fe 00 	sts	0x00FE, r1
     354:	08 95       	ret

00000356 <timer1SetPrescaler>:
}

void timer1SetPrescaler(u08 prescale)
{
	// set prescaler on timer 1
	outb(TCCR1B, (inb(TCCR1B) & ~TIMER_PRESCALE_MASK) | prescale);
     356:	9e b5       	in	r25, 0x2e	; 46
     358:	98 7f       	andi	r25, 0xF8	; 248
     35a:	89 2b       	or	r24, r25
     35c:	8e bd       	out	0x2e, r24	; 46
     35e:	08 95       	ret

00000360 <timer1Init>:
}

void timer1Init(void)
{
	// initialize timer 1
	timer1SetPrescaler( TIMER1PRESCALE );	// set prescaler
     360:	82 e0       	ldi	r24, 0x02	; 2
     362:	0e 94 ab 01 	call	0x356	; 0x356 <timer1SetPrescaler>
	outb(TCNT1H, 0);						// reset TCNT1
     366:	1d bc       	out	0x2d, r1	; 45
	outb(TCNT1L, 0);
     368:	1c bc       	out	0x2c, r1	; 44
	sbi(TIMSK, TOIE1);						// enable TCNT1 overflow
     36a:	89 b7       	in	r24, 0x39	; 57
     36c:	84 60       	ori	r24, 0x04	; 4
     36e:	89 bf       	out	0x39, r24	; 57
     370:	08 95       	ret

00000372 <timer2SetPrescaler>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2SetPrescaler(u08 prescale)
{
	// set prescaler on timer 2
	outb(TCCR2, (inb(TCCR2) & ~TIMER_PRESCALE_MASK) | prescale);
     372:	95 b5       	in	r25, 0x25	; 37
     374:	98 7f       	andi	r25, 0xF8	; 248
     376:	89 2b       	or	r24, r25
     378:	85 bd       	out	0x25, r24	; 37
     37a:	08 95       	ret

0000037c <timer2Init>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2Init(void)
{
	// initialize timer 2
	timer2SetPrescaler( TIMER2PRESCALE );	// set prescaler
     37c:	86 e0       	ldi	r24, 0x06	; 6
     37e:	0e 94 b9 01 	call	0x372	; 0x372 <timer2SetPrescaler>
	outb(TCNT2, 0);							// reset TCNT2
     382:	14 bc       	out	0x24, r1	; 36
	sbi(TIMSK, TOIE2);						// enable TCNT2 overflow
     384:	89 b7       	in	r24, 0x39	; 57
     386:	80 64       	ori	r24, 0x40	; 64
     388:	89 bf       	out	0x39, r24	; 57
	sbi(TIMSK, OCIE2);						// enable OCR2 Output Compare Match Interrupt
     38a:	89 b7       	in	r24, 0x39	; 57
     38c:	80 68       	ori	r24, 0x80	; 128
     38e:	89 bf       	out	0x39, r24	; 57

#ifdef TCNT2	// support timer2 only if it exists
void timer2ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer2Reg0 = 0;	// initialize time registers
     390:	10 92 03 01 	sts	0x0103, r1
     394:	10 92 04 01 	sts	0x0104, r1
     398:	10 92 05 01 	sts	0x0105, r1
     39c:	10 92 06 01 	sts	0x0106, r1
     3a0:	08 95       	ret

000003a2 <timerAttach>:
#endif

void timerAttach(u08 interruptNum, void (*userFunc)(void) )
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     3a2:	88 30       	cpi	r24, 0x08	; 8
     3a4:	40 f4       	brcc	.+16     	; 0x3b6 <timerAttach+0x14>
	{
		// set the interrupt function to run
		// the supplied user's function
		TimerIntFunc[interruptNum] = userFunc;
     3a6:	e8 2f       	mov	r30, r24
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	ee 0f       	add	r30, r30
     3ac:	ff 1f       	adc	r31, r31
     3ae:	ee 59       	subi	r30, 0x9E	; 158
     3b0:	ff 4f       	sbci	r31, 0xFF	; 255
     3b2:	71 83       	std	Z+1, r23	; 0x01
     3b4:	60 83       	st	Z, r22
     3b6:	08 95       	ret

000003b8 <timerDetach>:
}

void timerDetach(u08 interruptNum)
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     3b8:	88 30       	cpi	r24, 0x08	; 8
     3ba:	40 f4       	brcc	.+16     	; 0x3cc <timerDetach+0x14>
	{
		// set the interrupt function to run nothing
		TimerIntFunc[interruptNum] = 0;
     3bc:	e8 2f       	mov	r30, r24
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	ee 0f       	add	r30, r30
     3c2:	ff 1f       	adc	r31, r31
     3c4:	ee 59       	subi	r30, 0x9E	; 158
     3c6:	ff 4f       	sbci	r31, 0xFF	; 255
     3c8:	11 82       	std	Z+1, r1	; 0x01
     3ca:	10 82       	st	Z, r1
     3cc:	08 95       	ret

000003ce <timerInit>:
                  :"r"(time_ms), "r"((unsigned short) (delay_count))
	);
}
*/
void timerInit(void)
{
     3ce:	cf 93       	push	r28
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
     3d0:	c0 e0       	ldi	r28, 0x00	; 0
		timerDetach(intNum);
     3d2:	8c 2f       	mov	r24, r28
     3d4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <timerDetach>
*/
void timerInit(void)
{
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
     3d8:	cf 5f       	subi	r28, 0xFF	; 255
     3da:	c8 30       	cpi	r28, 0x08	; 8
     3dc:	d1 f7       	brne	.-12     	; 0x3d2 <timerInit+0x4>
		timerDetach(intNum);

	// initialize all timers
	timer0Init();
     3de:	0e 94 98 01 	call	0x330	; 0x330 <timer0Init>
	timer1Init();
     3e2:	0e 94 b0 01 	call	0x360	; 0x360 <timer1Init>
	#ifdef TCNT2	// support timer2 only if it exists
	timer2Init();
     3e6:	0e 94 be 01 	call	0x37c	; 0x37c <timer2Init>
	#endif
	// enable interrupts
	sei();
     3ea:	78 94       	sei
}
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <timer1PWMInit>:
	// configures timer1 for use with PWM output
	// on OC1A and OC1B pins
	// phase correct PWM mode, FREQpwm=F_CPU/(2*N*TOP)

	// enable timer1 as 8,9,10bit PWM
	if(bitRes == 9)
     3f0:	89 30       	cpi	r24, 0x09	; 9
     3f2:	31 f4       	brne	.+12     	; 0x400 <timer1PWMInit+0x10>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     3f4:	8f b5       	in	r24, 0x2f	; 47
     3f6:	82 60       	ori	r24, 0x02	; 2
     3f8:	8f bd       	out	0x2f, r24	; 47
		cbi(TCCR1A,PWM10);
     3fa:	8f b5       	in	r24, 0x2f	; 47
     3fc:	8e 7f       	andi	r24, 0xFE	; 254
     3fe:	0a c0       	rjmp	.+20     	; 0x414 <timer1PWMInit+0x24>
	}
	else if( bitRes == 10 )
     400:	8a 30       	cpi	r24, 0x0A	; 10
     402:	19 f4       	brne	.+6      	; 0x40a <timer1PWMInit+0x1a>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     404:	8f b5       	in	r24, 0x2f	; 47
     406:	82 60       	ori	r24, 0x02	; 2
     408:	02 c0       	rjmp	.+4      	; 0x40e <timer1PWMInit+0x1e>
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     40a:	8f b5       	in	r24, 0x2f	; 47
     40c:	8d 7f       	andi	r24, 0xFD	; 253
     40e:	8f bd       	out	0x2f, r24	; 47
		sbi(TCCR1A,PWM10);
     410:	8f b5       	in	r24, 0x2f	; 47
     412:	81 60       	ori	r24, 0x01	; 1
     414:	8f bd       	out	0x2f, r24	; 47
	}

	// clear output compare value A
	outb(OCR1AH, 0);
     416:	1b bc       	out	0x2b, r1	; 43
	outb(OCR1AL, 0);
     418:	1a bc       	out	0x2a, r1	; 42
	// clear output compare value B
	outb(OCR1BH, 0);
     41a:	19 bc       	out	0x29, r1	; 41
	outb(OCR1BL, 0);
     41c:	18 bc       	out	0x28, r1	; 40
     41e:	08 95       	ret

00000420 <timer1PWMAOn>:

void timer1PWMAOn(void)
{
	// turn on channel A (OC1A) PWM output
	// set OC1A as non-inverted PWM
	sbi(TCCR1A,COM1A1);
     420:	8f b5       	in	r24, 0x2f	; 47
     422:	80 68       	ori	r24, 0x80	; 128
     424:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1A0);
     426:	8f b5       	in	r24, 0x2f	; 47
     428:	8f 7b       	andi	r24, 0xBF	; 191
     42a:	8f bd       	out	0x2f, r24	; 47
     42c:	08 95       	ret

0000042e <timer1PWMBOn>:

void timer1PWMBOn(void)
{
	// turn on channel B (OC1B) PWM output
	// set OC1B as non-inverted PWM
	sbi(TCCR1A,COM1B1);
     42e:	8f b5       	in	r24, 0x2f	; 47
     430:	80 62       	ori	r24, 0x20	; 32
     432:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1B0);
     434:	8f b5       	in	r24, 0x2f	; 47
     436:	8f 7e       	andi	r24, 0xEF	; 239
     438:	8f bd       	out	0x2f, r24	; 47
     43a:	08 95       	ret

0000043c <timer1PWMASet>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1AH);		// set the high 8bits of OCR1A
	//outp( (pwmDuty&0x00FF), OCR1AL);	// set the low 8bits of OCR1A
	OCR1A = pwmDuty;
     43c:	9b bd       	out	0x2b, r25	; 43
     43e:	8a bd       	out	0x2a, r24	; 42
     440:	08 95       	ret

00000442 <timer1PWMBSet>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
     442:	99 bd       	out	0x29, r25	; 41
     444:	88 bd       	out	0x28, r24	; 40
     446:	08 95       	ret

00000448 <__vector_9>:
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
     448:	1f 92       	push	r1
     44a:	0f 92       	push	r0
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	0f 92       	push	r0
     450:	11 24       	eor	r1, r1
     452:	2f 93       	push	r18
     454:	3f 93       	push	r19
     456:	4f 93       	push	r20
     458:	5f 93       	push	r21
     45a:	6f 93       	push	r22
     45c:	7f 93       	push	r23
     45e:	8f 93       	push	r24
     460:	9f 93       	push	r25
     462:	af 93       	push	r26
     464:	bf 93       	push	r27
     466:	ef 93       	push	r30
     468:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
     46a:	80 91 fb 00 	lds	r24, 0x00FB
     46e:	90 91 fc 00 	lds	r25, 0x00FC
     472:	a0 91 fd 00 	lds	r26, 0x00FD
     476:	b0 91 fe 00 	lds	r27, 0x00FE
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	a1 1d       	adc	r26, r1
     47e:	b1 1d       	adc	r27, r1
     480:	80 93 fb 00 	sts	0x00FB, r24
     484:	90 93 fc 00 	sts	0x00FC, r25
     488:	a0 93 fd 00 	sts	0x00FD, r26
     48c:	b0 93 fe 00 	sts	0x00FE, r27

	// increment pause counter
	TimerPauseReg++;
     490:	80 91 ff 00 	lds	r24, 0x00FF
     494:	90 91 00 01 	lds	r25, 0x0100
     498:	a0 91 01 01 	lds	r26, 0x0101
     49c:	b0 91 02 01 	lds	r27, 0x0102
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	a1 1d       	adc	r26, r1
     4a4:	b1 1d       	adc	r27, r1
     4a6:	80 93 ff 00 	sts	0x00FF, r24
     4aa:	90 93 00 01 	sts	0x0100, r25
     4ae:	a0 93 01 01 	sts	0x0101, r26
     4b2:	b0 93 02 01 	sts	0x0102, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
     4b6:	80 91 62 00 	lds	r24, 0x0062
     4ba:	90 91 63 00 	lds	r25, 0x0063
     4be:	89 2b       	or	r24, r25
     4c0:	29 f0       	breq	.+10     	; 0x4cc <__stack+0x6d>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
     4c2:	e0 91 62 00 	lds	r30, 0x0062
     4c6:	f0 91 63 00 	lds	r31, 0x0063
     4ca:	09 95       	icall
}
     4cc:	ff 91       	pop	r31
     4ce:	ef 91       	pop	r30
     4d0:	bf 91       	pop	r27
     4d2:	af 91       	pop	r26
     4d4:	9f 91       	pop	r25
     4d6:	8f 91       	pop	r24
     4d8:	7f 91       	pop	r23
     4da:	6f 91       	pop	r22
     4dc:	5f 91       	pop	r21
     4de:	4f 91       	pop	r20
     4e0:	3f 91       	pop	r19
     4e2:	2f 91       	pop	r18
     4e4:	0f 90       	pop	r0
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	0f 90       	pop	r0
     4ea:	1f 90       	pop	r1
     4ec:	18 95       	reti

000004ee <__vector_8>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
     4ee:	1f 92       	push	r1
     4f0:	0f 92       	push	r0
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	0f 92       	push	r0
     4f6:	11 24       	eor	r1, r1
     4f8:	2f 93       	push	r18
     4fa:	3f 93       	push	r19
     4fc:	4f 93       	push	r20
     4fe:	5f 93       	push	r21
     500:	6f 93       	push	r22
     502:	7f 93       	push	r23
     504:	8f 93       	push	r24
     506:	9f 93       	push	r25
     508:	af 93       	push	r26
     50a:	bf 93       	push	r27
     50c:	ef 93       	push	r30
     50e:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
     510:	80 91 64 00 	lds	r24, 0x0064
     514:	90 91 65 00 	lds	r25, 0x0065
     518:	89 2b       	or	r24, r25
     51a:	29 f0       	breq	.+10     	; 0x526 <__vector_8+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
     51c:	e0 91 64 00 	lds	r30, 0x0064
     520:	f0 91 65 00 	lds	r31, 0x0065
     524:	09 95       	icall
}
     526:	ff 91       	pop	r31
     528:	ef 91       	pop	r30
     52a:	bf 91       	pop	r27
     52c:	af 91       	pop	r26
     52e:	9f 91       	pop	r25
     530:	8f 91       	pop	r24
     532:	7f 91       	pop	r23
     534:	6f 91       	pop	r22
     536:	5f 91       	pop	r21
     538:	4f 91       	pop	r20
     53a:	3f 91       	pop	r19
     53c:	2f 91       	pop	r18
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <__vector_4>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
     548:	1f 92       	push	r1
     54a:	0f 92       	push	r0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	0f 92       	push	r0
     550:	11 24       	eor	r1, r1
     552:	2f 93       	push	r18
     554:	3f 93       	push	r19
     556:	4f 93       	push	r20
     558:	5f 93       	push	r21
     55a:	6f 93       	push	r22
     55c:	7f 93       	push	r23
     55e:	8f 93       	push	r24
     560:	9f 93       	push	r25
     562:	af 93       	push	r26
     564:	bf 93       	push	r27
     566:	ef 93       	push	r30
     568:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
     56a:	80 91 03 01 	lds	r24, 0x0103
     56e:	90 91 04 01 	lds	r25, 0x0104
     572:	a0 91 05 01 	lds	r26, 0x0105
     576:	b0 91 06 01 	lds	r27, 0x0106
     57a:	01 96       	adiw	r24, 0x01	; 1
     57c:	a1 1d       	adc	r26, r1
     57e:	b1 1d       	adc	r27, r1
     580:	80 93 03 01 	sts	0x0103, r24
     584:	90 93 04 01 	sts	0x0104, r25
     588:	a0 93 05 01 	sts	0x0105, r26
     58c:	b0 93 06 01 	sts	0x0106, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
     590:	80 91 6c 00 	lds	r24, 0x006C
     594:	90 91 6d 00 	lds	r25, 0x006D
     598:	89 2b       	or	r24, r25
     59a:	29 f0       	breq	.+10     	; 0x5a6 <__vector_4+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
     59c:	e0 91 6c 00 	lds	r30, 0x006C
     5a0:	f0 91 6d 00 	lds	r31, 0x006D
     5a4:	09 95       	icall
}
     5a6:	ff 91       	pop	r31
     5a8:	ef 91       	pop	r30
     5aa:	bf 91       	pop	r27
     5ac:	af 91       	pop	r26
     5ae:	9f 91       	pop	r25
     5b0:	8f 91       	pop	r24
     5b2:	7f 91       	pop	r23
     5b4:	6f 91       	pop	r22
     5b6:	5f 91       	pop	r21
     5b8:	4f 91       	pop	r20
     5ba:	3f 91       	pop	r19
     5bc:	2f 91       	pop	r18
     5be:	0f 90       	pop	r0
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	0f 90       	pop	r0
     5c4:	1f 90       	pop	r1
     5c6:	18 95       	reti

000005c8 <__vector_19>:

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_COMP_vect)
{
     5c8:	1f 92       	push	r1
     5ca:	0f 92       	push	r0
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	0f 92       	push	r0
     5d0:	11 24       	eor	r1, r1
     5d2:	2f 93       	push	r18
     5d4:	3f 93       	push	r19
     5d6:	4f 93       	push	r20
     5d8:	5f 93       	push	r21
     5da:	6f 93       	push	r22
     5dc:	7f 93       	push	r23
     5de:	8f 93       	push	r24
     5e0:	9f 93       	push	r25
     5e2:	af 93       	push	r26
     5e4:	bf 93       	push	r27
     5e6:	ef 93       	push	r30
     5e8:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
     5ea:	80 91 70 00 	lds	r24, 0x0070
     5ee:	90 91 71 00 	lds	r25, 0x0071
     5f2:	89 2b       	or	r24, r25
     5f4:	29 f0       	breq	.+10     	; 0x600 <__vector_19+0x38>
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
     5f6:	e0 91 70 00 	lds	r30, 0x0070
     5fa:	f0 91 71 00 	lds	r31, 0x0071
     5fe:	09 95       	icall
}
     600:	ff 91       	pop	r31
     602:	ef 91       	pop	r30
     604:	bf 91       	pop	r27
     606:	af 91       	pop	r26
     608:	9f 91       	pop	r25
     60a:	8f 91       	pop	r24
     60c:	7f 91       	pop	r23
     60e:	6f 91       	pop	r22
     610:	5f 91       	pop	r21
     612:	4f 91       	pop	r20
     614:	3f 91       	pop	r19
     616:	2f 91       	pop	r18
     618:	0f 90       	pop	r0
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	0f 90       	pop	r0
     61e:	1f 90       	pop	r1
     620:	18 95       	reti

00000622 <__vector_6>:
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
     622:	1f 92       	push	r1
     624:	0f 92       	push	r0
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	0f 92       	push	r0
     62a:	11 24       	eor	r1, r1
     62c:	2f 93       	push	r18
     62e:	3f 93       	push	r19
     630:	4f 93       	push	r20
     632:	5f 93       	push	r21
     634:	6f 93       	push	r22
     636:	7f 93       	push	r23
     638:	8f 93       	push	r24
     63a:	9f 93       	push	r25
     63c:	af 93       	push	r26
     63e:	bf 93       	push	r27
     640:	ef 93       	push	r30
     642:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
     644:	80 91 66 00 	lds	r24, 0x0066
     648:	90 91 67 00 	lds	r25, 0x0067
     64c:	89 2b       	or	r24, r25
     64e:	29 f0       	breq	.+10     	; 0x65a <__vector_6+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
     650:	e0 91 66 00 	lds	r30, 0x0066
     654:	f0 91 67 00 	lds	r31, 0x0067
     658:	09 95       	icall
}
     65a:	ff 91       	pop	r31
     65c:	ef 91       	pop	r30
     65e:	bf 91       	pop	r27
     660:	af 91       	pop	r26
     662:	9f 91       	pop	r25
     664:	8f 91       	pop	r24
     666:	7f 91       	pop	r23
     668:	6f 91       	pop	r22
     66a:	5f 91       	pop	r21
     66c:	4f 91       	pop	r20
     66e:	3f 91       	pop	r19
     670:	2f 91       	pop	r18
     672:	0f 90       	pop	r0
     674:	0f be       	out	0x3f, r0	; 63
     676:	0f 90       	pop	r0
     678:	1f 90       	pop	r1
     67a:	18 95       	reti

0000067c <__vector_7>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
     67c:	1f 92       	push	r1
     67e:	0f 92       	push	r0
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	0f 92       	push	r0
     684:	11 24       	eor	r1, r1
     686:	2f 93       	push	r18
     688:	3f 93       	push	r19
     68a:	4f 93       	push	r20
     68c:	5f 93       	push	r21
     68e:	6f 93       	push	r22
     690:	7f 93       	push	r23
     692:	8f 93       	push	r24
     694:	9f 93       	push	r25
     696:	af 93       	push	r26
     698:	bf 93       	push	r27
     69a:	ef 93       	push	r30
     69c:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
     69e:	80 91 68 00 	lds	r24, 0x0068
     6a2:	90 91 69 00 	lds	r25, 0x0069
     6a6:	89 2b       	or	r24, r25
     6a8:	29 f0       	breq	.+10     	; 0x6b4 <__vector_7+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
     6aa:	e0 91 68 00 	lds	r30, 0x0068
     6ae:	f0 91 69 00 	lds	r31, 0x0069
     6b2:	09 95       	icall
}
     6b4:	ff 91       	pop	r31
     6b6:	ef 91       	pop	r30
     6b8:	bf 91       	pop	r27
     6ba:	af 91       	pop	r26
     6bc:	9f 91       	pop	r25
     6be:	8f 91       	pop	r24
     6c0:	7f 91       	pop	r23
     6c2:	6f 91       	pop	r22
     6c4:	5f 91       	pop	r21
     6c6:	4f 91       	pop	r20
     6c8:	3f 91       	pop	r19
     6ca:	2f 91       	pop	r18
     6cc:	0f 90       	pop	r0
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	0f 90       	pop	r0
     6d2:	1f 90       	pop	r1
     6d4:	18 95       	reti

000006d6 <__vector_5>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
     6d6:	1f 92       	push	r1
     6d8:	0f 92       	push	r0
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	0f 92       	push	r0
     6de:	11 24       	eor	r1, r1
     6e0:	2f 93       	push	r18
     6e2:	3f 93       	push	r19
     6e4:	4f 93       	push	r20
     6e6:	5f 93       	push	r21
     6e8:	6f 93       	push	r22
     6ea:	7f 93       	push	r23
     6ec:	8f 93       	push	r24
     6ee:	9f 93       	push	r25
     6f0:	af 93       	push	r26
     6f2:	bf 93       	push	r27
     6f4:	ef 93       	push	r30
     6f6:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
     6f8:	80 91 6a 00 	lds	r24, 0x006A
     6fc:	90 91 6b 00 	lds	r25, 0x006B
     700:	89 2b       	or	r24, r25
     702:	29 f0       	breq	.+10     	; 0x70e <__vector_5+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
     704:	e0 91 6a 00 	lds	r30, 0x006A
     708:	f0 91 6b 00 	lds	r31, 0x006B
     70c:	09 95       	icall
}
     70e:	ff 91       	pop	r31
     710:	ef 91       	pop	r30
     712:	bf 91       	pop	r27
     714:	af 91       	pop	r26
     716:	9f 91       	pop	r25
     718:	8f 91       	pop	r24
     71a:	7f 91       	pop	r23
     71c:	6f 91       	pop	r22
     71e:	5f 91       	pop	r21
     720:	4f 91       	pop	r20
     722:	3f 91       	pop	r19
     724:	2f 91       	pop	r18
     726:	0f 90       	pop	r0
     728:	0f be       	out	0x3f, r0	; 63
     72a:	0f 90       	pop	r0
     72c:	1f 90       	pop	r1
     72e:	18 95       	reti

00000730 <__vector_3>:

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMP_vect)
{
     730:	1f 92       	push	r1
     732:	0f 92       	push	r0
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	0f 92       	push	r0
     738:	11 24       	eor	r1, r1
     73a:	2f 93       	push	r18
     73c:	3f 93       	push	r19
     73e:	4f 93       	push	r20
     740:	5f 93       	push	r21
     742:	6f 93       	push	r22
     744:	7f 93       	push	r23
     746:	8f 93       	push	r24
     748:	9f 93       	push	r25
     74a:	af 93       	push	r26
     74c:	bf 93       	push	r27
     74e:	ef 93       	push	r30
     750:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     752:	80 91 6e 00 	lds	r24, 0x006E
     756:	90 91 6f 00 	lds	r25, 0x006F
     75a:	89 2b       	or	r24, r25
     75c:	29 f0       	breq	.+10     	; 0x768 <__vector_3+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     75e:	e0 91 6e 00 	lds	r30, 0x006E
     762:	f0 91 6f 00 	lds	r31, 0x006F
     766:	09 95       	icall
}
     768:	ff 91       	pop	r31
     76a:	ef 91       	pop	r30
     76c:	bf 91       	pop	r27
     76e:	af 91       	pop	r26
     770:	9f 91       	pop	r25
     772:	8f 91       	pop	r24
     774:	7f 91       	pop	r23
     776:	6f 91       	pop	r22
     778:	5f 91       	pop	r21
     77a:	4f 91       	pop	r20
     77c:	3f 91       	pop	r19
     77e:	2f 91       	pop	r18
     780:	0f 90       	pop	r0
     782:	0f be       	out	0x3f, r0	; 63
     784:	0f 90       	pop	r0
     786:	1f 90       	pop	r1
     788:	18 95       	reti

0000078a <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (unsigned char *)uartRxData, UART_RX_BUFFER_SIZE);
     78a:	40 e4       	ldi	r20, 0x40	; 64
     78c:	50 e0       	ldi	r21, 0x00	; 0
     78e:	64 eb       	ldi	r22, 0xB4	; 180
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	88 e0       	ldi	r24, 0x08	; 8
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	0e 94 78 00 	call	0xf0	; 0xf0 <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (unsigned char *)uartTxData, UART_TX_BUFFER_SIZE);
     79a:	40 e4       	ldi	r20, 0x40	; 64
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	64 e7       	ldi	r22, 0x74	; 116
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	81 e1       	ldi	r24, 0x11	; 17
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	0c 94 78 00 	jmp	0xf0	; 0xf0 <bufferInit>

000007aa <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
     7aa:	0e 94 c5 03 	call	0x78a	; 0x78a <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
     7ae:	10 92 73 00 	sts	0x0073, r1
     7b2:	10 92 72 00 	sts	0x0072, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     7b6:	88 ed       	ldi	r24, 0xD8	; 216
     7b8:	8a b9       	out	0x0a, r24	; 10
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
     7ba:	8f e5       	ldi	r24, 0x5F	; 95
     7bc:	89 b9       	out	0x09, r24	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
     7be:	10 bc       	out	0x20, r1	; 32
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
     7c0:	8f ef       	ldi	r24, 0xFF	; 255
     7c2:	80 93 07 01 	sts	0x0107, r24
	uartBufferedTx = FALSE;
     7c6:	10 92 10 01 	sts	0x0110, r1
	// clear overflow count
	uartRxOverflow = 0;
     7ca:	10 92 1a 01 	sts	0x011A, r1
     7ce:	10 92 19 01 	sts	0x0119, r1
	// enable interrupts
	sei();
     7d2:	78 94       	sei
     7d4:	08 95       	ret

000007d6 <uartSetBaudRate>:
	UartRxFunc = rx_func;
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	8b 01       	movw	r16, r22
     7dc:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
     7de:	dc 01       	movw	r26, r24
     7e0:	cb 01       	movw	r24, r22
     7e2:	90 5e       	subi	r25, 0xE0	; 224
     7e4:	a3 4e       	sbci	r26, 0xE3	; 227
     7e6:	bf 4f       	sbci	r27, 0xFF	; 255
     7e8:	bc 01       	movw	r22, r24
     7ea:	cd 01       	movw	r24, r26
     7ec:	43 e0       	ldi	r20, 0x03	; 3
     7ee:	66 0f       	add	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	88 1f       	adc	r24, r24
     7f4:	99 1f       	adc	r25, r25
     7f6:	4a 95       	dec	r20
     7f8:	d1 f7       	brne	.-12     	; 0x7ee <uartSetBaudRate+0x18>
     7fa:	a9 01       	movw	r20, r18
     7fc:	98 01       	movw	r18, r16
     7fe:	e4 e0       	ldi	r30, 0x04	; 4
     800:	22 0f       	add	r18, r18
     802:	33 1f       	adc	r19, r19
     804:	44 1f       	adc	r20, r20
     806:	55 1f       	adc	r21, r21
     808:	ea 95       	dec	r30
     80a:	d1 f7       	brne	.-12     	; 0x800 <uartSetBaudRate+0x2a>
     80c:	0e 94 0d 09 	call	0x121a	; 0x121a <__udivmodsi4>
     810:	21 50       	subi	r18, 0x01	; 1
     812:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
     814:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
     816:	30 bd       	out	0x20, r19	; 32
	#endif
}
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	08 95       	ret

0000081e <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
     81e:	90 91 07 01 	lds	r25, 0x0107
     822:	99 23       	and	r25, r25
     824:	e1 f3       	breq	.-8      	; 0x81e <uartSendByte>
	// send byte
	outb(UDR, txData);
     826:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
     828:	10 92 07 01 	sts	0x0107, r1
     82c:	08 95       	ret

0000082e <__vector_13>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_TRANS)
{
     82e:	1f 92       	push	r1
     830:	0f 92       	push	r0
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	0f 92       	push	r0
     836:	11 24       	eor	r1, r1
     838:	2f 93       	push	r18
     83a:	3f 93       	push	r19
     83c:	4f 93       	push	r20
     83e:	5f 93       	push	r21
     840:	6f 93       	push	r22
     842:	7f 93       	push	r23
     844:	8f 93       	push	r24
     846:	9f 93       	push	r25
     848:	af 93       	push	r26
     84a:	bf 93       	push	r27
     84c:	ef 93       	push	r30
     84e:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
     850:	80 91 10 01 	lds	r24, 0x0110
     854:	88 23       	and	r24, r24
     856:	71 f0       	breq	.+28     	; 0x874 <__vector_13+0x46>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
     858:	80 91 15 01 	lds	r24, 0x0115
     85c:	90 91 16 01 	lds	r25, 0x0116
     860:	89 2b       	or	r24, r25
     862:	31 f0       	breq	.+12     	; 0x870 <__vector_13+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
     864:	81 e1       	ldi	r24, 0x11	; 17
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	0e 94 85 00 	call	0x10a	; 0x10a <bufferGetFromFront>
     86c:	8c b9       	out	0x0c, r24	; 12
     86e:	05 c0       	rjmp	.+10     	; 0x87a <__vector_13+0x4c>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
     870:	10 92 10 01 	sts	0x0110, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
     874:	8f ef       	ldi	r24, 0xFF	; 255
     876:	80 93 07 01 	sts	0x0107, r24
	}
}
     87a:	ff 91       	pop	r31
     87c:	ef 91       	pop	r30
     87e:	bf 91       	pop	r27
     880:	af 91       	pop	r26
     882:	9f 91       	pop	r25
     884:	8f 91       	pop	r24
     886:	7f 91       	pop	r23
     888:	6f 91       	pop	r22
     88a:	5f 91       	pop	r21
     88c:	4f 91       	pop	r20
     88e:	3f 91       	pop	r19
     890:	2f 91       	pop	r18
     892:	0f 90       	pop	r0
     894:	0f be       	out	0x3f, r0	; 63
     896:	0f 90       	pop	r0
     898:	1f 90       	pop	r1
     89a:	18 95       	reti

0000089c <__vector_11>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_RECV)
{
     89c:	1f 92       	push	r1
     89e:	0f 92       	push	r0
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	0f 92       	push	r0
     8a4:	11 24       	eor	r1, r1
     8a6:	2f 93       	push	r18
     8a8:	3f 93       	push	r19
     8aa:	4f 93       	push	r20
     8ac:	5f 93       	push	r21
     8ae:	6f 93       	push	r22
     8b0:	7f 93       	push	r23
     8b2:	8f 93       	push	r24
     8b4:	9f 93       	push	r25
     8b6:	af 93       	push	r26
     8b8:	bf 93       	push	r27
     8ba:	ef 93       	push	r30
     8bc:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
     8be:	8c b1       	in	r24, 0x0c	; 12

	// if there's a user function to handle this receive event
	if(UartRxFunc)
     8c0:	20 91 72 00 	lds	r18, 0x0072
     8c4:	30 91 73 00 	lds	r19, 0x0073
     8c8:	23 2b       	or	r18, r19
     8ca:	31 f0       	breq	.+12     	; 0x8d8 <__vector_11+0x3c>
	{
		// call it and pass the received data
		UartRxFunc(c);
     8cc:	e0 91 72 00 	lds	r30, 0x0072
     8d0:	f0 91 73 00 	lds	r31, 0x0073
     8d4:	09 95       	icall
     8d6:	10 c0       	rjmp	.+32     	; 0x8f8 <__vector_11+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
     8d8:	68 2f       	mov	r22, r24
     8da:	88 e0       	ldi	r24, 0x08	; 8
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	0e 94 a9 00 	call	0x152	; 0x152 <bufferAddToEnd>
     8e2:	81 11       	cpse	r24, r1
     8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <__vector_11+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
     8e6:	80 91 19 01 	lds	r24, 0x0119
     8ea:	90 91 1a 01 	lds	r25, 0x011A
     8ee:	01 96       	adiw	r24, 0x01	; 1
     8f0:	90 93 1a 01 	sts	0x011A, r25
     8f4:	80 93 19 01 	sts	0x0119, r24
		}
	}
}
     8f8:	ff 91       	pop	r31
     8fa:	ef 91       	pop	r30
     8fc:	bf 91       	pop	r27
     8fe:	af 91       	pop	r26
     900:	9f 91       	pop	r25
     902:	8f 91       	pop	r24
     904:	7f 91       	pop	r23
     906:	6f 91       	pop	r22
     908:	5f 91       	pop	r21
     90a:	4f 91       	pop	r20
     90c:	3f 91       	pop	r19
     90e:	2f 91       	pop	r18
     910:	0f 90       	pop	r0
     912:	0f be       	out	0x3f, r0	; 63
     914:	0f 90       	pop	r0
     916:	1f 90       	pop	r1
     918:	18 95       	reti

0000091a <AppOutputCompare0>:
* Returns    : none
*********************************************************************************************************
*/
void AppOutputCompare0(void)
{
	OCR0 = TCNT0 + CYCLEN_60HZ;
     91a:	82 b7       	in	r24, 0x32	; 50
     91c:	80 51       	subi	r24, 0x10	; 16
     91e:	8c bf       	out	0x3c, r24	; 60
	appl.fSysPwrZC = 1;
     920:	eb e1       	ldi	r30, 0x1B	; 27
     922:	f1 e0       	ldi	r31, 0x01	; 1
     924:	80 81       	ld	r24, Z
     926:	81 60       	ori	r24, 0x01	; 1
     928:	80 83       	st	Z, r24
     92a:	08 95       	ret

0000092c <AppDisplay>:
* Returns    : true, power on control has finised. false, is processing
*********************************************************************************************************
*/
void AppDisplay(DISP_CODE DispCode, WORK_MODE mode)
{
	switch(DispCode)
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	88 30       	cpi	r24, 0x08	; 8
     930:	91 05       	cpc	r25, r1
     932:	a8 f5       	brcc	.+106    	; 0x99e <AppDisplay+0x72>
     934:	fc 01       	movw	r30, r24
     936:	e6 5d       	subi	r30, 0xD6	; 214
     938:	ff 4f       	sbci	r31, 0xFF	; 255
     93a:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__tablejump2__>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(START_CHAR, SSD_0HZ, SSD_RED);
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	29 c0       	rjmp	.+82     	; 0x99a <AppDisplay+0x6e>
			break;
			
		case CURRENT_VALUE:
			if(mode == PWR_ON)
     948:	61 30       	cpi	r22, 0x01	; 1
     94a:	29 f0       	breq	.+10     	; 0x956 <AppDisplay+0x2a>
			{
				SSDDisplayDec(CURRENT_VALUE, SSD_0HZ, SSD_RED);
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	22 c0       	rjmp	.+68     	; 0x99a <AppDisplay+0x6e>
			}
			else if(mode == NORMAL)
			{
				SSDDisplayDec(MeasureGetResult(), SSD_0HZ, SSD_RED);
     956:	0e 94 8f 07 	call	0xf1e	; 0xf1e <MeasureGetResult>
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	1d c0       	rjmp	.+58     	; 0x99a <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(FULL_WAREHOUSE, SSD_0HZ, SSD_RED);
     960:	40 e0       	ldi	r20, 0x00	; 0
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	82 e0       	ldi	r24, 0x02	; 2
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	18 c0       	rjmp	.+48     	; 0x99a <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(EMPTY_WAREHOUSE, SSD_0HZ, SSD_RED);
     96a:	40 e0       	ldi	r20, 0x00	; 0
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	83 e0       	ldi	r24, 0x03	; 3
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	13 c0       	rjmp	.+38     	; 0x99a <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(ALARM_H_PERCENT, SSD_0HZ, SSD_RED);
     974:	40 e0       	ldi	r20, 0x00	; 0
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	84 e0       	ldi	r24, 0x04	; 4
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e c0       	rjmp	.+28     	; 0x99a <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(ALARM_L_PERCENT, SSD_0HZ, SSD_RED);
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	85 e0       	ldi	r24, 0x05	; 5
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	09 c0       	rjmp	.+18     	; 0x99a <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(RESPONSE_TIME, SSD_0HZ, SSD_RED);
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	86 e0       	ldi	r24, 0x06	; 6
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	04 c0       	rjmp	.+8      	; 0x99a <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(REMOTE_ADDR, SSD_0HZ, SSD_RED);
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	87 e0       	ldi	r24, 0x07	; 7
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <SSDDisplayDec>
     99e:	08 95       	ret

000009a0 <McuInit>:
*/

void McuInit(void)
{
	/* Initial uart */
	uartInit();	
     9a0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <uartInit>
	uartSetBaudRate(9600);
     9a4:	60 e8       	ldi	r22, 0x80	; 128
     9a6:	75 e2       	ldi	r23, 0x25	; 37
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <uartSetBaudRate>
	rprintfInit(uartSendByte);
     9b0:	8f e0       	ldi	r24, 0x0F	; 15
     9b2:	94 e0       	ldi	r25, 0x04	; 4
     9b4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <rprintfInit>

	/* Initial ADC */
	ADCInit();
     9b8:	0e 94 89 08 	call	0x1112	; 0x1112 <ADCInit>
	
	/* Initial T0, T1 and T2 */
	timerInit();
     9bc:	0e 94 e7 01 	call	0x3ce	; 0x3ce <timerInit>
	sbi(DDRD, PD4);		/* set PD4(OC1B) as output */
     9c0:	8c 9a       	sbi	0x11, 4	; 17
	sbi(DDRD, PD5);		/* set PD5(OC1A) as output */
     9c2:	8d 9a       	sbi	0x11, 5	; 17
	timer1PWMInit(8);	/* 8 bit PWM resolution, phase correct PWM mode, FREQpwm=F_CPU/(2*N*TOP) */
     9c4:	88 e0       	ldi	r24, 0x08	; 8
     9c6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <timer1PWMInit>
	timer1PWMAOn();		/* turn on the channel A PWM output of timer1 */
     9ca:	0e 94 10 02 	call	0x420	; 0x420 <timer1PWMAOn>
	timer1PWMBOn();		/* turn on the channel B PWM output of timer1 */
     9ce:	0c 94 17 02 	jmp	0x42e	; 0x42e <timer1PWMBOn>

000009d2 <ApplInit>:
*********************************************************************************************************
*/

void ApplInit(void)
{
	ButtonInit();
     9d2:	0e 94 a5 08 	call	0x114a	; 0x114a <ButtonInit>
	LEDInit();
     9d6:	0e 94 85 06 	call	0xd0a	; 0xd0a <LEDInit>
	SSDInit();
     9da:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <SSDInit>
*/

void ApplDataInit(void)
{
	/* Following for initial power on display steps */
	appl.workMode = PWR_ON;
     9de:	eb e1       	ldi	r30, 0x1B	; 27
     9e0:	f1 e0       	ldi	r31, 0x01	; 1
     9e2:	15 86       	std	Z+13, r1	; 0x0d
	appl.CurEvent = NULL_EVENT;
     9e4:	16 86       	std	Z+14, r1	; 0x0e
	appl.LastEvent = NULL_EVENT;
     9e6:	17 86       	std	Z+15, r1	; 0x0f
	appl.second = 0;
     9e8:	10 8a       	std	Z+16, r1	; 0x10
	appl.ModeTimer = TIME_SWITCH_TOTAL;
     9ea:	80 ee       	ldi	r24, 0xE0	; 224
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	94 8b       	std	Z+20, r25	; 0x14
     9f0:	83 8b       	std	Z+19, r24	; 0x13
	appl.DispCode= START_CHAR;
     9f2:	15 8a       	std	Z+21, r1	; 0x15
	appl.PwrOnSteps = DISP_START;
     9f4:	16 8a       	std	Z+22, r1	; 0x16
{
	ButtonInit();
	LEDInit();
	SSDInit();
	ApplDataInit();
	MeasureInit();
     9f6:	0e 94 0b 07 	call	0xe16	; 0xe16 <MeasureInit>
	
	timerAttach(TIMER0OUTCOMPARE_INT, AppOutputCompare0);
     9fa:	6d e8       	ldi	r22, 0x8D	; 141
     9fc:	74 e0       	ldi	r23, 0x04	; 4
     9fe:	87 e0       	ldi	r24, 0x07	; 7
     a00:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <timerAttach>
	
	rprintf("Main board here!\n" );	
     a04:	86 e8       	ldi	r24, 0x86	; 134
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	9f 93       	push	r25
     a0a:	8f 93       	push	r24
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	8f 93       	push	r24
     a10:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <rprintf1RamRom>
     a14:	0f 90       	pop	r0
     a16:	0f 90       	pop	r0
     a18:	0f 90       	pop	r0
     a1a:	08 95       	ret

00000a1c <AppCycleUpdate>:
*
* Returns    : none
*********************************************************************************************************
*/
void AppCycleUpdate(void)
{	
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	cf 93       	push	r28
	char tempChar;
	static uint16_t cnt;
	cnt++;
     a22:	80 91 f4 00 	lds	r24, 0x00F4
     a26:	90 91 f5 00 	lds	r25, 0x00F5
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	90 93 f5 00 	sts	0x00F5, r25
     a30:	80 93 f4 00 	sts	0x00F4, r24
* Returns    : none
*********************************************************************************************************
*/
void AppUpdateTimers(void)
{
	if(++appl.second > TIMER_1_SEC_60HZ) 
     a34:	80 91 2b 01 	lds	r24, 0x012B
     a38:	8f 5f       	subi	r24, 0xFF	; 255
     a3a:	8d 33       	cpi	r24, 0x3D	; 61
     a3c:	18 f4       	brcc	.+6      	; 0xa44 <AppCycleUpdate+0x28>
     a3e:	80 93 2b 01 	sts	0x012B, r24
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <AppCycleUpdate+0x2c>
	{
		appl.second = 0;
     a44:	10 92 2b 01 	sts	0x012B, r1
#endif
#endif
		
	}
	
	if(appl.ModeTimer != TIMER_TIMEOUT && appl.ModeTimer != TIMER_INT_DISABLED) appl.ModeTimer--;
     a48:	80 91 2e 01 	lds	r24, 0x012E
     a4c:	90 91 2f 01 	lds	r25, 0x012F
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	8e 3f       	cpi	r24, 0xFE	; 254
     a54:	2f ef       	ldi	r18, 0xFF	; 255
     a56:	92 07       	cpc	r25, r18
     a58:	20 f4       	brcc	.+8      	; 0xa62 <AppCycleUpdate+0x46>
     a5a:	90 93 2f 01 	sts	0x012F, r25
     a5e:	80 93 2e 01 	sts	0x012E, r24
	cnt++;
	
	AppUpdateTimers();

	/* work mode convert according to ModeTimer and push button events */
	switch(appl.workMode)
     a62:	c0 91 28 01 	lds	r28, 0x0128
     a66:	c1 30       	cpi	r28, 0x01	; 1
     a68:	09 f4       	brne	.+2      	; 0xa6c <AppCycleUpdate+0x50>
     a6a:	50 c0       	rjmp	.+160    	; 0xb0c <AppCycleUpdate+0xf0>
     a6c:	18 f0       	brcs	.+6      	; 0xa74 <AppCycleUpdate+0x58>
     a6e:	c2 30       	cpi	r28, 0x02	; 2
     a70:	89 f1       	breq	.+98     	; 0xad4 <AppCycleUpdate+0xb8>
     a72:	12 c1       	rjmp	.+548    	; 0xc98 <AppCycleUpdate+0x27c>
	{
		case PWR_ON:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
     a74:	80 91 2e 01 	lds	r24, 0x012E
     a78:	90 91 2f 01 	lds	r25, 0x012F
     a7c:	9c 01       	movw	r18, r24
     a7e:	21 50       	subi	r18, 0x01	; 1
     a80:	31 09       	sbc	r19, r1
     a82:	2e 3f       	cpi	r18, 0xFE	; 254
     a84:	3f 4f       	sbci	r19, 0xFF	; 255
     a86:	88 f5       	brcc	.+98     	; 0xaea <AppCycleUpdate+0xce>
			{
				if(appl.ModeTimer % (TIME_CONTENT_SWITCH - 1) == 0)
     a88:	6b e3       	ldi	r22, 0x3B	; 59
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__udivmodhi4>
     a90:	89 2b       	or	r24, r25
     a92:	41 f4       	brne	.+16     	; 0xaa4 <AppCycleUpdate+0x88>
				{
					AppDisplay(++appl.DispCode,PWR_ON);
     a94:	80 91 30 01 	lds	r24, 0x0130
     a98:	8f 5f       	subi	r24, 0xFF	; 255
     a9a:	80 93 30 01 	sts	0x0130, r24
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	0e 94 96 04 	call	0x92c	; 0x92c <AppDisplay>
				}
				
				if(ButtonJMP1HeldEvent() && (ButtonGetHoldTime() == TIME_B_HELD_RST))	/* Press/Held JMP1 after power on will set to factory default */
     aa4:	0e 94 77 06 	call	0xcee	; 0xcee <ButtonJMP1HeldEvent>
     aa8:	88 23       	and	r24, r24
     aaa:	09 f4       	brne	.+2      	; 0xaae <AppCycleUpdate+0x92>
     aac:	f5 c0       	rjmp	.+490    	; 0xc98 <AppCycleUpdate+0x27c>
     aae:	0e 94 ee 08 	call	0x11dc	; 0x11dc <ButtonGetHoldTime>
     ab2:	cc 97       	sbiw	r24, 0x3c	; 60
     ab4:	09 f0       	breq	.+2      	; 0xab8 <AppCycleUpdate+0x9c>
     ab6:	f0 c0       	rjmp	.+480    	; 0xc98 <AppCycleUpdate+0x27c>
				{
					/* Following for initial power on display steps */
					appl.ModeTimer = TIME_SWITCH_TOTAL;
     ab8:	80 ee       	ldi	r24, 0xE0	; 224
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	90 93 2f 01 	sts	0x012F, r25
     ac0:	80 93 2e 01 	sts	0x012E, r24
					appl.workMode = PWR_ON;
     ac4:	10 92 28 01 	sts	0x0128, r1
					appl.LastEvent = JP1_HELD;
     ac8:	84 e0       	ldi	r24, 0x04	; 4
     aca:	80 93 2a 01 	sts	0x012A, r24
					appl.DispCode= START_CHAR;
     ace:	10 92 30 01 	sts	0x0130, r1
     ad2:	e2 c0       	rjmp	.+452    	; 0xc98 <AppCycleUpdate+0x27c>
				}
			}
			break;
			
		case SETTING:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
     ad4:	80 91 2e 01 	lds	r24, 0x012E
     ad8:	90 91 2f 01 	lds	r25, 0x012F
     adc:	9c 01       	movw	r18, r24
     ade:	21 50       	subi	r18, 0x01	; 1
     ae0:	31 09       	sbc	r19, r1
     ae2:	2e 3f       	cpi	r18, 0xFE	; 254
     ae4:	3f 4f       	sbci	r19, 0xFF	; 255
     ae6:	08 f4       	brcc	.+2      	; 0xaea <AppCycleUpdate+0xce>
     ae8:	57 c0       	rjmp	.+174    	; 0xb98 <AppCycleUpdate+0x17c>
					appl.workMode = PWR_ON;
					appl.LastEvent = JP1_HELD;
					appl.DispCode= START_CHAR;
				}
			}
			else if(appl.ModeTimer == TIMER_TIMEOUT)
     aea:	89 2b       	or	r24, r25
     aec:	09 f0       	breq	.+2      	; 0xaf0 <AppCycleUpdate+0xd4>
     aee:	d4 c0       	rjmp	.+424    	; 0xc98 <AppCycleUpdate+0x27c>
			{
				appl.ModeTimer = TIMER_INT_DISABLED;	/* Disable count */
     af0:	8f ef       	ldi	r24, 0xFF	; 255
     af2:	9f ef       	ldi	r25, 0xFF	; 255
     af4:	90 93 2f 01 	sts	0x012F, r25
     af8:	80 93 2e 01 	sts	0x012E, r24
				appl.workMode = NORMAL;					/* convert to NORMAL */
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	80 93 28 01 	sts	0x0128, r24
				appl.LastEvent = NULL_EVENT;			/* update  LastEvent */
     b02:	10 92 2a 01 	sts	0x012A, r1
				appl.DispCode = CURRENT_VALUE;			/* Initial to display material value in setting mode */
     b06:	80 93 30 01 	sts	0x0130, r24
     b0a:	c6 c0       	rjmp	.+396    	; 0xc98 <AppCycleUpdate+0x27c>
			}
			break;
			
		case NORMAL:			
			if(ButtonGetReleased())
     b0c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <ButtonGetReleased>
     b10:	88 23       	and	r24, r24
     b12:	99 f0       	breq	.+38     	; 0xb3a <AppCycleUpdate+0x11e>
			{
				if(ButtonJMP2ReleasedEvent())
     b14:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <ButtonJMP2ReleasedEvent>
     b18:	88 23       	and	r24, r24
     b1a:	61 f0       	breq	.+24     	; 0xb34 <AppCycleUpdate+0x118>
				{
					appl.ModeTimer = TIME_D_CODE_HELD;	/* Disable count */
     b1c:	84 eb       	ldi	r24, 0xB4	; 180
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	90 93 2f 01 	sts	0x012F, r25
     b24:	80 93 2e 01 	sts	0x012E, r24
					appl.workMode = SETTING; 			/* convert to SETTING */
     b28:	82 e0       	ldi	r24, 0x02	; 2
     b2a:	80 93 28 01 	sts	0x0128, r24
					appl.LastEvent = JP2_PRESS;			/* update  LastEvent */
     b2e:	c0 93 2a 01 	sts	0x012A, r28
     b32:	b2 c0       	rjmp	.+356    	; 0xc98 <AppCycleUpdate+0x27c>
				}
				else if(ButtonJMP1ReleasedEvent())
     b34:	0e 94 73 06 	call	0xce6	; 0xce6 <ButtonJMP1ReleasedEvent>
     b38:	af c0       	rjmp	.+350    	; 0xc98 <AppCycleUpdate+0x27c>
				{
				}
			}
			else if(ButtonGetHeld())
     b3a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <ButtonGetHeld>
     b3e:	88 23       	and	r24, r24
     b40:	39 f0       	breq	.+14     	; 0xb50 <AppCycleUpdate+0x134>
			{
				if(ButtonJMP2HeldEvent())//(ButtonJMP2HeldEvent() && (ButtonGetHoldTime()%(TIMER_1_SEC_60HZ/2) == 0))
     b42:	0e 94 80 06 	call	0xd00	; 0xd00 <ButtonJMP2HeldEvent>
     b46:	81 11       	cpse	r24, r1
     b48:	80 c0       	rjmp	.+256    	; 0xc4a <AppCycleUpdate+0x22e>
				{
					appl.ModeTimer = TIME_D_CODE_HELD;	/* Disable count */
					appl.workMode = SETTING; 			/* convert to SETTING */
					appl.LastEvent = JP2_HELD;			/* update  LastEvent */
				}
				else if(ButtonJMP1HeldEvent())
     b4a:	0e 94 77 06 	call	0xcee	; 0xcee <ButtonJMP1HeldEvent>
     b4e:	a4 c0       	rjmp	.+328    	; 0xc98 <AppCycleUpdate+0x27c>
				}
			}
			else
			{
				/* Display current material, and display color change according to value compare with user setting */
				AppDisplay(appl.DispCode,NORMAL);
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	80 91 30 01 	lds	r24, 0x0130
     b56:	0e 94 96 04 	call	0x92c	; 0x92c <AppDisplay>
				
				if(uartRxBuffer.size - bufferIsNotFull(&uartRxBuffer) != 0)
     b5a:	00 91 0a 01 	lds	r16, 0x010A
     b5e:	10 91 0b 01 	lds	r17, 0x010B
     b62:	88 e0       	ldi	r24, 0x08	; 8
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	0e 94 ca 00 	call	0x194	; 0x194 <bufferIsNotFull>
     b6a:	08 17       	cp	r16, r24
     b6c:	19 07       	cpc	r17, r25
     b6e:	09 f4       	brne	.+2      	; 0xb72 <AppCycleUpdate+0x156>
     b70:	93 c0       	rjmp	.+294    	; 0xc98 <AppCycleUpdate+0x27c>
				{
					tempChar = bufferGetFromFront(&uartRxBuffer);
     b72:	88 e0       	ldi	r24, 0x08	; 8
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	0e 94 85 00 	call	0x10a	; 0x10a <bufferGetFromFront>
					//rprintf("char=%c\n",tempChar);
					rprintf("Type=%c\n",tempChar);
     b7a:	1f 92       	push	r1
     b7c:	8f 93       	push	r24
     b7e:	8d e7       	ldi	r24, 0x7D	; 125
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	9f 93       	push	r25
     b84:	8f 93       	push	r24
     b86:	cf 93       	push	r28
     b88:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <rprintf1RamRom>
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	80 c0       	rjmp	.+256    	; 0xc98 <AppCycleUpdate+0x27c>
			break;
			
		case SETTING:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
			{
				if(ButtonGetReleased())
     b98:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <ButtonGetReleased>
     b9c:	88 23       	and	r24, r24
     b9e:	b9 f1       	breq	.+110    	; 0xc0e <AppCycleUpdate+0x1f2>
				{
					if(ButtonJMP2ReleasedEvent())
     ba0:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <ButtonJMP2ReleasedEvent>
     ba4:	88 23       	and	r24, r24
     ba6:	b9 f0       	breq	.+46     	; 0xbd6 <AppCycleUpdate+0x1ba>
					{
						if(--appl.DispCode < CURRENT_VALUE)
     ba8:	80 91 30 01 	lds	r24, 0x0130
     bac:	81 50       	subi	r24, 0x01	; 1
     bae:	09 f4       	brne	.+2      	; 0xbb2 <AppCycleUpdate+0x196>
						{
							appl.DispCode = REMOTE_ADDR;
     bb0:	87 e0       	ldi	r24, 0x07	; 7
     bb2:	80 93 30 01 	sts	0x0130, r24
						}
						AppDisplay(appl.DispCode,SETTING);
     bb6:	62 e0       	ldi	r22, 0x02	; 2
     bb8:	80 91 30 01 	lds	r24, 0x0130
     bbc:	0e 94 96 04 	call	0x92c	; 0x92c <AppDisplay>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     bc0:	84 eb       	ldi	r24, 0xB4	; 180
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	90 93 2f 01 	sts	0x012F, r25
     bc8:	80 93 2e 01 	sts	0x012E, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	80 93 28 01 	sts	0x0128, r24
						appl.LastEvent = JP2_PRESS; 		/* update  LastEvent */
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	5f c0       	rjmp	.+190    	; 0xc94 <AppCycleUpdate+0x278>
					}
					else if(ButtonJMP1ReleasedEvent())
     bd6:	0e 94 73 06 	call	0xce6	; 0xce6 <ButtonJMP1ReleasedEvent>
     bda:	88 23       	and	r24, r24
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <AppCycleUpdate+0x1c4>
     bde:	5c c0       	rjmp	.+184    	; 0xc98 <AppCycleUpdate+0x27c>
					{
						SSDDisplayDec(--appl.FullWarehouse, SSD_0HZ, SSD_GREEN);
     be0:	80 91 1e 01 	lds	r24, 0x011E
     be4:	90 91 1f 01 	lds	r25, 0x011F
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	90 93 1f 01 	sts	0x011F, r25
     bee:	80 93 1e 01 	sts	0x011E, r24
     bf2:	41 e0       	ldi	r20, 0x01	; 1
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <SSDDisplayDec>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     bfa:	84 eb       	ldi	r24, 0xB4	; 180
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	90 93 2f 01 	sts	0x012F, r25
     c02:	80 93 2e 01 	sts	0x012E, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     c06:	c0 93 28 01 	sts	0x0128, r28
						appl.LastEvent = JP1_PRESS;			/* update  LastEvent */
     c0a:	83 e0       	ldi	r24, 0x03	; 3
     c0c:	43 c0       	rjmp	.+134    	; 0xc94 <AppCycleUpdate+0x278>
					}
				}
				else if(ButtonGetHeld())
     c0e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <ButtonGetHeld>
     c12:	88 23       	and	r24, r24
     c14:	09 f4       	brne	.+2      	; 0xc18 <AppCycleUpdate+0x1fc>
     c16:	40 c0       	rjmp	.+128    	; 0xc98 <AppCycleUpdate+0x27c>
				{
					if(ButtonJMP2HeldEvent() && (ButtonGetHoldTime()%(TIMER_1_SEC_60HZ/6) == 0))	/* fast increase */
     c18:	0e 94 80 06 	call	0xd00	; 0xd00 <ButtonJMP2HeldEvent>
     c1c:	88 23       	and	r24, r24
     c1e:	f9 f0       	breq	.+62     	; 0xc5e <AppCycleUpdate+0x242>
     c20:	0e 94 ee 08 	call	0x11dc	; 0x11dc <ButtonGetHoldTime>
     c24:	6a e0       	ldi	r22, 0x0A	; 10
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__udivmodhi4>
     c2c:	89 2b       	or	r24, r25
     c2e:	b9 f4       	brne	.+46     	; 0xc5e <AppCycleUpdate+0x242>
					{
						if(++appl.DispCode > REMOTE_ADDR)
     c30:	80 91 30 01 	lds	r24, 0x0130
     c34:	8f 5f       	subi	r24, 0xFF	; 255
     c36:	88 30       	cpi	r24, 0x08	; 8
     c38:	08 f0       	brcs	.+2      	; 0xc3c <AppCycleUpdate+0x220>
						{
							appl.DispCode = CURRENT_VALUE;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	80 93 30 01 	sts	0x0130, r24
						}
						AppDisplay(appl.DispCode,SETTING);
     c40:	62 e0       	ldi	r22, 0x02	; 2
     c42:	80 91 30 01 	lds	r24, 0x0130
     c46:	0e 94 96 04 	call	0x92c	; 0x92c <AppDisplay>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     c4a:	84 eb       	ldi	r24, 0xB4	; 180
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	90 93 2f 01 	sts	0x012F, r25
     c52:	80 93 2e 01 	sts	0x012E, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	80 93 28 01 	sts	0x0128, r24
     c5c:	1b c0       	rjmp	.+54     	; 0xc94 <AppCycleUpdate+0x278>
						appl.LastEvent = JP2_HELD;			/* update  LastEvent */
					}
					else if(ButtonJMP1HeldEvent())
     c5e:	0e 94 77 06 	call	0xcee	; 0xcee <ButtonJMP1HeldEvent>
     c62:	88 23       	and	r24, r24
     c64:	c9 f0       	breq	.+50     	; 0xc98 <AppCycleUpdate+0x27c>
					{
						SSDDisplayDec(++appl.FullWarehouse, SSD_0HZ, SSD_AMBER);
     c66:	80 91 1e 01 	lds	r24, 0x011E
     c6a:	90 91 1f 01 	lds	r25, 0x011F
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	90 93 1f 01 	sts	0x011F, r25
     c74:	80 93 1e 01 	sts	0x011E, r24
     c78:	42 e0       	ldi	r20, 0x02	; 2
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <SSDDisplayDec>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     c80:	84 eb       	ldi	r24, 0xB4	; 180
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	90 93 2f 01 	sts	0x012F, r25
     c88:	80 93 2e 01 	sts	0x012E, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     c8c:	82 e0       	ldi	r24, 0x02	; 2
     c8e:	80 93 28 01 	sts	0x0128, r24
						appl.LastEvent = JP1_HELD;			/* update  LastEvent */
     c92:	84 e0       	ldi	r24, 0x04	; 4
     c94:	80 93 2a 01 	sts	0x012A, r24

#if 1		
#if (FOR_DEBUG==1)
	//rprintf("wM=%d\n",appl.workMode);
	//rprintf("mT=%d,0x%x\n",appl.ModeTimer,appl.ModeTimer);
	rprintf("dC=%d\n\n",appl.DispCode);
     c98:	80 91 30 01 	lds	r24, 0x0130
     c9c:	1f 92       	push	r1
     c9e:	8f 93       	push	r24
     ca0:	85 e7       	ldi	r24, 0x75	; 117
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	9f 93       	push	r25
     ca6:	8f 93       	push	r24
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	8f 93       	push	r24
     cac:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <rprintf1RamRom>
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
	//rprintf("lE=%d\n\n",appl.LastEvent);
#endif
#endif
}
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	08 95       	ret

00000cc2 <AppWaitZeroCrossing>:
* Returns    : true/false means failed or pass
*********************************************************************************************************
*/
void AppWaitZeroCrossing(void)
{
	while(appl.fSysPwrZC == 0);
     cc2:	80 91 1b 01 	lds	r24, 0x011B
     cc6:	80 ff       	sbrs	r24, 0
     cc8:	fc cf       	rjmp	.-8      	; 0xcc2 <AppWaitZeroCrossing>
	appl.fSysPwrZC = 0;
     cca:	80 91 1b 01 	lds	r24, 0x011B
     cce:	8e 7f       	andi	r24, 0xFE	; 254
     cd0:	80 93 1b 01 	sts	0x011B, r24
     cd4:	08 95       	ret

00000cd6 <ButtonInitEx>:
void ButtonInitEx(void)
{	
	/* 
	Set PC1-PC0 as input, the tow IO with external pull up 10K resistor.
	*/
	DDRC &= ((1<<DDC1) | (1<<DDC0));
     cd6:	84 b3       	in	r24, 0x14	; 20
     cd8:	83 70       	andi	r24, 0x03	; 3
     cda:	84 bb       	out	0x14, r24	; 20
     cdc:	08 95       	ret

00000cde <ButtonGetIO_StateEx>:
*/
ButtonDataType ButtonGetIO_StateEx(void)
{
	ButtonDataType io_state;
	
	io_state = (~PINC) & ((1<<PINC1) | (1<<PINC0));	/* Get PC1-PC0 IO state */
     cde:	83 b3       	in	r24, 0x13	; 19
     ce0:	80 95       	com	r24
	
	return  io_state;
}
     ce2:	83 70       	andi	r24, 0x03	; 3
     ce4:	08 95       	ret

00000ce6 <ButtonJMP1ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP1) 
     ce6:	80 91 66 01 	lds	r24, 0x0166
	{
		return true;
	}
    
    return false;
}
     cea:	81 70       	andi	r24, 0x01	; 1
     cec:	08 95       	ret

00000cee <ButtonJMP1HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1HeldEvent(void)
{
	if (button.buttonsHeld.JMP1) 
     cee:	80 91 67 01 	lds	r24, 0x0167
	{
		return true;
	}
    
    return false;
}
     cf2:	81 70       	andi	r24, 0x01	; 1
     cf4:	08 95       	ret

00000cf6 <ButtonJMP2ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP2) 
     cf6:	80 91 66 01 	lds	r24, 0x0166
	{
		return true;
	}
    
    return false;
}
     cfa:	86 95       	lsr	r24
     cfc:	81 70       	andi	r24, 0x01	; 1
     cfe:	08 95       	ret

00000d00 <ButtonJMP2HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2HeldEvent(void)
{
	if (button.buttonsHeld.JMP2) 
     d00:	80 91 67 01 	lds	r24, 0x0167
	{
		return true;
	}
    
    return false;
}
     d04:	86 95       	lsr	r24
     d06:	81 70       	andi	r24, 0x01	; 1
     d08:	08 95       	ret

00000d0a <LEDInit>:
	uint8_t i;
	
	/* 
	Set PB2-PB1 as output to drive to LEDs, default turn off all LEDs
	*/
	DDRB &= ~((1<<DDB2) | (1<<DDB1));
     d0a:	87 b3       	in	r24, 0x17	; 23
     d0c:	89 7f       	andi	r24, 0xF9	; 249
     d0e:	87 bb       	out	0x17, r24	; 23
	DDRB |= ((1<<DDB2) | (1<<DDB1));
     d10:	87 b3       	in	r24, 0x17	; 23
     d12:	86 60       	ori	r24, 0x06	; 6
     d14:	87 bb       	out	0x17, r24	; 23
	PORTB |= ((1<<DDB2) | (1<<DDB1));
     d16:	88 b3       	in	r24, 0x18	; 24
     d18:	86 60       	ori	r24, 0x06	; 6
     d1a:	88 bb       	out	0x18, r24	; 24
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
     d1c:	e8 e4       	ldi	r30, 0x48	; 72
     d1e:	f1 e0       	ldi	r31, 0x01	; 1
     d20:	80 81       	ld	r24, Z
     d22:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
     d24:	84 60       	ori	r24, 0x04	; 4
     d26:	88 60       	ori	r24, 0x08	; 8
     d28:	80 83       	st	Z, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
     d2a:	9c e3       	ldi	r25, 0x3C	; 60
     d2c:	91 83       	std	Z+1, r25	; 0x01
	DDRB |= ((1<<DDB2) | (1<<DDB1));
	PORTB |= ((1<<DDB2) | (1<<DDB1));
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
     d2e:	aa e4       	ldi	r26, 0x4A	; 74
     d30:	b1 e0       	ldi	r27, 0x01	; 1
     d32:	8c 91       	ld	r24, X
     d34:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
     d36:	84 60       	ori	r24, 0x04	; 4
     d38:	88 60       	ori	r24, 0x08	; 8
     d3a:	8c 93       	st	X, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
     d3c:	93 83       	std	Z+3, r25	; 0x03
     d3e:	08 95       	ret

00000d40 <LEDCycleUpdate>:
*
*********************************************************************************************************
*/

void LEDCycleUpdate(void)
{
     d40:	a9 e4       	ldi	r26, 0x49	; 73
     d42:	b1 e0       	ldi	r27, 0x01	; 1
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
     d48:	ca 01       	movw	r24, r20
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	fc 01       	movw	r30, r24
     d50:	e8 5b       	subi	r30, 0xB8	; 184
     d52:	fe 4f       	sbci	r31, 0xFE	; 254
     d54:	30 81       	ld	r19, Z
     d56:	37 70       	andi	r19, 0x07	; 7
		ft = LEDs[i].flashTimer;
     d58:	2c 91       	ld	r18, X
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
     d5a:	34 30       	cpi	r19, 0x04	; 4
     d5c:	19 f0       	breq	.+6      	; 0xd64 <LEDCycleUpdate+0x24>
	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
		ft = LEDs[i].flashTimer;
		
		ft += rate;
     d5e:	23 0f       	add	r18, r19
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
     d60:	2d 33       	cpi	r18, 0x3D	; 61
     d62:	38 f0       	brcs	.+14     	; 0xd72 <LEDCycleUpdate+0x32>
		{
			ft = 0;
			LEDs[i].led.state = S_OFF;
     d64:	fc 01       	movw	r30, r24
     d66:	e8 5b       	subi	r30, 0xB8	; 184
     d68:	fe 4f       	sbci	r31, 0xFE	; 254
     d6a:	20 81       	ld	r18, Z
     d6c:	28 60       	ori	r18, 0x08	; 8
     d6e:	20 83       	st	Z, r18
		ft = LEDs[i].flashTimer;
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
		{
			ft = 0;
     d70:	20 e0       	ldi	r18, 0x00	; 0
			LEDs[i].led.state = S_OFF;
		}
		LEDs[i].flashTimer = ft;
     d72:	2c 93       	st	X, r18
		
		if((rate == LED_0HZ) || (ft > (LED_ONE_SEC/2)))
     d74:	33 23       	and	r19, r19
     d76:	11 f0       	breq	.+4      	; 0xd7c <LEDCycleUpdate+0x3c>
     d78:	2f 31       	cpi	r18, 0x1F	; 31
     d7a:	30 f0       	brcs	.+12     	; 0xd88 <LEDCycleUpdate+0x48>
		{
			LEDs[i].led.state = S_ON;
     d7c:	fc 01       	movw	r30, r24
     d7e:	e8 5b       	subi	r30, 0xB8	; 184
     d80:	fe 4f       	sbci	r31, 0xFE	; 254
     d82:	80 81       	ld	r24, Z
     d84:	87 7f       	andi	r24, 0xF7	; 247
     d86:	80 83       	st	Z, r24
     d88:	12 96       	adiw	r26, 0x02	; 2
{
	LED_RATE rate;
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
     d8a:	41 30       	cpi	r20, 0x01	; 1
     d8c:	51 05       	cpc	r21, r1
     d8e:	19 f0       	breq	.+6      	; 0xd96 <LEDCycleUpdate+0x56>
     d90:	41 e0       	ldi	r20, 0x01	; 1
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	d9 cf       	rjmp	.-78     	; 0xd48 <LEDCycleUpdate+0x8>
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */

	if(LEDs[0].led.state == S_OFF)
     d96:	80 91 48 01 	lds	r24, 0x0148
     d9a:	83 ff       	sbrs	r24, 3
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <LEDCycleUpdate+0x62>
	{
		state |= (1<<DDB1);
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	01 c0       	rjmp	.+2      	; 0xda4 <LEDCycleUpdate+0x64>
*
*********************************************************************************************************
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */
     da2:	80 e0       	ldi	r24, 0x00	; 0
	if(LEDs[0].led.state == S_OFF)
	{
		state |= (1<<DDB1);
	}
	
	if(LEDs[1].led.state == S_OFF)
     da4:	90 91 4a 01 	lds	r25, 0x014A
     da8:	93 fd       	sbrc	r25, 3
	{
		state |= (1<<DDB2);
     daa:	84 60       	ori	r24, 0x04	; 4
	}

	PORTB &= ~((1<<DDB2) | (1<<DDB1));
     dac:	98 b3       	in	r25, 0x18	; 24
     dae:	99 7f       	andi	r25, 0xF9	; 249
     db0:	98 bb       	out	0x18, r25	; 24
	PORTB |= state;
     db2:	98 b3       	in	r25, 0x18	; 24
     db4:	89 2b       	or	r24, r25
     db6:	88 bb       	out	0x18, r24	; 24
     db8:	08 95       	ret

00000dba <main>:
int main(void)
{	
	/*
	Calll all initial function
	*/
	McuInit();
     dba:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <McuInit>
	ApplInit();
     dbe:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <ApplInit>

	while(1)
	{
		AppWaitZeroCrossing();
     dc2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <AppWaitZeroCrossing>
		ButtonCycleUpdate();
     dc6:	0e 94 a7 08 	call	0x114e	; 0x114e <ButtonCycleUpdate>
		AppCycleUpdate();
     dca:	0e 94 0e 05 	call	0xa1c	; 0xa1c <AppCycleUpdate>
		LEDCycleUpdate();
     dce:	0e 94 a0 06 	call	0xd40	; 0xd40 <LEDCycleUpdate>
		SSDCycleUpdate();
     dd2:	0e 94 93 07 	call	0xf26	; 0xf26 <SSDCycleUpdate>
		MeasureCycleUpdate();
     dd6:	0e 94 20 07 	call	0xe40	; 0xe40 <MeasureCycleUpdate>
	}
     dda:	f3 cf       	rjmp	.-26     	; 0xdc2 <main+0x8>

00000ddc <MeasureOutputCompare2>:
* Notes      : none
*
*********************************************************************************************************
*/
void MeasureOutputCompare2(void)
{
     ddc:	cf 93       	push	r28
	uint8_t SampleValue;
	
	OCR2 = TCNT2 + MEASURE_OCR2;
     dde:	84 b5       	in	r24, 0x24	; 36
     de0:	87 5c       	subi	r24, 0xC7	; 199
     de2:	83 bd       	out	0x23, r24	; 35
	
	SampleValue = ReadADC8Bit(MEASURE_ADC0);
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	0e 94 9e 08 	call	0x113c	; 0x113c <ReadADC8Bit>
     dea:	c8 2f       	mov	r28, r24
	if(bufferIsNotFull(&Adc0Buffer) == 0)			/* if buffer is full */
     dec:	86 e5       	ldi	r24, 0x56	; 86
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	0e 94 ca 00 	call	0x194	; 0x194 <bufferIsNotFull>
     df4:	89 2b       	or	r24, r25
     df6:	21 f4       	brne	.+8      	; 0xe00 <MeasureOutputCompare2+0x24>
	{
		bufferGetFromFront(&Adc0Buffer);
     df8:	86 e5       	ldi	r24, 0x56	; 86
     dfa:	91 e0       	ldi	r25, 0x01	; 1
     dfc:	0e 94 85 00 	call	0x10a	; 0x10a <bufferGetFromFront>
	}
	bufferAddToEnd(&Adc0Buffer, SampleValue);
     e00:	6c 2f       	mov	r22, r28
     e02:	86 e5       	ldi	r24, 0x56	; 86
     e04:	91 e0       	ldi	r25, 0x01	; 1
     e06:	0e 94 a9 00 	call	0x152	; 0x152 <bufferAddToEnd>
	
	PORTD ^= (1<<PD4);
     e0a:	92 b3       	in	r25, 0x12	; 18
     e0c:	80 e1       	ldi	r24, 0x10	; 16
     e0e:	89 27       	eor	r24, r25
     e10:	82 bb       	out	0x12, r24	; 18
}
     e12:	cf 91       	pop	r28
     e14:	08 95       	ret

00000e16 <MeasureInit>:
*
*********************************************************************************************************
*/
void MeasureKZ1PWM(uint16_t dutyCycle)
{
	timer1PWMBSet(dutyCycle);
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 21 02 	call	0x442	; 0x442 <timer1PWMBSet>
*
*********************************************************************************************************
*/
void MeasureKZ2PWM(uint16_t dutyCycle)
{
	timer1PWMASet(dutyCycle);
     e1e:	88 ec       	ldi	r24, 0xC8	; 200
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 1e 02 	call	0x43c	; 0x43c <timer1PWMASet>
void MeasureInit(void)
{
	MeasureKZ1PWM(1);
	MeasureKZ2PWM(200);

	timerAttach(TIMER2OUTCOMPARE_INT, MeasureOutputCompare2);
     e26:	6e ee       	ldi	r22, 0xEE	; 238
     e28:	76 e0       	ldi	r23, 0x06	; 6
     e2a:	86 e0       	ldi	r24, 0x06	; 6
     e2c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <timerAttach>
	bufferInit(&Adc0Buffer, (uint8_t *)Adc0DataArray, ADC0_BUF_SIZE);
     e30:	45 e0       	ldi	r20, 0x05	; 5
     e32:	50 e0       	ldi	r21, 0x00	; 0
     e34:	66 ef       	ldi	r22, 0xF6	; 246
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	86 e5       	ldi	r24, 0x56	; 86
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <bufferInit>

00000e40 <MeasureCycleUpdate>:
* Notes      : none
*
*********************************************************************************************************
*/
void MeasureCycleUpdate(void)
{
     e40:	cf 93       	push	r28
	if(bufferIsNotFull(&Adc0Buffer) == 0)			/* if buffer is full */
     e42:	86 e5       	ldi	r24, 0x56	; 86
     e44:	91 e0       	ldi	r25, 0x01	; 1
     e46:	0e 94 ca 00 	call	0x194	; 0x194 <bufferIsNotFull>
     e4a:	89 2b       	or	r24, r25
     e4c:	19 f5       	brne	.+70     	; 0xe94 <MeasureCycleUpdate+0x54>
     e4e:	4f ef       	ldi	r20, 0xFF	; 255
     e50:	c0 e0       	ldi	r28, 0x00	; 0
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	e6 ef       	ldi	r30, 0xF6	; 246
     e58:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t min = 0xff;
	uint16_t i;

	for(i=0, sum=0; i< size; i++, ArryPtr++)
	{
		sum += *ArryPtr;
     e5a:	90 81       	ld	r25, Z
     e5c:	29 0f       	add	r18, r25
     e5e:	31 1d       	adc	r19, r1
     e60:	c9 17       	cp	r28, r25
     e62:	08 f4       	brcc	.+2      	; 0xe66 <MeasureCycleUpdate+0x26>
     e64:	c9 2f       	mov	r28, r25
     e66:	94 17       	cp	r25, r20
     e68:	08 f4       	brcc	.+2      	; 0xe6c <MeasureCycleUpdate+0x2c>
     e6a:	49 2f       	mov	r20, r25
	uint8_t avg = 0;
	uint8_t max = 0;
	uint8_t min = 0xff;
	uint16_t i;

	for(i=0, sum=0; i< size; i++, ArryPtr++)
     e6c:	31 96       	adiw	r30, 0x01	; 1
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	eb 3f       	cpi	r30, 0xFB	; 251
     e72:	f8 07       	cpc	r31, r24
     e74:	91 f7       	brne	.-28     	; 0xe5a <MeasureCycleUpdate+0x1a>
			min = *ArryPtr;
		}
	}
	avg = sum/size;
	
	calcPtr->sum = sum;
     e76:	30 93 4d 01 	sts	0x014D, r19
     e7a:	20 93 4c 01 	sts	0x014C, r18
		if(*ArryPtr < min)
		{
			min = *ArryPtr;
		}
	}
	avg = sum/size;
     e7e:	c9 01       	movw	r24, r18
     e80:	65 e0       	ldi	r22, 0x05	; 5
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__udivmodhi4>
     e88:	60 93 4e 01 	sts	0x014E, r22
	
	calcPtr->sum = sum;
	calcPtr->avg = avg;
	calcPtr->max = max;
     e8c:	c0 93 4f 01 	sts	0x014F, r28
	calcPtr->min = min;
     e90:	40 93 50 01 	sts	0x0150, r20
	{
		MeasureBufferCalc(&mData.calcResult[MEASURE_ADC0], (uint8_t *)Adc0DataArray, ADC0_BUF_SIZE);
	}

#if 1
	rprintf("sa%d\n",ReadADC8Bit(MEASURE_ADC0));
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	0e 94 9e 08 	call	0x113c	; 0x113c <ReadADC8Bit>
     e9a:	1f 92       	push	r1
     e9c:	8f 93       	push	r24
     e9e:	8f ea       	ldi	r24, 0xAF	; 175
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	9f 93       	push	r25
     ea4:	8f 93       	push	r24
     ea6:	c1 e0       	ldi	r28, 0x01	; 1
     ea8:	cf 93       	push	r28
     eaa:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <rprintf1RamRom>
	rprintf("s%d\n",mData.calcResult[MEASURE_ADC0].sum);
     eae:	80 91 4d 01 	lds	r24, 0x014D
     eb2:	8f 93       	push	r24
     eb4:	80 91 4c 01 	lds	r24, 0x014C
     eb8:	8f 93       	push	r24
     eba:	8a ea       	ldi	r24, 0xAA	; 170
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	9f 93       	push	r25
     ec0:	8f 93       	push	r24
     ec2:	cf 93       	push	r28
     ec4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <rprintf1RamRom>
	rprintf("a%d\n",mData.calcResult[MEASURE_ADC0].avg);
     ec8:	80 91 4e 01 	lds	r24, 0x014E
     ecc:	1f 92       	push	r1
     ece:	8f 93       	push	r24
     ed0:	85 ea       	ldi	r24, 0xA5	; 165
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	9f 93       	push	r25
     ed6:	8f 93       	push	r24
     ed8:	cf 93       	push	r28
     eda:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <rprintf1RamRom>
	rprintf("ma%d\n",mData.calcResult[MEASURE_ADC0].max);
     ede:	80 91 4f 01 	lds	r24, 0x014F
     ee2:	1f 92       	push	r1
     ee4:	8f 93       	push	r24
     ee6:	8f e9       	ldi	r24, 0x9F	; 159
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	9f 93       	push	r25
     eec:	8f 93       	push	r24
     eee:	cf 93       	push	r28
     ef0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <rprintf1RamRom>
	rprintf("mi%d\r\n",mData.calcResult[MEASURE_ADC0].min);
     ef4:	80 91 50 01 	lds	r24, 0x0150
     ef8:	1f 92       	push	r1
     efa:	8f 93       	push	r24
     efc:	88 e9       	ldi	r24, 0x98	; 152
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	9f 93       	push	r25
     f02:	8f 93       	push	r24
     f04:	cf 93       	push	r28
     f06:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <rprintf1RamRom>
     f0a:	8d b7       	in	r24, 0x3d	; 61
     f0c:	9e b7       	in	r25, 0x3e	; 62
     f0e:	49 96       	adiw	r24, 0x19	; 25
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	9e bf       	out	0x3e, r25	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	8d bf       	out	0x3d, r24	; 61
#endif

}
     f1a:	cf 91       	pop	r28
     f1c:	08 95       	ret

00000f1e <MeasureGetResult>:
*
*********************************************************************************************************
*/
uint16_t MeasureGetResult(void)
{
	return mData.calcResult[MEASURE_ADC0].avg;
     f1e:	80 91 4e 01 	lds	r24, 0x014E
}
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	08 95       	ret

00000f26 <SSDCycleUpdate>:
*
*********************************************************************************************************
*/

void SSDCycleUpdate(void)
{
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
*/
void SSDShitfOutData(void)
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
     f2a:	40 91 60 01 	lds	r20, 0x0160
     f2e:	50 91 61 01 	lds	r21, 0x0161
     f32:	60 91 62 01 	lds	r22, 0x0162
     f36:	70 91 63 01 	lds	r23, 0x0163
     f3a:	80 e2       	ldi	r24, 0x20	; 32
	
	for(i = 0; i < 32; i++)
	{
		bitVal = 0;
		if(DispValTemp & 0x80000000)
     f3c:	8a 01       	movw	r16, r20
     f3e:	9b 01       	movw	r18, r22
		{
			bitVal = 1;
		}
		DispValTemp <<= 1;
     f40:	44 0f       	add	r20, r20
     f42:	55 1f       	adc	r21, r21
     f44:	66 1f       	adc	r22, r22
     f46:	77 1f       	adc	r23, r23

		SSD_CLK_CLR();
     f48:	af 98       	cbi	0x15, 7	; 21
		SSD_DAT_CLR();
     f4a:	ae 98       	cbi	0x15, 6	; 21
		if(bitVal)
     f4c:	37 fd       	sbrc	r19, 7
		{
			SSD_DAT_SET();
     f4e:	ae 9a       	sbi	0x15, 6	; 21
		}
		SSD_CLK_SET();
     f50:	af 9a       	sbi	0x15, 7	; 21
     f52:	81 50       	subi	r24, 0x01	; 1
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
	
	for(i = 0; i < 32; i++)
     f54:	99 f7       	brne	.-26     	; 0xf3c <SSDCycleUpdate+0x16>
void SSDUpdateOnOff(void)
{
	SSD_RATE rate;
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
     f56:	90 91 5e 01 	lds	r25, 0x015E
     f5a:	97 70       	andi	r25, 0x07	; 7
	ft = SSD.flashTimer;
     f5c:	80 91 5f 01 	lds	r24, 0x015F
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
     f60:	94 30       	cpi	r25, 0x04	; 4
     f62:	19 f0       	breq	.+6      	; 0xf6a <SSDCycleUpdate+0x44>
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
	ft = SSD.flashTimer;
	
	ft += rate;
     f64:	89 0f       	add	r24, r25
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
     f66:	8d 33       	cpi	r24, 0x3D	; 61
     f68:	30 f0       	brcs	.+12     	; 0xf76 <SSDCycleUpdate+0x50>
	{
		ft = 0;
		SSD.ssd.state = SSD_OFF;
     f6a:	80 91 5e 01 	lds	r24, 0x015E
     f6e:	8f 7d       	andi	r24, 0xDF	; 223
     f70:	80 93 5e 01 	sts	0x015E, r24
	ft = SSD.flashTimer;
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
	{
		ft = 0;
     f74:	80 e0       	ldi	r24, 0x00	; 0
		SSD.ssd.state = SSD_OFF;
	}
	SSD.flashTimer = ft;
     f76:	80 93 5f 01 	sts	0x015F, r24
	
	if((rate == SSD_0HZ) || (ft > (SSD_ONE_SEC/2)))
     f7a:	99 23       	and	r25, r25
     f7c:	11 f0       	breq	.+4      	; 0xf82 <SSDCycleUpdate+0x5c>
     f7e:	8f 31       	cpi	r24, 0x1F	; 31
     f80:	28 f0       	brcs	.+10     	; 0xf8c <SSDCycleUpdate+0x66>
	{
		SSD.ssd.state = SSD_ON;
     f82:	80 91 5e 01 	lds	r24, 0x015E
     f86:	80 62       	ori	r24, 0x20	; 32
     f88:	80 93 5e 01 	sts	0x015E, r24
*
*********************************************************************************************************
*/
void SSDUpdateComPin(void)
{
	if(SSD.ssd.state == SSD_OFF)		/* if ssd is in off state, cut power to green and color */
     f8c:	80 91 5e 01 	lds	r24, 0x015E
     f90:	85 fd       	sbrc	r24, 5
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <SSDCycleUpdate+0x72>
	{
		SSD_RED_CLR();
     f94:	ac 98       	cbi	0x15, 4	; 21
     f96:	03 c0       	rjmp	.+6      	; 0xf9e <SSDCycleUpdate+0x78>
		SSD_GRN_CLR();
	}
	else
	{
		if(SSD.ssd.color == SSD_RED)		/* dispay red color */
     f98:	88 71       	andi	r24, 0x18	; 24
     f9a:	19 f4       	brne	.+6      	; 0xfa2 <SSDCycleUpdate+0x7c>
		{
			SSD_RED_SET();	/* give power to red ssd common pin */
     f9c:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_CLR();	/* cut power to green ssd common pin */
     f9e:	ad 98       	cbi	0x15, 5	; 21
     fa0:	06 c0       	rjmp	.+12     	; 0xfae <SSDCycleUpdate+0x88>
		}
		else if(SSD.ssd.color == SSD_GREEN) /* dispay green color */
     fa2:	88 30       	cpi	r24, 0x08	; 8
     fa4:	11 f4       	brne	.+4      	; 0xfaa <SSDCycleUpdate+0x84>
		{
			SSD_RED_CLR();
     fa6:	ac 98       	cbi	0x15, 4	; 21
     fa8:	01 c0       	rjmp	.+2      	; 0xfac <SSDCycleUpdate+0x86>
			SSD_GRN_SET();
		}
		else								/* dispay amber color */
		{
			SSD_RED_SET();
     faa:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_SET();
     fac:	ad 9a       	sbi	0x15, 5	; 21
void SSDCycleUpdate(void)
{
	SSDShitfOutData();
	SSDUpdateOnOff();
	SSDUpdateComPin();
}
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	08 95       	ret

00000fb4 <SSDDisplayDec>:
* Notes      :none
*
*********************************************************************************************************
*/
void SSDDisplayDec(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	8c 01       	movw	r16, r24
     fbe:	36 2f       	mov	r19, r22
uint32_t SSDHex2Dec(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = hexValue/1000;
     fc0:	68 ee       	ldi	r22, 0xE8	; 232
     fc2:	73 e0       	ldi	r23, 0x03	; 3
     fc4:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__udivmodhi4>
     fc8:	c6 2f       	mov	r28, r22
	dataSTR.hundred   = hexValue%1000/100;
     fca:	64 e6       	ldi	r22, 0x64	; 100
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__udivmodhi4>
     fd2:	d6 2f       	mov	r29, r22
	dataSTR.tens      = hexValue%1000%100/10;
     fd4:	6a e0       	ldi	r22, 0x0A	; 10
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__udivmodhi4>
     fdc:	56 2f       	mov	r21, r22
{
	SSD_DISP_T ValueCopy;
	
	SSD.DispVal.value = SSDHex2Dec(DispData);
	ValueCopy.value = SSD.DispVal.value;
	SSD.ssd.rate = rate;
     fde:	37 70       	andi	r19, 0x07	; 7
     fe0:	60 91 5e 01 	lds	r22, 0x015E
     fe4:	60 7e       	andi	r22, 0xE0	; 224
	SSD.ssd.color = color;
     fe6:	43 70       	andi	r20, 0x03	; 3
     fe8:	94 2f       	mov	r25, r20
     fea:	99 0f       	add	r25, r25
     fec:	99 0f       	add	r25, r25
     fee:	99 0f       	add	r25, r25
     ff0:	46 2f       	mov	r20, r22
     ff2:	43 2b       	or	r20, r19
     ff4:	49 2b       	or	r20, r25
     ff6:	40 93 5e 01 	sts	0x015E, r20
	
	/* Set display null for all 4 seven segment displays */
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
     ffa:	e5 ec       	ldi	r30, 0xC5	; 197
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	94 91       	lpm	r25, Z
    1000:	90 93 63 01 	sts	0x0163, r25
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
    1004:	94 91       	lpm	r25, Z
    1006:	90 93 62 01 	sts	0x0162, r25
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
    100a:	94 91       	lpm	r25, Z
    100c:	90 93 61 01 	sts	0x0161, r25
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
    1010:	e4 91       	lpm	r30, Z
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0

	/* Set display remove zero before number */
	if(DispData > 1000)
    1016:	09 3e       	cpi	r16, 0xE9	; 233
    1018:	83 e0       	ldi	r24, 0x03	; 3
    101a:	18 07       	cpc	r17, r24
    101c:	78 f0       	brcs	.+30     	; 0x103c <SSDDisplayDec+0x88>
	{
		SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[ValueCopy.thousands]);
    101e:	ec 2f       	mov	r30, r28
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	eb 54       	subi	r30, 0x4B	; 75
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	84 91       	lpm	r24, Z
    1028:	80 93 63 01 	sts	0x0163, r24
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
    102c:	ed 2f       	mov	r30, r29
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	eb 54       	subi	r30, 0x4B	; 75
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	e4 91       	lpm	r30, Z
    1036:	e0 93 62 01 	sts	0x0162, r30
    103a:	0e c0       	rjmp	.+28     	; 0x1058 <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 100)
    103c:	05 36       	cpi	r16, 0x65	; 101
    103e:	11 05       	cpc	r17, r1
    1040:	40 f0       	brcs	.+16     	; 0x1052 <SSDDisplayDec+0x9e>
	{
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
    1042:	ed 2f       	mov	r30, r29
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	eb 54       	subi	r30, 0x4B	; 75
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	84 91       	lpm	r24, Z
    104c:	80 93 62 01 	sts	0x0162, r24
    1050:	03 c0       	rjmp	.+6      	; 0x1058 <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 10)
    1052:	0b 30       	cpi	r16, 0x0B	; 11
    1054:	11 05       	cpc	r17, r1
    1056:	38 f0       	brcs	.+14     	; 0x1066 <SSDDisplayDec+0xb2>
	{
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
    1058:	e5 2f       	mov	r30, r21
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	eb 54       	subi	r30, 0x4B	; 75
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	e4 91       	lpm	r30, Z
    1062:	e0 93 61 01 	sts	0x0161, r30
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else
	{
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
    1066:	f9 01       	movw	r30, r18
    1068:	eb 54       	subi	r30, 0x4B	; 75
    106a:	ff 4f       	sbci	r31, 0xFF	; 255
    106c:	e4 91       	lpm	r30, Z
    106e:	e0 93 60 01 	sts	0x0160, r30
	}
}
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	08 95       	ret

0000107c <SSDDisplayHex>:
uint32_t SSDHex2Hex(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = (hexValue >> 12) & 0x000f;
    107c:	39 2f       	mov	r19, r25
    107e:	32 95       	swap	r19
    1080:	3f 70       	andi	r19, 0x0F	; 15
	dataSTR.hundred   = (hexValue >> 8) & 0x000f;
    1082:	29 2f       	mov	r18, r25
    1084:	2f 70       	andi	r18, 0x0F	; 15
	dataSTR.tens      = (hexValue >> 4) & 0x000f;
    1086:	fc 01       	movw	r30, r24
    1088:	94 e0       	ldi	r25, 0x04	; 4
    108a:	f6 95       	lsr	r31
    108c:	e7 95       	ror	r30
    108e:	9a 95       	dec	r25
    1090:	e1 f7       	brne	.-8      	; 0x108a <SSDDisplayHex+0xe>
    1092:	9e 2f       	mov	r25, r30
    1094:	9f 70       	andi	r25, 0x0F	; 15
	dataSTR.units     = (hexValue >> 0) & 0x000f;
    1096:	8f 70       	andi	r24, 0x0F	; 15
*
*********************************************************************************************************
*/
void SSDDisplayHex(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
	SSD.DispVal.value = SSDHex2Hex(DispData);
    1098:	ae e5       	ldi	r26, 0x5E	; 94
    109a:	b1 e0       	ldi	r27, 0x01	; 1
	SSD.ssd.rate = rate;
    109c:	67 70       	andi	r22, 0x07	; 7
    109e:	7c 91       	ld	r23, X
    10a0:	70 7e       	andi	r23, 0xE0	; 224
	SSD.ssd.color = color;
    10a2:	43 70       	andi	r20, 0x03	; 3
    10a4:	54 2f       	mov	r21, r20
    10a6:	55 0f       	add	r21, r21
    10a8:	55 0f       	add	r21, r21
    10aa:	55 0f       	add	r21, r21
    10ac:	47 2f       	mov	r20, r23
    10ae:	46 2b       	or	r20, r22
    10b0:	45 2b       	or	r20, r21
    10b2:	4c 93       	st	X, r20
	
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD.DispVal.thousands]);
    10b4:	e3 2f       	mov	r30, r19
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	eb 54       	subi	r30, 0x4B	; 75
    10ba:	ff 4f       	sbci	r31, 0xFF	; 255
    10bc:	34 91       	lpm	r19, Z
    10be:	15 96       	adiw	r26, 0x05	; 5
    10c0:	3c 93       	st	X, r19
    10c2:	15 97       	sbiw	r26, 0x05	; 5
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD.DispVal.hundred]);
    10c4:	e2 2f       	mov	r30, r18
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	eb 54       	subi	r30, 0x4B	; 75
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	24 91       	lpm	r18, Z
    10ce:	14 96       	adiw	r26, 0x04	; 4
    10d0:	2c 93       	st	X, r18
    10d2:	14 97       	sbiw	r26, 0x04	; 4
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD.DispVal.tens]);
    10d4:	e9 2f       	mov	r30, r25
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	eb 54       	subi	r30, 0x4B	; 75
    10da:	ff 4f       	sbci	r31, 0xFF	; 255
    10dc:	e4 91       	lpm	r30, Z
    10de:	13 96       	adiw	r26, 0x03	; 3
    10e0:	ec 93       	st	X, r30
    10e2:	13 97       	sbiw	r26, 0x03	; 3
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD.DispVal.units]);
    10e4:	e8 2f       	mov	r30, r24
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	eb 54       	subi	r30, 0x4B	; 75
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	e4 91       	lpm	r30, Z
    10ee:	12 96       	adiw	r26, 0x02	; 2
    10f0:	ec 93       	st	X, r30
    10f2:	08 95       	ret

000010f4 <SSDInit>:
void SSDInit(void)
{	
	/* 
	Set PB7-PB4 as output to drive seven segment display, default display turn off
	*/
	DDRC &= ~((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
    10f4:	84 b3       	in	r24, 0x14	; 20
    10f6:	8f 70       	andi	r24, 0x0F	; 15
    10f8:	84 bb       	out	0x14, r24	; 20
	DDRC |= ((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
    10fa:	84 b3       	in	r24, 0x14	; 20
    10fc:	80 6f       	ori	r24, 0xF0	; 240
    10fe:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~((1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4));
    1100:	85 b3       	in	r24, 0x15	; 21
    1102:	8f 70       	andi	r24, 0x0F	; 15
    1104:	85 bb       	out	0x15, r24	; 21

	SSDDisplayHex(0, SSD_R_OFF, SSD_RED);	/* Initial turn off all SSDs */
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	64 e0       	ldi	r22, 0x04	; 4
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0c 94 3e 08 	jmp	0x107c	; 0x107c <SSDDisplayHex>

00001112 <ADCInit>:
*********************************************************************************************************
*/

void ADCInit (void)
{
	ADMUX  = (1 << REFS0);	/* use external AVCC as AREF,the result is right adjusted,10bits format */	
    1112:	80 e4       	ldi	r24, 0x40	; 64
    1114:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN) | (0 << ADIE) | (1 << ADIF) | ADPS2_0;	/* ADC Enable, Clear interrupt flag,set ADC Prescaler Selections */
    1116:	84 e9       	ldi	r24, 0x94	; 148
    1118:	86 b9       	out	0x06, r24	; 6
    111a:	08 95       	ret

0000111c <ReadADC10Bit>:
uint16_t ReadADC10Bit(uint8_t channel)
{
	uint16_t result;
	uint8_t  sreg_save;  
	
    sreg_save = SREG;						/* Save AVR Status Register */
    111c:	2f b7       	in	r18, 0x3f	; 63
	cli();									/* Global interrupt disable */
    111e:	f8 94       	cli
	
    ADMUX  &= 0xf0; 						/* Clear MUX3:0 */
    1120:	97 b1       	in	r25, 0x07	; 7
    1122:	90 7f       	andi	r25, 0xF0	; 240
    1124:	97 b9       	out	0x07, r25	; 7
	ADMUX  |= (channel&0x07);				/* Choose ADC channel */
    1126:	97 b1       	in	r25, 0x07	; 7
    1128:	87 70       	andi	r24, 0x07	; 7
    112a:	89 2b       	or	r24, r25
    112c:	87 b9       	out	0x07, r24	; 7
    ADCSRA |= (1 << ADSC);					/* ADC start conversion */	
    112e:	36 9a       	sbi	0x06, 6	; 6
    while ((ADCSRA & (1 << ADIF)) == 0);	/* wait conversion finish */			
    1130:	34 9b       	sbis	0x06, 4	; 6
    1132:	fe cf       	rjmp	.-4      	; 0x1130 <ReadADC10Bit+0x14>
    result  = ADC;							/* Read ADC value */
    1134:	84 b1       	in	r24, 0x04	; 4
    1136:	95 b1       	in	r25, 0x05	; 5
	
    SREG = sreg_save;						/* Recover AVR Status Register */	
    1138:	2f bf       	out	0x3f, r18	; 63
    return (result);
}
    113a:	08 95       	ret

0000113c <ReadADC8Bit>:
*/

uint8_t ReadADC8Bit(uint8_t channel)
{
	uint16_t tempInt;
	tempInt = ReadADC10Bit(channel);
    113c:	0e 94 8e 08 	call	0x111c	; 0x111c <ReadADC10Bit>
	return tempInt>>2;
    1140:	96 95       	lsr	r25
    1142:	87 95       	ror	r24
    1144:	96 95       	lsr	r25
    1146:	87 95       	ror	r24
}
    1148:	08 95       	ret

0000114a <ButtonInit>:
* Returns    : none
*********************************************************************************************************
*/
void ButtonInit(void)
{
	ButtonInitEx();
    114a:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <ButtonInitEx>

0000114e <ButtonCycleUpdate>:
* Notes      : None
*
*/
ButtonDataType ButtonGetIO_State(void)
{
	return  ButtonGetIO_StateEx();
    114e:	0e 94 6f 06 	call	0xcde	; 0xcde <ButtonGetIO_StateEx>
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
    1152:	90 91 64 01 	lds	r25, 0x0164
    1156:	89 2b       	or	r24, r25
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
    1158:	10 92 64 01 	sts	0x0164, r1
	b = button.buttonsLastCycle.bVal;
    115c:	90 91 65 01 	lds	r25, 0x0165
	holdTime = button.buttonHoldTime;
    1160:	20 91 6a 01 	lds	r18, 0x016A
    1164:	30 91 6b 01 	lds	r19, 0x016B
	
	if (button.buttonsReleased.bVal != 0) {		
    1168:	40 91 66 01 	lds	r20, 0x0166
    116c:	44 23       	and	r20, r20
    116e:	19 f0       	breq	.+6      	; 0x1176 <ButtonCycleUpdate+0x28>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
    1170:	40 93 68 01 	sts	0x0168, r20
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <ButtonCycleUpdate+0x32>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
    1176:	2d 33       	cpi	r18, 0x3D	; 61
    1178:	31 05       	cpc	r19, r1
    117a:	10 f0       	brcs	.+4      	; 0x1180 <ButtonCycleUpdate+0x32>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
    117c:	10 92 68 01 	sts	0x0168, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
    1180:	10 92 66 01 	sts	0x0166, r1
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
    1184:	10 92 69 01 	sts	0x0169, r1
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
    1188:	89 13       	cpse	r24, r25
    118a:	0f c0       	rjmp	.+30     	; 0x11aa <ButtonCycleUpdate+0x5c>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
    118c:	2f 5f       	subi	r18, 0xFF	; 255
    118e:	3f 4f       	sbci	r19, 0xFF	; 255
    1190:	24 32       	cpi	r18, 0x24	; 36
    1192:	31 05       	cpc	r19, r1
    1194:	18 f4       	brcc	.+6      	; 0x119c <ButtonCycleUpdate+0x4e>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
    1196:	10 92 67 01 	sts	0x0167, r1
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <ButtonCycleUpdate+0x52>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
    119c:	80 93 67 01 	sts	0x0167, r24
		}	
		button.buttonHoldTime = holdTime;
    11a0:	30 93 6b 01 	sts	0x016B, r19
    11a4:	20 93 6a 01 	sts	0x016A, r18
    11a8:	08 95       	ret
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
    11aa:	80 93 65 01 	sts	0x0165, r24
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
    11ae:	80 95       	com	r24
    11b0:	89 23       	and	r24, r25
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
    11b2:	90 91 67 01 	lds	r25, 0x0167
    11b6:	98 23       	and	r25, r24
    11b8:	81 f4       	brne	.+32     	; 0x11da <ButtonCycleUpdate+0x8c>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
    11ba:	10 92 6b 01 	sts	0x016B, r1
    11be:	10 92 6a 01 	sts	0x016A, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
    11c2:	23 50       	subi	r18, 0x03	; 3
    11c4:	31 09       	sbc	r19, r1
    11c6:	20 32       	cpi	r18, 0x20	; 32
    11c8:	31 05       	cpc	r19, r1
    11ca:	38 f4       	brcc	.+14     	; 0x11da <ButtonCycleUpdate+0x8c>
				button.buttonsReleased.bVal = buttons;	
    11cc:	80 93 66 01 	sts	0x0166, r24
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
    11d0:	90 91 68 01 	lds	r25, 0x0168
    11d4:	89 23       	and	r24, r25
    11d6:	80 93 69 01 	sts	0x0169, r24
    11da:	08 95       	ret

000011dc <ButtonGetHoldTime>:
*/

uint16_t ButtonGetHoldTime(void)
{
	return button.buttonHoldTime;
}
    11dc:	80 91 6a 01 	lds	r24, 0x016A
    11e0:	90 91 6b 01 	lds	r25, 0x016B
    11e4:	08 95       	ret

000011e6 <ButtonGetReleased>:
*/

ButtonDataType ButtonGetReleased(void)
{
	return button.buttonsReleased.bVal;
}
    11e6:	80 91 66 01 	lds	r24, 0x0166
    11ea:	08 95       	ret

000011ec <ButtonGetHeld>:
*/

ButtonDataType ButtonGetHeld (void)
{
	return button.buttonsHeld.bVal;
}
    11ec:	80 91 67 01 	lds	r24, 0x0167
    11f0:	08 95       	ret

000011f2 <__udivmodhi4>:
    11f2:	aa 1b       	sub	r26, r26
    11f4:	bb 1b       	sub	r27, r27
    11f6:	51 e1       	ldi	r21, 0x11	; 17
    11f8:	07 c0       	rjmp	.+14     	; 0x1208 <__udivmodhi4_ep>

000011fa <__udivmodhi4_loop>:
    11fa:	aa 1f       	adc	r26, r26
    11fc:	bb 1f       	adc	r27, r27
    11fe:	a6 17       	cp	r26, r22
    1200:	b7 07       	cpc	r27, r23
    1202:	10 f0       	brcs	.+4      	; 0x1208 <__udivmodhi4_ep>
    1204:	a6 1b       	sub	r26, r22
    1206:	b7 0b       	sbc	r27, r23

00001208 <__udivmodhi4_ep>:
    1208:	88 1f       	adc	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	5a 95       	dec	r21
    120e:	a9 f7       	brne	.-22     	; 0x11fa <__udivmodhi4_loop>
    1210:	80 95       	com	r24
    1212:	90 95       	com	r25
    1214:	bc 01       	movw	r22, r24
    1216:	cd 01       	movw	r24, r26
    1218:	08 95       	ret

0000121a <__udivmodsi4>:
    121a:	a1 e2       	ldi	r26, 0x21	; 33
    121c:	1a 2e       	mov	r1, r26
    121e:	aa 1b       	sub	r26, r26
    1220:	bb 1b       	sub	r27, r27
    1222:	fd 01       	movw	r30, r26
    1224:	0d c0       	rjmp	.+26     	; 0x1240 <__udivmodsi4_ep>

00001226 <__udivmodsi4_loop>:
    1226:	aa 1f       	adc	r26, r26
    1228:	bb 1f       	adc	r27, r27
    122a:	ee 1f       	adc	r30, r30
    122c:	ff 1f       	adc	r31, r31
    122e:	a2 17       	cp	r26, r18
    1230:	b3 07       	cpc	r27, r19
    1232:	e4 07       	cpc	r30, r20
    1234:	f5 07       	cpc	r31, r21
    1236:	20 f0       	brcs	.+8      	; 0x1240 <__udivmodsi4_ep>
    1238:	a2 1b       	sub	r26, r18
    123a:	b3 0b       	sbc	r27, r19
    123c:	e4 0b       	sbc	r30, r20
    123e:	f5 0b       	sbc	r31, r21

00001240 <__udivmodsi4_ep>:
    1240:	66 1f       	adc	r22, r22
    1242:	77 1f       	adc	r23, r23
    1244:	88 1f       	adc	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	1a 94       	dec	r1
    124a:	69 f7       	brne	.-38     	; 0x1226 <__udivmodsi4_loop>
    124c:	60 95       	com	r22
    124e:	70 95       	com	r23
    1250:	80 95       	com	r24
    1252:	90 95       	com	r25
    1254:	9b 01       	movw	r18, r22
    1256:	ac 01       	movw	r20, r24
    1258:	bd 01       	movw	r22, r26
    125a:	cf 01       	movw	r24, r30
    125c:	08 95       	ret

0000125e <__tablejump2__>:
    125e:	ee 0f       	add	r30, r30
    1260:	ff 1f       	adc	r31, r31
    1262:	05 90       	lpm	r0, Z+
    1264:	f4 91       	lpm	r31, Z
    1266:	e0 2d       	mov	r30, r0
    1268:	09 94       	ijmp

0000126a <_exit>:
    126a:	f8 94       	cli

0000126c <__stop_program>:
    126c:	ff cf       	rjmp	.-2      	; 0x126c <__stop_program>
