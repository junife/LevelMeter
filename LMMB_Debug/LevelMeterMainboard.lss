
LevelMeterMainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b3c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000bb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c6  00800060  00800060  00000bb0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000be0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000202c  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf1  00000000  00000000  00002f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d26  00000000  00000000  00003b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a5c  00000000  00000000  00004880  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b0e  00000000  00000000  000052dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ef7  00000000  00000000  00005dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  00007ce1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
   4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  10:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  14:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  18:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  1c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  20:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  24:	0c 94 04 03 	jmp	0x608	; 0x608 <__vector_9>
  28:	0c 94 31 03 	jmp	0x662	; 0x662 <__vector_10>
  2c:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__vector_11>
  30:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__vector_12>
  34:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__vector_13>
  38:	0c 94 aa 02 	jmp	0x554	; 0x554 <__vector_14>
  3c:	0c 94 10 02 	jmp	0x420	; 0x420 <__vector_15>
  40:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  48:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__vector_18>
  4c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  50:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__vector_20>

00000054 <__trampolines_end>:
  54:	30 31       	cpi	r19, 0x10	; 16
  56:	32 33       	cpi	r19, 0x32	; 50
  58:	34 35       	cpi	r19, 0x54	; 84
  5a:	36 37       	cpi	r19, 0x76	; 118
  5c:	38 39       	cpi	r19, 0x98	; 152
  5e:	41 42       	sbci	r20, 0x21	; 33
  60:	43 44       	sbci	r20, 0x43	; 67
  62:	45 46       	sbci	r20, 0x65	; 101
	...

00000065 <__c.2033>:
  65:	25 63 00                                            %c.

00000068 <__c.2031>:
  68:	50 42 74 6e 31 38 2c 43 6c 65 61 72 20 48 6f 6d     PBtn18,Clear Hom
  78:	65 0a 00                                            e..

0000007b <__c.2029>:
  7b:	50 42 74 6e 39 0a 00                                PBtn9..

00000082 <__c.2026>:
  82:	50 42 74 6e 35 0a 00                                PBtn5..

00000089 <__c.2023>:
  89:	50 42 74 6e 31 0a 00                                PBtn1..

00000090 <__c.2020>:
  90:	50 42 74 6e 31 35 0a 00                             PBtn15..

00000098 <__c.2017>:
  98:	50 42 74 6e 31 34 0a 00                             PBtn14..

000000a0 <__c.2014>:
  a0:	50 42 74 6e 31 33 0a 00                             PBtn13..

000000a8 <__c.2011>:
  a8:	72 68 3d 25 78 0a 00                                rh=%x..

000000af <__c.2009>:
  af:	72 6c 3d 25 78 0a 00                                rl=%x..

000000b6 <__c.2003>:
  b6:	52 46 20 72 65 6d 6f 74 65 20 73 74 61 72 74 21     RF remote start!
  c6:	0a 00                                               ..

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf e5       	ldi	r28, 0x5F	; 95
  ce:	d4 e0       	ldi	r29, 0x04	; 4
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_clear_bss>:
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	a0 e6       	ldi	r26, 0x60	; 96
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	a6 32       	cpi	r26, 0x26	; 38
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
  e4:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <main>
  e8:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <_exit>

000000ec <__bad_interrupt>:
  ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f0 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
  f0:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
  f2:	8f b7       	in	r24, 0x3f	; 63
  f4:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
  f6:	71 83       	std	Z+1, r23	; 0x01
  f8:	60 83       	st	Z, r22
	buffer->size = size;
  fa:	53 83       	std	Z+3, r21	; 0x03
  fc:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
  fe:	17 82       	std	Z+7, r1	; 0x07
 100:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
 102:	15 82       	std	Z+5, r1	; 0x05
 104:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
 106:	8f bf       	out	0x3f, r24	; 63
 108:	08 95       	ret

0000010a <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
 10a:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
 10c:	9f b7       	in	r25, 0x3f	; 63
 10e:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
 110:	44 81       	ldd	r20, Z+4	; 0x04
 112:	55 81       	ldd	r21, Z+5	; 0x05
 114:	41 15       	cp	r20, r1
 116:	51 05       	cpc	r21, r1
 118:	c9 f0       	breq	.+50     	; 0x14c <bufferGetFromFront+0x42>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
 11a:	26 81       	ldd	r18, Z+6	; 0x06
 11c:	37 81       	ldd	r19, Z+7	; 0x07
 11e:	a0 81       	ld	r26, Z
 120:	b1 81       	ldd	r27, Z+1	; 0x01
 122:	a2 0f       	add	r26, r18
 124:	b3 1f       	adc	r27, r19
 126:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
 128:	2f 5f       	subi	r18, 0xFF	; 255
 12a:	3f 4f       	sbci	r19, 0xFF	; 255
 12c:	37 83       	std	Z+7, r19	; 0x07
 12e:	26 83       	std	Z+6, r18	; 0x06
		if(buffer->dataindex >= buffer->size)
 130:	62 81       	ldd	r22, Z+2	; 0x02
 132:	73 81       	ldd	r23, Z+3	; 0x03
 134:	26 17       	cp	r18, r22
 136:	37 07       	cpc	r19, r23
 138:	20 f0       	brcs	.+8      	; 0x142 <bufferGetFromFront+0x38>
		{
			buffer->dataindex -= buffer->size;
 13a:	26 1b       	sub	r18, r22
 13c:	37 0b       	sbc	r19, r23
 13e:	37 83       	std	Z+7, r19	; 0x07
 140:	26 83       	std	Z+6, r18	; 0x06
		}
		buffer->datalength--;
 142:	41 50       	subi	r20, 0x01	; 1
 144:	51 09       	sbc	r21, r1
 146:	55 83       	std	Z+5, r21	; 0x05
 148:	44 83       	std	Z+4, r20	; 0x04
 14a:	01 c0       	rjmp	.+2      	; 0x14e <bufferGetFromFront+0x44>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
 14c:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
 14e:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
 150:	08 95       	ret

00000152 <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	fc 01       	movw	r30, r24
 158:	d6 2f       	mov	r29, r22
	// begin critical section
	CRITICAL_SECTION_START;
 15a:	cf b7       	in	r28, 0x3f	; 63
 15c:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
 15e:	44 81       	ldd	r20, Z+4	; 0x04
 160:	55 81       	ldd	r21, Z+5	; 0x05
 162:	62 81       	ldd	r22, Z+2	; 0x02
 164:	73 81       	ldd	r23, Z+3	; 0x03
 166:	46 17       	cp	r20, r22
 168:	57 07       	cpc	r21, r23
 16a:	98 f4       	brcc	.+38     	; 0x192 <bufferAddToEnd+0x40>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
 16c:	86 81       	ldd	r24, Z+6	; 0x06
 16e:	97 81       	ldd	r25, Z+7	; 0x07
 170:	84 0f       	add	r24, r20
 172:	95 1f       	adc	r25, r21
 174:	0e 94 57 05 	call	0xaae	; 0xaae <__udivmodhi4>
 178:	a0 81       	ld	r26, Z
 17a:	b1 81       	ldd	r27, Z+1	; 0x01
 17c:	a8 0f       	add	r26, r24
 17e:	b9 1f       	adc	r27, r25
 180:	dc 93       	st	X, r29
		// increment the length
		buffer->datalength++;
 182:	84 81       	ldd	r24, Z+4	; 0x04
 184:	95 81       	ldd	r25, Z+5	; 0x05
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	95 83       	std	Z+5, r25	; 0x05
 18a:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
 18c:	cf bf       	out	0x3f, r28	; 63
		// return success
		return -1;
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	02 c0       	rjmp	.+4      	; 0x196 <bufferAddToEnd+0x44>
	}
	// end critical section
	CRITICAL_SECTION_END;
 192:	cf bf       	out	0x3f, r28	; 63
	// return failure
	return 0;
 194:	80 e0       	ldi	r24, 0x00	; 0
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
 19c:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
 19e:	4f b7       	in	r20, 0x3f	; 63
 1a0:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
 1a2:	82 81       	ldd	r24, Z+2	; 0x02
 1a4:	93 81       	ldd	r25, Z+3	; 0x03
 1a6:	24 81       	ldd	r18, Z+4	; 0x04
 1a8:	35 81       	ldd	r19, Z+5	; 0x05
	// end critical section
	CRITICAL_SECTION_END;
 1aa:	4f bf       	out	0x3f, r20	; 63
	return bytesleft;
}
 1ac:	82 1b       	sub	r24, r18
 1ae:	93 0b       	sbc	r25, r19
 1b0:	08 95       	ret

000001b2 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
 1b2:	90 93 61 00 	sts	0x0061, r25
 1b6:	80 93 60 00 	sts	0x0060, r24
 1ba:	08 95       	ret

000001bc <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
 1bc:	cf 93       	push	r28
 1be:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
 1c0:	8a 30       	cpi	r24, 0x0A	; 10
 1c2:	31 f4       	brne	.+12     	; 0x1d0 <rprintfChar+0x14>
		rputchar('\r');
 1c4:	e0 91 60 00 	lds	r30, 0x0060
 1c8:	f0 91 61 00 	lds	r31, 0x0061
 1cc:	8d e0       	ldi	r24, 0x0D	; 13
 1ce:	09 95       	icall
	// send character
	rputchar(c);
 1d0:	e0 91 60 00 	lds	r30, 0x0060
 1d4:	f0 91 61 00 	lds	r31, 0x0061
 1d8:	8c 2f       	mov	r24, r28
 1da:	09 95       	icall
}
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
 1e0:	8f 70       	andi	r24, 0x0F	; 15
 1e2:	e8 2f       	mov	r30, r24
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	ec 5a       	subi	r30, 0xAC	; 172
 1e8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ea:	84 91       	lpm	r24, Z
 1ec:	0e 94 de 00 	call	0x1bc	; 0x1bc <rprintfChar>
 1f0:	08 95       	ret

000001f2 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
 1f2:	2f 92       	push	r2
 1f4:	3f 92       	push	r3
 1f6:	4f 92       	push	r4
 1f8:	5f 92       	push	r5
 1fa:	6f 92       	push	r6
 1fc:	7f 92       	push	r7
 1fe:	8f 92       	push	r8
 200:	9f 92       	push	r9
 202:	af 92       	push	r10
 204:	bf 92       	push	r11
 206:	cf 92       	push	r12
 208:	df 92       	push	r13
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	7d 88       	ldd	r7, Y+21	; 0x15
 21c:	ce 88       	ldd	r12, Y+22	; 0x16
 21e:	df 88       	ldd	r13, Y+23	; 0x17
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
 220:	4e 01       	movw	r8, r28
 222:	28 e1       	ldi	r18, 0x18	; 24
 224:	82 0e       	add	r8, r18
 226:	91 1c       	adc	r9, r1

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 228:	51 2c       	mov	r5, r1
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 22a:	61 2c       	mov	r6, r1
 22c:	41 2c       	mov	r4, r1
 22e:	06 c0       	rjmp	.+12     	; 0x23c <rprintf1RamRom+0x4a>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
 230:	88 23       	and	r24, r24
 232:	09 f4       	brne	.+2      	; 0x236 <rprintf1RamRom+0x44>
 234:	8d c0       	rjmp	.+282    	; 0x350 <rprintf1RamRom+0x15e>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
 236:	0e 94 de 00 	call	0x1bc	; 0x1bc <rprintfChar>
 23a:	68 01       	movw	r12, r16
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 23c:	77 20       	and	r7, r7
 23e:	41 f0       	breq	.+16     	; 0x250 <rprintf1RamRom+0x5e>
 240:	86 01       	movw	r16, r12
 242:	0f 5f       	subi	r16, 0xFF	; 255
 244:	1f 4f       	sbci	r17, 0xFF	; 255
 246:	f6 01       	movw	r30, r12
 248:	84 91       	lpm	r24, Z
 24a:	85 32       	cpi	r24, 0x25	; 37
 24c:	89 f7       	brne	.-30     	; 0x230 <rprintf1RamRom+0x3e>
 24e:	08 c0       	rjmp	.+16     	; 0x260 <rprintf1RamRom+0x6e>
 250:	f6 01       	movw	r30, r12
 252:	80 81       	ld	r24, Z
 254:	85 32       	cpi	r24, 0x25	; 37
 256:	51 f0       	breq	.+20     	; 0x26c <rprintf1RamRom+0x7a>
 258:	86 01       	movw	r16, r12
 25a:	0f 5f       	subi	r16, 0xFF	; 255
 25c:	1f 4f       	sbci	r17, 0xFF	; 255
 25e:	e8 cf       	rjmp	.-48     	; 0x230 <rprintf1RamRom+0x3e>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
 260:	f2 e0       	ldi	r31, 0x02	; 2
 262:	cf 0e       	add	r12, r31
 264:	d1 1c       	adc	r13, r1
 266:	f8 01       	movw	r30, r16
 268:	84 91       	lpm	r24, Z
 26a:	06 c0       	rjmp	.+12     	; 0x278 <rprintf1RamRom+0x86>
 26c:	f6 01       	movw	r30, r12
 26e:	81 81       	ldd	r24, Z+1	; 0x01
 270:	96 01       	movw	r18, r12
 272:	2e 5f       	subi	r18, 0xFE	; 254
 274:	3f 4f       	sbci	r19, 0xFF	; 255
 276:	69 01       	movw	r12, r18
 278:	84 36       	cpi	r24, 0x64	; 100
 27a:	71 f0       	breq	.+28     	; 0x298 <rprintf1RamRom+0xa6>
 27c:	88 37       	cpi	r24, 0x78	; 120
 27e:	09 f4       	brne	.+2      	; 0x282 <rprintf1RamRom+0x90>
 280:	59 c0       	rjmp	.+178    	; 0x334 <rprintf1RamRom+0x142>
 282:	83 36       	cpi	r24, 0x63	; 99
 284:	31 f4       	brne	.+12     	; 0x292 <rprintf1RamRom+0xa0>
		{
			case 'c': format_flag = va_arg(ap,int);
 286:	f4 01       	movw	r30, r8
 288:	80 81       	ld	r24, Z
 28a:	94 01       	movw	r18, r8
 28c:	2e 5f       	subi	r18, 0xFE	; 254
 28e:	3f 4f       	sbci	r19, 0xFF	; 255
 290:	49 01       	movw	r8, r18
			default:  rprintfChar(format_flag); continue;
 292:	0e 94 de 00 	call	0x1bc	; 0x1bc <rprintfChar>
 296:	d2 cf       	rjmp	.-92     	; 0x23c <rprintf1RamRom+0x4a>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 298:	f4 01       	movw	r30, r8
 29a:	e0 80       	ld	r14, Z
 29c:	f1 80       	ldd	r15, Z+1	; 0x01
 29e:	32 e0       	ldi	r19, 0x02	; 2
 2a0:	83 0e       	add	r8, r19
 2a2:	91 1c       	adc	r9, r1
			if (format_flag == 'd')
			{
				if (((int)u_val) < 0)
 2a4:	ff 20       	and	r15, r15
 2a6:	34 f4       	brge	.+12     	; 0x2b4 <rprintf1RamRom+0xc2>
				{
					u_val = - u_val;
 2a8:	f1 94       	neg	r15
 2aa:	e1 94       	neg	r14
 2ac:	f1 08       	sbc	r15, r1
					rprintfChar('-');
 2ae:	8d e2       	ldi	r24, 0x2D	; 45
 2b0:	0e 94 de 00 	call	0x1bc	; 0x1bc <rprintfChar>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 2b4:	80 e1       	ldi	r24, 0x10	; 16
 2b6:	e8 16       	cp	r14, r24
 2b8:	87 e2       	ldi	r24, 0x27	; 39
 2ba:	f8 06       	cpc	r15, r24
 2bc:	d0 f4       	brcc	.+52     	; 0x2f2 <rprintf1RamRom+0x100>
 2be:	00 e1       	ldi	r16, 0x10	; 16
 2c0:	17 e2       	ldi	r17, 0x27	; 39
 2c2:	98 01       	movw	r18, r16
 2c4:	ad ec       	ldi	r26, 0xCD	; 205
 2c6:	bc ec       	ldi	r27, 0xCC	; 204
 2c8:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__umulhisi3>
 2cc:	8c 01       	movw	r16, r24
 2ce:	16 95       	lsr	r17
 2d0:	07 95       	ror	r16
 2d2:	16 95       	lsr	r17
 2d4:	07 95       	ror	r16
 2d6:	16 95       	lsr	r17
 2d8:	07 95       	ror	r16
 2da:	02 30       	cpi	r16, 0x02	; 2
 2dc:	11 05       	cpc	r17, r1
 2de:	88 f0       	brcs	.+34     	; 0x302 <rprintf1RamRom+0x110>
 2e0:	e0 16       	cp	r14, r16
 2e2:	f1 06       	cpc	r15, r17
 2e4:	70 f3       	brcs	.-36     	; 0x2c2 <rprintf1RamRom+0xd0>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 2e6:	0f 2e       	mov	r0, r31
 2e8:	fa e0       	ldi	r31, 0x0A	; 10
 2ea:	2f 2e       	mov	r2, r31
 2ec:	f0 2d       	mov	r31, r0
 2ee:	35 2c       	mov	r3, r5
 2f0:	0d c0       	rjmp	.+26     	; 0x30c <rprintf1RamRom+0x11a>
 2f2:	0f 2e       	mov	r0, r31
 2f4:	fa e0       	ldi	r31, 0x0A	; 10
 2f6:	2f 2e       	mov	r2, r31
 2f8:	f0 2d       	mov	r31, r0
 2fa:	35 2c       	mov	r3, r5
 2fc:	00 e1       	ldi	r16, 0x10	; 16
 2fe:	17 e2       	ldi	r17, 0x27	; 39
 300:	05 c0       	rjmp	.+10     	; 0x30c <rprintf1RamRom+0x11a>
 302:	0f 2e       	mov	r0, r31
 304:	fa e0       	ldi	r31, 0x0A	; 10
 306:	2f 2e       	mov	r2, r31
 308:	f0 2d       	mov	r31, r0
 30a:	35 2c       	mov	r3, r5
				while (div_val > 1 && div_val > u_val) div_val /= 10;
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
 30c:	c7 01       	movw	r24, r14
 30e:	b8 01       	movw	r22, r16
 310:	0e 94 57 05 	call	0xaae	; 0xaae <__udivmodhi4>
 314:	a8 2e       	mov	r10, r24
 316:	b9 2e       	mov	r11, r25
 318:	86 2f       	mov	r24, r22
 31a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <rprintfu04>
				u_val %= div_val;
 31e:	ea 2c       	mov	r14, r10
 320:	fb 2c       	mov	r15, r11
				div_val /= base;
 322:	c8 01       	movw	r24, r16
 324:	62 2d       	mov	r22, r2
 326:	73 2d       	mov	r23, r3
 328:	0e 94 57 05 	call	0xaae	; 0xaae <__udivmodhi4>
 32c:	8b 01       	movw	r16, r22
			} while (div_val);
 32e:	67 2b       	or	r22, r23
 330:	69 f7       	brne	.-38     	; 0x30c <rprintf1RamRom+0x11a>
 332:	84 cf       	rjmp	.-248    	; 0x23c <rprintf1RamRom+0x4a>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 334:	f4 01       	movw	r30, r8
 336:	e0 80       	ld	r14, Z
 338:	f1 80       	ldd	r15, Z+1	; 0x01
 33a:	94 01       	movw	r18, r8
 33c:	2e 5f       	subi	r18, 0xFE	; 254
 33e:	3f 4f       	sbci	r19, 0xFF	; 255
 340:	49 01       	movw	r8, r18
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 342:	68 94       	set
 344:	22 24       	eor	r2, r2
 346:	24 f8       	bld	r2, 4
 348:	36 2c       	mov	r3, r6
 34a:	04 2d       	mov	r16, r4
 34c:	10 e1       	ldi	r17, 0x10	; 16
 34e:	de cf       	rjmp	.-68     	; 0x30c <rprintf1RamRom+0x11a>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	ff 90       	pop	r15
 35e:	ef 90       	pop	r14
 360:	df 90       	pop	r13
 362:	cf 90       	pop	r12
 364:	bf 90       	pop	r11
 366:	af 90       	pop	r10
 368:	9f 90       	pop	r9
 36a:	8f 90       	pop	r8
 36c:	7f 90       	pop	r7
 36e:	6f 90       	pop	r6
 370:	5f 90       	pop	r5
 372:	4f 90       	pop	r4
 374:	3f 90       	pop	r3
 376:	2f 90       	pop	r2
 378:	08 95       	ret

0000037a <__vector_18>:
	OCR1B = pwmDuty;
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
 37a:	1f 92       	push	r1
 37c:	0f 92       	push	r0
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	0f 92       	push	r0
 382:	11 24       	eor	r1, r1
 384:	2f 93       	push	r18
 386:	3f 93       	push	r19
 388:	4f 93       	push	r20
 38a:	5f 93       	push	r21
 38c:	6f 93       	push	r22
 38e:	7f 93       	push	r23
 390:	8f 93       	push	r24
 392:	9f 93       	push	r25
 394:	af 93       	push	r26
 396:	bf 93       	push	r27
 398:	ef 93       	push	r30
 39a:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
 39c:	80 91 f2 00 	lds	r24, 0x00F2
 3a0:	90 91 f3 00 	lds	r25, 0x00F3
 3a4:	a0 91 f4 00 	lds	r26, 0x00F4
 3a8:	b0 91 f5 00 	lds	r27, 0x00F5
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	a1 1d       	adc	r26, r1
 3b0:	b1 1d       	adc	r27, r1
 3b2:	80 93 f2 00 	sts	0x00F2, r24
 3b6:	90 93 f3 00 	sts	0x00F3, r25
 3ba:	a0 93 f4 00 	sts	0x00F4, r26
 3be:	b0 93 f5 00 	sts	0x00F5, r27

	// increment pause counter
	TimerPauseReg++;
 3c2:	80 91 f6 00 	lds	r24, 0x00F6
 3c6:	90 91 f7 00 	lds	r25, 0x00F7
 3ca:	a0 91 f8 00 	lds	r26, 0x00F8
 3ce:	b0 91 f9 00 	lds	r27, 0x00F9
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	a1 1d       	adc	r26, r1
 3d6:	b1 1d       	adc	r27, r1
 3d8:	80 93 f6 00 	sts	0x00F6, r24
 3dc:	90 93 f7 00 	sts	0x00F7, r25
 3e0:	a0 93 f8 00 	sts	0x00F8, r26
 3e4:	b0 93 f9 00 	sts	0x00F9, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
 3e8:	80 91 62 00 	lds	r24, 0x0062
 3ec:	90 91 63 00 	lds	r25, 0x0063
 3f0:	89 2b       	or	r24, r25
 3f2:	29 f0       	breq	.+10     	; 0x3fe <__vector_18+0x84>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
 3f4:	e0 91 62 00 	lds	r30, 0x0062
 3f8:	f0 91 63 00 	lds	r31, 0x0063
 3fc:	09 95       	icall
}
 3fe:	ff 91       	pop	r31
 400:	ef 91       	pop	r30
 402:	bf 91       	pop	r27
 404:	af 91       	pop	r26
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	7f 91       	pop	r23
 40c:	6f 91       	pop	r22
 40e:	5f 91       	pop	r21
 410:	4f 91       	pop	r20
 412:	3f 91       	pop	r19
 414:	2f 91       	pop	r18
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <__vector_15>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
 420:	1f 92       	push	r1
 422:	0f 92       	push	r0
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	0f 92       	push	r0
 428:	11 24       	eor	r1, r1
 42a:	2f 93       	push	r18
 42c:	3f 93       	push	r19
 42e:	4f 93       	push	r20
 430:	5f 93       	push	r21
 432:	6f 93       	push	r22
 434:	7f 93       	push	r23
 436:	8f 93       	push	r24
 438:	9f 93       	push	r25
 43a:	af 93       	push	r26
 43c:	bf 93       	push	r27
 43e:	ef 93       	push	r30
 440:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
 442:	80 91 64 00 	lds	r24, 0x0064
 446:	90 91 65 00 	lds	r25, 0x0065
 44a:	89 2b       	or	r24, r25
 44c:	29 f0       	breq	.+10     	; 0x458 <__vector_15+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
 44e:	e0 91 64 00 	lds	r30, 0x0064
 452:	f0 91 65 00 	lds	r31, 0x0065
 456:	09 95       	icall
}
 458:	ff 91       	pop	r31
 45a:	ef 91       	pop	r30
 45c:	bf 91       	pop	r27
 45e:	af 91       	pop	r26
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	7f 91       	pop	r23
 466:	6f 91       	pop	r22
 468:	5f 91       	pop	r21
 46a:	4f 91       	pop	r20
 46c:	3f 91       	pop	r19
 46e:	2f 91       	pop	r18
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

0000047a <__vector_11>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
 47a:	1f 92       	push	r1
 47c:	0f 92       	push	r0
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	0f 92       	push	r0
 482:	11 24       	eor	r1, r1
 484:	2f 93       	push	r18
 486:	3f 93       	push	r19
 488:	4f 93       	push	r20
 48a:	5f 93       	push	r21
 48c:	6f 93       	push	r22
 48e:	7f 93       	push	r23
 490:	8f 93       	push	r24
 492:	9f 93       	push	r25
 494:	af 93       	push	r26
 496:	bf 93       	push	r27
 498:	ef 93       	push	r30
 49a:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
 49c:	80 91 fa 00 	lds	r24, 0x00FA
 4a0:	90 91 fb 00 	lds	r25, 0x00FB
 4a4:	a0 91 fc 00 	lds	r26, 0x00FC
 4a8:	b0 91 fd 00 	lds	r27, 0x00FD
 4ac:	01 96       	adiw	r24, 0x01	; 1
 4ae:	a1 1d       	adc	r26, r1
 4b0:	b1 1d       	adc	r27, r1
 4b2:	80 93 fa 00 	sts	0x00FA, r24
 4b6:	90 93 fb 00 	sts	0x00FB, r25
 4ba:	a0 93 fc 00 	sts	0x00FC, r26
 4be:	b0 93 fd 00 	sts	0x00FD, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
 4c2:	80 91 6c 00 	lds	r24, 0x006C
 4c6:	90 91 6d 00 	lds	r25, 0x006D
 4ca:	89 2b       	or	r24, r25
 4cc:	29 f0       	breq	.+10     	; 0x4d8 <__vector_11+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
 4ce:	e0 91 6c 00 	lds	r30, 0x006C
 4d2:	f0 91 6d 00 	lds	r31, 0x006D
 4d6:	09 95       	icall
}
 4d8:	ff 91       	pop	r31
 4da:	ef 91       	pop	r30
 4dc:	bf 91       	pop	r27
 4de:	af 91       	pop	r26
 4e0:	9f 91       	pop	r25
 4e2:	8f 91       	pop	r24
 4e4:	7f 91       	pop	r23
 4e6:	6f 91       	pop	r22
 4e8:	5f 91       	pop	r21
 4ea:	4f 91       	pop	r20
 4ec:	3f 91       	pop	r19
 4ee:	2f 91       	pop	r18
 4f0:	0f 90       	pop	r0
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	0f 90       	pop	r0
 4f6:	1f 90       	pop	r1
 4f8:	18 95       	reti

000004fa <__vector_13>:
}
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
 4fa:	1f 92       	push	r1
 4fc:	0f 92       	push	r0
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	0f 92       	push	r0
 502:	11 24       	eor	r1, r1
 504:	2f 93       	push	r18
 506:	3f 93       	push	r19
 508:	4f 93       	push	r20
 50a:	5f 93       	push	r21
 50c:	6f 93       	push	r22
 50e:	7f 93       	push	r23
 510:	8f 93       	push	r24
 512:	9f 93       	push	r25
 514:	af 93       	push	r26
 516:	bf 93       	push	r27
 518:	ef 93       	push	r30
 51a:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
 51c:	80 91 66 00 	lds	r24, 0x0066
 520:	90 91 67 00 	lds	r25, 0x0067
 524:	89 2b       	or	r24, r25
 526:	29 f0       	breq	.+10     	; 0x532 <__vector_13+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
 528:	e0 91 66 00 	lds	r30, 0x0066
 52c:	f0 91 67 00 	lds	r31, 0x0067
 530:	09 95       	icall
}
 532:	ff 91       	pop	r31
 534:	ef 91       	pop	r30
 536:	bf 91       	pop	r27
 538:	af 91       	pop	r26
 53a:	9f 91       	pop	r25
 53c:	8f 91       	pop	r24
 53e:	7f 91       	pop	r23
 540:	6f 91       	pop	r22
 542:	5f 91       	pop	r21
 544:	4f 91       	pop	r20
 546:	3f 91       	pop	r19
 548:	2f 91       	pop	r18
 54a:	0f 90       	pop	r0
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	0f 90       	pop	r0
 550:	1f 90       	pop	r1
 552:	18 95       	reti

00000554 <__vector_14>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
 554:	1f 92       	push	r1
 556:	0f 92       	push	r0
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	0f 92       	push	r0
 55c:	11 24       	eor	r1, r1
 55e:	2f 93       	push	r18
 560:	3f 93       	push	r19
 562:	4f 93       	push	r20
 564:	5f 93       	push	r21
 566:	6f 93       	push	r22
 568:	7f 93       	push	r23
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
 56e:	af 93       	push	r26
 570:	bf 93       	push	r27
 572:	ef 93       	push	r30
 574:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
 576:	80 91 68 00 	lds	r24, 0x0068
 57a:	90 91 69 00 	lds	r25, 0x0069
 57e:	89 2b       	or	r24, r25
 580:	29 f0       	breq	.+10     	; 0x58c <__vector_14+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
 582:	e0 91 68 00 	lds	r30, 0x0068
 586:	f0 91 69 00 	lds	r31, 0x0069
 58a:	09 95       	icall
}
 58c:	ff 91       	pop	r31
 58e:	ef 91       	pop	r30
 590:	bf 91       	pop	r27
 592:	af 91       	pop	r26
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	7f 91       	pop	r23
 59a:	6f 91       	pop	r22
 59c:	5f 91       	pop	r21
 59e:	4f 91       	pop	r20
 5a0:	3f 91       	pop	r19
 5a2:	2f 91       	pop	r18
 5a4:	0f 90       	pop	r0
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	0f 90       	pop	r0
 5aa:	1f 90       	pop	r1
 5ac:	18 95       	reti

000005ae <__vector_12>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
 5ae:	1f 92       	push	r1
 5b0:	0f 92       	push	r0
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	0f 92       	push	r0
 5b6:	11 24       	eor	r1, r1
 5b8:	2f 93       	push	r18
 5ba:	3f 93       	push	r19
 5bc:	4f 93       	push	r20
 5be:	5f 93       	push	r21
 5c0:	6f 93       	push	r22
 5c2:	7f 93       	push	r23
 5c4:	8f 93       	push	r24
 5c6:	9f 93       	push	r25
 5c8:	af 93       	push	r26
 5ca:	bf 93       	push	r27
 5cc:	ef 93       	push	r30
 5ce:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
 5d0:	80 91 6a 00 	lds	r24, 0x006A
 5d4:	90 91 6b 00 	lds	r25, 0x006B
 5d8:	89 2b       	or	r24, r25
 5da:	29 f0       	breq	.+10     	; 0x5e6 <__vector_12+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
 5dc:	e0 91 6a 00 	lds	r30, 0x006A
 5e0:	f0 91 6b 00 	lds	r31, 0x006B
 5e4:	09 95       	icall
}
 5e6:	ff 91       	pop	r31
 5e8:	ef 91       	pop	r30
 5ea:	bf 91       	pop	r27
 5ec:	af 91       	pop	r26
 5ee:	9f 91       	pop	r25
 5f0:	8f 91       	pop	r24
 5f2:	7f 91       	pop	r23
 5f4:	6f 91       	pop	r22
 5f6:	5f 91       	pop	r21
 5f8:	4f 91       	pop	r20
 5fa:	3f 91       	pop	r19
 5fc:	2f 91       	pop	r18
 5fe:	0f 90       	pop	r0
 600:	0f be       	out	0x3f, r0	; 63
 602:	0f 90       	pop	r0
 604:	1f 90       	pop	r1
 606:	18 95       	reti

00000608 <__vector_9>:

//! Interrupt handler for OutputCompare2A match (OC2A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMPA_vect)
{
 608:	1f 92       	push	r1
 60a:	0f 92       	push	r0
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	0f 92       	push	r0
 610:	11 24       	eor	r1, r1
 612:	2f 93       	push	r18
 614:	3f 93       	push	r19
 616:	4f 93       	push	r20
 618:	5f 93       	push	r21
 61a:	6f 93       	push	r22
 61c:	7f 93       	push	r23
 61e:	8f 93       	push	r24
 620:	9f 93       	push	r25
 622:	af 93       	push	r26
 624:	bf 93       	push	r27
 626:	ef 93       	push	r30
 628:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
 62a:	80 91 6e 00 	lds	r24, 0x006E
 62e:	90 91 6f 00 	lds	r25, 0x006F
 632:	89 2b       	or	r24, r25
 634:	29 f0       	breq	.+10     	; 0x640 <__vector_9+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
 636:	e0 91 6e 00 	lds	r30, 0x006E
 63a:	f0 91 6f 00 	lds	r31, 0x006F
 63e:	09 95       	icall
}
 640:	ff 91       	pop	r31
 642:	ef 91       	pop	r30
 644:	bf 91       	pop	r27
 646:	af 91       	pop	r26
 648:	9f 91       	pop	r25
 64a:	8f 91       	pop	r24
 64c:	7f 91       	pop	r23
 64e:	6f 91       	pop	r22
 650:	5f 91       	pop	r21
 652:	4f 91       	pop	r20
 654:	3f 91       	pop	r19
 656:	2f 91       	pop	r18
 658:	0f 90       	pop	r0
 65a:	0f be       	out	0x3f, r0	; 63
 65c:	0f 90       	pop	r0
 65e:	1f 90       	pop	r1
 660:	18 95       	reti

00000662 <__vector_10>:

//! Interrupt handler for OutputCompare2B match (OC2B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMPB_vect)
{
 662:	1f 92       	push	r1
 664:	0f 92       	push	r0
 666:	0f b6       	in	r0, 0x3f	; 63
 668:	0f 92       	push	r0
 66a:	11 24       	eor	r1, r1
 66c:	2f 93       	push	r18
 66e:	3f 93       	push	r19
 670:	4f 93       	push	r20
 672:	5f 93       	push	r21
 674:	6f 93       	push	r22
 676:	7f 93       	push	r23
 678:	8f 93       	push	r24
 67a:	9f 93       	push	r25
 67c:	af 93       	push	r26
 67e:	bf 93       	push	r27
 680:	ef 93       	push	r30
 682:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
 684:	80 91 6e 00 	lds	r24, 0x006E
 688:	90 91 6f 00 	lds	r25, 0x006F
 68c:	89 2b       	or	r24, r25
 68e:	29 f0       	breq	.+10     	; 0x69a <__vector_10+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
 690:	e0 91 6e 00 	lds	r30, 0x006E
 694:	f0 91 6f 00 	lds	r31, 0x006F
 698:	09 95       	icall
}
 69a:	ff 91       	pop	r31
 69c:	ef 91       	pop	r30
 69e:	bf 91       	pop	r27
 6a0:	af 91       	pop	r26
 6a2:	9f 91       	pop	r25
 6a4:	8f 91       	pop	r24
 6a6:	7f 91       	pop	r23
 6a8:	6f 91       	pop	r22
 6aa:	5f 91       	pop	r21
 6ac:	4f 91       	pop	r20
 6ae:	3f 91       	pop	r19
 6b0:	2f 91       	pop	r18
 6b2:	0f 90       	pop	r0
 6b4:	0f be       	out	0x3f, r0	; 63
 6b6:	0f 90       	pop	r0
 6b8:	1f 90       	pop	r1
 6ba:	18 95       	reti

000006bc <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (unsigned char *)uartRxData, UART_RX_BUFFER_SIZE);
 6bc:	40 e4       	ldi	r20, 0x40	; 64
 6be:	50 e0       	ldi	r21, 0x00	; 0
 6c0:	62 eb       	ldi	r22, 0xB2	; 178
 6c2:	70 e0       	ldi	r23, 0x00	; 0
 6c4:	8f ef       	ldi	r24, 0xFF	; 255
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	0e 94 78 00 	call	0xf0	; 0xf0 <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (unsigned char *)uartTxData, UART_TX_BUFFER_SIZE);
 6cc:	40 e4       	ldi	r20, 0x40	; 64
 6ce:	50 e0       	ldi	r21, 0x00	; 0
 6d0:	62 e7       	ldi	r22, 0x72	; 114
 6d2:	70 e0       	ldi	r23, 0x00	; 0
 6d4:	88 e0       	ldi	r24, 0x08	; 8
 6d6:	91 e0       	ldi	r25, 0x01	; 1
 6d8:	0e 94 78 00 	call	0xf0	; 0xf0 <bufferInit>
 6dc:	08 95       	ret

000006de <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
 6de:	0e 94 5e 03 	call	0x6bc	; 0x6bc <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
 6e2:	10 92 71 00 	sts	0x0071, r1
 6e6:	10 92 70 00 	sts	0x0070, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
 6ea:	88 ed       	ldi	r24, 0xD8	; 216
 6ec:	80 93 c1 00 	sts	0x00C1, r24
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
 6f0:	83 e3       	ldi	r24, 0x33	; 51
 6f2:	80 93 c4 00 	sts	0x00C4, r24
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 6f6:	10 92 c5 00 	sts	0x00C5, r1
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
 6fa:	8f ef       	ldi	r24, 0xFF	; 255
 6fc:	80 93 fe 00 	sts	0x00FE, r24
	uartBufferedTx = FALSE;
 700:	10 92 07 01 	sts	0x0107, r1
	// clear overflow count
	uartRxOverflow = 0;
 704:	10 92 11 01 	sts	0x0111, r1
 708:	10 92 10 01 	sts	0x0110, r1
	// enable interrupts
	sei();
 70c:	78 94       	sei
 70e:	08 95       	ret

00000710 <uartSetBaudRate>:
	UartRxFunc = rx_func;
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
 710:	0f 93       	push	r16
 712:	1f 93       	push	r17
 714:	8b 01       	movw	r16, r22
 716:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
 718:	dc 01       	movw	r26, r24
 71a:	cb 01       	movw	r24, r22
 71c:	80 5c       	subi	r24, 0xC0	; 192
 71e:	9d 4b       	sbci	r25, 0xBD	; 189
 720:	a0 4f       	sbci	r26, 0xF0	; 240
 722:	bf 4f       	sbci	r27, 0xFF	; 255
 724:	88 0f       	add	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	aa 1f       	adc	r26, r26
 72a:	bb 1f       	adc	r27, r27
 72c:	88 0f       	add	r24, r24
 72e:	99 1f       	adc	r25, r25
 730:	aa 1f       	adc	r26, r26
 732:	bb 1f       	adc	r27, r27
 734:	bc 01       	movw	r22, r24
 736:	cd 01       	movw	r24, r26
 738:	66 0f       	add	r22, r22
 73a:	77 1f       	adc	r23, r23
 73c:	88 1f       	adc	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	00 0f       	add	r16, r16
 742:	11 1f       	adc	r17, r17
 744:	22 1f       	adc	r18, r18
 746:	33 1f       	adc	r19, r19
 748:	00 0f       	add	r16, r16
 74a:	11 1f       	adc	r17, r17
 74c:	22 1f       	adc	r18, r18
 74e:	33 1f       	adc	r19, r19
 750:	a9 01       	movw	r20, r18
 752:	98 01       	movw	r18, r16
 754:	22 0f       	add	r18, r18
 756:	33 1f       	adc	r19, r19
 758:	44 1f       	adc	r20, r20
 75a:	55 1f       	adc	r21, r21
 75c:	22 0f       	add	r18, r18
 75e:	33 1f       	adc	r19, r19
 760:	44 1f       	adc	r20, r20
 762:	55 1f       	adc	r21, r21
 764:	0e 94 6b 05 	call	0xad6	; 0xad6 <__udivmodsi4>
 768:	21 50       	subi	r18, 0x01	; 1
 76a:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
 76c:	20 93 c4 00 	sts	0x00C4, r18
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 770:	30 93 c5 00 	sts	0x00C5, r19
	#endif
}
 774:	1f 91       	pop	r17
 776:	0f 91       	pop	r16
 778:	08 95       	ret

0000077a <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
 77a:	90 91 fe 00 	lds	r25, 0x00FE
 77e:	99 23       	and	r25, r25
 780:	e1 f3       	breq	.-8      	; 0x77a <uartSendByte>
	// send byte
	outb(UDR, txData);
 782:	80 93 c6 00 	sts	0x00C6, r24
	// set ready state to FALSE
	uartReadyTx = FALSE;
 786:	10 92 fe 00 	sts	0x00FE, r1
 78a:	08 95       	ret

0000078c <__vector_20>:
	}
}

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_RECV)
{
 78c:	1f 92       	push	r1
 78e:	0f 92       	push	r0
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	0f 92       	push	r0
 794:	11 24       	eor	r1, r1
 796:	2f 93       	push	r18
 798:	3f 93       	push	r19
 79a:	4f 93       	push	r20
 79c:	5f 93       	push	r21
 79e:	6f 93       	push	r22
 7a0:	7f 93       	push	r23
 7a2:	8f 93       	push	r24
 7a4:	9f 93       	push	r25
 7a6:	af 93       	push	r26
 7a8:	bf 93       	push	r27
 7aa:	ef 93       	push	r30
 7ac:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
 7ae:	80 91 c6 00 	lds	r24, 0x00C6

	// if there's a user function to handle this receive event
	if(UartRxFunc)
 7b2:	20 91 70 00 	lds	r18, 0x0070
 7b6:	30 91 71 00 	lds	r19, 0x0071
 7ba:	23 2b       	or	r18, r19
 7bc:	31 f0       	breq	.+12     	; 0x7ca <__vector_20+0x3e>
	{
		// call it and pass the received data
		UartRxFunc(c);
 7be:	e0 91 70 00 	lds	r30, 0x0070
 7c2:	f0 91 71 00 	lds	r31, 0x0071
 7c6:	09 95       	icall
 7c8:	10 c0       	rjmp	.+32     	; 0x7ea <__vector_20+0x5e>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
 7ca:	68 2f       	mov	r22, r24
 7cc:	8f ef       	ldi	r24, 0xFF	; 255
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	0e 94 a9 00 	call	0x152	; 0x152 <bufferAddToEnd>
 7d4:	81 11       	cpse	r24, r1
 7d6:	09 c0       	rjmp	.+18     	; 0x7ea <__vector_20+0x5e>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
 7d8:	80 91 10 01 	lds	r24, 0x0110
 7dc:	90 91 11 01 	lds	r25, 0x0111
 7e0:	01 96       	adiw	r24, 0x01	; 1
 7e2:	90 93 11 01 	sts	0x0111, r25
 7e6:	80 93 10 01 	sts	0x0110, r24
		}
	}
}
 7ea:	ff 91       	pop	r31
 7ec:	ef 91       	pop	r30
 7ee:	bf 91       	pop	r27
 7f0:	af 91       	pop	r26
 7f2:	9f 91       	pop	r25
 7f4:	8f 91       	pop	r24
 7f6:	7f 91       	pop	r23
 7f8:	6f 91       	pop	r22
 7fa:	5f 91       	pop	r21
 7fc:	4f 91       	pop	r20
 7fe:	3f 91       	pop	r19
 800:	2f 91       	pop	r18
 802:	0f 90       	pop	r0
 804:	0f be       	out	0x3f, r0	; 63
 806:	0f 90       	pop	r0
 808:	1f 90       	pop	r1
 80a:	18 95       	reti

0000080c <McuInit>:

void McuInit(void)
{
	// initialize our libraries
	// initialize the UART (serial port)
	uartInit();		/* sei() call in the function */
 80c:	0e 94 6f 03 	call	0x6de	; 0x6de <uartInit>
	// set the baud rate of the UART for our debug/reporting output
	uartSetBaudRate(9600);
 810:	60 e8       	ldi	r22, 0x80	; 128
 812:	75 e2       	ldi	r23, 0x25	; 37
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	0e 94 88 03 	call	0x710	; 0x710 <uartSetBaudRate>
	// initialize rprintf system
	rprintfInit(uartSendByte);
 81c:	8d eb       	ldi	r24, 0xBD	; 189
 81e:	93 e0       	ldi	r25, 0x03	; 3
 820:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <rprintfInit>
 824:	08 95       	ret

00000826 <ApplInit>:
*********************************************************************************************************
*/

void ApplInit(void)
{
	ButtonInit();
 826:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <ButtonInit>
	
	//glcdInit();	/* Need connect to LCD device because MCU will check lcd busy or not will cause waiting */
	
	//glcdPutStr(&greeting[0]);
	// Just print message for debug.
	rprintf("RF remote start!\n" );	
 82a:	86 eb       	ldi	r24, 0xB6	; 182
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	9f 93       	push	r25
 830:	8f 93       	push	r24
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	8f 93       	push	r24
 836:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <rprintf1RamRom>
 83a:	0f 90       	pop	r0
 83c:	0f 90       	pop	r0
 83e:	0f 90       	pop	r0
 840:	08 95       	ret

00000842 <AppCycleUpdate>:
*
* Returns    : none
*********************************************************************************************************
*/
void AppCycleUpdate(void)
{	
 842:	cf 93       	push	r28
 844:	df 93       	push	r29
	char tempChar;
	//if(button.buttonsReleased.bVal) rprintf("rl=%x\n", button.buttonsReleased.bVal);
	if(button.buttonsReleased.bVal) 
 846:	80 91 18 01 	lds	r24, 0x0118
 84a:	88 23       	and	r24, r24
 84c:	09 f4       	brne	.+2      	; 0x850 <AppCycleUpdate+0xe>
 84e:	89 c0       	rjmp	.+274    	; 0x962 <AppCycleUpdate+0x120>
	{
		rprintf("rl=%x\n", button.buttonsReleased.bVal);
 850:	1f 92       	push	r1
 852:	8f 93       	push	r24
 854:	8f ea       	ldi	r24, 0xAF	; 175
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	9f 93       	push	r25
 85a:	8f 93       	push	r24
 85c:	c1 e0       	ldi	r28, 0x01	; 1
 85e:	cf 93       	push	r28
 860:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <rprintf1RamRom>
		rprintf("rh=%x\n", button.buttonsReleased.bVal>>16);
 864:	80 91 18 01 	lds	r24, 0x0118
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	99 0f       	add	r25, r25
 86c:	88 0b       	sbc	r24, r24
 86e:	98 2f       	mov	r25, r24
 870:	9f 93       	push	r25
 872:	8f 93       	push	r24
 874:	88 ea       	ldi	r24, 0xA8	; 168
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	9f 93       	push	r25
 87a:	8f 93       	push	r24
 87c:	cf 93       	push	r28
 87e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <rprintf1RamRom>
		
		if(button.buttonsReleased.PBtn13)
 882:	80 91 19 01 	lds	r24, 0x0119
 886:	2d b7       	in	r18, 0x3d	; 61
 888:	3e b7       	in	r19, 0x3e	; 62
 88a:	26 5f       	subi	r18, 0xF6	; 246
 88c:	3f 4f       	sbci	r19, 0xFF	; 255
 88e:	0f b6       	in	r0, 0x3f	; 63
 890:	f8 94       	cli
 892:	3e bf       	out	0x3e, r19	; 62
 894:	0f be       	out	0x3f, r0	; 63
 896:	2d bf       	out	0x3d, r18	; 61
 898:	84 ff       	sbrs	r24, 4
 89a:	0c c0       	rjmp	.+24     	; 0x8b4 <AppCycleUpdate+0x72>
		{
			//glcdSetAddress(0,0);
			char greeting[] = "PBtn13,Hello World!";
			//glcdPutStr(&greeting[0]);
			rprintf("PBtn13\n");
 89c:	80 ea       	ldi	r24, 0xA0	; 160
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	9f 93       	push	r25
 8a2:	8f 93       	push	r24
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	8f 93       	push	r24
 8a8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <rprintf1RamRom>
 8ac:	0f 90       	pop	r0
 8ae:	0f 90       	pop	r0
 8b0:	0f 90       	pop	r0
 8b2:	57 c0       	rjmp	.+174    	; 0x962 <AppCycleUpdate+0x120>
		}
		else if(button.buttonsReleased.PBtn14)
 8b4:	80 ff       	sbrs	r24, 0
 8b6:	0c c0       	rjmp	.+24     	; 0x8d0 <AppCycleUpdate+0x8e>
		{
			//glcdSetAddress(0,1);
			char greeting[] = "PBtn14,Hello World!";
			//glcdPutStr(&greeting[0]);
			rprintf("PBtn14\n");
 8b8:	88 e9       	ldi	r24, 0x98	; 152
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	9f 93       	push	r25
 8be:	8f 93       	push	r24
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	8f 93       	push	r24
 8c4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <rprintf1RamRom>
 8c8:	0f 90       	pop	r0
 8ca:	0f 90       	pop	r0
 8cc:	0f 90       	pop	r0
 8ce:	49 c0       	rjmp	.+146    	; 0x962 <AppCycleUpdate+0x120>
		}
		else if(button.buttonsReleased.PBtn15)
 8d0:	90 91 18 01 	lds	r25, 0x0118
 8d4:	94 ff       	sbrs	r25, 4
 8d6:	0c c0       	rjmp	.+24     	; 0x8f0 <AppCycleUpdate+0xae>
		{
			//glcdSetAddress(0,2);
			char greeting[] = "PBtn15,Hello World!";
			//glcdPutStr(&greeting[0]);
			rprintf("PBtn15\n");
 8d8:	80 e9       	ldi	r24, 0x90	; 144
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	9f 93       	push	r25
 8de:	8f 93       	push	r24
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	8f 93       	push	r24
 8e4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <rprintf1RamRom>
 8e8:	0f 90       	pop	r0
 8ea:	0f 90       	pop	r0
 8ec:	0f 90       	pop	r0
 8ee:	39 c0       	rjmp	.+114    	; 0x962 <AppCycleUpdate+0x120>
		}
		else if(button.buttonsReleased.PBtn1)
 8f0:	88 23       	and	r24, r24
 8f2:	64 f4       	brge	.+24     	; 0x90c <AppCycleUpdate+0xca>
		{
			//glcdSetAddress(0,3);
			char greeting[] = "PBtn1,Hello World!";
			//glcdPutStr(&greeting[0]);
			rprintf("PBtn1\n");
 8f4:	89 e8       	ldi	r24, 0x89	; 137
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	9f 93       	push	r25
 8fa:	8f 93       	push	r24
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	8f 93       	push	r24
 900:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <rprintf1RamRom>
 904:	0f 90       	pop	r0
 906:	0f 90       	pop	r0
 908:	0f 90       	pop	r0
 90a:	2b c0       	rjmp	.+86     	; 0x962 <AppCycleUpdate+0x120>
		}
		else if(button.buttonsReleased.PBtn5)
 90c:	86 ff       	sbrs	r24, 6
 90e:	0c c0       	rjmp	.+24     	; 0x928 <AppCycleUpdate+0xe6>
		{
			//glcdSetAddress(0,4);
			char greeting[] = "PBtn5,Hello World!";
			//glcdPutStr(&greeting[0]);
			rprintf("PBtn5\n");
 910:	82 e8       	ldi	r24, 0x82	; 130
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	9f 93       	push	r25
 916:	8f 93       	push	r24
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	8f 93       	push	r24
 91c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <rprintf1RamRom>
 920:	0f 90       	pop	r0
 922:	0f 90       	pop	r0
 924:	0f 90       	pop	r0
 926:	1d c0       	rjmp	.+58     	; 0x962 <AppCycleUpdate+0x120>
		}
		else if(button.buttonsReleased.PBtn9)
 928:	85 ff       	sbrs	r24, 5
 92a:	0c c0       	rjmp	.+24     	; 0x944 <AppCycleUpdate+0x102>
		{
			//glcdSetAddress(0,5);
			char greeting[] = "PBtn9,Hello World!";
			//glcdPutStr(&greeting[0]);
			rprintf("PBtn9\n");
 92c:	8b e7       	ldi	r24, 0x7B	; 123
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	9f 93       	push	r25
 932:	8f 93       	push	r24
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	8f 93       	push	r24
 938:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <rprintf1RamRom>
 93c:	0f 90       	pop	r0
 93e:	0f 90       	pop	r0
 940:	0f 90       	pop	r0
 942:	0f c0       	rjmp	.+30     	; 0x962 <AppCycleUpdate+0x120>
		}
		else if(button.buttonsReleased.PBtn18)
 944:	80 91 1a 01 	lds	r24, 0x011A
 948:	82 ff       	sbrs	r24, 2
 94a:	0b c0       	rjmp	.+22     	; 0x962 <AppCycleUpdate+0x120>
		{
			//glcdSetAddress(0,1);
			//glcdClearScreen();
			rprintf("PBtn18,Clear Home\n");
 94c:	88 e6       	ldi	r24, 0x68	; 104
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	9f 93       	push	r25
 952:	8f 93       	push	r24
 954:	81 e0       	ldi	r24, 0x01	; 1
 956:	8f 93       	push	r24
 958:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <rprintf1RamRom>
 95c:	0f 90       	pop	r0
 95e:	0f 90       	pop	r0
 960:	0f 90       	pop	r0
		}
	}

	if(uartRxBuffer.size - bufferIsNotFull(&uartRxBuffer) != 0)
 962:	c0 91 01 01 	lds	r28, 0x0101
 966:	d0 91 02 01 	lds	r29, 0x0102
 96a:	8f ef       	ldi	r24, 0xFF	; 255
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	0e 94 ce 00 	call	0x19c	; 0x19c <bufferIsNotFull>
 972:	c8 17       	cp	r28, r24
 974:	d9 07       	cpc	r29, r25
 976:	99 f0       	breq	.+38     	; 0x99e <AppCycleUpdate+0x15c>
	{
		tempChar = bufferGetFromFront(&uartRxBuffer);
 978:	8f ef       	ldi	r24, 0xFF	; 255
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	0e 94 85 00 	call	0x10a	; 0x10a <bufferGetFromFront>
		//rprintf("char=%c\n",tempChar);
		rprintf("%c",tempChar);
 980:	1f 92       	push	r1
 982:	8f 93       	push	r24
 984:	85 e6       	ldi	r24, 0x65	; 101
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	9f 93       	push	r25
 98a:	8f 93       	push	r24
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	8f 93       	push	r24
 990:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <rprintf1RamRom>
 994:	0f 90       	pop	r0
 996:	0f 90       	pop	r0
 998:	0f 90       	pop	r0
 99a:	0f 90       	pop	r0
 99c:	0f 90       	pop	r0
	}
	//rprintf("D=%d\n",uartRxBuffer.datalength);

	//rprintfChar('a');
	//glcdWriteChar(cnt++/2);
}
 99e:	df 91       	pop	r29
 9a0:	cf 91       	pop	r28
 9a2:	08 95       	ret

000009a4 <main>:
int main(void)
{	
	/*
	Calll all initial function
	*/
	McuInit();
 9a4:	0e 94 06 04 	call	0x80c	; 0x80c <McuInit>
	ApplInit();
 9a8:	0e 94 13 04 	call	0x826	; 0x826 <ApplInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9ac:	8f e3       	ldi	r24, 0x3F	; 63
 9ae:	9c e9       	ldi	r25, 0x9C	; 156
 9b0:	01 97       	sbiw	r24, 0x01	; 1
 9b2:	f1 f7       	brne	.-4      	; 0x9b0 <main+0xc>
 9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <main+0x12>
 9b6:	00 00       	nop
	
	while(1)
	{
		_delay_ms(20);
		ButtonCycleUpdate();
 9b8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <ButtonCycleUpdate>
		AppCycleUpdate();
 9bc:	0e 94 21 04 	call	0x842	; 0x842 <AppCycleUpdate>
	}
 9c0:	f5 cf       	rjmp	.-22     	; 0x9ac <main+0x8>

000009c2 <ButtonInit>:
*********************************************************************************************************
*/

void ButtonInit(void)
{
	DDRD  &= ~((1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3));	/* Set PD6-PD3 as input */
 9c2:	8a b1       	in	r24, 0x0a	; 10
 9c4:	87 78       	andi	r24, 0x87	; 135
 9c6:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PD6) | (1<<PD5) | (1<<PD4) | (1<<PD3);			/* Set PD6-PD3 as internal pull up */
 9c8:	8b b1       	in	r24, 0x0b	; 11
 9ca:	88 67       	ori	r24, 0x78	; 120
 9cc:	8b b9       	out	0x0b, r24	; 11
	
	/* 
	Set PC7-PC4 as input as internal pull up
	Set PC3-PC0 as Tri-state (Hi-Z) 
	*/
	DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 9ce:	17 b8       	out	0x07, r1	; 7
	PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 9d0:	80 ef       	ldi	r24, 0xF0	; 240
 9d2:	88 b9       	out	0x08, r24	; 8
 9d4:	08 95       	ret

000009d6 <ButtonCycleUpdate>:
	ButtonDataType io_state = 0;
	ButtonDataType tempValue;
	ButtonDataType MatrixButtonValue;
	uint8_t Col;
	
	tempValue = (~PIND) & ((1<<PIND6) | (1<<PIND5) | (1<<PIND4) | (1<<PIND3));	/* Get PD6-PD3 IO state */
 9d6:	89 b1       	in	r24, 0x09	; 9
 9d8:	40 e0       	ldi	r20, 0x00	; 0
 9da:	50 e0       	ldi	r21, 0x00	; 0
	tempValue >>= 3;	/* right rotate to low 4 bits location */
	
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
 9dc:	20 e0       	ldi	r18, 0x00	; 0
		/* 
		Set PC7-PC4 as input as internal pull up
		Set PC3-PC0 as Tri-state (Hi-Z)
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 9de:	e0 ef       	ldi	r30, 0xF0	; 240
	
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
 9e0:	68 e0       	ldi	r22, 0x08	; 8
 9e2:	70 e0       	ldi	r23, 0x00	; 0
	{
		/* 
		Set PC7-PC4 as input as internal pull up
		Set PC3-PC0 as Tri-state (Hi-Z)
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 9e4:	17 b8       	out	0x07, r1	; 7
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 9e6:	e8 b9       	out	0x08, r30	; 8
	
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
 9e8:	37 b1       	in	r19, 0x07	; 7
 9ea:	cb 01       	movw	r24, r22
 9ec:	04 2e       	mov	r0, r20
 9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <ButtonCycleUpdate+0x1e>
 9f0:	95 95       	asr	r25
 9f2:	87 95       	ror	r24
 9f4:	0a 94       	dec	r0
 9f6:	e2 f7       	brpl	.-8      	; 0x9f0 <ButtonCycleUpdate+0x1a>
 9f8:	93 2f       	mov	r25, r19
 9fa:	98 2b       	or	r25, r24
 9fc:	97 b9       	out	0x07, r25	; 7
		PORTC &= ~(0x08>>Col);		/* Set the column as low */
 9fe:	98 b1       	in	r25, 0x08	; 8
 a00:	80 95       	com	r24
 a02:	89 23       	and	r24, r25
 a04:	88 b9       	out	0x08, r24	; 8
		
		/* read and save button state after the column which active as low */
		MatrixButtonValue <<= 4;	/* newer 4 button state store in lower four bits */
		MatrixButtonValue |= ((~PINC) & 0x00f0) >> 4;
 a06:	86 b1       	in	r24, 0x06	; 6
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	80 95       	com	r24
 a0c:	90 95       	com	r25
 a0e:	80 7f       	andi	r24, 0xF0	; 240
 a10:	99 27       	eor	r25, r25
 a12:	95 95       	asr	r25
 a14:	87 95       	ror	r24
 a16:	95 95       	asr	r25
 a18:	87 95       	ror	r24
 a1a:	95 95       	asr	r25
 a1c:	87 95       	ror	r24
 a1e:	95 95       	asr	r25
 a20:	87 95       	ror	r24
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
		PORTC &= ~(0x08>>Col);		/* Set the column as low */
		
		/* read and save button state after the column which active as low */
		MatrixButtonValue <<= 4;	/* newer 4 button state store in lower four bits */
 a22:	22 95       	swap	r18
 a24:	20 7f       	andi	r18, 0xF0	; 240
		MatrixButtonValue |= ((~PINC) & 0x00f0) >> 4;
 a26:	28 2b       	or	r18, r24
 a28:	4f 5f       	subi	r20, 0xFF	; 255
 a2a:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t Col;
	
	tempValue = (~PIND) & ((1<<PIND6) | (1<<PIND5) | (1<<PIND4) | (1<<PIND3));	/* Get PD6-PD3 IO state */
	tempValue >>= 3;	/* right rotate to low 4 bits location */
	
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
 a2c:	44 30       	cpi	r20, 0x04	; 4
 a2e:	51 05       	cpc	r21, r1
 a30:	c9 f6       	brne	.-78     	; 0x9e4 <ButtonCycleUpdate+0xe>
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
 a32:	e2 e1       	ldi	r30, 0x12	; 18
 a34:	f1 e0       	ldi	r31, 0x01	; 1
 a36:	80 81       	ld	r24, Z
 a38:	28 2b       	or	r18, r24
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
 a3a:	10 82       	st	Z, r1
	b = button.buttonsLastCycle.bVal;
 a3c:	83 81       	ldd	r24, Z+3	; 0x03
	holdTime = button.buttonHoldTime;
 a3e:	42 89       	ldd	r20, Z+18	; 0x12
 a40:	53 89       	ldd	r21, Z+19	; 0x13
	
	if (button.buttonsReleased.bVal != 0) {		
 a42:	96 81       	ldd	r25, Z+6	; 0x06
 a44:	99 23       	and	r25, r25
 a46:	19 f0       	breq	.+6      	; 0xa4e <ButtonCycleUpdate+0x78>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
 a48:	90 93 1e 01 	sts	0x011E, r25
 a4c:	05 c0       	rjmp	.+10     	; 0xa58 <ButtonCycleUpdate+0x82>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
 a4e:	4d 33       	cpi	r20, 0x3D	; 61
 a50:	51 05       	cpc	r21, r1
 a52:	10 f0       	brcs	.+4      	; 0xa58 <ButtonCycleUpdate+0x82>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
 a54:	10 92 1e 01 	sts	0x011E, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
 a58:	e2 e1       	ldi	r30, 0x12	; 18
 a5a:	f1 e0       	ldi	r31, 0x01	; 1
 a5c:	16 82       	std	Z+6, r1	; 0x06
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
 a5e:	17 86       	std	Z+15, r1	; 0x0f
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
 a60:	28 13       	cpse	r18, r24
 a62:	0f c0       	rjmp	.+30     	; 0xa82 <ButtonCycleUpdate+0xac>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
 a64:	4f 5f       	subi	r20, 0xFF	; 255
 a66:	5f 4f       	sbci	r21, 0xFF	; 255
 a68:	44 32       	cpi	r20, 0x24	; 36
 a6a:	51 05       	cpc	r21, r1
 a6c:	18 f4       	brcc	.+6      	; 0xa74 <ButtonCycleUpdate+0x9e>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
 a6e:	10 92 1b 01 	sts	0x011B, r1
 a72:	02 c0       	rjmp	.+4      	; 0xa78 <ButtonCycleUpdate+0xa2>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
 a74:	20 93 1b 01 	sts	0x011B, r18
		}	
		button.buttonHoldTime = holdTime;
 a78:	50 93 25 01 	sts	0x0125, r21
 a7c:	40 93 24 01 	sts	0x0124, r20
 a80:	08 95       	ret
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
 a82:	e2 e1       	ldi	r30, 0x12	; 18
 a84:	f1 e0       	ldi	r31, 0x01	; 1
 a86:	23 83       	std	Z+3, r18	; 0x03
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
 a88:	20 95       	com	r18
 a8a:	28 23       	and	r18, r24
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
 a8c:	81 85       	ldd	r24, Z+9	; 0x09
 a8e:	82 23       	and	r24, r18
 a90:	69 f4       	brne	.+26     	; 0xaac <ButtonCycleUpdate+0xd6>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
 a92:	10 92 25 01 	sts	0x0125, r1
 a96:	10 92 24 01 	sts	0x0124, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
 a9a:	43 50       	subi	r20, 0x03	; 3
 a9c:	51 09       	sbc	r21, r1
 a9e:	40 32       	cpi	r20, 0x20	; 32
 aa0:	51 05       	cpc	r21, r1
 aa2:	20 f4       	brcc	.+8      	; 0xaac <ButtonCycleUpdate+0xd6>
				button.buttonsReleased.bVal = buttons;	
 aa4:	26 83       	std	Z+6, r18	; 0x06
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
 aa6:	84 85       	ldd	r24, Z+12	; 0x0c
 aa8:	28 23       	and	r18, r24
 aaa:	27 87       	std	Z+15, r18	; 0x0f
 aac:	08 95       	ret

00000aae <__udivmodhi4>:
 aae:	aa 1b       	sub	r26, r26
 ab0:	bb 1b       	sub	r27, r27
 ab2:	51 e1       	ldi	r21, 0x11	; 17
 ab4:	07 c0       	rjmp	.+14     	; 0xac4 <__udivmodhi4_ep>

00000ab6 <__udivmodhi4_loop>:
 ab6:	aa 1f       	adc	r26, r26
 ab8:	bb 1f       	adc	r27, r27
 aba:	a6 17       	cp	r26, r22
 abc:	b7 07       	cpc	r27, r23
 abe:	10 f0       	brcs	.+4      	; 0xac4 <__udivmodhi4_ep>
 ac0:	a6 1b       	sub	r26, r22
 ac2:	b7 0b       	sbc	r27, r23

00000ac4 <__udivmodhi4_ep>:
 ac4:	88 1f       	adc	r24, r24
 ac6:	99 1f       	adc	r25, r25
 ac8:	5a 95       	dec	r21
 aca:	a9 f7       	brne	.-22     	; 0xab6 <__udivmodhi4_loop>
 acc:	80 95       	com	r24
 ace:	90 95       	com	r25
 ad0:	bc 01       	movw	r22, r24
 ad2:	cd 01       	movw	r24, r26
 ad4:	08 95       	ret

00000ad6 <__udivmodsi4>:
 ad6:	a1 e2       	ldi	r26, 0x21	; 33
 ad8:	1a 2e       	mov	r1, r26
 ada:	aa 1b       	sub	r26, r26
 adc:	bb 1b       	sub	r27, r27
 ade:	fd 01       	movw	r30, r26
 ae0:	0d c0       	rjmp	.+26     	; 0xafc <__udivmodsi4_ep>

00000ae2 <__udivmodsi4_loop>:
 ae2:	aa 1f       	adc	r26, r26
 ae4:	bb 1f       	adc	r27, r27
 ae6:	ee 1f       	adc	r30, r30
 ae8:	ff 1f       	adc	r31, r31
 aea:	a2 17       	cp	r26, r18
 aec:	b3 07       	cpc	r27, r19
 aee:	e4 07       	cpc	r30, r20
 af0:	f5 07       	cpc	r31, r21
 af2:	20 f0       	brcs	.+8      	; 0xafc <__udivmodsi4_ep>
 af4:	a2 1b       	sub	r26, r18
 af6:	b3 0b       	sbc	r27, r19
 af8:	e4 0b       	sbc	r30, r20
 afa:	f5 0b       	sbc	r31, r21

00000afc <__udivmodsi4_ep>:
 afc:	66 1f       	adc	r22, r22
 afe:	77 1f       	adc	r23, r23
 b00:	88 1f       	adc	r24, r24
 b02:	99 1f       	adc	r25, r25
 b04:	1a 94       	dec	r1
 b06:	69 f7       	brne	.-38     	; 0xae2 <__udivmodsi4_loop>
 b08:	60 95       	com	r22
 b0a:	70 95       	com	r23
 b0c:	80 95       	com	r24
 b0e:	90 95       	com	r25
 b10:	9b 01       	movw	r18, r22
 b12:	ac 01       	movw	r20, r24
 b14:	bd 01       	movw	r22, r26
 b16:	cf 01       	movw	r24, r30
 b18:	08 95       	ret

00000b1a <__umulhisi3>:
 b1a:	a2 9f       	mul	r26, r18
 b1c:	b0 01       	movw	r22, r0
 b1e:	b3 9f       	mul	r27, r19
 b20:	c0 01       	movw	r24, r0
 b22:	a3 9f       	mul	r26, r19
 b24:	70 0d       	add	r23, r0
 b26:	81 1d       	adc	r24, r1
 b28:	11 24       	eor	r1, r1
 b2a:	91 1d       	adc	r25, r1
 b2c:	b2 9f       	mul	r27, r18
 b2e:	70 0d       	add	r23, r0
 b30:	81 1d       	adc	r24, r1
 b32:	11 24       	eor	r1, r1
 b34:	91 1d       	adc	r25, r1
 b36:	08 95       	ret

00000b38 <_exit>:
 b38:	f8 94       	cli

00000b3a <__stop_program>:
 b3a:	ff cf       	rjmp	.-2      	; 0xb3a <__stop_program>
