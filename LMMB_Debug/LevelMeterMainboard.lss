
LevelMeterMainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001346  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000275  00800060  00800060  00001346  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001346  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000518  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c45  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001615  00000000  00000000  00005511  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015c2  00000000  00000000  00006b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000da4  00000000  00000000  000080e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012ad  00000000  00000000  00008e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002660  00000000  00000000  0000a139  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000448  00000000  00000000  0000c799  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
       4:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__vector_1>
       8:	0c 94 78 07 	jmp	0xef0	; 0xef0 <__vector_2>
       c:	0c 94 84 03 	jmp	0x708	; 0x708 <__vector_3>
      10:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_4>
      14:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__vector_5>
      18:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__vector_6>
      1c:	0c 94 2a 03 	jmp	0x654	; 0x654 <__vector_7>
      20:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__vector_8>
      24:	0c 94 10 02 	jmp	0x420	; 0x420 <__vector_9>
      28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      2c:	0c 94 3a 04 	jmp	0x874	; 0x874 <__vector_11>
      30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      34:	0c 94 03 04 	jmp	0x806	; 0x806 <__vector_13>
      38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      4c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_19>
      50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      54:	8b 04       	cpc	r8, r11
      56:	90 04       	cpc	r9, r0
      58:	9c 04       	cpc	r9, r12
      5a:	a1 04       	cpc	r10, r1
      5c:	a6 04       	cpc	r10, r6
      5e:	ab 04       	cpc	r10, r11
      60:	b0 04       	cpc	r11, r0
      62:	b5 04       	cpc	r11, r5

00000064 <__trampolines_end>:
      64:	30 31       	cpi	r19, 0x10	; 16
      66:	32 33       	cpi	r19, 0x32	; 50
      68:	34 35       	cpi	r19, 0x54	; 84
      6a:	36 37       	cpi	r19, 0x76	; 118
      6c:	38 39       	cpi	r19, 0x98	; 152
      6e:	41 42       	sbci	r20, 0x21	; 33
      70:	43 44       	sbci	r20, 0x43	; 67
      72:	45 46       	sbci	r20, 0x65	; 101
	...

00000075 <__c.2060>:
      75:	4d 61 69 6e 20 62 6f 61 72 64 20 68 65 72 65 21     Main board here!
      85:	0a 00                                               ..

00000087 <__c.1896>:
      87:	73 25 64 0a 00                                      s%d..

0000008c <ssdCharTble>:
      8c:	c0 f9 a4 b0 99 92 82 f8 80 90 88 83 c6 a1 86 8e     ................
      9c:	ff fe f7 00                                         ....

000000a0 <__ctors_end>:
      a0:	11 24       	eor	r1, r1
      a2:	1f be       	out	0x3f, r1	; 63
      a4:	cf e5       	ldi	r28, 0x5F	; 95
      a6:	d4 e0       	ldi	r29, 0x04	; 4
      a8:	de bf       	out	0x3e, r29	; 62
      aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_clear_bss>:
      ac:	22 e0       	ldi	r18, 0x02	; 2
      ae:	a0 e6       	ldi	r26, 0x60	; 96
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	a5 3d       	cpi	r26, 0xD5	; 213
      b8:	b2 07       	cpc	r27, r18
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	0e 94 aa 06 	call	0xd54	; 0xd54 <main>
      c0:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <_exit>

000000c4 <__bad_interrupt>:
      c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
      c8:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
      ca:	8f b7       	in	r24, 0x3f	; 63
      cc:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
      ce:	71 83       	std	Z+1, r23	; 0x01
      d0:	60 83       	st	Z, r22
	buffer->size = size;
      d2:	53 83       	std	Z+3, r21	; 0x03
      d4:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
      d6:	17 82       	std	Z+7, r1	; 0x07
      d8:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
      da:	15 82       	std	Z+5, r1	; 0x05
      dc:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
      de:	8f bf       	out	0x3f, r24	; 63
      e0:	08 95       	ret

000000e2 <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
      e2:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
      e4:	9f b7       	in	r25, 0x3f	; 63
      e6:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
      e8:	44 81       	ldd	r20, Z+4	; 0x04
      ea:	55 81       	ldd	r21, Z+5	; 0x05
      ec:	41 15       	cp	r20, r1
      ee:	51 05       	cpc	r21, r1
      f0:	c9 f0       	breq	.+50     	; 0x124 <bufferGetFromFront+0x42>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
      f2:	26 81       	ldd	r18, Z+6	; 0x06
      f4:	37 81       	ldd	r19, Z+7	; 0x07
      f6:	a0 81       	ld	r26, Z
      f8:	b1 81       	ldd	r27, Z+1	; 0x01
      fa:	a2 0f       	add	r26, r18
      fc:	b3 1f       	adc	r27, r19
      fe:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
     100:	2f 5f       	subi	r18, 0xFF	; 255
     102:	3f 4f       	sbci	r19, 0xFF	; 255
     104:	37 83       	std	Z+7, r19	; 0x07
     106:	26 83       	std	Z+6, r18	; 0x06
		if(buffer->dataindex >= buffer->size)
     108:	62 81       	ldd	r22, Z+2	; 0x02
     10a:	73 81       	ldd	r23, Z+3	; 0x03
     10c:	26 17       	cp	r18, r22
     10e:	37 07       	cpc	r19, r23
     110:	20 f0       	brcs	.+8      	; 0x11a <bufferGetFromFront+0x38>
		{
			buffer->dataindex -= buffer->size;
     112:	26 1b       	sub	r18, r22
     114:	37 0b       	sbc	r19, r23
     116:	37 83       	std	Z+7, r19	; 0x07
     118:	26 83       	std	Z+6, r18	; 0x06
		}
		buffer->datalength--;
     11a:	41 50       	subi	r20, 0x01	; 1
     11c:	51 09       	sbc	r21, r1
     11e:	55 83       	std	Z+5, r21	; 0x05
     120:	44 83       	std	Z+4, r20	; 0x04
     122:	01 c0       	rjmp	.+2      	; 0x126 <bufferGetFromFront+0x44>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
     124:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
     126:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
     128:	08 95       	ret

0000012a <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     12a:	fc 01       	movw	r30, r24
     12c:	36 2f       	mov	r19, r22
	// begin critical section
	CRITICAL_SECTION_START;
     12e:	2f b7       	in	r18, 0x3f	; 63
     130:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     132:	a4 81       	ldd	r26, Z+4	; 0x04
     134:	b5 81       	ldd	r27, Z+5	; 0x05
     136:	62 81       	ldd	r22, Z+2	; 0x02
     138:	73 81       	ldd	r23, Z+3	; 0x03
     13a:	a6 17       	cp	r26, r22
     13c:	b7 07       	cpc	r27, r23
     13e:	98 f4       	brcc	.+38     	; 0x166 <bufferAddToEnd+0x3c>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     140:	86 81       	ldd	r24, Z+6	; 0x06
     142:	97 81       	ldd	r25, Z+7	; 0x07
     144:	8a 0f       	add	r24, r26
     146:	9b 1f       	adc	r25, r27
     148:	0e 94 2b 09 	call	0x1256	; 0x1256 <__udivmodhi4>
     14c:	a0 81       	ld	r26, Z
     14e:	b1 81       	ldd	r27, Z+1	; 0x01
     150:	a8 0f       	add	r26, r24
     152:	b9 1f       	adc	r27, r25
     154:	3c 93       	st	X, r19
		// increment the length
		buffer->datalength++;
     156:	84 81       	ldd	r24, Z+4	; 0x04
     158:	95 81       	ldd	r25, Z+5	; 0x05
     15a:	01 96       	adiw	r24, 0x01	; 1
     15c:	95 83       	std	Z+5, r25	; 0x05
     15e:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     160:	2f bf       	out	0x3f, r18	; 63
		// return success
		return -1;
     162:	8f ef       	ldi	r24, 0xFF	; 255
     164:	08 95       	ret
	}
	// end critical section
	CRITICAL_SECTION_END;
     166:	2f bf       	out	0x3f, r18	; 63
	// return failure
	return 0;
     168:	80 e0       	ldi	r24, 0x00	; 0
}
     16a:	08 95       	ret

0000016c <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
     16c:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     16e:	4f b7       	in	r20, 0x3f	; 63
     170:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
     172:	82 81       	ldd	r24, Z+2	; 0x02
     174:	93 81       	ldd	r25, Z+3	; 0x03
     176:	24 81       	ldd	r18, Z+4	; 0x04
     178:	35 81       	ldd	r19, Z+5	; 0x05
	// end critical section
	CRITICAL_SECTION_END;
     17a:	4f bf       	out	0x3f, r20	; 63
	return bytesleft;
}
     17c:	82 1b       	sub	r24, r18
     17e:	93 0b       	sbc	r25, r19
     180:	08 95       	ret

00000182 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
     182:	90 93 61 00 	sts	0x0061, r25
     186:	80 93 60 00 	sts	0x0060, r24
     18a:	08 95       	ret

0000018c <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
     18c:	cf 93       	push	r28
     18e:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
     190:	8a 30       	cpi	r24, 0x0A	; 10
     192:	31 f4       	brne	.+12     	; 0x1a0 <rprintfChar+0x14>
		rputchar('\r');
     194:	e0 91 60 00 	lds	r30, 0x0060
     198:	f0 91 61 00 	lds	r31, 0x0061
     19c:	8d e0       	ldi	r24, 0x0D	; 13
     19e:	09 95       	icall
	// send character
	rputchar(c);
     1a0:	e0 91 60 00 	lds	r30, 0x0060
     1a4:	f0 91 61 00 	lds	r31, 0x0061
     1a8:	8c 2f       	mov	r24, r28
}
     1aa:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     1ac:	09 94       	ijmp

000001ae <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
     1ae:	8f 70       	andi	r24, 0x0F	; 15
     1b0:	e8 2f       	mov	r30, r24
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	ec 59       	subi	r30, 0x9C	; 156
     1b6:	ff 4f       	sbci	r31, 0xFF	; 255
     1b8:	84 91       	lpm	r24, Z
     1ba:	0c 94 c6 00 	jmp	0x18c	; 0x18c <rprintfChar>

000001be <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
     1be:	5f 92       	push	r5
     1c0:	6f 92       	push	r6
     1c2:	7f 92       	push	r7
     1c4:	8f 92       	push	r8
     1c6:	9f 92       	push	r9
     1c8:	af 92       	push	r10
     1ca:	bf 92       	push	r11
     1cc:	cf 92       	push	r12
     1ce:	df 92       	push	r13
     1d0:	ef 92       	push	r14
     1d2:	ff 92       	push	r15
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	1f 92       	push	r1
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
     1e2:	ec 89       	ldd	r30, Y+20	; 0x14
     1e4:	fd 89       	ldd	r31, Y+21	; 0x15
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
     1e6:	3e 01       	movw	r6, r28
     1e8:	26 e1       	ldi	r18, 0x16	; 22
     1ea:	62 0e       	add	r6, r18
     1ec:	71 1c       	adc	r7, r1
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
					rprintfChar('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     1ee:	3a e0       	ldi	r19, 0x0A	; 10
     1f0:	a3 2e       	mov	r10, r19
     1f2:	b1 2c       	mov	r11, r1
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     1f4:	3b 89       	ldd	r19, Y+19	; 0x13
     1f6:	33 23       	and	r19, r19
     1f8:	81 f0       	breq	.+32     	; 0x21a <rprintf1RamRom+0x5c>
     1fa:	8f 01       	movw	r16, r30
     1fc:	0f 5f       	subi	r16, 0xFF	; 255
     1fe:	1f 4f       	sbci	r17, 0xFF	; 255
     200:	84 91       	lpm	r24, Z
     202:	85 32       	cpi	r24, 0x25	; 37
     204:	89 f0       	breq	.+34     	; 0x228 <rprintf1RamRom+0x6a>
		{	// Until '%' or '\0'
			if (!format_flag)
     206:	88 23       	and	r24, r24
     208:	09 f4       	brne	.+2      	; 0x20c <rprintf1RamRom+0x4e>
     20a:	66 c0       	rjmp	.+204    	; 0x2d8 <rprintf1RamRom+0x11a>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
     20c:	0e 94 c6 00 	call	0x18c	; 0x18c <rprintfChar>
     210:	63 01       	movw	r12, r6
     212:	78 01       	movw	r14, r16
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
     214:	36 01       	movw	r6, r12
     216:	f7 01       	movw	r30, r14
     218:	ed cf       	rjmp	.-38     	; 0x1f4 <rprintf1RamRom+0x36>
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     21a:	80 81       	ld	r24, Z
     21c:	85 32       	cpi	r24, 0x25	; 37
     21e:	59 f0       	breq	.+22     	; 0x236 <rprintf1RamRom+0x78>
     220:	8f 01       	movw	r16, r30
     222:	0f 5f       	subi	r16, 0xFF	; 255
     224:	1f 4f       	sbci	r17, 0xFF	; 255
     226:	ef cf       	rjmp	.-34     	; 0x206 <rprintf1RamRom+0x48>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
     228:	7f 01       	movw	r14, r30
     22a:	82 e0       	ldi	r24, 0x02	; 2
     22c:	e8 0e       	add	r14, r24
     22e:	f1 1c       	adc	r15, r1
     230:	f8 01       	movw	r30, r16
     232:	84 91       	lpm	r24, Z
     234:	05 c0       	rjmp	.+10     	; 0x240 <rprintf1RamRom+0x82>
     236:	7f 01       	movw	r14, r30
     238:	22 e0       	ldi	r18, 0x02	; 2
     23a:	e2 0e       	add	r14, r18
     23c:	f1 1c       	adc	r15, r1
     23e:	81 81       	ldd	r24, Z+1	; 0x01
     240:	84 36       	cpi	r24, 0x64	; 100
     242:	a1 f0       	breq	.+40     	; 0x26c <rprintf1RamRom+0xae>
     244:	88 37       	cpi	r24, 0x78	; 120
     246:	61 f0       	breq	.+24     	; 0x260 <rprintf1RamRom+0xa2>
     248:	83 36       	cpi	r24, 0x63	; 99
     24a:	31 f4       	brne	.+12     	; 0x258 <rprintf1RamRom+0x9a>
		{
			case 'c': format_flag = va_arg(ap,int);
     24c:	f3 01       	movw	r30, r6
     24e:	80 81       	ld	r24, Z
     250:	93 01       	movw	r18, r6
     252:	2e 5f       	subi	r18, 0xFE	; 254
     254:	3f 4f       	sbci	r19, 0xFF	; 255
     256:	39 01       	movw	r6, r18
			default:  rprintfChar(format_flag); continue;
     258:	0e 94 c6 00 	call	0x18c	; 0x18c <rprintfChar>
     25c:	63 01       	movw	r12, r6
     25e:	da cf       	rjmp	.-76     	; 0x214 <rprintf1RamRom+0x56>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
     260:	20 e1       	ldi	r18, 0x10	; 16
     262:	82 2e       	mov	r8, r18
     264:	91 2c       	mov	r9, r1
     266:	00 e0       	ldi	r16, 0x00	; 0
     268:	10 e1       	ldi	r17, 0x10	; 16
     26a:	05 c0       	rjmp	.+10     	; 0x276 <rprintf1RamRom+0xb8>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
     26c:	9a e0       	ldi	r25, 0x0A	; 10
     26e:	89 2e       	mov	r8, r25
     270:	91 2c       	mov	r9, r1
     272:	00 e1       	ldi	r16, 0x10	; 16
     274:	17 e2       	ldi	r17, 0x27	; 39
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
     276:	63 01       	movw	r12, r6
     278:	32 e0       	ldi	r19, 0x02	; 2
     27a:	c3 0e       	add	r12, r19
     27c:	d1 1c       	adc	r13, r1
     27e:	f3 01       	movw	r30, r6
     280:	60 80       	ld	r6, Z
     282:	71 80       	ldd	r7, Z+1	; 0x01
			if (format_flag == 'd')
     284:	84 36       	cpi	r24, 0x64	; 100
     286:	a1 f4       	brne	.+40     	; 0x2b0 <rprintf1RamRom+0xf2>
			{
				if (((int)u_val) < 0)
     288:	77 fe       	sbrs	r7, 7
     28a:	0f c0       	rjmp	.+30     	; 0x2aa <rprintf1RamRom+0xec>
				{
					u_val = - u_val;
     28c:	71 94       	neg	r7
     28e:	61 94       	neg	r6
     290:	71 08       	sbc	r7, r1
					rprintfChar('-');
     292:	8d e2       	ldi	r24, 0x2D	; 45
     294:	0e 94 c6 00 	call	0x18c	; 0x18c <rprintfChar>
     298:	08 c0       	rjmp	.+16     	; 0x2aa <rprintf1RamRom+0xec>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     29a:	c8 01       	movw	r24, r16
     29c:	b5 01       	movw	r22, r10
     29e:	0e 94 2b 09 	call	0x1256	; 0x1256 <__udivmodhi4>
     2a2:	8b 01       	movw	r16, r22
     2a4:	62 30       	cpi	r22, 0x02	; 2
     2a6:	71 05       	cpc	r23, r1
     2a8:	18 f0       	brcs	.+6      	; 0x2b0 <rprintf1RamRom+0xf2>
     2aa:	60 16       	cp	r6, r16
     2ac:	71 06       	cpc	r7, r17
     2ae:	a8 f3       	brcs	.-22     	; 0x29a <rprintf1RamRom+0xdc>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
     2b0:	c3 01       	movw	r24, r6
     2b2:	b8 01       	movw	r22, r16
     2b4:	0e 94 2b 09 	call	0x1256	; 0x1256 <__udivmodhi4>
     2b8:	58 2e       	mov	r5, r24
     2ba:	86 2f       	mov	r24, r22
     2bc:	99 83       	std	Y+1, r25	; 0x01
     2be:	0e 94 d7 00 	call	0x1ae	; 0x1ae <rprintfu04>
				u_val %= div_val;
     2c2:	65 2c       	mov	r6, r5
     2c4:	99 81       	ldd	r25, Y+1	; 0x01
     2c6:	79 2e       	mov	r7, r25
				div_val /= base;
     2c8:	c8 01       	movw	r24, r16
     2ca:	b4 01       	movw	r22, r8
     2cc:	0e 94 2b 09 	call	0x1256	; 0x1256 <__udivmodhi4>
     2d0:	8b 01       	movw	r16, r22
			} while (div_val);
     2d2:	67 2b       	or	r22, r23
     2d4:	69 f7       	brne	.-38     	; 0x2b0 <rprintf1RamRom+0xf2>
     2d6:	9e cf       	rjmp	.-196    	; 0x214 <rprintf1RamRom+0x56>
		}
	}
	va_end(ap);
}
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0f 90       	pop	r0
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	1f 91       	pop	r17
     2e4:	0f 91       	pop	r16
     2e6:	ff 90       	pop	r15
     2e8:	ef 90       	pop	r14
     2ea:	df 90       	pop	r13
     2ec:	cf 90       	pop	r12
     2ee:	bf 90       	pop	r11
     2f0:	af 90       	pop	r10
     2f2:	9f 90       	pop	r9
     2f4:	8f 90       	pop	r8
     2f6:	7f 90       	pop	r7
     2f8:	6f 90       	pop	r6
     2fa:	5f 90       	pop	r5
     2fc:	08 95       	ret

000002fe <timer0SetPrescaler>:
#endif

void timer0SetPrescaler(u08 prescale)
{
	// set prescaler on timer 0
	outb(TCCR0, (inb(TCCR0) & ~TIMER_PRESCALE_MASK) | prescale);
     2fe:	93 b7       	in	r25, 0x33	; 51
     300:	98 7f       	andi	r25, 0xF8	; 248
     302:	89 2b       	or	r24, r25
     304:	83 bf       	out	0x33, r24	; 51
     306:	08 95       	ret

00000308 <timer0Init>:
}

void timer0Init()
{
	// initialize timer 0
	timer0SetPrescaler( TIMER0PRESCALE );	// set prescaler
     308:	85 e0       	ldi	r24, 0x05	; 5
     30a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <timer0SetPrescaler>
	outb(TCNT0, 0);							// reset TCNT0
     30e:	12 be       	out	0x32, r1	; 50
	sbi(TIMSK, TOIE0);						// enable TCNT0 overflow interrupt
     310:	89 b7       	in	r24, 0x39	; 57
     312:	81 60       	ori	r24, 0x01	; 1
     314:	89 bf       	out	0x39, r24	; 57
	sbi(TIMSK, OCIE0);						// enable OCR0 Output Compare Match Interrupt
     316:	89 b7       	in	r24, 0x39	; 57
     318:	82 60       	ori	r24, 0x02	; 2
     31a:	89 bf       	out	0x39, r24	; 57
}

void timer0ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer0Reg0 = 0;	// initialize time registers
     31c:	10 92 46 02 	sts	0x0246, r1
     320:	10 92 47 02 	sts	0x0247, r1
     324:	10 92 48 02 	sts	0x0248, r1
     328:	10 92 49 02 	sts	0x0249, r1
     32c:	08 95       	ret

0000032e <timer1SetPrescaler>:
}

void timer1SetPrescaler(u08 prescale)
{
	// set prescaler on timer 1
	outb(TCCR1B, (inb(TCCR1B) & ~TIMER_PRESCALE_MASK) | prescale);
     32e:	9e b5       	in	r25, 0x2e	; 46
     330:	98 7f       	andi	r25, 0xF8	; 248
     332:	89 2b       	or	r24, r25
     334:	8e bd       	out	0x2e, r24	; 46
     336:	08 95       	ret

00000338 <timer1Init>:
}

void timer1Init(void)
{
	// initialize timer 1
	timer1SetPrescaler( TIMER1PRESCALE );	// set prescaler
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	0e 94 97 01 	call	0x32e	; 0x32e <timer1SetPrescaler>
	outb(TCNT1H, 0);						// reset TCNT1
     33e:	1d bc       	out	0x2d, r1	; 45
	outb(TCNT1L, 0);
     340:	1c bc       	out	0x2c, r1	; 44
	sbi(TIMSK, TOIE1);						// enable TCNT1 overflow
     342:	89 b7       	in	r24, 0x39	; 57
     344:	84 60       	ori	r24, 0x04	; 4
     346:	89 bf       	out	0x39, r24	; 57
     348:	08 95       	ret

0000034a <timer2SetPrescaler>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2SetPrescaler(u08 prescale)
{
	// set prescaler on timer 2
	outb(TCCR2, (inb(TCCR2) & ~TIMER_PRESCALE_MASK) | prescale);
     34a:	95 b5       	in	r25, 0x25	; 37
     34c:	98 7f       	andi	r25, 0xF8	; 248
     34e:	89 2b       	or	r24, r25
     350:	85 bd       	out	0x25, r24	; 37
     352:	08 95       	ret

00000354 <timer2Init>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2Init(void)
{
	// initialize timer 2
	timer2SetPrescaler( TIMER2PRESCALE );	// set prescaler
     354:	86 e0       	ldi	r24, 0x06	; 6
     356:	0e 94 a5 01 	call	0x34a	; 0x34a <timer2SetPrescaler>
	outb(TCNT2, 0);							// reset TCNT2
     35a:	14 bc       	out	0x24, r1	; 36
	sbi(TIMSK, TOIE2);						// enable TCNT2 overflow
     35c:	89 b7       	in	r24, 0x39	; 57
     35e:	80 64       	ori	r24, 0x40	; 64
     360:	89 bf       	out	0x39, r24	; 57
	sbi(TIMSK, OCIE2);						// enable OCR2 Output Compare Match Interrupt
     362:	89 b7       	in	r24, 0x39	; 57
     364:	80 68       	ori	r24, 0x80	; 128
     366:	89 bf       	out	0x39, r24	; 57

#ifdef TCNT2	// support timer2 only if it exists
void timer2ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer2Reg0 = 0;	// initialize time registers
     368:	10 92 4e 02 	sts	0x024E, r1
     36c:	10 92 4f 02 	sts	0x024F, r1
     370:	10 92 50 02 	sts	0x0250, r1
     374:	10 92 51 02 	sts	0x0251, r1
     378:	08 95       	ret

0000037a <timerAttach>:
#endif

void timerAttach(u08 interruptNum, void (*userFunc)(void) )
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     37a:	88 30       	cpi	r24, 0x08	; 8
     37c:	40 f4       	brcc	.+16     	; 0x38e <timerAttach+0x14>
	{
		// set the interrupt function to run
		// the supplied user's function
		TimerIntFunc[interruptNum] = userFunc;
     37e:	e8 2f       	mov	r30, r24
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	ee 0f       	add	r30, r30
     384:	ff 1f       	adc	r31, r31
     386:	ee 59       	subi	r30, 0x9E	; 158
     388:	ff 4f       	sbci	r31, 0xFF	; 255
     38a:	71 83       	std	Z+1, r23	; 0x01
     38c:	60 83       	st	Z, r22
     38e:	08 95       	ret

00000390 <timerDetach>:
}

void timerDetach(u08 interruptNum)
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     390:	88 30       	cpi	r24, 0x08	; 8
     392:	40 f4       	brcc	.+16     	; 0x3a4 <timerDetach+0x14>
	{
		// set the interrupt function to run nothing
		TimerIntFunc[interruptNum] = 0;
     394:	e8 2f       	mov	r30, r24
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	ee 0f       	add	r30, r30
     39a:	ff 1f       	adc	r31, r31
     39c:	ee 59       	subi	r30, 0x9E	; 158
     39e:	ff 4f       	sbci	r31, 0xFF	; 255
     3a0:	11 82       	std	Z+1, r1	; 0x01
     3a2:	10 82       	st	Z, r1
     3a4:	08 95       	ret

000003a6 <timerInit>:
                  :"r"(time_ms), "r"((unsigned short) (delay_count))
	);
}
*/
void timerInit(void)
{
     3a6:	cf 93       	push	r28
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
     3a8:	c0 e0       	ldi	r28, 0x00	; 0
		timerDetach(intNum);
     3aa:	8c 2f       	mov	r24, r28
     3ac:	0e 94 c8 01 	call	0x390	; 0x390 <timerDetach>
*/
void timerInit(void)
{
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
     3b0:	cf 5f       	subi	r28, 0xFF	; 255
     3b2:	c8 30       	cpi	r28, 0x08	; 8
     3b4:	d1 f7       	brne	.-12     	; 0x3aa <timerInit+0x4>
		timerDetach(intNum);

	// initialize all timers
	timer0Init();
     3b6:	0e 94 84 01 	call	0x308	; 0x308 <timer0Init>
	timer1Init();
     3ba:	0e 94 9c 01 	call	0x338	; 0x338 <timer1Init>
	#ifdef TCNT2	// support timer2 only if it exists
	timer2Init();
     3be:	0e 94 aa 01 	call	0x354	; 0x354 <timer2Init>
	#endif
	// enable interrupts
	sei();
     3c2:	78 94       	sei
}
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <timer1PWMInit>:
	// configures timer1 for use with PWM output
	// on OC1A and OC1B pins
	// phase correct PWM mode, FREQpwm=F_CPU/(2*N*TOP)

	// enable timer1 as 8,9,10bit PWM
	if(bitRes == 9)
     3c8:	89 30       	cpi	r24, 0x09	; 9
     3ca:	31 f4       	brne	.+12     	; 0x3d8 <timer1PWMInit+0x10>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     3cc:	8f b5       	in	r24, 0x2f	; 47
     3ce:	82 60       	ori	r24, 0x02	; 2
     3d0:	8f bd       	out	0x2f, r24	; 47
		cbi(TCCR1A,PWM10);
     3d2:	8f b5       	in	r24, 0x2f	; 47
     3d4:	8e 7f       	andi	r24, 0xFE	; 254
     3d6:	0a c0       	rjmp	.+20     	; 0x3ec <timer1PWMInit+0x24>
	}
	else if( bitRes == 10 )
     3d8:	8a 30       	cpi	r24, 0x0A	; 10
     3da:	19 f4       	brne	.+6      	; 0x3e2 <timer1PWMInit+0x1a>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     3dc:	8f b5       	in	r24, 0x2f	; 47
     3de:	82 60       	ori	r24, 0x02	; 2
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <timer1PWMInit+0x1e>
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     3e2:	8f b5       	in	r24, 0x2f	; 47
     3e4:	8d 7f       	andi	r24, 0xFD	; 253
     3e6:	8f bd       	out	0x2f, r24	; 47
		sbi(TCCR1A,PWM10);
     3e8:	8f b5       	in	r24, 0x2f	; 47
     3ea:	81 60       	ori	r24, 0x01	; 1
     3ec:	8f bd       	out	0x2f, r24	; 47
	}

	// clear output compare value A
	outb(OCR1AH, 0);
     3ee:	1b bc       	out	0x2b, r1	; 43
	outb(OCR1AL, 0);
     3f0:	1a bc       	out	0x2a, r1	; 42
	// clear output compare value B
	outb(OCR1BH, 0);
     3f2:	19 bc       	out	0x29, r1	; 41
	outb(OCR1BL, 0);
     3f4:	18 bc       	out	0x28, r1	; 40
     3f6:	08 95       	ret

000003f8 <timer1PWMAOn>:

void timer1PWMAOn(void)
{
	// turn on channel A (OC1A) PWM output
	// set OC1A as non-inverted PWM
	sbi(TCCR1A,COM1A1);
     3f8:	8f b5       	in	r24, 0x2f	; 47
     3fa:	80 68       	ori	r24, 0x80	; 128
     3fc:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1A0);
     3fe:	8f b5       	in	r24, 0x2f	; 47
     400:	8f 7b       	andi	r24, 0xBF	; 191
     402:	8f bd       	out	0x2f, r24	; 47
     404:	08 95       	ret

00000406 <timer1PWMBOn>:

void timer1PWMBOn(void)
{
	// turn on channel B (OC1B) PWM output
	// set OC1B as non-inverted PWM
	sbi(TCCR1A,COM1B1);
     406:	8f b5       	in	r24, 0x2f	; 47
     408:	80 62       	ori	r24, 0x20	; 32
     40a:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1B0);
     40c:	8f b5       	in	r24, 0x2f	; 47
     40e:	8f 7e       	andi	r24, 0xEF	; 239
     410:	8f bd       	out	0x2f, r24	; 47
     412:	08 95       	ret

00000414 <timer1PWMASet>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1AH);		// set the high 8bits of OCR1A
	//outp( (pwmDuty&0x00FF), OCR1AL);	// set the low 8bits of OCR1A
	OCR1A = pwmDuty;
     414:	9b bd       	out	0x2b, r25	; 43
     416:	8a bd       	out	0x2a, r24	; 42
     418:	08 95       	ret

0000041a <timer1PWMBSet>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
     41a:	99 bd       	out	0x29, r25	; 41
     41c:	88 bd       	out	0x28, r24	; 40
     41e:	08 95       	ret

00000420 <__vector_9>:
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
     420:	1f 92       	push	r1
     422:	0f 92       	push	r0
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	0f 92       	push	r0
     428:	11 24       	eor	r1, r1
     42a:	2f 93       	push	r18
     42c:	3f 93       	push	r19
     42e:	4f 93       	push	r20
     430:	5f 93       	push	r21
     432:	6f 93       	push	r22
     434:	7f 93       	push	r23
     436:	8f 93       	push	r24
     438:	9f 93       	push	r25
     43a:	af 93       	push	r26
     43c:	bf 93       	push	r27
     43e:	ef 93       	push	r30
     440:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
     442:	80 91 46 02 	lds	r24, 0x0246
     446:	90 91 47 02 	lds	r25, 0x0247
     44a:	a0 91 48 02 	lds	r26, 0x0248
     44e:	b0 91 49 02 	lds	r27, 0x0249
     452:	01 96       	adiw	r24, 0x01	; 1
     454:	a1 1d       	adc	r26, r1
     456:	b1 1d       	adc	r27, r1
     458:	80 93 46 02 	sts	0x0246, r24
     45c:	90 93 47 02 	sts	0x0247, r25
     460:	a0 93 48 02 	sts	0x0248, r26
     464:	b0 93 49 02 	sts	0x0249, r27

	// increment pause counter
	TimerPauseReg++;
     468:	80 91 4a 02 	lds	r24, 0x024A
     46c:	90 91 4b 02 	lds	r25, 0x024B
     470:	a0 91 4c 02 	lds	r26, 0x024C
     474:	b0 91 4d 02 	lds	r27, 0x024D
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	a1 1d       	adc	r26, r1
     47c:	b1 1d       	adc	r27, r1
     47e:	80 93 4a 02 	sts	0x024A, r24
     482:	90 93 4b 02 	sts	0x024B, r25
     486:	a0 93 4c 02 	sts	0x024C, r26
     48a:	b0 93 4d 02 	sts	0x024D, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
     48e:	80 91 62 00 	lds	r24, 0x0062
     492:	90 91 63 00 	lds	r25, 0x0063
     496:	89 2b       	or	r24, r25
     498:	29 f0       	breq	.+10     	; 0x4a4 <__stack+0x45>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
     49a:	e0 91 62 00 	lds	r30, 0x0062
     49e:	f0 91 63 00 	lds	r31, 0x0063
     4a2:	09 95       	icall
}
     4a4:	ff 91       	pop	r31
     4a6:	ef 91       	pop	r30
     4a8:	bf 91       	pop	r27
     4aa:	af 91       	pop	r26
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	7f 91       	pop	r23
     4b2:	6f 91       	pop	r22
     4b4:	5f 91       	pop	r21
     4b6:	4f 91       	pop	r20
     4b8:	3f 91       	pop	r19
     4ba:	2f 91       	pop	r18
     4bc:	0f 90       	pop	r0
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	0f 90       	pop	r0
     4c2:	1f 90       	pop	r1
     4c4:	18 95       	reti

000004c6 <__vector_8>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
     4c6:	1f 92       	push	r1
     4c8:	0f 92       	push	r0
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	0f 92       	push	r0
     4ce:	11 24       	eor	r1, r1
     4d0:	2f 93       	push	r18
     4d2:	3f 93       	push	r19
     4d4:	4f 93       	push	r20
     4d6:	5f 93       	push	r21
     4d8:	6f 93       	push	r22
     4da:	7f 93       	push	r23
     4dc:	8f 93       	push	r24
     4de:	9f 93       	push	r25
     4e0:	af 93       	push	r26
     4e2:	bf 93       	push	r27
     4e4:	ef 93       	push	r30
     4e6:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
     4e8:	80 91 64 00 	lds	r24, 0x0064
     4ec:	90 91 65 00 	lds	r25, 0x0065
     4f0:	89 2b       	or	r24, r25
     4f2:	29 f0       	breq	.+10     	; 0x4fe <__vector_8+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
     4f4:	e0 91 64 00 	lds	r30, 0x0064
     4f8:	f0 91 65 00 	lds	r31, 0x0065
     4fc:	09 95       	icall
}
     4fe:	ff 91       	pop	r31
     500:	ef 91       	pop	r30
     502:	bf 91       	pop	r27
     504:	af 91       	pop	r26
     506:	9f 91       	pop	r25
     508:	8f 91       	pop	r24
     50a:	7f 91       	pop	r23
     50c:	6f 91       	pop	r22
     50e:	5f 91       	pop	r21
     510:	4f 91       	pop	r20
     512:	3f 91       	pop	r19
     514:	2f 91       	pop	r18
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <__vector_4>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	0f 92       	push	r0
     528:	11 24       	eor	r1, r1
     52a:	2f 93       	push	r18
     52c:	3f 93       	push	r19
     52e:	4f 93       	push	r20
     530:	5f 93       	push	r21
     532:	6f 93       	push	r22
     534:	7f 93       	push	r23
     536:	8f 93       	push	r24
     538:	9f 93       	push	r25
     53a:	af 93       	push	r26
     53c:	bf 93       	push	r27
     53e:	ef 93       	push	r30
     540:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
     542:	80 91 4e 02 	lds	r24, 0x024E
     546:	90 91 4f 02 	lds	r25, 0x024F
     54a:	a0 91 50 02 	lds	r26, 0x0250
     54e:	b0 91 51 02 	lds	r27, 0x0251
     552:	01 96       	adiw	r24, 0x01	; 1
     554:	a1 1d       	adc	r26, r1
     556:	b1 1d       	adc	r27, r1
     558:	80 93 4e 02 	sts	0x024E, r24
     55c:	90 93 4f 02 	sts	0x024F, r25
     560:	a0 93 50 02 	sts	0x0250, r26
     564:	b0 93 51 02 	sts	0x0251, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
     568:	80 91 6c 00 	lds	r24, 0x006C
     56c:	90 91 6d 00 	lds	r25, 0x006D
     570:	89 2b       	or	r24, r25
     572:	29 f0       	breq	.+10     	; 0x57e <__vector_4+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
     574:	e0 91 6c 00 	lds	r30, 0x006C
     578:	f0 91 6d 00 	lds	r31, 0x006D
     57c:	09 95       	icall
}
     57e:	ff 91       	pop	r31
     580:	ef 91       	pop	r30
     582:	bf 91       	pop	r27
     584:	af 91       	pop	r26
     586:	9f 91       	pop	r25
     588:	8f 91       	pop	r24
     58a:	7f 91       	pop	r23
     58c:	6f 91       	pop	r22
     58e:	5f 91       	pop	r21
     590:	4f 91       	pop	r20
     592:	3f 91       	pop	r19
     594:	2f 91       	pop	r18
     596:	0f 90       	pop	r0
     598:	0f be       	out	0x3f, r0	; 63
     59a:	0f 90       	pop	r0
     59c:	1f 90       	pop	r1
     59e:	18 95       	reti

000005a0 <__vector_19>:

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_COMP_vect)
{
     5a0:	1f 92       	push	r1
     5a2:	0f 92       	push	r0
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	0f 92       	push	r0
     5a8:	11 24       	eor	r1, r1
     5aa:	2f 93       	push	r18
     5ac:	3f 93       	push	r19
     5ae:	4f 93       	push	r20
     5b0:	5f 93       	push	r21
     5b2:	6f 93       	push	r22
     5b4:	7f 93       	push	r23
     5b6:	8f 93       	push	r24
     5b8:	9f 93       	push	r25
     5ba:	af 93       	push	r26
     5bc:	bf 93       	push	r27
     5be:	ef 93       	push	r30
     5c0:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
     5c2:	80 91 70 00 	lds	r24, 0x0070
     5c6:	90 91 71 00 	lds	r25, 0x0071
     5ca:	89 2b       	or	r24, r25
     5cc:	29 f0       	breq	.+10     	; 0x5d8 <__vector_19+0x38>
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
     5ce:	e0 91 70 00 	lds	r30, 0x0070
     5d2:	f0 91 71 00 	lds	r31, 0x0071
     5d6:	09 95       	icall
}
     5d8:	ff 91       	pop	r31
     5da:	ef 91       	pop	r30
     5dc:	bf 91       	pop	r27
     5de:	af 91       	pop	r26
     5e0:	9f 91       	pop	r25
     5e2:	8f 91       	pop	r24
     5e4:	7f 91       	pop	r23
     5e6:	6f 91       	pop	r22
     5e8:	5f 91       	pop	r21
     5ea:	4f 91       	pop	r20
     5ec:	3f 91       	pop	r19
     5ee:	2f 91       	pop	r18
     5f0:	0f 90       	pop	r0
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	0f 90       	pop	r0
     5f6:	1f 90       	pop	r1
     5f8:	18 95       	reti

000005fa <__vector_6>:
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
     5fa:	1f 92       	push	r1
     5fc:	0f 92       	push	r0
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	0f 92       	push	r0
     602:	11 24       	eor	r1, r1
     604:	2f 93       	push	r18
     606:	3f 93       	push	r19
     608:	4f 93       	push	r20
     60a:	5f 93       	push	r21
     60c:	6f 93       	push	r22
     60e:	7f 93       	push	r23
     610:	8f 93       	push	r24
     612:	9f 93       	push	r25
     614:	af 93       	push	r26
     616:	bf 93       	push	r27
     618:	ef 93       	push	r30
     61a:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
     61c:	80 91 66 00 	lds	r24, 0x0066
     620:	90 91 67 00 	lds	r25, 0x0067
     624:	89 2b       	or	r24, r25
     626:	29 f0       	breq	.+10     	; 0x632 <__vector_6+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
     628:	e0 91 66 00 	lds	r30, 0x0066
     62c:	f0 91 67 00 	lds	r31, 0x0067
     630:	09 95       	icall
}
     632:	ff 91       	pop	r31
     634:	ef 91       	pop	r30
     636:	bf 91       	pop	r27
     638:	af 91       	pop	r26
     63a:	9f 91       	pop	r25
     63c:	8f 91       	pop	r24
     63e:	7f 91       	pop	r23
     640:	6f 91       	pop	r22
     642:	5f 91       	pop	r21
     644:	4f 91       	pop	r20
     646:	3f 91       	pop	r19
     648:	2f 91       	pop	r18
     64a:	0f 90       	pop	r0
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	0f 90       	pop	r0
     650:	1f 90       	pop	r1
     652:	18 95       	reti

00000654 <__vector_7>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
     654:	1f 92       	push	r1
     656:	0f 92       	push	r0
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	0f 92       	push	r0
     65c:	11 24       	eor	r1, r1
     65e:	2f 93       	push	r18
     660:	3f 93       	push	r19
     662:	4f 93       	push	r20
     664:	5f 93       	push	r21
     666:	6f 93       	push	r22
     668:	7f 93       	push	r23
     66a:	8f 93       	push	r24
     66c:	9f 93       	push	r25
     66e:	af 93       	push	r26
     670:	bf 93       	push	r27
     672:	ef 93       	push	r30
     674:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
     676:	80 91 68 00 	lds	r24, 0x0068
     67a:	90 91 69 00 	lds	r25, 0x0069
     67e:	89 2b       	or	r24, r25
     680:	29 f0       	breq	.+10     	; 0x68c <__vector_7+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
     682:	e0 91 68 00 	lds	r30, 0x0068
     686:	f0 91 69 00 	lds	r31, 0x0069
     68a:	09 95       	icall
}
     68c:	ff 91       	pop	r31
     68e:	ef 91       	pop	r30
     690:	bf 91       	pop	r27
     692:	af 91       	pop	r26
     694:	9f 91       	pop	r25
     696:	8f 91       	pop	r24
     698:	7f 91       	pop	r23
     69a:	6f 91       	pop	r22
     69c:	5f 91       	pop	r21
     69e:	4f 91       	pop	r20
     6a0:	3f 91       	pop	r19
     6a2:	2f 91       	pop	r18
     6a4:	0f 90       	pop	r0
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	0f 90       	pop	r0
     6aa:	1f 90       	pop	r1
     6ac:	18 95       	reti

000006ae <__vector_5>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
     6ae:	1f 92       	push	r1
     6b0:	0f 92       	push	r0
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	0f 92       	push	r0
     6b6:	11 24       	eor	r1, r1
     6b8:	2f 93       	push	r18
     6ba:	3f 93       	push	r19
     6bc:	4f 93       	push	r20
     6be:	5f 93       	push	r21
     6c0:	6f 93       	push	r22
     6c2:	7f 93       	push	r23
     6c4:	8f 93       	push	r24
     6c6:	9f 93       	push	r25
     6c8:	af 93       	push	r26
     6ca:	bf 93       	push	r27
     6cc:	ef 93       	push	r30
     6ce:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
     6d0:	80 91 6a 00 	lds	r24, 0x006A
     6d4:	90 91 6b 00 	lds	r25, 0x006B
     6d8:	89 2b       	or	r24, r25
     6da:	29 f0       	breq	.+10     	; 0x6e6 <__vector_5+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
     6dc:	e0 91 6a 00 	lds	r30, 0x006A
     6e0:	f0 91 6b 00 	lds	r31, 0x006B
     6e4:	09 95       	icall
}
     6e6:	ff 91       	pop	r31
     6e8:	ef 91       	pop	r30
     6ea:	bf 91       	pop	r27
     6ec:	af 91       	pop	r26
     6ee:	9f 91       	pop	r25
     6f0:	8f 91       	pop	r24
     6f2:	7f 91       	pop	r23
     6f4:	6f 91       	pop	r22
     6f6:	5f 91       	pop	r21
     6f8:	4f 91       	pop	r20
     6fa:	3f 91       	pop	r19
     6fc:	2f 91       	pop	r18
     6fe:	0f 90       	pop	r0
     700:	0f be       	out	0x3f, r0	; 63
     702:	0f 90       	pop	r0
     704:	1f 90       	pop	r1
     706:	18 95       	reti

00000708 <__vector_3>:

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMP_vect)
{
     708:	1f 92       	push	r1
     70a:	0f 92       	push	r0
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	0f 92       	push	r0
     710:	11 24       	eor	r1, r1
     712:	2f 93       	push	r18
     714:	3f 93       	push	r19
     716:	4f 93       	push	r20
     718:	5f 93       	push	r21
     71a:	6f 93       	push	r22
     71c:	7f 93       	push	r23
     71e:	8f 93       	push	r24
     720:	9f 93       	push	r25
     722:	af 93       	push	r26
     724:	bf 93       	push	r27
     726:	ef 93       	push	r30
     728:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     72a:	80 91 6e 00 	lds	r24, 0x006E
     72e:	90 91 6f 00 	lds	r25, 0x006F
     732:	89 2b       	or	r24, r25
     734:	29 f0       	breq	.+10     	; 0x740 <__vector_3+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     736:	e0 91 6e 00 	lds	r30, 0x006E
     73a:	f0 91 6f 00 	lds	r31, 0x006F
     73e:	09 95       	icall
}
     740:	ff 91       	pop	r31
     742:	ef 91       	pop	r30
     744:	bf 91       	pop	r27
     746:	af 91       	pop	r26
     748:	9f 91       	pop	r25
     74a:	8f 91       	pop	r24
     74c:	7f 91       	pop	r23
     74e:	6f 91       	pop	r22
     750:	5f 91       	pop	r21
     752:	4f 91       	pop	r20
     754:	3f 91       	pop	r19
     756:	2f 91       	pop	r18
     758:	0f 90       	pop	r0
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	0f 90       	pop	r0
     75e:	1f 90       	pop	r1
     760:	18 95       	reti

00000762 <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (unsigned char *)uartRxData, UART_RX_BUFFER_SIZE);
     762:	40 e4       	ldi	r20, 0x40	; 64
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	64 eb       	ldi	r22, 0xB4	; 180
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	83 e5       	ldi	r24, 0x53	; 83
     76c:	92 e0       	ldi	r25, 0x02	; 2
     76e:	0e 94 64 00 	call	0xc8	; 0xc8 <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (unsigned char *)uartTxData, UART_TX_BUFFER_SIZE);
     772:	40 e4       	ldi	r20, 0x40	; 64
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	64 e7       	ldi	r22, 0x74	; 116
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	8c e5       	ldi	r24, 0x5C	; 92
     77c:	92 e0       	ldi	r25, 0x02	; 2
     77e:	0c 94 64 00 	jmp	0xc8	; 0xc8 <bufferInit>

00000782 <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
     782:	0e 94 b1 03 	call	0x762	; 0x762 <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
     786:	10 92 73 00 	sts	0x0073, r1
     78a:	10 92 72 00 	sts	0x0072, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     78e:	88 ed       	ldi	r24, 0xD8	; 216
     790:	8a b9       	out	0x0a, r24	; 10
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
     792:	8f e5       	ldi	r24, 0x5F	; 95
     794:	89 b9       	out	0x09, r24	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
     796:	10 bc       	out	0x20, r1	; 32
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
     798:	8f ef       	ldi	r24, 0xFF	; 255
     79a:	80 93 52 02 	sts	0x0252, r24
	uartBufferedTx = FALSE;
     79e:	10 92 5b 02 	sts	0x025B, r1
	// clear overflow count
	uartRxOverflow = 0;
     7a2:	10 92 65 02 	sts	0x0265, r1
     7a6:	10 92 64 02 	sts	0x0264, r1
	// enable interrupts
	sei();
     7aa:	78 94       	sei
     7ac:	08 95       	ret

000007ae <uartSetBaudRate>:
	UartRxFunc = rx_func;
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	8b 01       	movw	r16, r22
     7b4:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
     7b6:	dc 01       	movw	r26, r24
     7b8:	cb 01       	movw	r24, r22
     7ba:	90 5e       	subi	r25, 0xE0	; 224
     7bc:	a3 4e       	sbci	r26, 0xE3	; 227
     7be:	bf 4f       	sbci	r27, 0xFF	; 255
     7c0:	bc 01       	movw	r22, r24
     7c2:	cd 01       	movw	r24, r26
     7c4:	43 e0       	ldi	r20, 0x03	; 3
     7c6:	66 0f       	add	r22, r22
     7c8:	77 1f       	adc	r23, r23
     7ca:	88 1f       	adc	r24, r24
     7cc:	99 1f       	adc	r25, r25
     7ce:	4a 95       	dec	r20
     7d0:	d1 f7       	brne	.-12     	; 0x7c6 <uartSetBaudRate+0x18>
     7d2:	a9 01       	movw	r20, r18
     7d4:	98 01       	movw	r18, r16
     7d6:	e4 e0       	ldi	r30, 0x04	; 4
     7d8:	22 0f       	add	r18, r18
     7da:	33 1f       	adc	r19, r19
     7dc:	44 1f       	adc	r20, r20
     7de:	55 1f       	adc	r21, r21
     7e0:	ea 95       	dec	r30
     7e2:	d1 f7       	brne	.-12     	; 0x7d8 <uartSetBaudRate+0x2a>
     7e4:	0e 94 3f 09 	call	0x127e	; 0x127e <__udivmodsi4>
     7e8:	21 50       	subi	r18, 0x01	; 1
     7ea:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
     7ec:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
     7ee:	30 bd       	out	0x20, r19	; 32
	#endif
}
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	08 95       	ret

000007f6 <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
     7f6:	90 91 52 02 	lds	r25, 0x0252
     7fa:	99 23       	and	r25, r25
     7fc:	e1 f3       	breq	.-8      	; 0x7f6 <uartSendByte>
	// send byte
	outb(UDR, txData);
     7fe:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
     800:	10 92 52 02 	sts	0x0252, r1
     804:	08 95       	ret

00000806 <__vector_13>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_TRANS)
{
     806:	1f 92       	push	r1
     808:	0f 92       	push	r0
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	0f 92       	push	r0
     80e:	11 24       	eor	r1, r1
     810:	2f 93       	push	r18
     812:	3f 93       	push	r19
     814:	4f 93       	push	r20
     816:	5f 93       	push	r21
     818:	6f 93       	push	r22
     81a:	7f 93       	push	r23
     81c:	8f 93       	push	r24
     81e:	9f 93       	push	r25
     820:	af 93       	push	r26
     822:	bf 93       	push	r27
     824:	ef 93       	push	r30
     826:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
     828:	80 91 5b 02 	lds	r24, 0x025B
     82c:	88 23       	and	r24, r24
     82e:	71 f0       	breq	.+28     	; 0x84c <__vector_13+0x46>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
     830:	80 91 60 02 	lds	r24, 0x0260
     834:	90 91 61 02 	lds	r25, 0x0261
     838:	89 2b       	or	r24, r25
     83a:	31 f0       	breq	.+12     	; 0x848 <__vector_13+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
     83c:	8c e5       	ldi	r24, 0x5C	; 92
     83e:	92 e0       	ldi	r25, 0x02	; 2
     840:	0e 94 71 00 	call	0xe2	; 0xe2 <bufferGetFromFront>
     844:	8c b9       	out	0x0c, r24	; 12
     846:	05 c0       	rjmp	.+10     	; 0x852 <__vector_13+0x4c>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
     848:	10 92 5b 02 	sts	0x025B, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
     84c:	8f ef       	ldi	r24, 0xFF	; 255
     84e:	80 93 52 02 	sts	0x0252, r24
	}
}
     852:	ff 91       	pop	r31
     854:	ef 91       	pop	r30
     856:	bf 91       	pop	r27
     858:	af 91       	pop	r26
     85a:	9f 91       	pop	r25
     85c:	8f 91       	pop	r24
     85e:	7f 91       	pop	r23
     860:	6f 91       	pop	r22
     862:	5f 91       	pop	r21
     864:	4f 91       	pop	r20
     866:	3f 91       	pop	r19
     868:	2f 91       	pop	r18
     86a:	0f 90       	pop	r0
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	0f 90       	pop	r0
     870:	1f 90       	pop	r1
     872:	18 95       	reti

00000874 <__vector_11>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_RECV)
{
     874:	1f 92       	push	r1
     876:	0f 92       	push	r0
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	0f 92       	push	r0
     87c:	11 24       	eor	r1, r1
     87e:	2f 93       	push	r18
     880:	3f 93       	push	r19
     882:	4f 93       	push	r20
     884:	5f 93       	push	r21
     886:	6f 93       	push	r22
     888:	7f 93       	push	r23
     88a:	8f 93       	push	r24
     88c:	9f 93       	push	r25
     88e:	af 93       	push	r26
     890:	bf 93       	push	r27
     892:	ef 93       	push	r30
     894:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
     896:	8c b1       	in	r24, 0x0c	; 12

	// if there's a user function to handle this receive event
	if(UartRxFunc)
     898:	20 91 72 00 	lds	r18, 0x0072
     89c:	30 91 73 00 	lds	r19, 0x0073
     8a0:	23 2b       	or	r18, r19
     8a2:	31 f0       	breq	.+12     	; 0x8b0 <__vector_11+0x3c>
	{
		// call it and pass the received data
		UartRxFunc(c);
     8a4:	e0 91 72 00 	lds	r30, 0x0072
     8a8:	f0 91 73 00 	lds	r31, 0x0073
     8ac:	09 95       	icall
     8ae:	10 c0       	rjmp	.+32     	; 0x8d0 <__vector_11+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
     8b0:	68 2f       	mov	r22, r24
     8b2:	83 e5       	ldi	r24, 0x53	; 83
     8b4:	92 e0       	ldi	r25, 0x02	; 2
     8b6:	0e 94 95 00 	call	0x12a	; 0x12a <bufferAddToEnd>
     8ba:	81 11       	cpse	r24, r1
     8bc:	09 c0       	rjmp	.+18     	; 0x8d0 <__vector_11+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
     8be:	80 91 64 02 	lds	r24, 0x0264
     8c2:	90 91 65 02 	lds	r25, 0x0265
     8c6:	01 96       	adiw	r24, 0x01	; 1
     8c8:	90 93 65 02 	sts	0x0265, r25
     8cc:	80 93 64 02 	sts	0x0264, r24
		}
	}
}
     8d0:	ff 91       	pop	r31
     8d2:	ef 91       	pop	r30
     8d4:	bf 91       	pop	r27
     8d6:	af 91       	pop	r26
     8d8:	9f 91       	pop	r25
     8da:	8f 91       	pop	r24
     8dc:	7f 91       	pop	r23
     8de:	6f 91       	pop	r22
     8e0:	5f 91       	pop	r21
     8e2:	4f 91       	pop	r20
     8e4:	3f 91       	pop	r19
     8e6:	2f 91       	pop	r18
     8e8:	0f 90       	pop	r0
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	0f 90       	pop	r0
     8ee:	1f 90       	pop	r1
     8f0:	18 95       	reti

000008f2 <AppOutputCompare0>:
* Returns    : none
*********************************************************************************************************
*/
void AppOutputCompare0(void)
{
	OCR0 = TCNT0 + CYCLEN_60HZ;
     8f2:	82 b7       	in	r24, 0x32	; 50
     8f4:	80 51       	subi	r24, 0x10	; 16
     8f6:	8c bf       	out	0x3c, r24	; 60
	appl.system.fSysPwrZC = 1;
     8f8:	e6 e6       	ldi	r30, 0x66	; 102
     8fa:	f2 e0       	ldi	r31, 0x02	; 2
     8fc:	80 81       	ld	r24, Z
     8fe:	81 60       	ori	r24, 0x01	; 1
     900:	80 83       	st	Z, r24
     902:	08 95       	ret

00000904 <AppDisplay>:
* Returns    : true, power on control has finised. false, is processing
*********************************************************************************************************
*/
void AppDisplay(DISP_CODE DispCode, WORK_MODE mode)
{
	switch(DispCode)
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	88 30       	cpi	r24, 0x08	; 8
     908:	91 05       	cpc	r25, r1
     90a:	a8 f5       	brcc	.+106    	; 0x976 <AppDisplay+0x72>
     90c:	fc 01       	movw	r30, r24
     90e:	e6 5d       	subi	r30, 0xD6	; 214
     910:	ff 4f       	sbci	r31, 0xFF	; 255
     912:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__tablejump2__>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(START_CHAR, SSD_0HZ, SSD_RED);
     916:	40 e0       	ldi	r20, 0x00	; 0
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	29 c0       	rjmp	.+82     	; 0x972 <AppDisplay+0x6e>
			break;
			
		case CURRENT_VALUE:
			if(mode == PWR_ON)
     920:	61 30       	cpi	r22, 0x01	; 1
     922:	29 f0       	breq	.+10     	; 0x92e <AppDisplay+0x2a>
			{
				SSDDisplayDec(CURRENT_VALUE, SSD_0HZ, SSD_RED);
     924:	40 e0       	ldi	r20, 0x00	; 0
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	22 c0       	rjmp	.+68     	; 0x972 <AppDisplay+0x6e>
			}
			else if(mode == NORMAL)
			{
				SSDDisplayDec(MeasureGetResult0(), SSD_0HZ, SSD_RED);
     92e:	0e 94 66 07 	call	0xecc	; 0xecc <MeasureGetResult0>
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	1d c0       	rjmp	.+58     	; 0x972 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(FULL_WAREHOUSE, SSD_0HZ, SSD_RED);
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	18 c0       	rjmp	.+48     	; 0x972 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(EMPTY_WAREHOUSE, SSD_0HZ, SSD_RED);
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	13 c0       	rjmp	.+38     	; 0x972 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(ALARM_H_PERCENT, SSD_0HZ, SSD_RED);
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	84 e0       	ldi	r24, 0x04	; 4
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e c0       	rjmp	.+28     	; 0x972 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(ALARM_L_PERCENT, SSD_0HZ, SSD_RED);
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	85 e0       	ldi	r24, 0x05	; 5
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	09 c0       	rjmp	.+18     	; 0x972 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(RESPONSE_TIME, SSD_0HZ, SSD_RED);
     960:	40 e0       	ldi	r20, 0x00	; 0
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	86 e0       	ldi	r24, 0x06	; 6
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	04 c0       	rjmp	.+8      	; 0x972 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(REMOTE_ADDR, SSD_0HZ, SSD_RED);
     96a:	40 e0       	ldi	r20, 0x00	; 0
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	87 e0       	ldi	r24, 0x07	; 7
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <SSDDisplayDec>
     976:	08 95       	ret

00000978 <McuInit>:
*/

void McuInit(void)
{
	/* Initial uart */
	uartInit();	
     978:	0e 94 c1 03 	call	0x782	; 0x782 <uartInit>
	uartSetBaudRate(19200);
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	7b e4       	ldi	r23, 0x4B	; 75
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	0e 94 d7 03 	call	0x7ae	; 0x7ae <uartSetBaudRate>
	rprintfInit(uartSendByte);
     988:	8b ef       	ldi	r24, 0xFB	; 251
     98a:	93 e0       	ldi	r25, 0x03	; 3
     98c:	0e 94 c1 00 	call	0x182	; 0x182 <rprintfInit>

	/* Initial ADC */
	ADCInit();
     990:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <ADCInit>
	
	/* Initial T0, T1 and T2 */
	timerInit();
     994:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <timerInit>
	sbi(DDRD, PD4);		/* set PD4(OC1B) as output */
     998:	8c 9a       	sbi	0x11, 4	; 17
	sbi(DDRD, PD5);		/* set PD5(OC1A) as output */
     99a:	8d 9a       	sbi	0x11, 5	; 17
	timer1PWMInit(8);	/* 8 bit PWM resolution, phase correct PWM mode, FREQpwm=F_CPU/(2*N*TOP) */
     99c:	88 e0       	ldi	r24, 0x08	; 8
     99e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <timer1PWMInit>
	timer1PWMAOn();		/* turn on the channel A PWM output of timer1 */
     9a2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <timer1PWMAOn>
	timer1PWMBOn();		/* turn on the channel B PWM output of timer1 */
     9a6:	0c 94 03 02 	jmp	0x406	; 0x406 <timer1PWMBOn>

000009aa <ApplInit>:
*********************************************************************************************************
*/

void ApplInit(void)
{
	ButtonInit();
     9aa:	0e 94 90 08 	call	0x1120	; 0x1120 <ButtonInit>
	LEDInit();
     9ae:	0e 94 52 06 	call	0xca4	; 0xca4 <LEDInit>
	SSDInit();
     9b2:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <SSDInit>
*/

void ApplDataInit(void)
{
	/* Following for initial power on display steps */
	appl.workMode = PWR_ON;
     9b6:	e6 e6       	ldi	r30, 0x66	; 102
     9b8:	f2 e0       	ldi	r31, 0x02	; 2
     9ba:	15 8a       	std	Z+21, r1	; 0x15
	appl.CurEvent = NULL_EVENT;
     9bc:	16 8a       	std	Z+22, r1	; 0x16
	appl.LastEvent = NULL_EVENT;
     9be:	17 8a       	std	Z+23, r1	; 0x17
	appl.second = 0;
     9c0:	10 8e       	std	Z+24, r1	; 0x18
	appl.ModeTimer = TIME_SWITCH_TOTAL;
     9c2:	80 ee       	ldi	r24, 0xE0	; 224
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	94 8f       	std	Z+28, r25	; 0x1c
     9c8:	83 8f       	std	Z+27, r24	; 0x1b
	appl.DispCode= START_CHAR;
     9ca:	15 8e       	std	Z+29, r1	; 0x1d
{
	ButtonInit();
	LEDInit();
	SSDInit();
	ApplDataInit();
	MeasureInit();
     9cc:	0e 94 0a 07 	call	0xe14	; 0xe14 <MeasureInit>
	
	timerAttach(TIMER0OUTCOMPARE_INT, AppOutputCompare0);
     9d0:	69 e7       	ldi	r22, 0x79	; 121
     9d2:	74 e0       	ldi	r23, 0x04	; 4
     9d4:	87 e0       	ldi	r24, 0x07	; 7
     9d6:	0e 94 bd 01 	call	0x37a	; 0x37a <timerAttach>
	
	rprintf("Main board here!\n" );	
     9da:	85 e7       	ldi	r24, 0x75	; 117
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	9f 93       	push	r25
     9e0:	8f 93       	push	r24
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	8f 93       	push	r24
     9e6:	0e 94 df 00 	call	0x1be	; 0x1be <rprintf1RamRom>
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	08 95       	ret

000009f2 <AppCycleUpdate>:
*
* Returns    : none
*********************************************************************************************************
*/
void AppCycleUpdate(void)
{	
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
	char tempChar;
	static uint16_t cnt;
	cnt++;
     9f6:	80 91 f4 00 	lds	r24, 0x00F4
     9fa:	90 91 f5 00 	lds	r25, 0x00F5
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	90 93 f5 00 	sts	0x00F5, r25
     a04:	80 93 f4 00 	sts	0x00F4, r24
* Returns    : none
*********************************************************************************************************
*/
void AppUpdateTimers(void)
{
	if(++appl.second > TIMER_1_SEC_60HZ) 
     a08:	80 91 7e 02 	lds	r24, 0x027E
     a0c:	8f 5f       	subi	r24, 0xFF	; 255
     a0e:	8d 33       	cpi	r24, 0x3D	; 61
     a10:	18 f4       	brcc	.+6      	; 0xa18 <AppCycleUpdate+0x26>
     a12:	80 93 7e 02 	sts	0x027E, r24
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <AppCycleUpdate+0x2a>
	{
		appl.second = 0;
     a18:	10 92 7e 02 	sts	0x027E, r1
#endif
#endif
		
	}
	
	if(appl.ModeTimer != TIMER_TIMEOUT && appl.ModeTimer != TIMER_INT_DISABLED) appl.ModeTimer--;
     a1c:	80 91 81 02 	lds	r24, 0x0281
     a20:	90 91 82 02 	lds	r25, 0x0282
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	8e 3f       	cpi	r24, 0xFE	; 254
     a28:	2f ef       	ldi	r18, 0xFF	; 255
     a2a:	92 07       	cpc	r25, r18
     a2c:	20 f4       	brcc	.+8      	; 0xa36 <AppCycleUpdate+0x44>
     a2e:	90 93 82 02 	sts	0x0282, r25
     a32:	80 93 81 02 	sts	0x0281, r24
	cnt++;
	
	AppUpdateTimers();

	/* work mode convert according to ModeTimer and push button events */
	switch(appl.workMode)
     a36:	c0 91 7b 02 	lds	r28, 0x027B
     a3a:	c1 30       	cpi	r28, 0x01	; 1
     a3c:	09 f4       	brne	.+2      	; 0xa40 <AppCycleUpdate+0x4e>
     a3e:	50 c0       	rjmp	.+160    	; 0xae0 <AppCycleUpdate+0xee>
     a40:	18 f0       	brcs	.+6      	; 0xa48 <AppCycleUpdate+0x56>
     a42:	c2 30       	cpi	r28, 0x02	; 2
     a44:	89 f1       	breq	.+98     	; 0xaa8 <AppCycleUpdate+0xb6>
     a46:	07 c1       	rjmp	.+526    	; 0xc56 <AppCycleUpdate+0x264>
	{
		case PWR_ON:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
     a48:	80 91 81 02 	lds	r24, 0x0281
     a4c:	90 91 82 02 	lds	r25, 0x0282
     a50:	9c 01       	movw	r18, r24
     a52:	21 50       	subi	r18, 0x01	; 1
     a54:	31 09       	sbc	r19, r1
     a56:	2e 3f       	cpi	r18, 0xFE	; 254
     a58:	3f 4f       	sbci	r19, 0xFF	; 255
     a5a:	88 f5       	brcc	.+98     	; 0xabe <AppCycleUpdate+0xcc>
			{
				if(appl.ModeTimer % (TIME_CONTENT_SWITCH - 1) == 0)
     a5c:	6b e3       	ldi	r22, 0x3B	; 59
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	0e 94 2b 09 	call	0x1256	; 0x1256 <__udivmodhi4>
     a64:	89 2b       	or	r24, r25
     a66:	41 f4       	brne	.+16     	; 0xa78 <AppCycleUpdate+0x86>
				{
					AppDisplay(++appl.DispCode,PWR_ON);
     a68:	80 91 83 02 	lds	r24, 0x0283
     a6c:	8f 5f       	subi	r24, 0xFF	; 255
     a6e:	80 93 83 02 	sts	0x0283, r24
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	0e 94 82 04 	call	0x904	; 0x904 <AppDisplay>
				}
				
				if(ButtonJMP1HeldEvent() && (ButtonGetHoldTime() == TIME_B_HELD_RST))	/* Press/Held JMP1 after power on will set to factory default */
     a78:	0e 94 44 06 	call	0xc88	; 0xc88 <ButtonJMP1HeldEvent>
     a7c:	88 23       	and	r24, r24
     a7e:	09 f4       	brne	.+2      	; 0xa82 <AppCycleUpdate+0x90>
     a80:	ea c0       	rjmp	.+468    	; 0xc56 <AppCycleUpdate+0x264>
     a82:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <ButtonGetHoldTime>
     a86:	cc 97       	sbiw	r24, 0x3c	; 60
     a88:	09 f0       	breq	.+2      	; 0xa8c <AppCycleUpdate+0x9a>
     a8a:	e5 c0       	rjmp	.+458    	; 0xc56 <AppCycleUpdate+0x264>
				{
					/* Following for initial power on display steps */
					appl.ModeTimer = TIME_SWITCH_TOTAL;
     a8c:	80 ee       	ldi	r24, 0xE0	; 224
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	90 93 82 02 	sts	0x0282, r25
     a94:	80 93 81 02 	sts	0x0281, r24
					appl.workMode = PWR_ON;
     a98:	10 92 7b 02 	sts	0x027B, r1
					appl.LastEvent = JP1_HELD;
     a9c:	84 e0       	ldi	r24, 0x04	; 4
     a9e:	80 93 7d 02 	sts	0x027D, r24
					appl.DispCode= START_CHAR;
     aa2:	10 92 83 02 	sts	0x0283, r1
     aa6:	d7 c0       	rjmp	.+430    	; 0xc56 <AppCycleUpdate+0x264>
				}
			}
			break;
			
		case SETTING:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
     aa8:	80 91 81 02 	lds	r24, 0x0281
     aac:	90 91 82 02 	lds	r25, 0x0282
     ab0:	9c 01       	movw	r18, r24
     ab2:	21 50       	subi	r18, 0x01	; 1
     ab4:	31 09       	sbc	r19, r1
     ab6:	2e 3f       	cpi	r18, 0xFE	; 254
     ab8:	3f 4f       	sbci	r19, 0xFF	; 255
     aba:	08 f4       	brcc	.+2      	; 0xabe <AppCycleUpdate+0xcc>
     abc:	4c c0       	rjmp	.+152    	; 0xb56 <AppCycleUpdate+0x164>
					appl.workMode = PWR_ON;
					appl.LastEvent = JP1_HELD;
					appl.DispCode= START_CHAR;
				}
			}
			else if(appl.ModeTimer == TIMER_TIMEOUT)
     abe:	89 2b       	or	r24, r25
     ac0:	09 f0       	breq	.+2      	; 0xac4 <AppCycleUpdate+0xd2>
     ac2:	c9 c0       	rjmp	.+402    	; 0xc56 <AppCycleUpdate+0x264>
			{
				appl.ModeTimer = TIMER_INT_DISABLED;	/* Disable count */
     ac4:	8f ef       	ldi	r24, 0xFF	; 255
     ac6:	9f ef       	ldi	r25, 0xFF	; 255
     ac8:	90 93 82 02 	sts	0x0282, r25
     acc:	80 93 81 02 	sts	0x0281, r24
				appl.workMode = NORMAL;					/* convert to NORMAL */
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	80 93 7b 02 	sts	0x027B, r24
				appl.LastEvent = NULL_EVENT;			/* update  LastEvent */
     ad6:	10 92 7d 02 	sts	0x027D, r1
				appl.DispCode = CURRENT_VALUE;			/* Initial to display material value in setting mode */
     ada:	80 93 83 02 	sts	0x0283, r24
     ade:	bb c0       	rjmp	.+374    	; 0xc56 <AppCycleUpdate+0x264>
			}
			break;
			
		case NORMAL:			
			if(ButtonGetReleased())
     ae0:	0e 94 de 08 	call	0x11bc	; 0x11bc <ButtonGetReleased>
     ae4:	88 23       	and	r24, r24
     ae6:	a1 f0       	breq	.+40     	; 0xb10 <AppCycleUpdate+0x11e>
			{
				if(ButtonJMP2ReleasedEvent())
     ae8:	0e 94 48 06 	call	0xc90	; 0xc90 <ButtonJMP2ReleasedEvent>
     aec:	88 23       	and	r24, r24
     aee:	61 f0       	breq	.+24     	; 0xb08 <AppCycleUpdate+0x116>
				{
					appl.ModeTimer = TIME_D_CODE_HELD;	/* Disable count */
     af0:	84 eb       	ldi	r24, 0xB4	; 180
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	90 93 82 02 	sts	0x0282, r25
     af8:	80 93 81 02 	sts	0x0281, r24
					appl.workMode = SETTING; 			/* convert to SETTING */
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	80 93 7b 02 	sts	0x027B, r24
					appl.LastEvent = JP2_PRESS;			/* update  LastEvent */
     b02:	c0 93 7d 02 	sts	0x027D, r28
     b06:	a7 c0       	rjmp	.+334    	; 0xc56 <AppCycleUpdate+0x264>
	//rprintf("mT=%d,0x%x\n",appl.ModeTimer,appl.ModeTimer);
	rprintf("dC=%d\n\n",appl.DispCode);
	//rprintf("lE=%d\n\n",appl.LastEvent);
#endif
#endif
}
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
				{
					appl.ModeTimer = TIME_D_CODE_HELD;	/* Disable count */
					appl.workMode = SETTING; 			/* convert to SETTING */
					appl.LastEvent = JP2_PRESS;			/* update  LastEvent */
				}
				else if(ButtonJMP1ReleasedEvent())
     b0c:	0c 94 40 06 	jmp	0xc80	; 0xc80 <ButtonJMP1ReleasedEvent>
				{
				}
			}
			else if(ButtonGetHeld())
     b10:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <ButtonGetHeld>
     b14:	88 23       	and	r24, r24
     b16:	41 f0       	breq	.+16     	; 0xb28 <AppCycleUpdate+0x136>
			{
				if(ButtonJMP2HeldEvent())//(ButtonJMP2HeldEvent() && (ButtonGetHoldTime()%(TIMER_1_SEC_60HZ/2) == 0))
     b18:	0e 94 4d 06 	call	0xc9a	; 0xc9a <ButtonJMP2HeldEvent>
     b1c:	81 11       	cpse	r24, r1
     b1e:	74 c0       	rjmp	.+232    	; 0xc08 <AppCycleUpdate+0x216>
	//rprintf("mT=%d,0x%x\n",appl.ModeTimer,appl.ModeTimer);
	rprintf("dC=%d\n\n",appl.DispCode);
	//rprintf("lE=%d\n\n",appl.LastEvent);
#endif
#endif
}
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
				{
					appl.ModeTimer = TIME_D_CODE_HELD;	/* Disable count */
					appl.workMode = SETTING; 			/* convert to SETTING */
					appl.LastEvent = JP2_HELD;			/* update  LastEvent */
				}
				else if(ButtonJMP1HeldEvent())
     b24:	0c 94 44 06 	jmp	0xc88	; 0xc88 <ButtonJMP1HeldEvent>
				}
			}
			else
			{
				/* Display current material, and display color change according to value compare with user setting */
				AppDisplay(appl.DispCode,NORMAL);
     b28:	61 e0       	ldi	r22, 0x01	; 1
     b2a:	80 91 83 02 	lds	r24, 0x0283
     b2e:	0e 94 82 04 	call	0x904	; 0x904 <AppDisplay>
				
				if(uartRxBuffer.size - bufferIsNotFull(&uartRxBuffer) != 0)
     b32:	c0 91 55 02 	lds	r28, 0x0255
     b36:	d0 91 56 02 	lds	r29, 0x0256
     b3a:	83 e5       	ldi	r24, 0x53	; 83
     b3c:	92 e0       	ldi	r25, 0x02	; 2
     b3e:	0e 94 b6 00 	call	0x16c	; 0x16c <bufferIsNotFull>
     b42:	c8 17       	cp	r28, r24
     b44:	d9 07       	cpc	r29, r25
     b46:	09 f4       	brne	.+2      	; 0xb4a <AppCycleUpdate+0x158>
     b48:	86 c0       	rjmp	.+268    	; 0xc56 <AppCycleUpdate+0x264>
				{
					tempChar = bufferGetFromFront(&uartRxBuffer);
     b4a:	83 e5       	ldi	r24, 0x53	; 83
     b4c:	92 e0       	ldi	r25, 0x02	; 2
	//rprintf("mT=%d,0x%x\n",appl.ModeTimer,appl.ModeTimer);
	rprintf("dC=%d\n\n",appl.DispCode);
	//rprintf("lE=%d\n\n",appl.LastEvent);
#endif
#endif
}
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
				/* Display current material, and display color change according to value compare with user setting */
				AppDisplay(appl.DispCode,NORMAL);
				
				if(uartRxBuffer.size - bufferIsNotFull(&uartRxBuffer) != 0)
				{
					tempChar = bufferGetFromFront(&uartRxBuffer);
     b52:	0c 94 71 00 	jmp	0xe2	; 0xe2 <bufferGetFromFront>
			break;
			
		case SETTING:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
			{
				if(ButtonGetReleased())
     b56:	0e 94 de 08 	call	0x11bc	; 0x11bc <ButtonGetReleased>
     b5a:	88 23       	and	r24, r24
     b5c:	b9 f1       	breq	.+110    	; 0xbcc <AppCycleUpdate+0x1da>
				{
					if(ButtonJMP2ReleasedEvent())
     b5e:	0e 94 48 06 	call	0xc90	; 0xc90 <ButtonJMP2ReleasedEvent>
     b62:	88 23       	and	r24, r24
     b64:	b9 f0       	breq	.+46     	; 0xb94 <AppCycleUpdate+0x1a2>
					{
						if(--appl.DispCode < CURRENT_VALUE)
     b66:	80 91 83 02 	lds	r24, 0x0283
     b6a:	81 50       	subi	r24, 0x01	; 1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <AppCycleUpdate+0x17e>
						{
							appl.DispCode = REMOTE_ADDR;
     b6e:	87 e0       	ldi	r24, 0x07	; 7
     b70:	80 93 83 02 	sts	0x0283, r24
						}
						AppDisplay(appl.DispCode,SETTING);
     b74:	62 e0       	ldi	r22, 0x02	; 2
     b76:	80 91 83 02 	lds	r24, 0x0283
     b7a:	0e 94 82 04 	call	0x904	; 0x904 <AppDisplay>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     b7e:	84 eb       	ldi	r24, 0xB4	; 180
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	90 93 82 02 	sts	0x0282, r25
     b86:	80 93 81 02 	sts	0x0281, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	80 93 7b 02 	sts	0x027B, r24
						appl.LastEvent = JP2_PRESS; 		/* update  LastEvent */
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	5f c0       	rjmp	.+190    	; 0xc52 <AppCycleUpdate+0x260>
					}
					else if(ButtonJMP1ReleasedEvent())
     b94:	0e 94 40 06 	call	0xc80	; 0xc80 <ButtonJMP1ReleasedEvent>
     b98:	88 23       	and	r24, r24
     b9a:	09 f4       	brne	.+2      	; 0xb9e <AppCycleUpdate+0x1ac>
     b9c:	5c c0       	rjmp	.+184    	; 0xc56 <AppCycleUpdate+0x264>
					{
						SSDDisplayDec(--appl.config.FullWarehouse[DATA_SET], SSD_0HZ, SSD_GREEN);
     b9e:	80 91 69 02 	lds	r24, 0x0269
     ba2:	90 91 6a 02 	lds	r25, 0x026A
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	90 93 6a 02 	sts	0x026A, r25
     bac:	80 93 69 02 	sts	0x0269, r24
     bb0:	41 e0       	ldi	r20, 0x01	; 1
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	0e 94 cc 07 	call	0xf98	; 0xf98 <SSDDisplayDec>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     bb8:	84 eb       	ldi	r24, 0xB4	; 180
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	90 93 82 02 	sts	0x0282, r25
     bc0:	80 93 81 02 	sts	0x0281, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     bc4:	c0 93 7b 02 	sts	0x027B, r28
						appl.LastEvent = JP1_PRESS;			/* update  LastEvent */
     bc8:	83 e0       	ldi	r24, 0x03	; 3
     bca:	43 c0       	rjmp	.+134    	; 0xc52 <AppCycleUpdate+0x260>
					}
				}
				else if(ButtonGetHeld())
     bcc:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <ButtonGetHeld>
     bd0:	88 23       	and	r24, r24
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <AppCycleUpdate+0x1e4>
     bd4:	40 c0       	rjmp	.+128    	; 0xc56 <AppCycleUpdate+0x264>
				{
					if(ButtonJMP2HeldEvent() && (ButtonGetHoldTime()%(TIMER_1_SEC_60HZ/6) == 0))	/* fast increase */
     bd6:	0e 94 4d 06 	call	0xc9a	; 0xc9a <ButtonJMP2HeldEvent>
     bda:	88 23       	and	r24, r24
     bdc:	f9 f0       	breq	.+62     	; 0xc1c <AppCycleUpdate+0x22a>
     bde:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <ButtonGetHoldTime>
     be2:	6a e0       	ldi	r22, 0x0A	; 10
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	0e 94 2b 09 	call	0x1256	; 0x1256 <__udivmodhi4>
     bea:	89 2b       	or	r24, r25
     bec:	b9 f4       	brne	.+46     	; 0xc1c <AppCycleUpdate+0x22a>
					{
						if(++appl.DispCode > REMOTE_ADDR)
     bee:	80 91 83 02 	lds	r24, 0x0283
     bf2:	8f 5f       	subi	r24, 0xFF	; 255
     bf4:	88 30       	cpi	r24, 0x08	; 8
     bf6:	08 f0       	brcs	.+2      	; 0xbfa <AppCycleUpdate+0x208>
						{
							appl.DispCode = CURRENT_VALUE;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	80 93 83 02 	sts	0x0283, r24
						}
						AppDisplay(appl.DispCode,SETTING);
     bfe:	62 e0       	ldi	r22, 0x02	; 2
     c00:	80 91 83 02 	lds	r24, 0x0283
     c04:	0e 94 82 04 	call	0x904	; 0x904 <AppDisplay>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     c08:	84 eb       	ldi	r24, 0xB4	; 180
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	90 93 82 02 	sts	0x0282, r25
     c10:	80 93 81 02 	sts	0x0281, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     c14:	82 e0       	ldi	r24, 0x02	; 2
     c16:	80 93 7b 02 	sts	0x027B, r24
     c1a:	1b c0       	rjmp	.+54     	; 0xc52 <AppCycleUpdate+0x260>
						appl.LastEvent = JP2_HELD;			/* update  LastEvent */
					}
					else if(ButtonJMP1HeldEvent())
     c1c:	0e 94 44 06 	call	0xc88	; 0xc88 <ButtonJMP1HeldEvent>
     c20:	88 23       	and	r24, r24
     c22:	c9 f0       	breq	.+50     	; 0xc56 <AppCycleUpdate+0x264>
					{
						SSDDisplayDec(++appl.config.FullWarehouse[DATA_SET], SSD_0HZ, SSD_AMBER);
     c24:	80 91 69 02 	lds	r24, 0x0269
     c28:	90 91 6a 02 	lds	r25, 0x026A
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	90 93 6a 02 	sts	0x026A, r25
     c32:	80 93 69 02 	sts	0x0269, r24
     c36:	42 e0       	ldi	r20, 0x02	; 2
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	0e 94 cc 07 	call	0xf98	; 0xf98 <SSDDisplayDec>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     c3e:	84 eb       	ldi	r24, 0xB4	; 180
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	90 93 82 02 	sts	0x0282, r25
     c46:	80 93 81 02 	sts	0x0281, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     c4a:	82 e0       	ldi	r24, 0x02	; 2
     c4c:	80 93 7b 02 	sts	0x027B, r24
						appl.LastEvent = JP1_HELD;			/* update  LastEvent */
     c50:	84 e0       	ldi	r24, 0x04	; 4
     c52:	80 93 7d 02 	sts	0x027D, r24
	//rprintf("mT=%d,0x%x\n",appl.ModeTimer,appl.ModeTimer);
	rprintf("dC=%d\n\n",appl.DispCode);
	//rprintf("lE=%d\n\n",appl.LastEvent);
#endif
#endif
}
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret

00000c5c <AppWaitZeroCrossing>:
* Returns    : true/false means failed or pass
*********************************************************************************************************
*/
void AppWaitZeroCrossing(void)
{
	while(appl.system.fSysPwrZC == 0);
     c5c:	80 91 66 02 	lds	r24, 0x0266
     c60:	80 ff       	sbrs	r24, 0
     c62:	fc cf       	rjmp	.-8      	; 0xc5c <AppWaitZeroCrossing>
	appl.system.fSysPwrZC = 0;
     c64:	80 91 66 02 	lds	r24, 0x0266
     c68:	8e 7f       	andi	r24, 0xFE	; 254
     c6a:	80 93 66 02 	sts	0x0266, r24
     c6e:	08 95       	ret

00000c70 <ButtonInitEx>:
void ButtonInitEx(void)
{	
	/* 
	Set PC1-PC0 as input, the tow IO with external pull up 10K resistor.
	*/
	DDRC &= ((1<<DDC1) | (1<<DDC0));
     c70:	84 b3       	in	r24, 0x14	; 20
     c72:	83 70       	andi	r24, 0x03	; 3
     c74:	84 bb       	out	0x14, r24	; 20
     c76:	08 95       	ret

00000c78 <ButtonGetIO_StateEx>:
*/
ButtonDataType ButtonGetIO_StateEx(void)
{
	ButtonDataType io_state;
	
	io_state = (~PINC) & ((1<<PINC1) | (1<<PINC0));	/* Get PC1-PC0 IO state */
     c78:	83 b3       	in	r24, 0x13	; 19
     c7a:	80 95       	com	r24
	
	return  io_state;
}
     c7c:	83 70       	andi	r24, 0x03	; 3
     c7e:	08 95       	ret

00000c80 <ButtonJMP1ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP1) 
     c80:	80 91 cf 02 	lds	r24, 0x02CF
	{
		return true;
	}
    
    return false;
}
     c84:	81 70       	andi	r24, 0x01	; 1
     c86:	08 95       	ret

00000c88 <ButtonJMP1HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1HeldEvent(void)
{
	if (button.buttonsHeld.JMP1) 
     c88:	80 91 d0 02 	lds	r24, 0x02D0
	{
		return true;
	}
    
    return false;
}
     c8c:	81 70       	andi	r24, 0x01	; 1
     c8e:	08 95       	ret

00000c90 <ButtonJMP2ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP2) 
     c90:	80 91 cf 02 	lds	r24, 0x02CF
	{
		return true;
	}
    
    return false;
}
     c94:	86 95       	lsr	r24
     c96:	81 70       	andi	r24, 0x01	; 1
     c98:	08 95       	ret

00000c9a <ButtonJMP2HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2HeldEvent(void)
{
	if (button.buttonsHeld.JMP2) 
     c9a:	80 91 d0 02 	lds	r24, 0x02D0
	{
		return true;
	}
    
    return false;
}
     c9e:	86 95       	lsr	r24
     ca0:	81 70       	andi	r24, 0x01	; 1
     ca2:	08 95       	ret

00000ca4 <LEDInit>:
	uint8_t i;
	
	/* 
	Set PB2-PB1 as output to drive to LEDs, default turn off all LEDs
	*/
	DDRB &= ~((1<<DDB2) | (1<<DDB1));
     ca4:	87 b3       	in	r24, 0x17	; 23
     ca6:	89 7f       	andi	r24, 0xF9	; 249
     ca8:	87 bb       	out	0x17, r24	; 23
	DDRB |= ((1<<DDB2) | (1<<DDB1));
     caa:	87 b3       	in	r24, 0x17	; 23
     cac:	86 60       	ori	r24, 0x06	; 6
     cae:	87 bb       	out	0x17, r24	; 23
	PORTB |= ((1<<DDB2) | (1<<DDB1));
     cb0:	88 b3       	in	r24, 0x18	; 24
     cb2:	86 60       	ori	r24, 0x06	; 6
     cb4:	88 bb       	out	0x18, r24	; 24
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
     cb6:	e9 e9       	ldi	r30, 0x99	; 153
     cb8:	f2 e0       	ldi	r31, 0x02	; 2
     cba:	80 81       	ld	r24, Z
     cbc:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
     cbe:	84 60       	ori	r24, 0x04	; 4
     cc0:	88 60       	ori	r24, 0x08	; 8
     cc2:	80 83       	st	Z, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
     cc4:	9c e3       	ldi	r25, 0x3C	; 60
     cc6:	91 83       	std	Z+1, r25	; 0x01
	DDRB |= ((1<<DDB2) | (1<<DDB1));
	PORTB |= ((1<<DDB2) | (1<<DDB1));
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
     cc8:	ab e9       	ldi	r26, 0x9B	; 155
     cca:	b2 e0       	ldi	r27, 0x02	; 2
     ccc:	8c 91       	ld	r24, X
     cce:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
     cd0:	84 60       	ori	r24, 0x04	; 4
     cd2:	88 60       	ori	r24, 0x08	; 8
     cd4:	8c 93       	st	X, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
     cd6:	93 83       	std	Z+3, r25	; 0x03
     cd8:	08 95       	ret

00000cda <LEDCycleUpdate>:
*
*********************************************************************************************************
*/

void LEDCycleUpdate(void)
{
     cda:	aa e9       	ldi	r26, 0x9A	; 154
     cdc:	b2 e0       	ldi	r27, 0x02	; 2
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
     ce2:	ca 01       	movw	r24, r20
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	fc 01       	movw	r30, r24
     cea:	e7 56       	subi	r30, 0x67	; 103
     cec:	fd 4f       	sbci	r31, 0xFD	; 253
     cee:	30 81       	ld	r19, Z
     cf0:	37 70       	andi	r19, 0x07	; 7
		ft = LEDs[i].flashTimer;
     cf2:	2c 91       	ld	r18, X
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
     cf4:	34 30       	cpi	r19, 0x04	; 4
     cf6:	19 f0       	breq	.+6      	; 0xcfe <LEDCycleUpdate+0x24>
	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
		ft = LEDs[i].flashTimer;
		
		ft += rate;
     cf8:	23 0f       	add	r18, r19
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
     cfa:	2d 33       	cpi	r18, 0x3D	; 61
     cfc:	38 f0       	brcs	.+14     	; 0xd0c <LEDCycleUpdate+0x32>
		{
			ft = 0;
			LEDs[i].led.state = S_OFF;
     cfe:	fc 01       	movw	r30, r24
     d00:	e7 56       	subi	r30, 0x67	; 103
     d02:	fd 4f       	sbci	r31, 0xFD	; 253
     d04:	20 81       	ld	r18, Z
     d06:	28 60       	ori	r18, 0x08	; 8
     d08:	20 83       	st	Z, r18
		ft = LEDs[i].flashTimer;
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
		{
			ft = 0;
     d0a:	20 e0       	ldi	r18, 0x00	; 0
			LEDs[i].led.state = S_OFF;
		}
		LEDs[i].flashTimer = ft;
     d0c:	2c 93       	st	X, r18
		
		if((rate == LED_0HZ) || (ft > (LED_ONE_SEC/2)))
     d0e:	33 23       	and	r19, r19
     d10:	11 f0       	breq	.+4      	; 0xd16 <LEDCycleUpdate+0x3c>
     d12:	2f 31       	cpi	r18, 0x1F	; 31
     d14:	30 f0       	brcs	.+12     	; 0xd22 <LEDCycleUpdate+0x48>
		{
			LEDs[i].led.state = S_ON;
     d16:	fc 01       	movw	r30, r24
     d18:	e7 56       	subi	r30, 0x67	; 103
     d1a:	fd 4f       	sbci	r31, 0xFD	; 253
     d1c:	80 81       	ld	r24, Z
     d1e:	87 7f       	andi	r24, 0xF7	; 247
     d20:	80 83       	st	Z, r24
     d22:	12 96       	adiw	r26, 0x02	; 2
{
	LED_RATE rate;
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
     d24:	41 30       	cpi	r20, 0x01	; 1
     d26:	51 05       	cpc	r21, r1
     d28:	19 f0       	breq	.+6      	; 0xd30 <LEDCycleUpdate+0x56>
     d2a:	41 e0       	ldi	r20, 0x01	; 1
     d2c:	50 e0       	ldi	r21, 0x00	; 0
     d2e:	d9 cf       	rjmp	.-78     	; 0xce2 <LEDCycleUpdate+0x8>
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */

	if(LEDs[0].led.state == S_OFF)
     d30:	80 91 99 02 	lds	r24, 0x0299
     d34:	83 ff       	sbrs	r24, 3
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <LEDCycleUpdate+0x62>
	{
		state |= (1<<DDB1);
     d38:	82 e0       	ldi	r24, 0x02	; 2
     d3a:	01 c0       	rjmp	.+2      	; 0xd3e <LEDCycleUpdate+0x64>
*
*********************************************************************************************************
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */
     d3c:	80 e0       	ldi	r24, 0x00	; 0
	if(LEDs[0].led.state == S_OFF)
	{
		state |= (1<<DDB1);
	}
	
	if(LEDs[1].led.state == S_OFF)
     d3e:	90 91 9b 02 	lds	r25, 0x029B
     d42:	93 fd       	sbrc	r25, 3
	{
		state |= (1<<DDB2);
     d44:	84 60       	ori	r24, 0x04	; 4
	}

	PORTB &= ~((1<<DDB2) | (1<<DDB1));
     d46:	98 b3       	in	r25, 0x18	; 24
     d48:	99 7f       	andi	r25, 0xF9	; 249
     d4a:	98 bb       	out	0x18, r25	; 24
	PORTB |= state;
     d4c:	98 b3       	in	r25, 0x18	; 24
     d4e:	89 2b       	or	r24, r25
     d50:	88 bb       	out	0x18, r24	; 24
     d52:	08 95       	ret

00000d54 <main>:
int main(void)
{	
	/*
	Calll all initial function
	*/
	McuInit();
     d54:	0e 94 bc 04 	call	0x978	; 0x978 <McuInit>
	ApplInit();
     d58:	0e 94 d5 04 	call	0x9aa	; 0x9aa <ApplInit>

	while(1)
	{
		AppWaitZeroCrossing();
     d5c:	0e 94 2e 06 	call	0xc5c	; 0xc5c <AppWaitZeroCrossing>
		ButtonCycleUpdate();
     d60:	0e 94 92 08 	call	0x1124	; 0x1124 <ButtonCycleUpdate>
		AppCycleUpdate();
     d64:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <AppCycleUpdate>
		LEDCycleUpdate();
     d68:	0e 94 6d 06 	call	0xcda	; 0xcda <LEDCycleUpdate>
		SSDCycleUpdate();
     d6c:	0e 94 85 07 	call	0xf0a	; 0xf0a <SSDCycleUpdate>
		MeasureCycleUpdate();
     d70:	0e 94 32 07 	call	0xe64	; 0xe64 <MeasureCycleUpdate>
	}
     d74:	f3 cf       	rjmp	.-26     	; 0xd5c <main+0x8>

00000d76 <arraySorting>:
* Returns    :  None
*
*********************************************************************************************************
*/
void arraySorting(uint16_t *ptr, uint16_t size)
{
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	61 50       	subi	r22, 0x01	; 1
     d7c:	71 09       	sbc	r23, r1
	uint16_t c, d, swap;

	for (c = 0 ; c < ( size - 1 ); c++)
     d7e:	b1 f0       	breq	.+44     	; 0xdac <arraySorting+0x36>
     d80:	fc 01       	movw	r30, r24
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (d = 0 ; d < size - c - 1; d++)
     d86:	26 17       	cp	r18, r22
     d88:	37 07       	cpc	r19, r23
     d8a:	b8 f7       	brcc	.-18     	; 0xd7a <arraySorting+0x4>
		{
			if(*(ptr+d) > *(ptr+d+1))
     d8c:	41 91       	ld	r20, Z+
     d8e:	51 91       	ld	r21, Z+
     d90:	2f 5f       	subi	r18, 0xFF	; 255
     d92:	3f 4f       	sbci	r19, 0xFF	; 255
     d94:	a0 81       	ld	r26, Z
     d96:	b1 81       	ldd	r27, Z+1	; 0x01
     d98:	a4 17       	cp	r26, r20
     d9a:	b5 07       	cpc	r27, r21
     d9c:	a0 f7       	brcc	.-24     	; 0xd86 <arraySorting+0x10>
     d9e:	ef 01       	movw	r28, r30
     da0:	22 97       	sbiw	r28, 0x02	; 2
			{
				swap	   = *(ptr+d);
				*(ptr+d)   = *(ptr+d+1);
     da2:	b9 83       	std	Y+1, r27	; 0x01
     da4:	a8 83       	st	Y, r26
				*(ptr+d+1) = swap;
     da6:	51 83       	std	Z+1, r21	; 0x01
     da8:	40 83       	st	Z, r20
     daa:	ed cf       	rjmp	.-38     	; 0xd86 <arraySorting+0x10>
			}
		}
	}
}
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	08 95       	ret

00000db2 <MeasureOutputCompare2>:
* Notes      : none
*
*********************************************************************************************************
*/
void MeasureOutputCompare2(void)
{
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
	uint16_t SampleValue;
	
	OCR2 = TCNT2 + MEASURE_OCR2;
     db6:	84 b5       	in	r24, 0x24	; 36
     db8:	87 5c       	subi	r24, 0xC7	; 199
     dba:	83 bd       	out	0x23, r24	; 35

	//if((ioLOW == 1) && (ioHIGHT == 1))
	{
		if(bufferIsNotFullEx(&Adc0Buffer) == 0)					/* if buffer is full */
     dbc:	85 eb       	ldi	r24, 0xB5	; 181
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	0e 94 19 09 	call	0x1232	; 0x1232 <bufferIsNotFullEx>
     dc4:	89 2b       	or	r24, r25
     dc6:	b1 f4       	brne	.+44     	; 0xdf4 <MeasureOutputCompare2+0x42>
		{
			arraySorting(&Adc0DataArray[0], ADC0_BUF_SIZE);		/* sort array Adc0DataArray in the ascending order */
     dc8:	64 e1       	ldi	r22, 0x14	; 20
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	8e e1       	ldi	r24, 0x1E	; 30
     dce:	92 e0       	ldi	r25, 0x02	; 2
     dd0:	0e 94 bb 06 	call	0xd76	; 0xd76 <arraySorting>
			bufferAddToEndEx(&Adc0MaxBuffer, Adc0DataArray[ADC0_BUF_SIZE - 1]);		/* push max data to arrary */
     dd4:	60 91 44 02 	lds	r22, 0x0244
     dd8:	70 91 45 02 	lds	r23, 0x0245
     ddc:	8d eb       	ldi	r24, 0xBD	; 189
     dde:	92 e0       	ldi	r25, 0x02	; 2
     de0:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <bufferAddToEndEx>
			bufferFlushEx(&Adc0Buffer);	/* flush buffer prepare push new data for next data cycle */
     de4:	85 eb       	ldi	r24, 0xB5	; 181
     de6:	92 e0       	ldi	r25, 0x02	; 2
     de8:	0e 94 24 09 	call	0x1248	; 0x1248 <bufferFlushEx>
			DDRD |= (1<<DDC7);
     dec:	8f 9a       	sbi	0x11, 7	; 17
			PORTD ^= (1<<PD7);
     dee:	82 b3       	in	r24, 0x12	; 18
     df0:	80 58       	subi	r24, 0x80	; 128
     df2:	82 bb       	out	0x12, r24	; 18
		}
		SampleValue = ReadADC10Bit(MEASURE_ADC0);
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	0e 94 80 08 	call	0x1100	; 0x1100 <ReadADC10Bit>
     dfa:	ec 01       	movw	r28, r24
		bufferAddToEndEx(&Adc0Buffer, SampleValue);		/* push newest data to arrary */
     dfc:	bc 01       	movw	r22, r24
     dfe:	85 eb       	ldi	r24, 0xB5	; 181
     e00:	92 e0       	ldi	r25, 0x02	; 2
     e02:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <bufferAddToEndEx>
		value = SampleValue;
     e06:	d0 93 c6 02 	sts	0x02C6, r29
     e0a:	c0 93 c5 02 	sts	0x02C5, r28
			bufferGetFromFront(&Adc1Buffer);			/* pop oldest data from arrary */
		}
		bufferAddToEnd(&Adc1Buffer, SampleValue);		/* push newest data to arrary */
#endif		
	}
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <MeasureInit>:
* Returns    : none
*********************************************************************************************************
*/
void MeasureInit(void)
{
	DDRD &= ~((1<<DDD3) | (1<<DDD2));	/* Set PD3(ioHIGHT) and PD2(ioLOW) as input */
     e14:	81 b3       	in	r24, 0x11	; 17
     e16:	83 7f       	andi	r24, 0xF3	; 243
     e18:	81 bb       	out	0x11, r24	; 17
*
*********************************************************************************************************
*/
void MeasureKZ1PWM(uint16_t dutyCycle)
{
	timer1PWMBSet(dutyCycle);
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 0d 02 	call	0x41a	; 0x41a <timer1PWMBSet>
*
*********************************************************************************************************
*/
void MeasureKZ2PWM(uint16_t dutyCycle)
{
	timer1PWMASet(dutyCycle);
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 0a 02 	call	0x414	; 0x414 <timer1PWMASet>
	DDRD &= ~((1<<DDD3) | (1<<DDD2));	/* Set PD3(ioHIGHT) and PD2(ioLOW) as input */
	
	MeasureKZ1PWM(0);// 255 0
	MeasureKZ2PWM(0);

	timerAttach(TIMER2OUTCOMPARE_INT, MeasureOutputCompare2);
     e2a:	69 ed       	ldi	r22, 0xD9	; 217
     e2c:	76 e0       	ldi	r23, 0x06	; 6
     e2e:	86 e0       	ldi	r24, 0x06	; 6
     e30:	0e 94 bd 01 	call	0x37a	; 0x37a <timerAttach>
	
	bufferInitEx(&Adc0Buffer, (uint16_t *)Adc0DataArray, ADC0_BUF_SIZE);
     e34:	44 e1       	ldi	r20, 0x14	; 20
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	6e e1       	ldi	r22, 0x1E	; 30
     e3a:	72 e0       	ldi	r23, 0x02	; 2
     e3c:	85 eb       	ldi	r24, 0xB5	; 181
     e3e:	92 e0       	ldi	r25, 0x02	; 2
     e40:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <bufferInitEx>
	bufferInitEx(&Adc1Buffer, (uint16_t *)Adc1DataArray, ADC1_BUF_SIZE);
     e44:	44 e1       	ldi	r20, 0x14	; 20
     e46:	50 e0       	ldi	r21, 0x00	; 0
     e48:	66 ef       	ldi	r22, 0xF6	; 246
     e4a:	71 e0       	ldi	r23, 0x01	; 1
     e4c:	8d ea       	ldi	r24, 0xAD	; 173
     e4e:	92 e0       	ldi	r25, 0x02	; 2
     e50:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <bufferInitEx>

	bufferInitEx(&Adc0MaxBuffer, (uint16_t *)Adc0MaxArray, ADC0_MAX_SIZE);
     e54:	40 e8       	ldi	r20, 0x80	; 128
     e56:	50 e0       	ldi	r21, 0x00	; 0
     e58:	66 ef       	ldi	r22, 0xF6	; 246
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	8d eb       	ldi	r24, 0xBD	; 189
     e5e:	92 e0       	ldi	r25, 0x02	; 2
     e60:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <bufferInitEx>

00000e64 <MeasureCycleUpdate>:
*********************************************************************************************************
*/
void MeasureCycleUpdate(void)
{
	uint16_t i;
	if(bufferIsNotFullEx(&Adc0MaxBuffer) == 0)			/* if buffer is full */
     e64:	8d eb       	ldi	r24, 0xBD	; 189
     e66:	92 e0       	ldi	r25, 0x02	; 2
     e68:	0e 94 19 09 	call	0x1232	; 0x1232 <bufferIsNotFullEx>
     e6c:	89 2b       	or	r24, r25
     e6e:	69 f5       	brne	.+90     	; 0xeca <MeasureCycleUpdate+0x66>
	{
		arraySorting(&Adc0MaxArray[0], ADC0_MAX_SIZE); 	/* sort array Adc0MaxArray in the ascending order */
     e70:	60 e8       	ldi	r22, 0x80	; 128
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	86 ef       	ldi	r24, 0xF6	; 246
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 bb 06 	call	0xd76	; 0xd76 <arraySorting>
     e7c:	e6 e7       	ldi	r30, 0x76	; 118
     e7e:	f1 e0       	ldi	r31, 0x01	; 1
uint16_t arraySum(uint16_t *ptr, uint16_t start, uint16_t end)
{
	uint16_t i;
	uint16_t sum;

	for(i=0, sum=0;i<(end-start);i++)
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
	{
		sum += *(ptr+i+start);
     e84:	21 91       	ld	r18, Z+
     e86:	31 91       	ld	r19, Z+
     e88:	82 0f       	add	r24, r18
     e8a:	93 1f       	adc	r25, r19
uint16_t arraySum(uint16_t *ptr, uint16_t start, uint16_t end)
{
	uint16_t i;
	uint16_t sum;

	for(i=0, sum=0;i<(end-start);i++)
     e8c:	21 e0       	ldi	r18, 0x01	; 1
     e8e:	e6 3f       	cpi	r30, 0xF6	; 246
     e90:	f2 07       	cpc	r31, r18
     e92:	c1 f7       	brne	.-16     	; 0xe84 <MeasureCycleUpdate+0x20>
{
	uint16_t i;
	if(bufferIsNotFullEx(&Adc0MaxBuffer) == 0)			/* if buffer is full */
	{
		arraySorting(&Adc0MaxArray[0], ADC0_MAX_SIZE); 	/* sort array Adc0MaxArray in the ascending order */
		mData.calcResult[MEASURE_ADC0].sum = arraySum(&Adc0MaxArray[0], ADC0_MAX_SIZE/2, ADC0_MAX_SIZE);
     e94:	90 93 9e 02 	sts	0x029E, r25
     e98:	80 93 9d 02 	sts	0x029D, r24
		bufferFlushEx(&Adc0MaxBuffer);					/* flush buffer prepare push new data for next data cycle */
     e9c:	8d eb       	ldi	r24, 0xBD	; 189
     e9e:	92 e0       	ldi	r25, 0x02	; 2
     ea0:	0e 94 24 09 	call	0x1248	; 0x1248 <bufferFlushEx>
		{
			///rprintf("a%d=%d\n",i,Adc0MaxArray[i]);
		}
#endif		
		//rprintf("v%d\n",value);
		rprintf("s%d\n",mData.calcResult[MEASURE_ADC0].sum);
     ea4:	80 91 9e 02 	lds	r24, 0x029E
     ea8:	8f 93       	push	r24
     eaa:	80 91 9d 02 	lds	r24, 0x029D
     eae:	8f 93       	push	r24
     eb0:	87 e8       	ldi	r24, 0x87	; 135
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	9f 93       	push	r25
     eb6:	8f 93       	push	r24
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	8f 93       	push	r24
     ebc:	0e 94 df 00 	call	0x1be	; 0x1be <rprintf1RamRom>
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	08 95       	ret

00000ecc <MeasureGetResult0>:
*********************************************************************************************************
*/
uint16_t MeasureGetResult0(void)
{
	return mData.calcResult[MEASURE_ADC0].sum;
}
     ecc:	80 91 9d 02 	lds	r24, 0x029D
     ed0:	90 91 9e 02 	lds	r25, 0x029E
     ed4:	08 95       	ret

00000ed6 <__vector_1>:
* Notes      : none
*
*********************************************************************************************************
*/
ISR(INT0_vect)
{
     ed6:	1f 92       	push	r1
     ed8:	0f 92       	push	r0
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	0f 92       	push	r0
     ede:	11 24       	eor	r1, r1
     ee0:	8f 93       	push	r24
	if(ioLOW)
     ee2:	80 b3       	in	r24, 0x10	; 16
	{

	}
}
     ee4:	8f 91       	pop	r24
     ee6:	0f 90       	pop	r0
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	0f 90       	pop	r0
     eec:	1f 90       	pop	r1
     eee:	18 95       	reti

00000ef0 <__vector_2>:
* Notes      : none
*
*********************************************************************************************************
*/
ISR(INT1_vect)
{
     ef0:	1f 92       	push	r1
     ef2:	0f 92       	push	r0
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	0f 92       	push	r0
     ef8:	11 24       	eor	r1, r1
     efa:	8f 93       	push	r24
	if(ioHIGHT==0)
     efc:	80 b3       	in	r24, 0x10	; 16
	{

	}
}
     efe:	8f 91       	pop	r24
     f00:	0f 90       	pop	r0
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	0f 90       	pop	r0
     f06:	1f 90       	pop	r1
     f08:	18 95       	reti

00000f0a <SSDCycleUpdate>:
*
*********************************************************************************************************
*/

void SSDCycleUpdate(void)
{
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
*/
void SSDShitfOutData(void)
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
     f0e:	40 91 c9 02 	lds	r20, 0x02C9
     f12:	50 91 ca 02 	lds	r21, 0x02CA
     f16:	60 91 cb 02 	lds	r22, 0x02CB
     f1a:	70 91 cc 02 	lds	r23, 0x02CC
     f1e:	80 e2       	ldi	r24, 0x20	; 32
	
	for(i = 0; i < 32; i++)
	{
		bitVal = 0;
		if(DispValTemp & 0x80000000)
     f20:	8a 01       	movw	r16, r20
     f22:	9b 01       	movw	r18, r22
		{
			bitVal = 1;
		}
		DispValTemp <<= 1;
     f24:	44 0f       	add	r20, r20
     f26:	55 1f       	adc	r21, r21
     f28:	66 1f       	adc	r22, r22
     f2a:	77 1f       	adc	r23, r23

		SSD_CLK_CLR();
     f2c:	af 98       	cbi	0x15, 7	; 21
		SSD_DAT_CLR();
     f2e:	ae 98       	cbi	0x15, 6	; 21
		if(bitVal)
     f30:	37 fd       	sbrc	r19, 7
		{
			SSD_DAT_SET();
     f32:	ae 9a       	sbi	0x15, 6	; 21
		}
		SSD_CLK_SET();
     f34:	af 9a       	sbi	0x15, 7	; 21
     f36:	81 50       	subi	r24, 0x01	; 1
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
	
	for(i = 0; i < 32; i++)
     f38:	99 f7       	brne	.-26     	; 0xf20 <SSDCycleUpdate+0x16>
void SSDUpdateOnOff(void)
{
	SSD_RATE rate;
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
     f3a:	90 91 c7 02 	lds	r25, 0x02C7
     f3e:	97 70       	andi	r25, 0x07	; 7
	ft = SSD.flashTimer;
     f40:	80 91 c8 02 	lds	r24, 0x02C8
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
     f44:	94 30       	cpi	r25, 0x04	; 4
     f46:	19 f0       	breq	.+6      	; 0xf4e <SSDCycleUpdate+0x44>
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
	ft = SSD.flashTimer;
	
	ft += rate;
     f48:	89 0f       	add	r24, r25
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
     f4a:	8d 33       	cpi	r24, 0x3D	; 61
     f4c:	30 f0       	brcs	.+12     	; 0xf5a <SSDCycleUpdate+0x50>
	{
		ft = 0;
		SSD.ssd.state = SSD_OFF;
     f4e:	80 91 c7 02 	lds	r24, 0x02C7
     f52:	8f 7d       	andi	r24, 0xDF	; 223
     f54:	80 93 c7 02 	sts	0x02C7, r24
	ft = SSD.flashTimer;
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
	{
		ft = 0;
     f58:	80 e0       	ldi	r24, 0x00	; 0
		SSD.ssd.state = SSD_OFF;
	}
	SSD.flashTimer = ft;
     f5a:	80 93 c8 02 	sts	0x02C8, r24
	
	if((rate == SSD_0HZ) || (ft > (SSD_ONE_SEC/2)))
     f5e:	99 23       	and	r25, r25
     f60:	11 f0       	breq	.+4      	; 0xf66 <SSDCycleUpdate+0x5c>
     f62:	8f 31       	cpi	r24, 0x1F	; 31
     f64:	28 f0       	brcs	.+10     	; 0xf70 <SSDCycleUpdate+0x66>
	{
		SSD.ssd.state = SSD_ON;
     f66:	80 91 c7 02 	lds	r24, 0x02C7
     f6a:	80 62       	ori	r24, 0x20	; 32
     f6c:	80 93 c7 02 	sts	0x02C7, r24
*
*********************************************************************************************************
*/
void SSDUpdateComPin(void)
{
	if(SSD.ssd.state == SSD_OFF)		/* if ssd is in off state, cut power to green and color */
     f70:	80 91 c7 02 	lds	r24, 0x02C7
     f74:	85 fd       	sbrc	r24, 5
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <SSDCycleUpdate+0x72>
	{
		SSD_RED_CLR();
     f78:	ac 98       	cbi	0x15, 4	; 21
     f7a:	03 c0       	rjmp	.+6      	; 0xf82 <SSDCycleUpdate+0x78>
		SSD_GRN_CLR();
	}
	else
	{
		if(SSD.ssd.color == SSD_RED)		/* dispay red color */
     f7c:	88 71       	andi	r24, 0x18	; 24
     f7e:	19 f4       	brne	.+6      	; 0xf86 <SSDCycleUpdate+0x7c>
		{
			SSD_RED_SET();	/* give power to red ssd common pin */
     f80:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_CLR();	/* cut power to green ssd common pin */
     f82:	ad 98       	cbi	0x15, 5	; 21
     f84:	06 c0       	rjmp	.+12     	; 0xf92 <SSDCycleUpdate+0x88>
		}
		else if(SSD.ssd.color == SSD_GREEN) /* dispay green color */
     f86:	88 30       	cpi	r24, 0x08	; 8
     f88:	11 f4       	brne	.+4      	; 0xf8e <SSDCycleUpdate+0x84>
		{
			SSD_RED_CLR();
     f8a:	ac 98       	cbi	0x15, 4	; 21
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <SSDCycleUpdate+0x86>
			SSD_GRN_SET();
		}
		else								/* dispay amber color */
		{
			SSD_RED_SET();
     f8e:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_SET();
     f90:	ad 9a       	sbi	0x15, 5	; 21
void SSDCycleUpdate(void)
{
	SSDShitfOutData();
	SSDUpdateOnOff();
	SSDUpdateComPin();
}
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	08 95       	ret

00000f98 <SSDDisplayDec>:
* Notes      :none
*
*********************************************************************************************************
*/
void SSDDisplayDec(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	8c 01       	movw	r16, r24
     fa2:	36 2f       	mov	r19, r22
uint32_t SSDHex2Dec(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = hexValue/1000;
     fa4:	68 ee       	ldi	r22, 0xE8	; 232
     fa6:	73 e0       	ldi	r23, 0x03	; 3
     fa8:	0e 94 2b 09 	call	0x1256	; 0x1256 <__udivmodhi4>
     fac:	c6 2f       	mov	r28, r22
	dataSTR.hundred   = hexValue%1000/100;
     fae:	64 e6       	ldi	r22, 0x64	; 100
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	0e 94 2b 09 	call	0x1256	; 0x1256 <__udivmodhi4>
     fb6:	d6 2f       	mov	r29, r22
	dataSTR.tens      = hexValue%1000%100/10;
     fb8:	6a e0       	ldi	r22, 0x0A	; 10
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	0e 94 2b 09 	call	0x1256	; 0x1256 <__udivmodhi4>
     fc0:	56 2f       	mov	r21, r22
{
	SSD_DISP_T ValueCopy;
	
	SSD.DispVal.value = SSDHex2Dec(DispData);
	ValueCopy.value = SSD.DispVal.value;
	SSD.ssd.rate = rate;
     fc2:	37 70       	andi	r19, 0x07	; 7
     fc4:	60 91 c7 02 	lds	r22, 0x02C7
     fc8:	60 7e       	andi	r22, 0xE0	; 224
	SSD.ssd.color = color;
     fca:	43 70       	andi	r20, 0x03	; 3
     fcc:	94 2f       	mov	r25, r20
     fce:	99 0f       	add	r25, r25
     fd0:	99 0f       	add	r25, r25
     fd2:	99 0f       	add	r25, r25
     fd4:	46 2f       	mov	r20, r22
     fd6:	43 2b       	or	r20, r19
     fd8:	49 2b       	or	r20, r25
     fda:	40 93 c7 02 	sts	0x02C7, r20
	
	/* Set display null for all 4 seven segment displays */
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
     fde:	ec e9       	ldi	r30, 0x9C	; 156
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	94 91       	lpm	r25, Z
     fe4:	90 93 cc 02 	sts	0x02CC, r25
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
     fe8:	94 91       	lpm	r25, Z
     fea:	90 93 cb 02 	sts	0x02CB, r25
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
     fee:	94 91       	lpm	r25, Z
     ff0:	90 93 ca 02 	sts	0x02CA, r25
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
     ff4:	e4 91       	lpm	r30, Z
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0

	/* Set display remove zero before number */
	if(DispData > 1000)
     ffa:	09 3e       	cpi	r16, 0xE9	; 233
     ffc:	83 e0       	ldi	r24, 0x03	; 3
     ffe:	18 07       	cpc	r17, r24
    1000:	78 f0       	brcs	.+30     	; 0x1020 <SSDDisplayDec+0x88>
	{
		SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[ValueCopy.thousands]);
    1002:	ec 2f       	mov	r30, r28
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	e4 57       	subi	r30, 0x74	; 116
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	84 91       	lpm	r24, Z
    100c:	80 93 cc 02 	sts	0x02CC, r24
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
    1010:	ed 2f       	mov	r30, r29
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	e4 57       	subi	r30, 0x74	; 116
    1016:	ff 4f       	sbci	r31, 0xFF	; 255
    1018:	e4 91       	lpm	r30, Z
    101a:	e0 93 cb 02 	sts	0x02CB, r30
    101e:	0e c0       	rjmp	.+28     	; 0x103c <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 100)
    1020:	05 36       	cpi	r16, 0x65	; 101
    1022:	11 05       	cpc	r17, r1
    1024:	40 f0       	brcs	.+16     	; 0x1036 <SSDDisplayDec+0x9e>
	{
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
    1026:	ed 2f       	mov	r30, r29
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	e4 57       	subi	r30, 0x74	; 116
    102c:	ff 4f       	sbci	r31, 0xFF	; 255
    102e:	84 91       	lpm	r24, Z
    1030:	80 93 cb 02 	sts	0x02CB, r24
    1034:	03 c0       	rjmp	.+6      	; 0x103c <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 10)
    1036:	0b 30       	cpi	r16, 0x0B	; 11
    1038:	11 05       	cpc	r17, r1
    103a:	38 f0       	brcs	.+14     	; 0x104a <SSDDisplayDec+0xb2>
	{
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
    103c:	e5 2f       	mov	r30, r21
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	e4 57       	subi	r30, 0x74	; 116
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	e4 91       	lpm	r30, Z
    1046:	e0 93 ca 02 	sts	0x02CA, r30
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else
	{
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
    104a:	f9 01       	movw	r30, r18
    104c:	e4 57       	subi	r30, 0x74	; 116
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	e4 91       	lpm	r30, Z
    1052:	e0 93 c9 02 	sts	0x02C9, r30
	}
}
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	08 95       	ret

00001060 <SSDDisplayHex>:
uint32_t SSDHex2Hex(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = (hexValue >> 12) & 0x000f;
    1060:	39 2f       	mov	r19, r25
    1062:	32 95       	swap	r19
    1064:	3f 70       	andi	r19, 0x0F	; 15
	dataSTR.hundred   = (hexValue >> 8) & 0x000f;
    1066:	29 2f       	mov	r18, r25
    1068:	2f 70       	andi	r18, 0x0F	; 15
	dataSTR.tens      = (hexValue >> 4) & 0x000f;
    106a:	fc 01       	movw	r30, r24
    106c:	94 e0       	ldi	r25, 0x04	; 4
    106e:	f6 95       	lsr	r31
    1070:	e7 95       	ror	r30
    1072:	9a 95       	dec	r25
    1074:	e1 f7       	brne	.-8      	; 0x106e <SSDDisplayHex+0xe>
    1076:	9e 2f       	mov	r25, r30
    1078:	9f 70       	andi	r25, 0x0F	; 15
	dataSTR.units     = (hexValue >> 0) & 0x000f;
    107a:	8f 70       	andi	r24, 0x0F	; 15
*
*********************************************************************************************************
*/
void SSDDisplayHex(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
	SSD.DispVal.value = SSDHex2Hex(DispData);
    107c:	a7 ec       	ldi	r26, 0xC7	; 199
    107e:	b2 e0       	ldi	r27, 0x02	; 2
	SSD.ssd.rate = rate;
    1080:	67 70       	andi	r22, 0x07	; 7
    1082:	7c 91       	ld	r23, X
    1084:	70 7e       	andi	r23, 0xE0	; 224
	SSD.ssd.color = color;
    1086:	43 70       	andi	r20, 0x03	; 3
    1088:	54 2f       	mov	r21, r20
    108a:	55 0f       	add	r21, r21
    108c:	55 0f       	add	r21, r21
    108e:	55 0f       	add	r21, r21
    1090:	47 2f       	mov	r20, r23
    1092:	46 2b       	or	r20, r22
    1094:	45 2b       	or	r20, r21
    1096:	4c 93       	st	X, r20
	
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD.DispVal.thousands]);
    1098:	e3 2f       	mov	r30, r19
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	e4 57       	subi	r30, 0x74	; 116
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	34 91       	lpm	r19, Z
    10a2:	15 96       	adiw	r26, 0x05	; 5
    10a4:	3c 93       	st	X, r19
    10a6:	15 97       	sbiw	r26, 0x05	; 5
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD.DispVal.hundred]);
    10a8:	e2 2f       	mov	r30, r18
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	e4 57       	subi	r30, 0x74	; 116
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	24 91       	lpm	r18, Z
    10b2:	14 96       	adiw	r26, 0x04	; 4
    10b4:	2c 93       	st	X, r18
    10b6:	14 97       	sbiw	r26, 0x04	; 4
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD.DispVal.tens]);
    10b8:	e9 2f       	mov	r30, r25
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	e4 57       	subi	r30, 0x74	; 116
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	e4 91       	lpm	r30, Z
    10c2:	13 96       	adiw	r26, 0x03	; 3
    10c4:	ec 93       	st	X, r30
    10c6:	13 97       	sbiw	r26, 0x03	; 3
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD.DispVal.units]);
    10c8:	e8 2f       	mov	r30, r24
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	e4 57       	subi	r30, 0x74	; 116
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	e4 91       	lpm	r30, Z
    10d2:	12 96       	adiw	r26, 0x02	; 2
    10d4:	ec 93       	st	X, r30
    10d6:	08 95       	ret

000010d8 <SSDInit>:
void SSDInit(void)
{	
	/* 
	Set PB7-PB4 as output to drive seven segment display, default display turn off
	*/
	DDRC &= ~((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
    10d8:	84 b3       	in	r24, 0x14	; 20
    10da:	8f 70       	andi	r24, 0x0F	; 15
    10dc:	84 bb       	out	0x14, r24	; 20
	DDRC |= ((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
    10de:	84 b3       	in	r24, 0x14	; 20
    10e0:	80 6f       	ori	r24, 0xF0	; 240
    10e2:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~((1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4));
    10e4:	85 b3       	in	r24, 0x15	; 21
    10e6:	8f 70       	andi	r24, 0x0F	; 15
    10e8:	85 bb       	out	0x15, r24	; 21

	SSDDisplayHex(0, SSD_R_OFF, SSD_RED);	/* Initial turn off all SSDs */
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	64 e0       	ldi	r22, 0x04	; 4
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0c 94 30 08 	jmp	0x1060	; 0x1060 <SSDDisplayHex>

000010f6 <ADCInit>:
*********************************************************************************************************
*/

void ADCInit (void)
{
	ADMUX  = (1 << REFS0);	/* use external AVCC as AREF,the result is right adjusted,10bits format */	
    10f6:	80 e4       	ldi	r24, 0x40	; 64
    10f8:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN) | (0 << ADIE) | (1 << ADIF) | ADPS2_0;	/* ADC Enable, Clear interrupt flag,set ADC Prescaler Selections */
    10fa:	85 e9       	ldi	r24, 0x95	; 149
    10fc:	86 b9       	out	0x06, r24	; 6
    10fe:	08 95       	ret

00001100 <ReadADC10Bit>:
uint16_t ReadADC10Bit(uint8_t channel)
{
	uint16_t result;
	uint8_t  sreg_save;  
	
    sreg_save = SREG;						/* Save AVR Status Register */
    1100:	2f b7       	in	r18, 0x3f	; 63
	cli();									/* Global interrupt disable */
    1102:	f8 94       	cli
	
    ADMUX  &= 0xf0; 						/* Clear MUX3:0 */
    1104:	97 b1       	in	r25, 0x07	; 7
    1106:	90 7f       	andi	r25, 0xF0	; 240
    1108:	97 b9       	out	0x07, r25	; 7
	ADMUX  |= (channel&0x07);				/* Choose ADC channel */
    110a:	97 b1       	in	r25, 0x07	; 7
    110c:	87 70       	andi	r24, 0x07	; 7
    110e:	89 2b       	or	r24, r25
    1110:	87 b9       	out	0x07, r24	; 7
    ADCSRA |= (1 << ADSC);					/* ADC start conversion */	
    1112:	36 9a       	sbi	0x06, 6	; 6
    while ((ADCSRA & (1 << ADIF)) == 0);	/* wait conversion finish */			
    1114:	34 9b       	sbis	0x06, 4	; 6
    1116:	fe cf       	rjmp	.-4      	; 0x1114 <ReadADC10Bit+0x14>
    result  = ADC;							/* Read ADC value */
    1118:	84 b1       	in	r24, 0x04	; 4
    111a:	95 b1       	in	r25, 0x05	; 5
	
    SREG = sreg_save;						/* Recover AVR Status Register */	
    111c:	2f bf       	out	0x3f, r18	; 63
    return (result);
}
    111e:	08 95       	ret

00001120 <ButtonInit>:
* Returns    : none
*********************************************************************************************************
*/
void ButtonInit(void)
{
	ButtonInitEx();
    1120:	0c 94 38 06 	jmp	0xc70	; 0xc70 <ButtonInitEx>

00001124 <ButtonCycleUpdate>:
* Notes      : None
*
*/
ButtonDataType ButtonGetIO_State(void)
{
	return  ButtonGetIO_StateEx();
    1124:	0e 94 3c 06 	call	0xc78	; 0xc78 <ButtonGetIO_StateEx>
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
    1128:	90 91 cd 02 	lds	r25, 0x02CD
    112c:	89 2b       	or	r24, r25
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
    112e:	10 92 cd 02 	sts	0x02CD, r1
	b = button.buttonsLastCycle.bVal;
    1132:	90 91 ce 02 	lds	r25, 0x02CE
	holdTime = button.buttonHoldTime;
    1136:	20 91 d3 02 	lds	r18, 0x02D3
    113a:	30 91 d4 02 	lds	r19, 0x02D4
	
	if (button.buttonsReleased.bVal != 0) {		
    113e:	40 91 cf 02 	lds	r20, 0x02CF
    1142:	44 23       	and	r20, r20
    1144:	19 f0       	breq	.+6      	; 0x114c <ButtonCycleUpdate+0x28>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
    1146:	40 93 d1 02 	sts	0x02D1, r20
    114a:	05 c0       	rjmp	.+10     	; 0x1156 <ButtonCycleUpdate+0x32>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
    114c:	2d 33       	cpi	r18, 0x3D	; 61
    114e:	31 05       	cpc	r19, r1
    1150:	10 f0       	brcs	.+4      	; 0x1156 <ButtonCycleUpdate+0x32>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
    1152:	10 92 d1 02 	sts	0x02D1, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
    1156:	10 92 cf 02 	sts	0x02CF, r1
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
    115a:	10 92 d2 02 	sts	0x02D2, r1
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
    115e:	89 13       	cpse	r24, r25
    1160:	0f c0       	rjmp	.+30     	; 0x1180 <ButtonCycleUpdate+0x5c>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
    1162:	2f 5f       	subi	r18, 0xFF	; 255
    1164:	3f 4f       	sbci	r19, 0xFF	; 255
    1166:	24 32       	cpi	r18, 0x24	; 36
    1168:	31 05       	cpc	r19, r1
    116a:	18 f4       	brcc	.+6      	; 0x1172 <ButtonCycleUpdate+0x4e>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
    116c:	10 92 d0 02 	sts	0x02D0, r1
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <ButtonCycleUpdate+0x52>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
    1172:	80 93 d0 02 	sts	0x02D0, r24
		}	
		button.buttonHoldTime = holdTime;
    1176:	30 93 d4 02 	sts	0x02D4, r19
    117a:	20 93 d3 02 	sts	0x02D3, r18
    117e:	08 95       	ret
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
    1180:	80 93 ce 02 	sts	0x02CE, r24
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
    1184:	80 95       	com	r24
    1186:	89 23       	and	r24, r25
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
    1188:	90 91 d0 02 	lds	r25, 0x02D0
    118c:	98 23       	and	r25, r24
    118e:	81 f4       	brne	.+32     	; 0x11b0 <ButtonCycleUpdate+0x8c>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
    1190:	10 92 d4 02 	sts	0x02D4, r1
    1194:	10 92 d3 02 	sts	0x02D3, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
    1198:	23 50       	subi	r18, 0x03	; 3
    119a:	31 09       	sbc	r19, r1
    119c:	20 32       	cpi	r18, 0x20	; 32
    119e:	31 05       	cpc	r19, r1
    11a0:	38 f4       	brcc	.+14     	; 0x11b0 <ButtonCycleUpdate+0x8c>
				button.buttonsReleased.bVal = buttons;	
    11a2:	80 93 cf 02 	sts	0x02CF, r24
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
    11a6:	90 91 d1 02 	lds	r25, 0x02D1
    11aa:	89 23       	and	r24, r25
    11ac:	80 93 d2 02 	sts	0x02D2, r24
    11b0:	08 95       	ret

000011b2 <ButtonGetHoldTime>:
*/

uint16_t ButtonGetHoldTime(void)
{
	return button.buttonHoldTime;
}
    11b2:	80 91 d3 02 	lds	r24, 0x02D3
    11b6:	90 91 d4 02 	lds	r25, 0x02D4
    11ba:	08 95       	ret

000011bc <ButtonGetReleased>:
*/

ButtonDataType ButtonGetReleased(void)
{
	return button.buttonsReleased.bVal;
}
    11bc:	80 91 cf 02 	lds	r24, 0x02CF
    11c0:	08 95       	ret

000011c2 <ButtonGetHeld>:
*/

ButtonDataType ButtonGetHeld (void)
{
	return button.buttonsHeld.bVal;
}
    11c2:	80 91 d0 02 	lds	r24, 0x02D0
    11c6:	08 95       	ret

000011c8 <bufferInitEx>:
// global variables

// initialization

void bufferInitEx(cBufferEx* buffer, BUFFER_TYPE *start, uint16_t size)
{
    11c8:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START_EX;
    11ca:	8f b7       	in	r24, 0x3f	; 63
    11cc:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
    11ce:	71 83       	std	Z+1, r23	; 0x01
    11d0:	60 83       	st	Z, r22
	buffer->size = size;
    11d2:	53 83       	std	Z+3, r21	; 0x03
    11d4:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
    11d6:	17 82       	std	Z+7, r1	; 0x07
    11d8:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
    11da:	15 82       	std	Z+5, r1	; 0x05
    11dc:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END_EX;
    11de:	8f bf       	out	0x3f, r24	; 63
    11e0:	08 95       	ret

000011e2 <bufferAddToEndEx>:
	return data;
}


uint8_t bufferAddToEndEx(cBufferEx* buffer, BUFFER_TYPE data)
{
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	fc 01       	movw	r30, r24
    11e8:	eb 01       	movw	r28, r22
	// begin critical section
	CRITICAL_SECTION_START_EX;
    11ea:	2f b7       	in	r18, 0x3f	; 63
    11ec:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
    11ee:	44 81       	ldd	r20, Z+4	; 0x04
    11f0:	55 81       	ldd	r21, Z+5	; 0x05
    11f2:	62 81       	ldd	r22, Z+2	; 0x02
    11f4:	73 81       	ldd	r23, Z+3	; 0x03
    11f6:	46 17       	cp	r20, r22
    11f8:	57 07       	cpc	r21, r23
    11fa:	b0 f4       	brcc	.+44     	; 0x1228 <bufferAddToEndEx+0x46>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
    11fc:	86 81       	ldd	r24, Z+6	; 0x06
    11fe:	97 81       	ldd	r25, Z+7	; 0x07
    1200:	84 0f       	add	r24, r20
    1202:	95 1f       	adc	r25, r21
    1204:	0e 94 2b 09 	call	0x1256	; 0x1256 <__udivmodhi4>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	a0 81       	ld	r26, Z
    120e:	b1 81       	ldd	r27, Z+1	; 0x01
    1210:	a8 0f       	add	r26, r24
    1212:	b9 1f       	adc	r27, r25
    1214:	cd 93       	st	X+, r28
    1216:	dc 93       	st	X, r29
		// increment the length
		buffer->datalength++;
    1218:	84 81       	ldd	r24, Z+4	; 0x04
    121a:	95 81       	ldd	r25, Z+5	; 0x05
    121c:	01 96       	adiw	r24, 0x01	; 1
    121e:	95 83       	std	Z+5, r25	; 0x05
    1220:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END_EX;
    1222:	2f bf       	out	0x3f, r18	; 63
		// return success
		return 1;
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	02 c0       	rjmp	.+4      	; 0x122c <bufferAddToEndEx+0x4a>
	}
	// end critical section
	CRITICAL_SECTION_END_EX;
    1228:	2f bf       	out	0x3f, r18	; 63
	// return failure
	return 0;
    122a:	80 e0       	ldi	r24, 0x00	; 0
}
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	08 95       	ret

00001232 <bufferIsNotFullEx>:

uint16_t bufferIsNotFullEx(cBufferEx* buffer)
{
    1232:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START_EX;
    1234:	4f b7       	in	r20, 0x3f	; 63
    1236:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	uint16_t bytesleft = (buffer->size - buffer->datalength);
    1238:	82 81       	ldd	r24, Z+2	; 0x02
    123a:	93 81       	ldd	r25, Z+3	; 0x03
    123c:	24 81       	ldd	r18, Z+4	; 0x04
    123e:	35 81       	ldd	r19, Z+5	; 0x05
	// end critical section
	CRITICAL_SECTION_END_EX;
    1240:	4f bf       	out	0x3f, r20	; 63
	return bytesleft;
}
    1242:	82 1b       	sub	r24, r18
    1244:	93 0b       	sbc	r25, r19
    1246:	08 95       	ret

00001248 <bufferFlushEx>:

void bufferFlushEx(cBufferEx* buffer)
{
    1248:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START_EX;
    124a:	9f b7       	in	r25, 0x3f	; 63
    124c:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
    124e:	15 82       	std	Z+5, r1	; 0x05
    1250:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END_EX;
    1252:	9f bf       	out	0x3f, r25	; 63
    1254:	08 95       	ret

00001256 <__udivmodhi4>:
    1256:	aa 1b       	sub	r26, r26
    1258:	bb 1b       	sub	r27, r27
    125a:	51 e1       	ldi	r21, 0x11	; 17
    125c:	07 c0       	rjmp	.+14     	; 0x126c <__udivmodhi4_ep>

0000125e <__udivmodhi4_loop>:
    125e:	aa 1f       	adc	r26, r26
    1260:	bb 1f       	adc	r27, r27
    1262:	a6 17       	cp	r26, r22
    1264:	b7 07       	cpc	r27, r23
    1266:	10 f0       	brcs	.+4      	; 0x126c <__udivmodhi4_ep>
    1268:	a6 1b       	sub	r26, r22
    126a:	b7 0b       	sbc	r27, r23

0000126c <__udivmodhi4_ep>:
    126c:	88 1f       	adc	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	5a 95       	dec	r21
    1272:	a9 f7       	brne	.-22     	; 0x125e <__udivmodhi4_loop>
    1274:	80 95       	com	r24
    1276:	90 95       	com	r25
    1278:	bc 01       	movw	r22, r24
    127a:	cd 01       	movw	r24, r26
    127c:	08 95       	ret

0000127e <__udivmodsi4>:
    127e:	a1 e2       	ldi	r26, 0x21	; 33
    1280:	1a 2e       	mov	r1, r26
    1282:	aa 1b       	sub	r26, r26
    1284:	bb 1b       	sub	r27, r27
    1286:	fd 01       	movw	r30, r26
    1288:	0d c0       	rjmp	.+26     	; 0x12a4 <__udivmodsi4_ep>

0000128a <__udivmodsi4_loop>:
    128a:	aa 1f       	adc	r26, r26
    128c:	bb 1f       	adc	r27, r27
    128e:	ee 1f       	adc	r30, r30
    1290:	ff 1f       	adc	r31, r31
    1292:	a2 17       	cp	r26, r18
    1294:	b3 07       	cpc	r27, r19
    1296:	e4 07       	cpc	r30, r20
    1298:	f5 07       	cpc	r31, r21
    129a:	20 f0       	brcs	.+8      	; 0x12a4 <__udivmodsi4_ep>
    129c:	a2 1b       	sub	r26, r18
    129e:	b3 0b       	sbc	r27, r19
    12a0:	e4 0b       	sbc	r30, r20
    12a2:	f5 0b       	sbc	r31, r21

000012a4 <__udivmodsi4_ep>:
    12a4:	66 1f       	adc	r22, r22
    12a6:	77 1f       	adc	r23, r23
    12a8:	88 1f       	adc	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	1a 94       	dec	r1
    12ae:	69 f7       	brne	.-38     	; 0x128a <__udivmodsi4_loop>
    12b0:	60 95       	com	r22
    12b2:	70 95       	com	r23
    12b4:	80 95       	com	r24
    12b6:	90 95       	com	r25
    12b8:	9b 01       	movw	r18, r22
    12ba:	ac 01       	movw	r20, r24
    12bc:	bd 01       	movw	r22, r26
    12be:	cf 01       	movw	r24, r30
    12c0:	08 95       	ret

000012c2 <__tablejump2__>:
    12c2:	ee 0f       	add	r30, r30
    12c4:	ff 1f       	adc	r31, r31
    12c6:	05 90       	lpm	r0, Z+
    12c8:	f4 91       	lpm	r31, Z
    12ca:	e0 2d       	mov	r30, r0
    12cc:	09 94       	ijmp

000012ce <_exit>:
    12ce:	f8 94       	cli

000012d0 <__stop_program>:
    12d0:	ff cf       	rjmp	.-2      	; 0x12d0 <__stop_program>
