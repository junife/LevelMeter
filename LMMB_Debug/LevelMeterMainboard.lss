
LevelMeterMainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001212  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000206  00800060  00800060  00001286  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001286  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b8  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000037b5  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001453  00000000  00000000  00004f61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013fe  00000000  00000000  000063b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cf0  00000000  00000000  000077b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001241  00000000  00000000  000084a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023b0  00000000  00000000  000096e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  0000ba95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__ctors_end>
       4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       c:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__vector_3>
      10:	0c 94 9b 02 	jmp	0x536	; 0x536 <__vector_4>
      14:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <__vector_5>
      18:	0c 94 08 03 	jmp	0x610	; 0x610 <__vector_6>
      1c:	0c 94 35 03 	jmp	0x66a	; 0x66a <__vector_7>
      20:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__vector_8>
      24:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_9>
      28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      2c:	0c 94 45 04 	jmp	0x88a	; 0x88a <__vector_11>
      30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      34:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__vector_13>
      38:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      4c:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__vector_19>
      50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      54:	96 04       	cpc	r9, r6
      56:	9b 04       	cpc	r9, r11
      58:	a7 04       	cpc	r10, r7
      5a:	ac 04       	cpc	r10, r12
      5c:	b1 04       	cpc	r11, r1
      5e:	b6 04       	cpc	r11, r6
      60:	bb 04       	cpc	r11, r11
      62:	c0 04       	cpc	r12, r0

00000064 <__trampolines_end>:
      64:	30 31       	cpi	r19, 0x10	; 16
      66:	32 33       	cpi	r19, 0x32	; 50
      68:	34 35       	cpi	r19, 0x54	; 84
      6a:	36 37       	cpi	r19, 0x76	; 118
      6c:	38 39       	cpi	r19, 0x98	; 152
      6e:	41 42       	sbci	r20, 0x21	; 33
      70:	43 44       	sbci	r20, 0x43	; 67
      72:	45 46       	sbci	r20, 0x65	; 101
	...

00000075 <__c.2099>:
      75:	64 43 3d 25 64 0a 0a 00                             dC=%d...

0000007d <__c.2095>:
      7d:	54 79 70 65 3d 25 63 0a 00                          Type=%c..

00000086 <__c.2082>:
      86:	4d 61 69 6e 20 62 6f 61 72 64 20 68 65 72 65 21     Main board here!
      96:	0a 00                                               ..

00000098 <__c.1857>:
      98:	61 25 64 0a 00                                      a%d..

0000009d <__c.1855>:
      9d:	73 61 25 64 0a 00                                   sa%d..

000000a3 <ssdCharTble>:
      a3:	c0 f9 a4 b0 99 92 82 f8 80 90 88 83 c6 a1 86 8e     ................
      b3:	ff fe f7                                            ...

000000b6 <__ctors_end>:
      b6:	11 24       	eor	r1, r1
      b8:	1f be       	out	0x3f, r1	; 63
      ba:	cf e5       	ldi	r28, 0x5F	; 95
      bc:	d4 e0       	ldi	r29, 0x04	; 4
      be:	de bf       	out	0x3e, r29	; 62
      c0:	cd bf       	out	0x3d, r28	; 61

000000c2 <__do_clear_bss>:
      c2:	22 e0       	ldi	r18, 0x02	; 2
      c4:	a0 e6       	ldi	r26, 0x60	; 96
      c6:	b0 e0       	ldi	r27, 0x00	; 0
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	a6 36       	cpi	r26, 0x66	; 102
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	0e 94 d4 06 	call	0xda8	; 0xda8 <main>
      d6:	0c 94 07 09 	jmp	0x120e	; 0x120e <_exit>

000000da <__bad_interrupt>:
      da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
      de:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
      e0:	8f b7       	in	r24, 0x3f	; 63
      e2:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
      e4:	71 83       	std	Z+1, r23	; 0x01
      e6:	60 83       	st	Z, r22
	buffer->size = size;
      e8:	53 83       	std	Z+3, r21	; 0x03
      ea:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
      ec:	17 82       	std	Z+7, r1	; 0x07
      ee:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
      f0:	15 82       	std	Z+5, r1	; 0x05
      f2:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
      f4:	8f bf       	out	0x3f, r24	; 63
      f6:	08 95       	ret

000000f8 <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
      f8:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
      fa:	9f b7       	in	r25, 0x3f	; 63
      fc:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
      fe:	44 81       	ldd	r20, Z+4	; 0x04
     100:	55 81       	ldd	r21, Z+5	; 0x05
     102:	41 15       	cp	r20, r1
     104:	51 05       	cpc	r21, r1
     106:	c9 f0       	breq	.+50     	; 0x13a <bufferGetFromFront+0x42>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
     108:	26 81       	ldd	r18, Z+6	; 0x06
     10a:	37 81       	ldd	r19, Z+7	; 0x07
     10c:	a0 81       	ld	r26, Z
     10e:	b1 81       	ldd	r27, Z+1	; 0x01
     110:	a2 0f       	add	r26, r18
     112:	b3 1f       	adc	r27, r19
     114:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
     116:	2f 5f       	subi	r18, 0xFF	; 255
     118:	3f 4f       	sbci	r19, 0xFF	; 255
     11a:	37 83       	std	Z+7, r19	; 0x07
     11c:	26 83       	std	Z+6, r18	; 0x06
		if(buffer->dataindex >= buffer->size)
     11e:	62 81       	ldd	r22, Z+2	; 0x02
     120:	73 81       	ldd	r23, Z+3	; 0x03
     122:	26 17       	cp	r18, r22
     124:	37 07       	cpc	r19, r23
     126:	20 f0       	brcs	.+8      	; 0x130 <bufferGetFromFront+0x38>
		{
			buffer->dataindex -= buffer->size;
     128:	26 1b       	sub	r18, r22
     12a:	37 0b       	sbc	r19, r23
     12c:	37 83       	std	Z+7, r19	; 0x07
     12e:	26 83       	std	Z+6, r18	; 0x06
		}
		buffer->datalength--;
     130:	41 50       	subi	r20, 0x01	; 1
     132:	51 09       	sbc	r21, r1
     134:	55 83       	std	Z+5, r21	; 0x05
     136:	44 83       	std	Z+4, r20	; 0x04
     138:	01 c0       	rjmp	.+2      	; 0x13c <bufferGetFromFront+0x44>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
     13a:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
     13c:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
     13e:	08 95       	ret

00000140 <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     140:	fc 01       	movw	r30, r24
     142:	36 2f       	mov	r19, r22
	// begin critical section
	CRITICAL_SECTION_START;
     144:	2f b7       	in	r18, 0x3f	; 63
     146:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     148:	a4 81       	ldd	r26, Z+4	; 0x04
     14a:	b5 81       	ldd	r27, Z+5	; 0x05
     14c:	62 81       	ldd	r22, Z+2	; 0x02
     14e:	73 81       	ldd	r23, Z+3	; 0x03
     150:	a6 17       	cp	r26, r22
     152:	b7 07       	cpc	r27, r23
     154:	98 f4       	brcc	.+38     	; 0x17c <bufferAddToEnd+0x3c>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     156:	86 81       	ldd	r24, Z+6	; 0x06
     158:	97 81       	ldd	r25, Z+7	; 0x07
     15a:	8a 0f       	add	r24, r26
     15c:	9b 1f       	adc	r25, r27
     15e:	0e 94 cb 08 	call	0x1196	; 0x1196 <__udivmodhi4>
     162:	a0 81       	ld	r26, Z
     164:	b1 81       	ldd	r27, Z+1	; 0x01
     166:	a8 0f       	add	r26, r24
     168:	b9 1f       	adc	r27, r25
     16a:	3c 93       	st	X, r19
		// increment the length
		buffer->datalength++;
     16c:	84 81       	ldd	r24, Z+4	; 0x04
     16e:	95 81       	ldd	r25, Z+5	; 0x05
     170:	01 96       	adiw	r24, 0x01	; 1
     172:	95 83       	std	Z+5, r25	; 0x05
     174:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     176:	2f bf       	out	0x3f, r18	; 63
		// return success
		return -1;
     178:	8f ef       	ldi	r24, 0xFF	; 255
     17a:	08 95       	ret
	}
	// end critical section
	CRITICAL_SECTION_END;
     17c:	2f bf       	out	0x3f, r18	; 63
	// return failure
	return 0;
     17e:	80 e0       	ldi	r24, 0x00	; 0
}
     180:	08 95       	ret

00000182 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
     182:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     184:	4f b7       	in	r20, 0x3f	; 63
     186:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
     188:	82 81       	ldd	r24, Z+2	; 0x02
     18a:	93 81       	ldd	r25, Z+3	; 0x03
     18c:	24 81       	ldd	r18, Z+4	; 0x04
     18e:	35 81       	ldd	r19, Z+5	; 0x05
	// end critical section
	CRITICAL_SECTION_END;
     190:	4f bf       	out	0x3f, r20	; 63
	return bytesleft;
}
     192:	82 1b       	sub	r24, r18
     194:	93 0b       	sbc	r25, r19
     196:	08 95       	ret

00000198 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
     198:	90 93 61 00 	sts	0x0061, r25
     19c:	80 93 60 00 	sts	0x0060, r24
     1a0:	08 95       	ret

000001a2 <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
     1a2:	cf 93       	push	r28
     1a4:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
     1a6:	8a 30       	cpi	r24, 0x0A	; 10
     1a8:	31 f4       	brne	.+12     	; 0x1b6 <rprintfChar+0x14>
		rputchar('\r');
     1aa:	e0 91 60 00 	lds	r30, 0x0060
     1ae:	f0 91 61 00 	lds	r31, 0x0061
     1b2:	8d e0       	ldi	r24, 0x0D	; 13
     1b4:	09 95       	icall
	// send character
	rputchar(c);
     1b6:	e0 91 60 00 	lds	r30, 0x0060
     1ba:	f0 91 61 00 	lds	r31, 0x0061
     1be:	8c 2f       	mov	r24, r28
}
     1c0:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     1c2:	09 94       	ijmp

000001c4 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
     1c4:	8f 70       	andi	r24, 0x0F	; 15
     1c6:	e8 2f       	mov	r30, r24
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	ec 59       	subi	r30, 0x9C	; 156
     1cc:	ff 4f       	sbci	r31, 0xFF	; 255
     1ce:	84 91       	lpm	r24, Z
     1d0:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <rprintfChar>

000001d4 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
     1d4:	5f 92       	push	r5
     1d6:	6f 92       	push	r6
     1d8:	7f 92       	push	r7
     1da:	8f 92       	push	r8
     1dc:	9f 92       	push	r9
     1de:	af 92       	push	r10
     1e0:	bf 92       	push	r11
     1e2:	cf 92       	push	r12
     1e4:	df 92       	push	r13
     1e6:	ef 92       	push	r14
     1e8:	ff 92       	push	r15
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	1f 92       	push	r1
     1f4:	cd b7       	in	r28, 0x3d	; 61
     1f6:	de b7       	in	r29, 0x3e	; 62
     1f8:	ec 89       	ldd	r30, Y+20	; 0x14
     1fa:	fd 89       	ldd	r31, Y+21	; 0x15
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
     1fc:	3e 01       	movw	r6, r28
     1fe:	26 e1       	ldi	r18, 0x16	; 22
     200:	62 0e       	add	r6, r18
     202:	71 1c       	adc	r7, r1
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
					rprintfChar('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     204:	3a e0       	ldi	r19, 0x0A	; 10
     206:	a3 2e       	mov	r10, r19
     208:	b1 2c       	mov	r11, r1
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     20a:	3b 89       	ldd	r19, Y+19	; 0x13
     20c:	33 23       	and	r19, r19
     20e:	81 f0       	breq	.+32     	; 0x230 <rprintf1RamRom+0x5c>
     210:	8f 01       	movw	r16, r30
     212:	0f 5f       	subi	r16, 0xFF	; 255
     214:	1f 4f       	sbci	r17, 0xFF	; 255
     216:	84 91       	lpm	r24, Z
     218:	85 32       	cpi	r24, 0x25	; 37
     21a:	89 f0       	breq	.+34     	; 0x23e <rprintf1RamRom+0x6a>
		{	// Until '%' or '\0'
			if (!format_flag)
     21c:	88 23       	and	r24, r24
     21e:	09 f4       	brne	.+2      	; 0x222 <rprintf1RamRom+0x4e>
     220:	66 c0       	rjmp	.+204    	; 0x2ee <rprintf1RamRom+0x11a>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
     222:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <rprintfChar>
     226:	63 01       	movw	r12, r6
     228:	78 01       	movw	r14, r16
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
     22a:	36 01       	movw	r6, r12
     22c:	f7 01       	movw	r30, r14
     22e:	ed cf       	rjmp	.-38     	; 0x20a <rprintf1RamRom+0x36>
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     230:	80 81       	ld	r24, Z
     232:	85 32       	cpi	r24, 0x25	; 37
     234:	59 f0       	breq	.+22     	; 0x24c <rprintf1RamRom+0x78>
     236:	8f 01       	movw	r16, r30
     238:	0f 5f       	subi	r16, 0xFF	; 255
     23a:	1f 4f       	sbci	r17, 0xFF	; 255
     23c:	ef cf       	rjmp	.-34     	; 0x21c <rprintf1RamRom+0x48>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
     23e:	7f 01       	movw	r14, r30
     240:	82 e0       	ldi	r24, 0x02	; 2
     242:	e8 0e       	add	r14, r24
     244:	f1 1c       	adc	r15, r1
     246:	f8 01       	movw	r30, r16
     248:	84 91       	lpm	r24, Z
     24a:	05 c0       	rjmp	.+10     	; 0x256 <rprintf1RamRom+0x82>
     24c:	7f 01       	movw	r14, r30
     24e:	22 e0       	ldi	r18, 0x02	; 2
     250:	e2 0e       	add	r14, r18
     252:	f1 1c       	adc	r15, r1
     254:	81 81       	ldd	r24, Z+1	; 0x01
     256:	84 36       	cpi	r24, 0x64	; 100
     258:	a1 f0       	breq	.+40     	; 0x282 <rprintf1RamRom+0xae>
     25a:	88 37       	cpi	r24, 0x78	; 120
     25c:	61 f0       	breq	.+24     	; 0x276 <rprintf1RamRom+0xa2>
     25e:	83 36       	cpi	r24, 0x63	; 99
     260:	31 f4       	brne	.+12     	; 0x26e <rprintf1RamRom+0x9a>
		{
			case 'c': format_flag = va_arg(ap,int);
     262:	f3 01       	movw	r30, r6
     264:	80 81       	ld	r24, Z
     266:	93 01       	movw	r18, r6
     268:	2e 5f       	subi	r18, 0xFE	; 254
     26a:	3f 4f       	sbci	r19, 0xFF	; 255
     26c:	39 01       	movw	r6, r18
			default:  rprintfChar(format_flag); continue;
     26e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <rprintfChar>
     272:	63 01       	movw	r12, r6
     274:	da cf       	rjmp	.-76     	; 0x22a <rprintf1RamRom+0x56>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
     276:	20 e1       	ldi	r18, 0x10	; 16
     278:	82 2e       	mov	r8, r18
     27a:	91 2c       	mov	r9, r1
     27c:	00 e0       	ldi	r16, 0x00	; 0
     27e:	10 e1       	ldi	r17, 0x10	; 16
     280:	05 c0       	rjmp	.+10     	; 0x28c <rprintf1RamRom+0xb8>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
     282:	9a e0       	ldi	r25, 0x0A	; 10
     284:	89 2e       	mov	r8, r25
     286:	91 2c       	mov	r9, r1
     288:	00 e1       	ldi	r16, 0x10	; 16
     28a:	17 e2       	ldi	r17, 0x27	; 39
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
     28c:	63 01       	movw	r12, r6
     28e:	32 e0       	ldi	r19, 0x02	; 2
     290:	c3 0e       	add	r12, r19
     292:	d1 1c       	adc	r13, r1
     294:	f3 01       	movw	r30, r6
     296:	60 80       	ld	r6, Z
     298:	71 80       	ldd	r7, Z+1	; 0x01
			if (format_flag == 'd')
     29a:	84 36       	cpi	r24, 0x64	; 100
     29c:	a1 f4       	brne	.+40     	; 0x2c6 <rprintf1RamRom+0xf2>
			{
				if (((int)u_val) < 0)
     29e:	77 fe       	sbrs	r7, 7
     2a0:	0f c0       	rjmp	.+30     	; 0x2c0 <rprintf1RamRom+0xec>
				{
					u_val = - u_val;
     2a2:	71 94       	neg	r7
     2a4:	61 94       	neg	r6
     2a6:	71 08       	sbc	r7, r1
					rprintfChar('-');
     2a8:	8d e2       	ldi	r24, 0x2D	; 45
     2aa:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <rprintfChar>
     2ae:	08 c0       	rjmp	.+16     	; 0x2c0 <rprintf1RamRom+0xec>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     2b0:	c8 01       	movw	r24, r16
     2b2:	b5 01       	movw	r22, r10
     2b4:	0e 94 cb 08 	call	0x1196	; 0x1196 <__udivmodhi4>
     2b8:	8b 01       	movw	r16, r22
     2ba:	62 30       	cpi	r22, 0x02	; 2
     2bc:	71 05       	cpc	r23, r1
     2be:	18 f0       	brcs	.+6      	; 0x2c6 <rprintf1RamRom+0xf2>
     2c0:	60 16       	cp	r6, r16
     2c2:	71 06       	cpc	r7, r17
     2c4:	a8 f3       	brcs	.-22     	; 0x2b0 <rprintf1RamRom+0xdc>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
     2c6:	c3 01       	movw	r24, r6
     2c8:	b8 01       	movw	r22, r16
     2ca:	0e 94 cb 08 	call	0x1196	; 0x1196 <__udivmodhi4>
     2ce:	58 2e       	mov	r5, r24
     2d0:	86 2f       	mov	r24, r22
     2d2:	99 83       	std	Y+1, r25	; 0x01
     2d4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <rprintfu04>
				u_val %= div_val;
     2d8:	65 2c       	mov	r6, r5
     2da:	99 81       	ldd	r25, Y+1	; 0x01
     2dc:	79 2e       	mov	r7, r25
				div_val /= base;
     2de:	c8 01       	movw	r24, r16
     2e0:	b4 01       	movw	r22, r8
     2e2:	0e 94 cb 08 	call	0x1196	; 0x1196 <__udivmodhi4>
     2e6:	8b 01       	movw	r16, r22
			} while (div_val);
     2e8:	67 2b       	or	r22, r23
     2ea:	69 f7       	brne	.-38     	; 0x2c6 <rprintf1RamRom+0xf2>
     2ec:	9e cf       	rjmp	.-196    	; 0x22a <rprintf1RamRom+0x56>
		}
	}
	va_end(ap);
}
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0f 90       	pop	r0
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	ff 90       	pop	r15
     2fe:	ef 90       	pop	r14
     300:	df 90       	pop	r13
     302:	cf 90       	pop	r12
     304:	bf 90       	pop	r11
     306:	af 90       	pop	r10
     308:	9f 90       	pop	r9
     30a:	8f 90       	pop	r8
     30c:	7f 90       	pop	r7
     30e:	6f 90       	pop	r6
     310:	5f 90       	pop	r5
     312:	08 95       	ret

00000314 <timer0SetPrescaler>:
#endif

void timer0SetPrescaler(u08 prescale)
{
	// set prescaler on timer 0
	outb(TCCR0, (inb(TCCR0) & ~TIMER_PRESCALE_MASK) | prescale);
     314:	93 b7       	in	r25, 0x33	; 51
     316:	98 7f       	andi	r25, 0xF8	; 248
     318:	89 2b       	or	r24, r25
     31a:	83 bf       	out	0x33, r24	; 51
     31c:	08 95       	ret

0000031e <timer0Init>:
}

void timer0Init()
{
	// initialize timer 0
	timer0SetPrescaler( TIMER0PRESCALE );	// set prescaler
     31e:	85 e0       	ldi	r24, 0x05	; 5
     320:	0e 94 8a 01 	call	0x314	; 0x314 <timer0SetPrescaler>
	outb(TCNT0, 0);							// reset TCNT0
     324:	12 be       	out	0x32, r1	; 50
	sbi(TIMSK, TOIE0);						// enable TCNT0 overflow interrupt
     326:	89 b7       	in	r24, 0x39	; 57
     328:	81 60       	ori	r24, 0x01	; 1
     32a:	89 bf       	out	0x39, r24	; 57
	sbi(TIMSK, OCIE0);						// enable OCR0 Output Compare Match Interrupt
     32c:	89 b7       	in	r24, 0x39	; 57
     32e:	82 60       	ori	r24, 0x02	; 2
     330:	89 bf       	out	0x39, r24	; 57
}

void timer0ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer0Reg0 = 0;	// initialize time registers
     332:	10 92 f5 01 	sts	0x01F5, r1
     336:	10 92 f6 01 	sts	0x01F6, r1
     33a:	10 92 f7 01 	sts	0x01F7, r1
     33e:	10 92 f8 01 	sts	0x01F8, r1
     342:	08 95       	ret

00000344 <timer1SetPrescaler>:
}

void timer1SetPrescaler(u08 prescale)
{
	// set prescaler on timer 1
	outb(TCCR1B, (inb(TCCR1B) & ~TIMER_PRESCALE_MASK) | prescale);
     344:	9e b5       	in	r25, 0x2e	; 46
     346:	98 7f       	andi	r25, 0xF8	; 248
     348:	89 2b       	or	r24, r25
     34a:	8e bd       	out	0x2e, r24	; 46
     34c:	08 95       	ret

0000034e <timer1Init>:
}

void timer1Init(void)
{
	// initialize timer 1
	timer1SetPrescaler( TIMER1PRESCALE );	// set prescaler
     34e:	82 e0       	ldi	r24, 0x02	; 2
     350:	0e 94 a2 01 	call	0x344	; 0x344 <timer1SetPrescaler>
	outb(TCNT1H, 0);						// reset TCNT1
     354:	1d bc       	out	0x2d, r1	; 45
	outb(TCNT1L, 0);
     356:	1c bc       	out	0x2c, r1	; 44
	sbi(TIMSK, TOIE1);						// enable TCNT1 overflow
     358:	89 b7       	in	r24, 0x39	; 57
     35a:	84 60       	ori	r24, 0x04	; 4
     35c:	89 bf       	out	0x39, r24	; 57
     35e:	08 95       	ret

00000360 <timer2SetPrescaler>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2SetPrescaler(u08 prescale)
{
	// set prescaler on timer 2
	outb(TCCR2, (inb(TCCR2) & ~TIMER_PRESCALE_MASK) | prescale);
     360:	95 b5       	in	r25, 0x25	; 37
     362:	98 7f       	andi	r25, 0xF8	; 248
     364:	89 2b       	or	r24, r25
     366:	85 bd       	out	0x25, r24	; 37
     368:	08 95       	ret

0000036a <timer2Init>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2Init(void)
{
	// initialize timer 2
	timer2SetPrescaler( TIMER2PRESCALE );	// set prescaler
     36a:	86 e0       	ldi	r24, 0x06	; 6
     36c:	0e 94 b0 01 	call	0x360	; 0x360 <timer2SetPrescaler>
	outb(TCNT2, 0);							// reset TCNT2
     370:	14 bc       	out	0x24, r1	; 36
	sbi(TIMSK, TOIE2);						// enable TCNT2 overflow
     372:	89 b7       	in	r24, 0x39	; 57
     374:	80 64       	ori	r24, 0x40	; 64
     376:	89 bf       	out	0x39, r24	; 57
	sbi(TIMSK, OCIE2);						// enable OCR2 Output Compare Match Interrupt
     378:	89 b7       	in	r24, 0x39	; 57
     37a:	80 68       	ori	r24, 0x80	; 128
     37c:	89 bf       	out	0x39, r24	; 57

#ifdef TCNT2	// support timer2 only if it exists
void timer2ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer2Reg0 = 0;	// initialize time registers
     37e:	10 92 fd 01 	sts	0x01FD, r1
     382:	10 92 fe 01 	sts	0x01FE, r1
     386:	10 92 ff 01 	sts	0x01FF, r1
     38a:	10 92 00 02 	sts	0x0200, r1
     38e:	08 95       	ret

00000390 <timerAttach>:
#endif

void timerAttach(u08 interruptNum, void (*userFunc)(void) )
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     390:	88 30       	cpi	r24, 0x08	; 8
     392:	40 f4       	brcc	.+16     	; 0x3a4 <timerAttach+0x14>
	{
		// set the interrupt function to run
		// the supplied user's function
		TimerIntFunc[interruptNum] = userFunc;
     394:	e8 2f       	mov	r30, r24
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	ee 0f       	add	r30, r30
     39a:	ff 1f       	adc	r31, r31
     39c:	ee 59       	subi	r30, 0x9E	; 158
     39e:	ff 4f       	sbci	r31, 0xFF	; 255
     3a0:	71 83       	std	Z+1, r23	; 0x01
     3a2:	60 83       	st	Z, r22
     3a4:	08 95       	ret

000003a6 <timerDetach>:
}

void timerDetach(u08 interruptNum)
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     3a6:	88 30       	cpi	r24, 0x08	; 8
     3a8:	40 f4       	brcc	.+16     	; 0x3ba <timerDetach+0x14>
	{
		// set the interrupt function to run nothing
		TimerIntFunc[interruptNum] = 0;
     3aa:	e8 2f       	mov	r30, r24
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	ee 0f       	add	r30, r30
     3b0:	ff 1f       	adc	r31, r31
     3b2:	ee 59       	subi	r30, 0x9E	; 158
     3b4:	ff 4f       	sbci	r31, 0xFF	; 255
     3b6:	11 82       	std	Z+1, r1	; 0x01
     3b8:	10 82       	st	Z, r1
     3ba:	08 95       	ret

000003bc <timerInit>:
                  :"r"(time_ms), "r"((unsigned short) (delay_count))
	);
}
*/
void timerInit(void)
{
     3bc:	cf 93       	push	r28
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
     3be:	c0 e0       	ldi	r28, 0x00	; 0
		timerDetach(intNum);
     3c0:	8c 2f       	mov	r24, r28
     3c2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <timerDetach>
*/
void timerInit(void)
{
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
     3c6:	cf 5f       	subi	r28, 0xFF	; 255
     3c8:	c8 30       	cpi	r28, 0x08	; 8
     3ca:	d1 f7       	brne	.-12     	; 0x3c0 <timerInit+0x4>
		timerDetach(intNum);

	// initialize all timers
	timer0Init();
     3cc:	0e 94 8f 01 	call	0x31e	; 0x31e <timer0Init>
	timer1Init();
     3d0:	0e 94 a7 01 	call	0x34e	; 0x34e <timer1Init>
	#ifdef TCNT2	// support timer2 only if it exists
	timer2Init();
     3d4:	0e 94 b5 01 	call	0x36a	; 0x36a <timer2Init>
	#endif
	// enable interrupts
	sei();
     3d8:	78 94       	sei
}
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret

000003de <timer1PWMInit>:
	// configures timer1 for use with PWM output
	// on OC1A and OC1B pins
	// phase correct PWM mode, FREQpwm=F_CPU/(2*N*TOP)

	// enable timer1 as 8,9,10bit PWM
	if(bitRes == 9)
     3de:	89 30       	cpi	r24, 0x09	; 9
     3e0:	31 f4       	brne	.+12     	; 0x3ee <timer1PWMInit+0x10>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     3e2:	8f b5       	in	r24, 0x2f	; 47
     3e4:	82 60       	ori	r24, 0x02	; 2
     3e6:	8f bd       	out	0x2f, r24	; 47
		cbi(TCCR1A,PWM10);
     3e8:	8f b5       	in	r24, 0x2f	; 47
     3ea:	8e 7f       	andi	r24, 0xFE	; 254
     3ec:	0a c0       	rjmp	.+20     	; 0x402 <timer1PWMInit+0x24>
	}
	else if( bitRes == 10 )
     3ee:	8a 30       	cpi	r24, 0x0A	; 10
     3f0:	19 f4       	brne	.+6      	; 0x3f8 <timer1PWMInit+0x1a>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     3f2:	8f b5       	in	r24, 0x2f	; 47
     3f4:	82 60       	ori	r24, 0x02	; 2
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <timer1PWMInit+0x1e>
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     3f8:	8f b5       	in	r24, 0x2f	; 47
     3fa:	8d 7f       	andi	r24, 0xFD	; 253
     3fc:	8f bd       	out	0x2f, r24	; 47
		sbi(TCCR1A,PWM10);
     3fe:	8f b5       	in	r24, 0x2f	; 47
     400:	81 60       	ori	r24, 0x01	; 1
     402:	8f bd       	out	0x2f, r24	; 47
	}

	// clear output compare value A
	outb(OCR1AH, 0);
     404:	1b bc       	out	0x2b, r1	; 43
	outb(OCR1AL, 0);
     406:	1a bc       	out	0x2a, r1	; 42
	// clear output compare value B
	outb(OCR1BH, 0);
     408:	19 bc       	out	0x29, r1	; 41
	outb(OCR1BL, 0);
     40a:	18 bc       	out	0x28, r1	; 40
     40c:	08 95       	ret

0000040e <timer1PWMAOn>:

void timer1PWMAOn(void)
{
	// turn on channel A (OC1A) PWM output
	// set OC1A as non-inverted PWM
	sbi(TCCR1A,COM1A1);
     40e:	8f b5       	in	r24, 0x2f	; 47
     410:	80 68       	ori	r24, 0x80	; 128
     412:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1A0);
     414:	8f b5       	in	r24, 0x2f	; 47
     416:	8f 7b       	andi	r24, 0xBF	; 191
     418:	8f bd       	out	0x2f, r24	; 47
     41a:	08 95       	ret

0000041c <timer1PWMBOn>:

void timer1PWMBOn(void)
{
	// turn on channel B (OC1B) PWM output
	// set OC1B as non-inverted PWM
	sbi(TCCR1A,COM1B1);
     41c:	8f b5       	in	r24, 0x2f	; 47
     41e:	80 62       	ori	r24, 0x20	; 32
     420:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1B0);
     422:	8f b5       	in	r24, 0x2f	; 47
     424:	8f 7e       	andi	r24, 0xEF	; 239
     426:	8f bd       	out	0x2f, r24	; 47
     428:	08 95       	ret

0000042a <timer1PWMASet>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1AH);		// set the high 8bits of OCR1A
	//outp( (pwmDuty&0x00FF), OCR1AL);	// set the low 8bits of OCR1A
	OCR1A = pwmDuty;
     42a:	9b bd       	out	0x2b, r25	; 43
     42c:	8a bd       	out	0x2a, r24	; 42
     42e:	08 95       	ret

00000430 <timer1PWMBSet>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
     430:	99 bd       	out	0x29, r25	; 41
     432:	88 bd       	out	0x28, r24	; 40
     434:	08 95       	ret

00000436 <__vector_9>:
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
     436:	1f 92       	push	r1
     438:	0f 92       	push	r0
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	0f 92       	push	r0
     43e:	11 24       	eor	r1, r1
     440:	2f 93       	push	r18
     442:	3f 93       	push	r19
     444:	4f 93       	push	r20
     446:	5f 93       	push	r21
     448:	6f 93       	push	r22
     44a:	7f 93       	push	r23
     44c:	8f 93       	push	r24
     44e:	9f 93       	push	r25
     450:	af 93       	push	r26
     452:	bf 93       	push	r27
     454:	ef 93       	push	r30
     456:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
     458:	80 91 f5 01 	lds	r24, 0x01F5
     45c:	90 91 f6 01 	lds	r25, 0x01F6
     460:	a0 91 f7 01 	lds	r26, 0x01F7
     464:	b0 91 f8 01 	lds	r27, 0x01F8
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	a1 1d       	adc	r26, r1
     46c:	b1 1d       	adc	r27, r1
     46e:	80 93 f5 01 	sts	0x01F5, r24
     472:	90 93 f6 01 	sts	0x01F6, r25
     476:	a0 93 f7 01 	sts	0x01F7, r26
     47a:	b0 93 f8 01 	sts	0x01F8, r27

	// increment pause counter
	TimerPauseReg++;
     47e:	80 91 f9 01 	lds	r24, 0x01F9
     482:	90 91 fa 01 	lds	r25, 0x01FA
     486:	a0 91 fb 01 	lds	r26, 0x01FB
     48a:	b0 91 fc 01 	lds	r27, 0x01FC
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	a1 1d       	adc	r26, r1
     492:	b1 1d       	adc	r27, r1
     494:	80 93 f9 01 	sts	0x01F9, r24
     498:	90 93 fa 01 	sts	0x01FA, r25
     49c:	a0 93 fb 01 	sts	0x01FB, r26
     4a0:	b0 93 fc 01 	sts	0x01FC, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
     4a4:	80 91 62 00 	lds	r24, 0x0062
     4a8:	90 91 63 00 	lds	r25, 0x0063
     4ac:	89 2b       	or	r24, r25
     4ae:	29 f0       	breq	.+10     	; 0x4ba <__stack+0x5b>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
     4b0:	e0 91 62 00 	lds	r30, 0x0062
     4b4:	f0 91 63 00 	lds	r31, 0x0063
     4b8:	09 95       	icall
}
     4ba:	ff 91       	pop	r31
     4bc:	ef 91       	pop	r30
     4be:	bf 91       	pop	r27
     4c0:	af 91       	pop	r26
     4c2:	9f 91       	pop	r25
     4c4:	8f 91       	pop	r24
     4c6:	7f 91       	pop	r23
     4c8:	6f 91       	pop	r22
     4ca:	5f 91       	pop	r21
     4cc:	4f 91       	pop	r20
     4ce:	3f 91       	pop	r19
     4d0:	2f 91       	pop	r18
     4d2:	0f 90       	pop	r0
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	0f 90       	pop	r0
     4d8:	1f 90       	pop	r1
     4da:	18 95       	reti

000004dc <__vector_8>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
     4dc:	1f 92       	push	r1
     4de:	0f 92       	push	r0
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	0f 92       	push	r0
     4e4:	11 24       	eor	r1, r1
     4e6:	2f 93       	push	r18
     4e8:	3f 93       	push	r19
     4ea:	4f 93       	push	r20
     4ec:	5f 93       	push	r21
     4ee:	6f 93       	push	r22
     4f0:	7f 93       	push	r23
     4f2:	8f 93       	push	r24
     4f4:	9f 93       	push	r25
     4f6:	af 93       	push	r26
     4f8:	bf 93       	push	r27
     4fa:	ef 93       	push	r30
     4fc:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
     4fe:	80 91 64 00 	lds	r24, 0x0064
     502:	90 91 65 00 	lds	r25, 0x0065
     506:	89 2b       	or	r24, r25
     508:	29 f0       	breq	.+10     	; 0x514 <__vector_8+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
     50a:	e0 91 64 00 	lds	r30, 0x0064
     50e:	f0 91 65 00 	lds	r31, 0x0065
     512:	09 95       	icall
}
     514:	ff 91       	pop	r31
     516:	ef 91       	pop	r30
     518:	bf 91       	pop	r27
     51a:	af 91       	pop	r26
     51c:	9f 91       	pop	r25
     51e:	8f 91       	pop	r24
     520:	7f 91       	pop	r23
     522:	6f 91       	pop	r22
     524:	5f 91       	pop	r21
     526:	4f 91       	pop	r20
     528:	3f 91       	pop	r19
     52a:	2f 91       	pop	r18
     52c:	0f 90       	pop	r0
     52e:	0f be       	out	0x3f, r0	; 63
     530:	0f 90       	pop	r0
     532:	1f 90       	pop	r1
     534:	18 95       	reti

00000536 <__vector_4>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
     536:	1f 92       	push	r1
     538:	0f 92       	push	r0
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	0f 92       	push	r0
     53e:	11 24       	eor	r1, r1
     540:	2f 93       	push	r18
     542:	3f 93       	push	r19
     544:	4f 93       	push	r20
     546:	5f 93       	push	r21
     548:	6f 93       	push	r22
     54a:	7f 93       	push	r23
     54c:	8f 93       	push	r24
     54e:	9f 93       	push	r25
     550:	af 93       	push	r26
     552:	bf 93       	push	r27
     554:	ef 93       	push	r30
     556:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
     558:	80 91 fd 01 	lds	r24, 0x01FD
     55c:	90 91 fe 01 	lds	r25, 0x01FE
     560:	a0 91 ff 01 	lds	r26, 0x01FF
     564:	b0 91 00 02 	lds	r27, 0x0200
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	a1 1d       	adc	r26, r1
     56c:	b1 1d       	adc	r27, r1
     56e:	80 93 fd 01 	sts	0x01FD, r24
     572:	90 93 fe 01 	sts	0x01FE, r25
     576:	a0 93 ff 01 	sts	0x01FF, r26
     57a:	b0 93 00 02 	sts	0x0200, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
     57e:	80 91 6c 00 	lds	r24, 0x006C
     582:	90 91 6d 00 	lds	r25, 0x006D
     586:	89 2b       	or	r24, r25
     588:	29 f0       	breq	.+10     	; 0x594 <__vector_4+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
     58a:	e0 91 6c 00 	lds	r30, 0x006C
     58e:	f0 91 6d 00 	lds	r31, 0x006D
     592:	09 95       	icall
}
     594:	ff 91       	pop	r31
     596:	ef 91       	pop	r30
     598:	bf 91       	pop	r27
     59a:	af 91       	pop	r26
     59c:	9f 91       	pop	r25
     59e:	8f 91       	pop	r24
     5a0:	7f 91       	pop	r23
     5a2:	6f 91       	pop	r22
     5a4:	5f 91       	pop	r21
     5a6:	4f 91       	pop	r20
     5a8:	3f 91       	pop	r19
     5aa:	2f 91       	pop	r18
     5ac:	0f 90       	pop	r0
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	0f 90       	pop	r0
     5b2:	1f 90       	pop	r1
     5b4:	18 95       	reti

000005b6 <__vector_19>:

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_COMP_vect)
{
     5b6:	1f 92       	push	r1
     5b8:	0f 92       	push	r0
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	0f 92       	push	r0
     5be:	11 24       	eor	r1, r1
     5c0:	2f 93       	push	r18
     5c2:	3f 93       	push	r19
     5c4:	4f 93       	push	r20
     5c6:	5f 93       	push	r21
     5c8:	6f 93       	push	r22
     5ca:	7f 93       	push	r23
     5cc:	8f 93       	push	r24
     5ce:	9f 93       	push	r25
     5d0:	af 93       	push	r26
     5d2:	bf 93       	push	r27
     5d4:	ef 93       	push	r30
     5d6:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
     5d8:	80 91 70 00 	lds	r24, 0x0070
     5dc:	90 91 71 00 	lds	r25, 0x0071
     5e0:	89 2b       	or	r24, r25
     5e2:	29 f0       	breq	.+10     	; 0x5ee <__vector_19+0x38>
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
     5e4:	e0 91 70 00 	lds	r30, 0x0070
     5e8:	f0 91 71 00 	lds	r31, 0x0071
     5ec:	09 95       	icall
}
     5ee:	ff 91       	pop	r31
     5f0:	ef 91       	pop	r30
     5f2:	bf 91       	pop	r27
     5f4:	af 91       	pop	r26
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	7f 91       	pop	r23
     5fc:	6f 91       	pop	r22
     5fe:	5f 91       	pop	r21
     600:	4f 91       	pop	r20
     602:	3f 91       	pop	r19
     604:	2f 91       	pop	r18
     606:	0f 90       	pop	r0
     608:	0f be       	out	0x3f, r0	; 63
     60a:	0f 90       	pop	r0
     60c:	1f 90       	pop	r1
     60e:	18 95       	reti

00000610 <__vector_6>:
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
     610:	1f 92       	push	r1
     612:	0f 92       	push	r0
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	0f 92       	push	r0
     618:	11 24       	eor	r1, r1
     61a:	2f 93       	push	r18
     61c:	3f 93       	push	r19
     61e:	4f 93       	push	r20
     620:	5f 93       	push	r21
     622:	6f 93       	push	r22
     624:	7f 93       	push	r23
     626:	8f 93       	push	r24
     628:	9f 93       	push	r25
     62a:	af 93       	push	r26
     62c:	bf 93       	push	r27
     62e:	ef 93       	push	r30
     630:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
     632:	80 91 66 00 	lds	r24, 0x0066
     636:	90 91 67 00 	lds	r25, 0x0067
     63a:	89 2b       	or	r24, r25
     63c:	29 f0       	breq	.+10     	; 0x648 <__vector_6+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
     63e:	e0 91 66 00 	lds	r30, 0x0066
     642:	f0 91 67 00 	lds	r31, 0x0067
     646:	09 95       	icall
}
     648:	ff 91       	pop	r31
     64a:	ef 91       	pop	r30
     64c:	bf 91       	pop	r27
     64e:	af 91       	pop	r26
     650:	9f 91       	pop	r25
     652:	8f 91       	pop	r24
     654:	7f 91       	pop	r23
     656:	6f 91       	pop	r22
     658:	5f 91       	pop	r21
     65a:	4f 91       	pop	r20
     65c:	3f 91       	pop	r19
     65e:	2f 91       	pop	r18
     660:	0f 90       	pop	r0
     662:	0f be       	out	0x3f, r0	; 63
     664:	0f 90       	pop	r0
     666:	1f 90       	pop	r1
     668:	18 95       	reti

0000066a <__vector_7>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
     66a:	1f 92       	push	r1
     66c:	0f 92       	push	r0
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	0f 92       	push	r0
     672:	11 24       	eor	r1, r1
     674:	2f 93       	push	r18
     676:	3f 93       	push	r19
     678:	4f 93       	push	r20
     67a:	5f 93       	push	r21
     67c:	6f 93       	push	r22
     67e:	7f 93       	push	r23
     680:	8f 93       	push	r24
     682:	9f 93       	push	r25
     684:	af 93       	push	r26
     686:	bf 93       	push	r27
     688:	ef 93       	push	r30
     68a:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
     68c:	80 91 68 00 	lds	r24, 0x0068
     690:	90 91 69 00 	lds	r25, 0x0069
     694:	89 2b       	or	r24, r25
     696:	29 f0       	breq	.+10     	; 0x6a2 <__vector_7+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
     698:	e0 91 68 00 	lds	r30, 0x0068
     69c:	f0 91 69 00 	lds	r31, 0x0069
     6a0:	09 95       	icall
}
     6a2:	ff 91       	pop	r31
     6a4:	ef 91       	pop	r30
     6a6:	bf 91       	pop	r27
     6a8:	af 91       	pop	r26
     6aa:	9f 91       	pop	r25
     6ac:	8f 91       	pop	r24
     6ae:	7f 91       	pop	r23
     6b0:	6f 91       	pop	r22
     6b2:	5f 91       	pop	r21
     6b4:	4f 91       	pop	r20
     6b6:	3f 91       	pop	r19
     6b8:	2f 91       	pop	r18
     6ba:	0f 90       	pop	r0
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	0f 90       	pop	r0
     6c0:	1f 90       	pop	r1
     6c2:	18 95       	reti

000006c4 <__vector_5>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
     6c4:	1f 92       	push	r1
     6c6:	0f 92       	push	r0
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	0f 92       	push	r0
     6cc:	11 24       	eor	r1, r1
     6ce:	2f 93       	push	r18
     6d0:	3f 93       	push	r19
     6d2:	4f 93       	push	r20
     6d4:	5f 93       	push	r21
     6d6:	6f 93       	push	r22
     6d8:	7f 93       	push	r23
     6da:	8f 93       	push	r24
     6dc:	9f 93       	push	r25
     6de:	af 93       	push	r26
     6e0:	bf 93       	push	r27
     6e2:	ef 93       	push	r30
     6e4:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
     6e6:	80 91 6a 00 	lds	r24, 0x006A
     6ea:	90 91 6b 00 	lds	r25, 0x006B
     6ee:	89 2b       	or	r24, r25
     6f0:	29 f0       	breq	.+10     	; 0x6fc <__vector_5+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
     6f2:	e0 91 6a 00 	lds	r30, 0x006A
     6f6:	f0 91 6b 00 	lds	r31, 0x006B
     6fa:	09 95       	icall
}
     6fc:	ff 91       	pop	r31
     6fe:	ef 91       	pop	r30
     700:	bf 91       	pop	r27
     702:	af 91       	pop	r26
     704:	9f 91       	pop	r25
     706:	8f 91       	pop	r24
     708:	7f 91       	pop	r23
     70a:	6f 91       	pop	r22
     70c:	5f 91       	pop	r21
     70e:	4f 91       	pop	r20
     710:	3f 91       	pop	r19
     712:	2f 91       	pop	r18
     714:	0f 90       	pop	r0
     716:	0f be       	out	0x3f, r0	; 63
     718:	0f 90       	pop	r0
     71a:	1f 90       	pop	r1
     71c:	18 95       	reti

0000071e <__vector_3>:

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMP_vect)
{
     71e:	1f 92       	push	r1
     720:	0f 92       	push	r0
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	0f 92       	push	r0
     726:	11 24       	eor	r1, r1
     728:	2f 93       	push	r18
     72a:	3f 93       	push	r19
     72c:	4f 93       	push	r20
     72e:	5f 93       	push	r21
     730:	6f 93       	push	r22
     732:	7f 93       	push	r23
     734:	8f 93       	push	r24
     736:	9f 93       	push	r25
     738:	af 93       	push	r26
     73a:	bf 93       	push	r27
     73c:	ef 93       	push	r30
     73e:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     740:	80 91 6e 00 	lds	r24, 0x006E
     744:	90 91 6f 00 	lds	r25, 0x006F
     748:	89 2b       	or	r24, r25
     74a:	29 f0       	breq	.+10     	; 0x756 <__vector_3+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     74c:	e0 91 6e 00 	lds	r30, 0x006E
     750:	f0 91 6f 00 	lds	r31, 0x006F
     754:	09 95       	icall
}
     756:	ff 91       	pop	r31
     758:	ef 91       	pop	r30
     75a:	bf 91       	pop	r27
     75c:	af 91       	pop	r26
     75e:	9f 91       	pop	r25
     760:	8f 91       	pop	r24
     762:	7f 91       	pop	r23
     764:	6f 91       	pop	r22
     766:	5f 91       	pop	r21
     768:	4f 91       	pop	r20
     76a:	3f 91       	pop	r19
     76c:	2f 91       	pop	r18
     76e:	0f 90       	pop	r0
     770:	0f be       	out	0x3f, r0	; 63
     772:	0f 90       	pop	r0
     774:	1f 90       	pop	r1
     776:	18 95       	reti

00000778 <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (unsigned char *)uartRxData, UART_RX_BUFFER_SIZE);
     778:	40 e4       	ldi	r20, 0x40	; 64
     77a:	50 e0       	ldi	r21, 0x00	; 0
     77c:	64 eb       	ldi	r22, 0xB4	; 180
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	82 e0       	ldi	r24, 0x02	; 2
     782:	92 e0       	ldi	r25, 0x02	; 2
     784:	0e 94 6f 00 	call	0xde	; 0xde <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (unsigned char *)uartTxData, UART_TX_BUFFER_SIZE);
     788:	40 e4       	ldi	r20, 0x40	; 64
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	64 e7       	ldi	r22, 0x74	; 116
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	8b e0       	ldi	r24, 0x0B	; 11
     792:	92 e0       	ldi	r25, 0x02	; 2
     794:	0c 94 6f 00 	jmp	0xde	; 0xde <bufferInit>

00000798 <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
     798:	0e 94 bc 03 	call	0x778	; 0x778 <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
     79c:	10 92 73 00 	sts	0x0073, r1
     7a0:	10 92 72 00 	sts	0x0072, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     7a4:	88 ed       	ldi	r24, 0xD8	; 216
     7a6:	8a b9       	out	0x0a, r24	; 10
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
     7a8:	8f e5       	ldi	r24, 0x5F	; 95
     7aa:	89 b9       	out	0x09, r24	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
     7ac:	10 bc       	out	0x20, r1	; 32
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	80 93 01 02 	sts	0x0201, r24
	uartBufferedTx = FALSE;
     7b4:	10 92 0a 02 	sts	0x020A, r1
	// clear overflow count
	uartRxOverflow = 0;
     7b8:	10 92 14 02 	sts	0x0214, r1
     7bc:	10 92 13 02 	sts	0x0213, r1
	// enable interrupts
	sei();
     7c0:	78 94       	sei
     7c2:	08 95       	ret

000007c4 <uartSetBaudRate>:
	UartRxFunc = rx_func;
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	8b 01       	movw	r16, r22
     7ca:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
     7cc:	dc 01       	movw	r26, r24
     7ce:	cb 01       	movw	r24, r22
     7d0:	90 5e       	subi	r25, 0xE0	; 224
     7d2:	a3 4e       	sbci	r26, 0xE3	; 227
     7d4:	bf 4f       	sbci	r27, 0xFF	; 255
     7d6:	bc 01       	movw	r22, r24
     7d8:	cd 01       	movw	r24, r26
     7da:	43 e0       	ldi	r20, 0x03	; 3
     7dc:	66 0f       	add	r22, r22
     7de:	77 1f       	adc	r23, r23
     7e0:	88 1f       	adc	r24, r24
     7e2:	99 1f       	adc	r25, r25
     7e4:	4a 95       	dec	r20
     7e6:	d1 f7       	brne	.-12     	; 0x7dc <uartSetBaudRate+0x18>
     7e8:	a9 01       	movw	r20, r18
     7ea:	98 01       	movw	r18, r16
     7ec:	e4 e0       	ldi	r30, 0x04	; 4
     7ee:	22 0f       	add	r18, r18
     7f0:	33 1f       	adc	r19, r19
     7f2:	44 1f       	adc	r20, r20
     7f4:	55 1f       	adc	r21, r21
     7f6:	ea 95       	dec	r30
     7f8:	d1 f7       	brne	.-12     	; 0x7ee <uartSetBaudRate+0x2a>
     7fa:	0e 94 df 08 	call	0x11be	; 0x11be <__udivmodsi4>
     7fe:	21 50       	subi	r18, 0x01	; 1
     800:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
     802:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
     804:	30 bd       	out	0x20, r19	; 32
	#endif
}
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	08 95       	ret

0000080c <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
     80c:	90 91 01 02 	lds	r25, 0x0201
     810:	99 23       	and	r25, r25
     812:	e1 f3       	breq	.-8      	; 0x80c <uartSendByte>
	// send byte
	outb(UDR, txData);
     814:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
     816:	10 92 01 02 	sts	0x0201, r1
     81a:	08 95       	ret

0000081c <__vector_13>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_TRANS)
{
     81c:	1f 92       	push	r1
     81e:	0f 92       	push	r0
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	0f 92       	push	r0
     824:	11 24       	eor	r1, r1
     826:	2f 93       	push	r18
     828:	3f 93       	push	r19
     82a:	4f 93       	push	r20
     82c:	5f 93       	push	r21
     82e:	6f 93       	push	r22
     830:	7f 93       	push	r23
     832:	8f 93       	push	r24
     834:	9f 93       	push	r25
     836:	af 93       	push	r26
     838:	bf 93       	push	r27
     83a:	ef 93       	push	r30
     83c:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
     83e:	80 91 0a 02 	lds	r24, 0x020A
     842:	88 23       	and	r24, r24
     844:	71 f0       	breq	.+28     	; 0x862 <__vector_13+0x46>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
     846:	80 91 0f 02 	lds	r24, 0x020F
     84a:	90 91 10 02 	lds	r25, 0x0210
     84e:	89 2b       	or	r24, r25
     850:	31 f0       	breq	.+12     	; 0x85e <__vector_13+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
     852:	8b e0       	ldi	r24, 0x0B	; 11
     854:	92 e0       	ldi	r25, 0x02	; 2
     856:	0e 94 7c 00 	call	0xf8	; 0xf8 <bufferGetFromFront>
     85a:	8c b9       	out	0x0c, r24	; 12
     85c:	05 c0       	rjmp	.+10     	; 0x868 <__vector_13+0x4c>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
     85e:	10 92 0a 02 	sts	0x020A, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
     862:	8f ef       	ldi	r24, 0xFF	; 255
     864:	80 93 01 02 	sts	0x0201, r24
	}
}
     868:	ff 91       	pop	r31
     86a:	ef 91       	pop	r30
     86c:	bf 91       	pop	r27
     86e:	af 91       	pop	r26
     870:	9f 91       	pop	r25
     872:	8f 91       	pop	r24
     874:	7f 91       	pop	r23
     876:	6f 91       	pop	r22
     878:	5f 91       	pop	r21
     87a:	4f 91       	pop	r20
     87c:	3f 91       	pop	r19
     87e:	2f 91       	pop	r18
     880:	0f 90       	pop	r0
     882:	0f be       	out	0x3f, r0	; 63
     884:	0f 90       	pop	r0
     886:	1f 90       	pop	r1
     888:	18 95       	reti

0000088a <__vector_11>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_RECV)
{
     88a:	1f 92       	push	r1
     88c:	0f 92       	push	r0
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	0f 92       	push	r0
     892:	11 24       	eor	r1, r1
     894:	2f 93       	push	r18
     896:	3f 93       	push	r19
     898:	4f 93       	push	r20
     89a:	5f 93       	push	r21
     89c:	6f 93       	push	r22
     89e:	7f 93       	push	r23
     8a0:	8f 93       	push	r24
     8a2:	9f 93       	push	r25
     8a4:	af 93       	push	r26
     8a6:	bf 93       	push	r27
     8a8:	ef 93       	push	r30
     8aa:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
     8ac:	8c b1       	in	r24, 0x0c	; 12

	// if there's a user function to handle this receive event
	if(UartRxFunc)
     8ae:	20 91 72 00 	lds	r18, 0x0072
     8b2:	30 91 73 00 	lds	r19, 0x0073
     8b6:	23 2b       	or	r18, r19
     8b8:	31 f0       	breq	.+12     	; 0x8c6 <__vector_11+0x3c>
	{
		// call it and pass the received data
		UartRxFunc(c);
     8ba:	e0 91 72 00 	lds	r30, 0x0072
     8be:	f0 91 73 00 	lds	r31, 0x0073
     8c2:	09 95       	icall
     8c4:	10 c0       	rjmp	.+32     	; 0x8e6 <__vector_11+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
     8c6:	68 2f       	mov	r22, r24
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	92 e0       	ldi	r25, 0x02	; 2
     8cc:	0e 94 a0 00 	call	0x140	; 0x140 <bufferAddToEnd>
     8d0:	81 11       	cpse	r24, r1
     8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <__vector_11+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
     8d4:	80 91 13 02 	lds	r24, 0x0213
     8d8:	90 91 14 02 	lds	r25, 0x0214
     8dc:	01 96       	adiw	r24, 0x01	; 1
     8de:	90 93 14 02 	sts	0x0214, r25
     8e2:	80 93 13 02 	sts	0x0213, r24
		}
	}
}
     8e6:	ff 91       	pop	r31
     8e8:	ef 91       	pop	r30
     8ea:	bf 91       	pop	r27
     8ec:	af 91       	pop	r26
     8ee:	9f 91       	pop	r25
     8f0:	8f 91       	pop	r24
     8f2:	7f 91       	pop	r23
     8f4:	6f 91       	pop	r22
     8f6:	5f 91       	pop	r21
     8f8:	4f 91       	pop	r20
     8fa:	3f 91       	pop	r19
     8fc:	2f 91       	pop	r18
     8fe:	0f 90       	pop	r0
     900:	0f be       	out	0x3f, r0	; 63
     902:	0f 90       	pop	r0
     904:	1f 90       	pop	r1
     906:	18 95       	reti

00000908 <AppOutputCompare0>:
* Returns    : none
*********************************************************************************************************
*/
void AppOutputCompare0(void)
{
	OCR0 = TCNT0 + CYCLEN_60HZ;
     908:	82 b7       	in	r24, 0x32	; 50
     90a:	80 51       	subi	r24, 0x10	; 16
     90c:	8c bf       	out	0x3c, r24	; 60
	appl.fSysPwrZC = 1;
     90e:	e5 e1       	ldi	r30, 0x15	; 21
     910:	f2 e0       	ldi	r31, 0x02	; 2
     912:	80 81       	ld	r24, Z
     914:	81 60       	ori	r24, 0x01	; 1
     916:	80 83       	st	Z, r24
     918:	08 95       	ret

0000091a <AppDisplay>:
* Returns    : true, power on control has finised. false, is processing
*********************************************************************************************************
*/
void AppDisplay(DISP_CODE DispCode, WORK_MODE mode)
{
	switch(DispCode)
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	88 30       	cpi	r24, 0x08	; 8
     91e:	91 05       	cpc	r25, r1
     920:	a8 f5       	brcc	.+106    	; 0x98c <AppDisplay+0x72>
     922:	fc 01       	movw	r30, r24
     924:	e6 5d       	subi	r30, 0xD6	; 214
     926:	ff 4f       	sbci	r31, 0xFF	; 255
     928:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__tablejump2__>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(START_CHAR, SSD_0HZ, SSD_RED);
     92c:	40 e0       	ldi	r20, 0x00	; 0
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	29 c0       	rjmp	.+82     	; 0x988 <AppDisplay+0x6e>
			break;
			
		case CURRENT_VALUE:
			if(mode == PWR_ON)
     936:	61 30       	cpi	r22, 0x01	; 1
     938:	29 f0       	breq	.+10     	; 0x944 <AppDisplay+0x2a>
			{
				SSDDisplayDec(CURRENT_VALUE, SSD_0HZ, SSD_RED);
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	22 c0       	rjmp	.+68     	; 0x988 <AppDisplay+0x6e>
			}
			else if(mode == NORMAL)
			{
				SSDDisplayDec(MeasureGetResult(), SSD_0HZ, SSD_RED);
     944:	0e 94 61 07 	call	0xec2	; 0xec2 <MeasureGetResult>
     948:	40 e0       	ldi	r20, 0x00	; 0
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	1d c0       	rjmp	.+58     	; 0x988 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(FULL_WAREHOUSE, SSD_0HZ, SSD_RED);
     94e:	40 e0       	ldi	r20, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	82 e0       	ldi	r24, 0x02	; 2
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	18 c0       	rjmp	.+48     	; 0x988 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(EMPTY_WAREHOUSE, SSD_0HZ, SSD_RED);
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	83 e0       	ldi	r24, 0x03	; 3
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	13 c0       	rjmp	.+38     	; 0x988 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(ALARM_H_PERCENT, SSD_0HZ, SSD_RED);
     962:	40 e0       	ldi	r20, 0x00	; 0
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	84 e0       	ldi	r24, 0x04	; 4
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e c0       	rjmp	.+28     	; 0x988 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(ALARM_L_PERCENT, SSD_0HZ, SSD_RED);
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	85 e0       	ldi	r24, 0x05	; 5
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	09 c0       	rjmp	.+18     	; 0x988 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(RESPONSE_TIME, SSD_0HZ, SSD_RED);
     976:	40 e0       	ldi	r20, 0x00	; 0
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	86 e0       	ldi	r24, 0x06	; 6
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	04 c0       	rjmp	.+8      	; 0x988 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(REMOTE_ADDR, SSD_0HZ, SSD_RED);
     980:	40 e0       	ldi	r20, 0x00	; 0
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	87 e0       	ldi	r24, 0x07	; 7
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <SSDDisplayDec>
     98c:	08 95       	ret

0000098e <McuInit>:
*/

void McuInit(void)
{
	/* Initial uart */
	uartInit();	
     98e:	0e 94 cc 03 	call	0x798	; 0x798 <uartInit>
	uartSetBaudRate(9600);
     992:	60 e8       	ldi	r22, 0x80	; 128
     994:	75 e2       	ldi	r23, 0x25	; 37
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <uartSetBaudRate>
	rprintfInit(uartSendByte);
     99e:	86 e0       	ldi	r24, 0x06	; 6
     9a0:	94 e0       	ldi	r25, 0x04	; 4
     9a2:	0e 94 cc 00 	call	0x198	; 0x198 <rprintfInit>

	/* Initial ADC */
	ADCInit();
     9a6:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <ADCInit>
	
	/* Initial T0, T1 and T2 */
	timerInit();
     9aa:	0e 94 de 01 	call	0x3bc	; 0x3bc <timerInit>
	sbi(DDRD, PD4);		/* set PD4(OC1B) as output */
     9ae:	8c 9a       	sbi	0x11, 4	; 17
	sbi(DDRD, PD5);		/* set PD5(OC1A) as output */
     9b0:	8d 9a       	sbi	0x11, 5	; 17
	timer1PWMInit(8);	/* 8 bit PWM resolution, phase correct PWM mode, FREQpwm=F_CPU/(2*N*TOP) */
     9b2:	88 e0       	ldi	r24, 0x08	; 8
     9b4:	0e 94 ef 01 	call	0x3de	; 0x3de <timer1PWMInit>
	timer1PWMAOn();		/* turn on the channel A PWM output of timer1 */
     9b8:	0e 94 07 02 	call	0x40e	; 0x40e <timer1PWMAOn>
	timer1PWMBOn();		/* turn on the channel B PWM output of timer1 */
     9bc:	0c 94 0e 02 	jmp	0x41c	; 0x41c <timer1PWMBOn>

000009c0 <ApplInit>:
*********************************************************************************************************
*/

void ApplInit(void)
{
	ButtonInit();
     9c0:	0e 94 77 08 	call	0x10ee	; 0x10ee <ButtonInit>
	LEDInit();
     9c4:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LEDInit>
	SSDInit();
     9c8:	0e 94 4c 08 	call	0x1098	; 0x1098 <SSDInit>
*/

void ApplDataInit(void)
{
	/* Following for initial power on display steps */
	appl.workMode = PWR_ON;
     9cc:	e5 e1       	ldi	r30, 0x15	; 21
     9ce:	f2 e0       	ldi	r31, 0x02	; 2
     9d0:	15 86       	std	Z+13, r1	; 0x0d
	appl.CurEvent = NULL_EVENT;
     9d2:	16 86       	std	Z+14, r1	; 0x0e
	appl.LastEvent = NULL_EVENT;
     9d4:	17 86       	std	Z+15, r1	; 0x0f
	appl.second = 0;
     9d6:	10 8a       	std	Z+16, r1	; 0x10
	appl.ModeTimer = TIME_SWITCH_TOTAL;
     9d8:	80 ee       	ldi	r24, 0xE0	; 224
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	94 8b       	std	Z+20, r25	; 0x14
     9de:	83 8b       	std	Z+19, r24	; 0x13
	appl.DispCode= START_CHAR;
     9e0:	15 8a       	std	Z+21, r1	; 0x15
	appl.PwrOnSteps = DISP_START;
     9e2:	16 8a       	std	Z+22, r1	; 0x16
{
	ButtonInit();
	LEDInit();
	SSDInit();
	ApplDataInit();
	MeasureInit();
     9e4:	0e 94 fd 06 	call	0xdfa	; 0xdfa <MeasureInit>
	
	timerAttach(TIMER0OUTCOMPARE_INT, AppOutputCompare0);
     9e8:	64 e8       	ldi	r22, 0x84	; 132
     9ea:	74 e0       	ldi	r23, 0x04	; 4
     9ec:	87 e0       	ldi	r24, 0x07	; 7
     9ee:	0e 94 c8 01 	call	0x390	; 0x390 <timerAttach>
	
	rprintf("Main board here!\n" );	
     9f2:	86 e8       	ldi	r24, 0x86	; 134
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	9f 93       	push	r25
     9f8:	8f 93       	push	r24
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	8f 93       	push	r24
     9fe:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <rprintf1RamRom>
     a02:	0f 90       	pop	r0
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	08 95       	ret

00000a0a <AppCycleUpdate>:
*
* Returns    : none
*********************************************************************************************************
*/
void AppCycleUpdate(void)
{	
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
	char tempChar;
	static uint16_t cnt;
	cnt++;
     a10:	80 91 f4 00 	lds	r24, 0x00F4
     a14:	90 91 f5 00 	lds	r25, 0x00F5
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	90 93 f5 00 	sts	0x00F5, r25
     a1e:	80 93 f4 00 	sts	0x00F4, r24
* Returns    : none
*********************************************************************************************************
*/
void AppUpdateTimers(void)
{
	if(++appl.second > TIMER_1_SEC_60HZ) 
     a22:	80 91 25 02 	lds	r24, 0x0225
     a26:	8f 5f       	subi	r24, 0xFF	; 255
     a28:	8d 33       	cpi	r24, 0x3D	; 61
     a2a:	18 f4       	brcc	.+6      	; 0xa32 <AppCycleUpdate+0x28>
     a2c:	80 93 25 02 	sts	0x0225, r24
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <AppCycleUpdate+0x2c>
	{
		appl.second = 0;
     a32:	10 92 25 02 	sts	0x0225, r1
#endif
#endif
		
	}
	
	if(appl.ModeTimer != TIMER_TIMEOUT && appl.ModeTimer != TIMER_INT_DISABLED) appl.ModeTimer--;
     a36:	80 91 28 02 	lds	r24, 0x0228
     a3a:	90 91 29 02 	lds	r25, 0x0229
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	8e 3f       	cpi	r24, 0xFE	; 254
     a42:	2f ef       	ldi	r18, 0xFF	; 255
     a44:	92 07       	cpc	r25, r18
     a46:	20 f4       	brcc	.+8      	; 0xa50 <AppCycleUpdate+0x46>
     a48:	90 93 29 02 	sts	0x0229, r25
     a4c:	80 93 28 02 	sts	0x0228, r24
	cnt++;
	
	AppUpdateTimers();

	/* work mode convert according to ModeTimer and push button events */
	switch(appl.workMode)
     a50:	c0 91 22 02 	lds	r28, 0x0222
     a54:	c1 30       	cpi	r28, 0x01	; 1
     a56:	09 f4       	brne	.+2      	; 0xa5a <AppCycleUpdate+0x50>
     a58:	50 c0       	rjmp	.+160    	; 0xafa <AppCycleUpdate+0xf0>
     a5a:	18 f0       	brcs	.+6      	; 0xa62 <AppCycleUpdate+0x58>
     a5c:	c2 30       	cpi	r28, 0x02	; 2
     a5e:	89 f1       	breq	.+98     	; 0xac2 <AppCycleUpdate+0xb8>
     a60:	12 c1       	rjmp	.+548    	; 0xc86 <AppCycleUpdate+0x27c>
	{
		case PWR_ON:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
     a62:	80 91 28 02 	lds	r24, 0x0228
     a66:	90 91 29 02 	lds	r25, 0x0229
     a6a:	9c 01       	movw	r18, r24
     a6c:	21 50       	subi	r18, 0x01	; 1
     a6e:	31 09       	sbc	r19, r1
     a70:	2e 3f       	cpi	r18, 0xFE	; 254
     a72:	3f 4f       	sbci	r19, 0xFF	; 255
     a74:	88 f5       	brcc	.+98     	; 0xad8 <AppCycleUpdate+0xce>
			{
				if(appl.ModeTimer % (TIME_CONTENT_SWITCH - 1) == 0)
     a76:	6b e3       	ldi	r22, 0x3B	; 59
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	0e 94 cb 08 	call	0x1196	; 0x1196 <__udivmodhi4>
     a7e:	89 2b       	or	r24, r25
     a80:	41 f4       	brne	.+16     	; 0xa92 <AppCycleUpdate+0x88>
				{
					AppDisplay(++appl.DispCode,PWR_ON);
     a82:	80 91 2a 02 	lds	r24, 0x022A
     a86:	8f 5f       	subi	r24, 0xFF	; 255
     a88:	80 93 2a 02 	sts	0x022A, r24
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	0e 94 8d 04 	call	0x91a	; 0x91a <AppDisplay>
				}
				
				if(ButtonJMP1HeldEvent() && (ButtonGetHoldTime() == TIME_B_HELD_RST))	/* Press/Held JMP1 after power on will set to factory default */
     a92:	0e 94 6e 06 	call	0xcdc	; 0xcdc <ButtonJMP1HeldEvent>
     a96:	88 23       	and	r24, r24
     a98:	09 f4       	brne	.+2      	; 0xa9c <AppCycleUpdate+0x92>
     a9a:	f5 c0       	rjmp	.+490    	; 0xc86 <AppCycleUpdate+0x27c>
     a9c:	0e 94 c0 08 	call	0x1180	; 0x1180 <ButtonGetHoldTime>
     aa0:	cc 97       	sbiw	r24, 0x3c	; 60
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <AppCycleUpdate+0x9c>
     aa4:	f0 c0       	rjmp	.+480    	; 0xc86 <AppCycleUpdate+0x27c>
				{
					/* Following for initial power on display steps */
					appl.ModeTimer = TIME_SWITCH_TOTAL;
     aa6:	80 ee       	ldi	r24, 0xE0	; 224
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	90 93 29 02 	sts	0x0229, r25
     aae:	80 93 28 02 	sts	0x0228, r24
					appl.workMode = PWR_ON;
     ab2:	10 92 22 02 	sts	0x0222, r1
					appl.LastEvent = JP1_HELD;
     ab6:	84 e0       	ldi	r24, 0x04	; 4
     ab8:	80 93 24 02 	sts	0x0224, r24
					appl.DispCode= START_CHAR;
     abc:	10 92 2a 02 	sts	0x022A, r1
     ac0:	e2 c0       	rjmp	.+452    	; 0xc86 <AppCycleUpdate+0x27c>
				}
			}
			break;
			
		case SETTING:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
     ac2:	80 91 28 02 	lds	r24, 0x0228
     ac6:	90 91 29 02 	lds	r25, 0x0229
     aca:	9c 01       	movw	r18, r24
     acc:	21 50       	subi	r18, 0x01	; 1
     ace:	31 09       	sbc	r19, r1
     ad0:	2e 3f       	cpi	r18, 0xFE	; 254
     ad2:	3f 4f       	sbci	r19, 0xFF	; 255
     ad4:	08 f4       	brcc	.+2      	; 0xad8 <AppCycleUpdate+0xce>
     ad6:	57 c0       	rjmp	.+174    	; 0xb86 <AppCycleUpdate+0x17c>
					appl.workMode = PWR_ON;
					appl.LastEvent = JP1_HELD;
					appl.DispCode= START_CHAR;
				}
			}
			else if(appl.ModeTimer == TIMER_TIMEOUT)
     ad8:	89 2b       	or	r24, r25
     ada:	09 f0       	breq	.+2      	; 0xade <AppCycleUpdate+0xd4>
     adc:	d4 c0       	rjmp	.+424    	; 0xc86 <AppCycleUpdate+0x27c>
			{
				appl.ModeTimer = TIMER_INT_DISABLED;	/* Disable count */
     ade:	8f ef       	ldi	r24, 0xFF	; 255
     ae0:	9f ef       	ldi	r25, 0xFF	; 255
     ae2:	90 93 29 02 	sts	0x0229, r25
     ae6:	80 93 28 02 	sts	0x0228, r24
				appl.workMode = NORMAL;					/* convert to NORMAL */
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	80 93 22 02 	sts	0x0222, r24
				appl.LastEvent = NULL_EVENT;			/* update  LastEvent */
     af0:	10 92 24 02 	sts	0x0224, r1
				appl.DispCode = CURRENT_VALUE;			/* Initial to display material value in setting mode */
     af4:	80 93 2a 02 	sts	0x022A, r24
     af8:	c6 c0       	rjmp	.+396    	; 0xc86 <AppCycleUpdate+0x27c>
			}
			break;
			
		case NORMAL:			
			if(ButtonGetReleased())
     afa:	0e 94 c5 08 	call	0x118a	; 0x118a <ButtonGetReleased>
     afe:	88 23       	and	r24, r24
     b00:	99 f0       	breq	.+38     	; 0xb28 <AppCycleUpdate+0x11e>
			{
				if(ButtonJMP2ReleasedEvent())
     b02:	0e 94 72 06 	call	0xce4	; 0xce4 <ButtonJMP2ReleasedEvent>
     b06:	88 23       	and	r24, r24
     b08:	61 f0       	breq	.+24     	; 0xb22 <AppCycleUpdate+0x118>
				{
					appl.ModeTimer = TIME_D_CODE_HELD;	/* Disable count */
     b0a:	84 eb       	ldi	r24, 0xB4	; 180
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	90 93 29 02 	sts	0x0229, r25
     b12:	80 93 28 02 	sts	0x0228, r24
					appl.workMode = SETTING; 			/* convert to SETTING */
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	80 93 22 02 	sts	0x0222, r24
					appl.LastEvent = JP2_PRESS;			/* update  LastEvent */
     b1c:	c0 93 24 02 	sts	0x0224, r28
     b20:	b2 c0       	rjmp	.+356    	; 0xc86 <AppCycleUpdate+0x27c>
				}
				else if(ButtonJMP1ReleasedEvent())
     b22:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <ButtonJMP1ReleasedEvent>
     b26:	af c0       	rjmp	.+350    	; 0xc86 <AppCycleUpdate+0x27c>
				{
				}
			}
			else if(ButtonGetHeld())
     b28:	0e 94 c8 08 	call	0x1190	; 0x1190 <ButtonGetHeld>
     b2c:	88 23       	and	r24, r24
     b2e:	39 f0       	breq	.+14     	; 0xb3e <AppCycleUpdate+0x134>
			{
				if(ButtonJMP2HeldEvent())//(ButtonJMP2HeldEvent() && (ButtonGetHoldTime()%(TIMER_1_SEC_60HZ/2) == 0))
     b30:	0e 94 77 06 	call	0xcee	; 0xcee <ButtonJMP2HeldEvent>
     b34:	81 11       	cpse	r24, r1
     b36:	80 c0       	rjmp	.+256    	; 0xc38 <AppCycleUpdate+0x22e>
				{
					appl.ModeTimer = TIME_D_CODE_HELD;	/* Disable count */
					appl.workMode = SETTING; 			/* convert to SETTING */
					appl.LastEvent = JP2_HELD;			/* update  LastEvent */
				}
				else if(ButtonJMP1HeldEvent())
     b38:	0e 94 6e 06 	call	0xcdc	; 0xcdc <ButtonJMP1HeldEvent>
     b3c:	a4 c0       	rjmp	.+328    	; 0xc86 <AppCycleUpdate+0x27c>
				}
			}
			else
			{
				/* Display current material, and display color change according to value compare with user setting */
				AppDisplay(appl.DispCode,NORMAL);
     b3e:	61 e0       	ldi	r22, 0x01	; 1
     b40:	80 91 2a 02 	lds	r24, 0x022A
     b44:	0e 94 8d 04 	call	0x91a	; 0x91a <AppDisplay>
				
				if(uartRxBuffer.size - bufferIsNotFull(&uartRxBuffer) != 0)
     b48:	00 91 04 02 	lds	r16, 0x0204
     b4c:	10 91 05 02 	lds	r17, 0x0205
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	92 e0       	ldi	r25, 0x02	; 2
     b54:	0e 94 c1 00 	call	0x182	; 0x182 <bufferIsNotFull>
     b58:	08 17       	cp	r16, r24
     b5a:	19 07       	cpc	r17, r25
     b5c:	09 f4       	brne	.+2      	; 0xb60 <AppCycleUpdate+0x156>
     b5e:	93 c0       	rjmp	.+294    	; 0xc86 <AppCycleUpdate+0x27c>
				{
					tempChar = bufferGetFromFront(&uartRxBuffer);
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	92 e0       	ldi	r25, 0x02	; 2
     b64:	0e 94 7c 00 	call	0xf8	; 0xf8 <bufferGetFromFront>
					//rprintf("char=%c\n",tempChar);
					rprintf("Type=%c\n",tempChar);
     b68:	1f 92       	push	r1
     b6a:	8f 93       	push	r24
     b6c:	8d e7       	ldi	r24, 0x7D	; 125
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	9f 93       	push	r25
     b72:	8f 93       	push	r24
     b74:	cf 93       	push	r28
     b76:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <rprintf1RamRom>
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	80 c0       	rjmp	.+256    	; 0xc86 <AppCycleUpdate+0x27c>
			break;
			
		case SETTING:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
			{
				if(ButtonGetReleased())
     b86:	0e 94 c5 08 	call	0x118a	; 0x118a <ButtonGetReleased>
     b8a:	88 23       	and	r24, r24
     b8c:	b9 f1       	breq	.+110    	; 0xbfc <AppCycleUpdate+0x1f2>
				{
					if(ButtonJMP2ReleasedEvent())
     b8e:	0e 94 72 06 	call	0xce4	; 0xce4 <ButtonJMP2ReleasedEvent>
     b92:	88 23       	and	r24, r24
     b94:	b9 f0       	breq	.+46     	; 0xbc4 <AppCycleUpdate+0x1ba>
					{
						if(--appl.DispCode < CURRENT_VALUE)
     b96:	80 91 2a 02 	lds	r24, 0x022A
     b9a:	81 50       	subi	r24, 0x01	; 1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <AppCycleUpdate+0x196>
						{
							appl.DispCode = REMOTE_ADDR;
     b9e:	87 e0       	ldi	r24, 0x07	; 7
     ba0:	80 93 2a 02 	sts	0x022A, r24
						}
						AppDisplay(appl.DispCode,SETTING);
     ba4:	62 e0       	ldi	r22, 0x02	; 2
     ba6:	80 91 2a 02 	lds	r24, 0x022A
     baa:	0e 94 8d 04 	call	0x91a	; 0x91a <AppDisplay>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     bae:	84 eb       	ldi	r24, 0xB4	; 180
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	90 93 29 02 	sts	0x0229, r25
     bb6:	80 93 28 02 	sts	0x0228, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	80 93 22 02 	sts	0x0222, r24
						appl.LastEvent = JP2_PRESS; 		/* update  LastEvent */
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	5f c0       	rjmp	.+190    	; 0xc82 <AppCycleUpdate+0x278>
					}
					else if(ButtonJMP1ReleasedEvent())
     bc4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <ButtonJMP1ReleasedEvent>
     bc8:	88 23       	and	r24, r24
     bca:	09 f4       	brne	.+2      	; 0xbce <AppCycleUpdate+0x1c4>
     bcc:	5c c0       	rjmp	.+184    	; 0xc86 <AppCycleUpdate+0x27c>
					{
						SSDDisplayDec(--appl.FullWarehouse, SSD_0HZ, SSD_GREEN);
     bce:	80 91 18 02 	lds	r24, 0x0218
     bd2:	90 91 19 02 	lds	r25, 0x0219
     bd6:	01 97       	sbiw	r24, 0x01	; 1
     bd8:	90 93 19 02 	sts	0x0219, r25
     bdc:	80 93 18 02 	sts	0x0218, r24
     be0:	41 e0       	ldi	r20, 0x01	; 1
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	0e 94 ac 07 	call	0xf58	; 0xf58 <SSDDisplayDec>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     be8:	84 eb       	ldi	r24, 0xB4	; 180
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	90 93 29 02 	sts	0x0229, r25
     bf0:	80 93 28 02 	sts	0x0228, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     bf4:	c0 93 22 02 	sts	0x0222, r28
						appl.LastEvent = JP1_PRESS;			/* update  LastEvent */
     bf8:	83 e0       	ldi	r24, 0x03	; 3
     bfa:	43 c0       	rjmp	.+134    	; 0xc82 <AppCycleUpdate+0x278>
					}
				}
				else if(ButtonGetHeld())
     bfc:	0e 94 c8 08 	call	0x1190	; 0x1190 <ButtonGetHeld>
     c00:	88 23       	and	r24, r24
     c02:	09 f4       	brne	.+2      	; 0xc06 <AppCycleUpdate+0x1fc>
     c04:	40 c0       	rjmp	.+128    	; 0xc86 <AppCycleUpdate+0x27c>
				{
					if(ButtonJMP2HeldEvent() && (ButtonGetHoldTime()%(TIMER_1_SEC_60HZ/6) == 0))	/* fast increase */
     c06:	0e 94 77 06 	call	0xcee	; 0xcee <ButtonJMP2HeldEvent>
     c0a:	88 23       	and	r24, r24
     c0c:	f9 f0       	breq	.+62     	; 0xc4c <AppCycleUpdate+0x242>
     c0e:	0e 94 c0 08 	call	0x1180	; 0x1180 <ButtonGetHoldTime>
     c12:	6a e0       	ldi	r22, 0x0A	; 10
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	0e 94 cb 08 	call	0x1196	; 0x1196 <__udivmodhi4>
     c1a:	89 2b       	or	r24, r25
     c1c:	b9 f4       	brne	.+46     	; 0xc4c <AppCycleUpdate+0x242>
					{
						if(++appl.DispCode > REMOTE_ADDR)
     c1e:	80 91 2a 02 	lds	r24, 0x022A
     c22:	8f 5f       	subi	r24, 0xFF	; 255
     c24:	88 30       	cpi	r24, 0x08	; 8
     c26:	08 f0       	brcs	.+2      	; 0xc2a <AppCycleUpdate+0x220>
						{
							appl.DispCode = CURRENT_VALUE;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	80 93 2a 02 	sts	0x022A, r24
						}
						AppDisplay(appl.DispCode,SETTING);
     c2e:	62 e0       	ldi	r22, 0x02	; 2
     c30:	80 91 2a 02 	lds	r24, 0x022A
     c34:	0e 94 8d 04 	call	0x91a	; 0x91a <AppDisplay>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     c38:	84 eb       	ldi	r24, 0xB4	; 180
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	90 93 29 02 	sts	0x0229, r25
     c40:	80 93 28 02 	sts	0x0228, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     c44:	82 e0       	ldi	r24, 0x02	; 2
     c46:	80 93 22 02 	sts	0x0222, r24
     c4a:	1b c0       	rjmp	.+54     	; 0xc82 <AppCycleUpdate+0x278>
						appl.LastEvent = JP2_HELD;			/* update  LastEvent */
					}
					else if(ButtonJMP1HeldEvent())
     c4c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <ButtonJMP1HeldEvent>
     c50:	88 23       	and	r24, r24
     c52:	c9 f0       	breq	.+50     	; 0xc86 <AppCycleUpdate+0x27c>
					{
						SSDDisplayDec(++appl.FullWarehouse, SSD_0HZ, SSD_AMBER);
     c54:	80 91 18 02 	lds	r24, 0x0218
     c58:	90 91 19 02 	lds	r25, 0x0219
     c5c:	01 96       	adiw	r24, 0x01	; 1
     c5e:	90 93 19 02 	sts	0x0219, r25
     c62:	80 93 18 02 	sts	0x0218, r24
     c66:	42 e0       	ldi	r20, 0x02	; 2
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	0e 94 ac 07 	call	0xf58	; 0xf58 <SSDDisplayDec>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     c6e:	84 eb       	ldi	r24, 0xB4	; 180
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	90 93 29 02 	sts	0x0229, r25
     c76:	80 93 28 02 	sts	0x0228, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     c7a:	82 e0       	ldi	r24, 0x02	; 2
     c7c:	80 93 22 02 	sts	0x0222, r24
						appl.LastEvent = JP1_HELD;			/* update  LastEvent */
     c80:	84 e0       	ldi	r24, 0x04	; 4
     c82:	80 93 24 02 	sts	0x0224, r24

#if 1		
#if (FOR_DEBUG==1)
	//rprintf("wM=%d\n",appl.workMode);
	//rprintf("mT=%d,0x%x\n",appl.ModeTimer,appl.ModeTimer);
	rprintf("dC=%d\n\n",appl.DispCode);
     c86:	80 91 2a 02 	lds	r24, 0x022A
     c8a:	1f 92       	push	r1
     c8c:	8f 93       	push	r24
     c8e:	85 e7       	ldi	r24, 0x75	; 117
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	9f 93       	push	r25
     c94:	8f 93       	push	r24
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	8f 93       	push	r24
     c9a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <rprintf1RamRom>
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
	//rprintf("lE=%d\n\n",appl.LastEvent);
#endif
#endif
}
     ca8:	cf 91       	pop	r28
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	08 95       	ret

00000cb0 <AppWaitZeroCrossing>:
* Returns    : true/false means failed or pass
*********************************************************************************************************
*/
void AppWaitZeroCrossing(void)
{
	while(appl.fSysPwrZC == 0);
     cb0:	80 91 15 02 	lds	r24, 0x0215
     cb4:	80 ff       	sbrs	r24, 0
     cb6:	fc cf       	rjmp	.-8      	; 0xcb0 <AppWaitZeroCrossing>
	appl.fSysPwrZC = 0;
     cb8:	80 91 15 02 	lds	r24, 0x0215
     cbc:	8e 7f       	andi	r24, 0xFE	; 254
     cbe:	80 93 15 02 	sts	0x0215, r24
     cc2:	08 95       	ret

00000cc4 <ButtonInitEx>:
void ButtonInitEx(void)
{	
	/* 
	Set PC1-PC0 as input, the tow IO with external pull up 10K resistor.
	*/
	DDRC &= ((1<<DDC1) | (1<<DDC0));
     cc4:	84 b3       	in	r24, 0x14	; 20
     cc6:	83 70       	andi	r24, 0x03	; 3
     cc8:	84 bb       	out	0x14, r24	; 20
     cca:	08 95       	ret

00000ccc <ButtonGetIO_StateEx>:
*/
ButtonDataType ButtonGetIO_StateEx(void)
{
	ButtonDataType io_state;
	
	io_state = (~PINC) & ((1<<PINC1) | (1<<PINC0));	/* Get PC1-PC0 IO state */
     ccc:	83 b3       	in	r24, 0x13	; 19
     cce:	80 95       	com	r24
	
	return  io_state;
}
     cd0:	83 70       	andi	r24, 0x03	; 3
     cd2:	08 95       	ret

00000cd4 <ButtonJMP1ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP1) 
     cd4:	80 91 60 02 	lds	r24, 0x0260
	{
		return true;
	}
    
    return false;
}
     cd8:	81 70       	andi	r24, 0x01	; 1
     cda:	08 95       	ret

00000cdc <ButtonJMP1HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1HeldEvent(void)
{
	if (button.buttonsHeld.JMP1) 
     cdc:	80 91 61 02 	lds	r24, 0x0261
	{
		return true;
	}
    
    return false;
}
     ce0:	81 70       	andi	r24, 0x01	; 1
     ce2:	08 95       	ret

00000ce4 <ButtonJMP2ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP2) 
     ce4:	80 91 60 02 	lds	r24, 0x0260
	{
		return true;
	}
    
    return false;
}
     ce8:	86 95       	lsr	r24
     cea:	81 70       	andi	r24, 0x01	; 1
     cec:	08 95       	ret

00000cee <ButtonJMP2HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2HeldEvent(void)
{
	if (button.buttonsHeld.JMP2) 
     cee:	80 91 61 02 	lds	r24, 0x0261
	{
		return true;
	}
    
    return false;
}
     cf2:	86 95       	lsr	r24
     cf4:	81 70       	andi	r24, 0x01	; 1
     cf6:	08 95       	ret

00000cf8 <LEDInit>:
	uint8_t i;
	
	/* 
	Set PB2-PB1 as output to drive to LEDs, default turn off all LEDs
	*/
	DDRB &= ~((1<<DDB2) | (1<<DDB1));
     cf8:	87 b3       	in	r24, 0x17	; 23
     cfa:	89 7f       	andi	r24, 0xF9	; 249
     cfc:	87 bb       	out	0x17, r24	; 23
	DDRB |= ((1<<DDB2) | (1<<DDB1));
     cfe:	87 b3       	in	r24, 0x17	; 23
     d00:	86 60       	ori	r24, 0x06	; 6
     d02:	87 bb       	out	0x17, r24	; 23
	PORTB |= ((1<<DDB2) | (1<<DDB1));
     d04:	88 b3       	in	r24, 0x18	; 24
     d06:	86 60       	ori	r24, 0x06	; 6
     d08:	88 bb       	out	0x18, r24	; 24
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
     d0a:	e2 e4       	ldi	r30, 0x42	; 66
     d0c:	f2 e0       	ldi	r31, 0x02	; 2
     d0e:	80 81       	ld	r24, Z
     d10:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
     d12:	84 60       	ori	r24, 0x04	; 4
     d14:	88 60       	ori	r24, 0x08	; 8
     d16:	80 83       	st	Z, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
     d18:	9c e3       	ldi	r25, 0x3C	; 60
     d1a:	91 83       	std	Z+1, r25	; 0x01
	DDRB |= ((1<<DDB2) | (1<<DDB1));
	PORTB |= ((1<<DDB2) | (1<<DDB1));
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
     d1c:	a4 e4       	ldi	r26, 0x44	; 68
     d1e:	b2 e0       	ldi	r27, 0x02	; 2
     d20:	8c 91       	ld	r24, X
     d22:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
     d24:	84 60       	ori	r24, 0x04	; 4
     d26:	88 60       	ori	r24, 0x08	; 8
     d28:	8c 93       	st	X, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
     d2a:	93 83       	std	Z+3, r25	; 0x03
     d2c:	08 95       	ret

00000d2e <LEDCycleUpdate>:
*
*********************************************************************************************************
*/

void LEDCycleUpdate(void)
{
     d2e:	a3 e4       	ldi	r26, 0x43	; 67
     d30:	b2 e0       	ldi	r27, 0x02	; 2
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
     d36:	ca 01       	movw	r24, r20
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	fc 01       	movw	r30, r24
     d3e:	ee 5b       	subi	r30, 0xBE	; 190
     d40:	fd 4f       	sbci	r31, 0xFD	; 253
     d42:	30 81       	ld	r19, Z
     d44:	37 70       	andi	r19, 0x07	; 7
		ft = LEDs[i].flashTimer;
     d46:	2c 91       	ld	r18, X
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
     d48:	34 30       	cpi	r19, 0x04	; 4
     d4a:	19 f0       	breq	.+6      	; 0xd52 <LEDCycleUpdate+0x24>
	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
		ft = LEDs[i].flashTimer;
		
		ft += rate;
     d4c:	23 0f       	add	r18, r19
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
     d4e:	2d 33       	cpi	r18, 0x3D	; 61
     d50:	38 f0       	brcs	.+14     	; 0xd60 <LEDCycleUpdate+0x32>
		{
			ft = 0;
			LEDs[i].led.state = S_OFF;
     d52:	fc 01       	movw	r30, r24
     d54:	ee 5b       	subi	r30, 0xBE	; 190
     d56:	fd 4f       	sbci	r31, 0xFD	; 253
     d58:	20 81       	ld	r18, Z
     d5a:	28 60       	ori	r18, 0x08	; 8
     d5c:	20 83       	st	Z, r18
		ft = LEDs[i].flashTimer;
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
		{
			ft = 0;
     d5e:	20 e0       	ldi	r18, 0x00	; 0
			LEDs[i].led.state = S_OFF;
		}
		LEDs[i].flashTimer = ft;
     d60:	2c 93       	st	X, r18
		
		if((rate == LED_0HZ) || (ft > (LED_ONE_SEC/2)))
     d62:	33 23       	and	r19, r19
     d64:	11 f0       	breq	.+4      	; 0xd6a <LEDCycleUpdate+0x3c>
     d66:	2f 31       	cpi	r18, 0x1F	; 31
     d68:	30 f0       	brcs	.+12     	; 0xd76 <LEDCycleUpdate+0x48>
		{
			LEDs[i].led.state = S_ON;
     d6a:	fc 01       	movw	r30, r24
     d6c:	ee 5b       	subi	r30, 0xBE	; 190
     d6e:	fd 4f       	sbci	r31, 0xFD	; 253
     d70:	80 81       	ld	r24, Z
     d72:	87 7f       	andi	r24, 0xF7	; 247
     d74:	80 83       	st	Z, r24
     d76:	12 96       	adiw	r26, 0x02	; 2
{
	LED_RATE rate;
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
     d78:	41 30       	cpi	r20, 0x01	; 1
     d7a:	51 05       	cpc	r21, r1
     d7c:	19 f0       	breq	.+6      	; 0xd84 <LEDCycleUpdate+0x56>
     d7e:	41 e0       	ldi	r20, 0x01	; 1
     d80:	50 e0       	ldi	r21, 0x00	; 0
     d82:	d9 cf       	rjmp	.-78     	; 0xd36 <LEDCycleUpdate+0x8>
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */

	if(LEDs[0].led.state == S_OFF)
     d84:	80 91 42 02 	lds	r24, 0x0242
     d88:	83 ff       	sbrs	r24, 3
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <LEDCycleUpdate+0x62>
	{
		state |= (1<<DDB1);
     d8c:	82 e0       	ldi	r24, 0x02	; 2
     d8e:	01 c0       	rjmp	.+2      	; 0xd92 <LEDCycleUpdate+0x64>
*
*********************************************************************************************************
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */
     d90:	80 e0       	ldi	r24, 0x00	; 0
	if(LEDs[0].led.state == S_OFF)
	{
		state |= (1<<DDB1);
	}
	
	if(LEDs[1].led.state == S_OFF)
     d92:	90 91 44 02 	lds	r25, 0x0244
     d96:	93 fd       	sbrc	r25, 3
	{
		state |= (1<<DDB2);
     d98:	84 60       	ori	r24, 0x04	; 4
	}

	PORTB &= ~((1<<DDB2) | (1<<DDB1));
     d9a:	98 b3       	in	r25, 0x18	; 24
     d9c:	99 7f       	andi	r25, 0xF9	; 249
     d9e:	98 bb       	out	0x18, r25	; 24
	PORTB |= state;
     da0:	98 b3       	in	r25, 0x18	; 24
     da2:	89 2b       	or	r24, r25
     da4:	88 bb       	out	0x18, r24	; 24
     da6:	08 95       	ret

00000da8 <main>:
int main(void)
{	
	/*
	Calll all initial function
	*/
	McuInit();
     da8:	0e 94 c7 04 	call	0x98e	; 0x98e <McuInit>
	ApplInit();
     dac:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <ApplInit>

	while(1)
	{
		AppWaitZeroCrossing();
     db0:	0e 94 58 06 	call	0xcb0	; 0xcb0 <AppWaitZeroCrossing>
		ButtonCycleUpdate();
     db4:	0e 94 79 08 	call	0x10f2	; 0x10f2 <ButtonCycleUpdate>
		AppCycleUpdate();
     db8:	0e 94 05 05 	call	0xa0a	; 0xa0a <AppCycleUpdate>
		LEDCycleUpdate();
     dbc:	0e 94 97 06 	call	0xd2e	; 0xd2e <LEDCycleUpdate>
		SSDCycleUpdate();
     dc0:	0e 94 65 07 	call	0xeca	; 0xeca <SSDCycleUpdate>
		MeasureCycleUpdate();
     dc4:	0e 94 15 07 	call	0xe2a	; 0xe2a <MeasureCycleUpdate>
	}
     dc8:	f3 cf       	rjmp	.-26     	; 0xdb0 <main+0x8>

00000dca <MeasureOutputCompare2>:
* Notes      : none
*
*********************************************************************************************************
*/
void MeasureOutputCompare2(void)
{
     dca:	cf 93       	push	r28
	uint8_t SampleValue;
	
	OCR2 = TCNT2 + MEASURE_OCR2;
     dcc:	84 b5       	in	r24, 0x24	; 36
     dce:	87 5c       	subi	r24, 0xC7	; 199
     dd0:	83 bd       	out	0x23, r24	; 35

	//if((ioLOW == 1) && (ioHIGHT == 1))
	{
		SampleValue = ReadADC8Bit(MEASURE_ADC0);
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <ReadADC8Bit>
     dd8:	c8 2f       	mov	r28, r24
		if(bufferIsNotFull(&Adc0Buffer) == 0)			/* if buffer is full */
     dda:	80 e5       	ldi	r24, 0x50	; 80
     ddc:	92 e0       	ldi	r25, 0x02	; 2
     dde:	0e 94 c1 00 	call	0x182	; 0x182 <bufferIsNotFull>
     de2:	89 2b       	or	r24, r25
     de4:	21 f4       	brne	.+8      	; 0xdee <MeasureOutputCompare2+0x24>
		{
			bufferGetFromFront(&Adc0Buffer);
     de6:	80 e5       	ldi	r24, 0x50	; 80
     de8:	92 e0       	ldi	r25, 0x02	; 2
     dea:	0e 94 7c 00 	call	0xf8	; 0xf8 <bufferGetFromFront>
		}
		bufferAddToEnd(&Adc0Buffer, SampleValue);
     dee:	6c 2f       	mov	r22, r28
     df0:	80 e5       	ldi	r24, 0x50	; 80
     df2:	92 e0       	ldi	r25, 0x02	; 2
	}
}
     df4:	cf 91       	pop	r28
		SampleValue = ReadADC8Bit(MEASURE_ADC0);
		if(bufferIsNotFull(&Adc0Buffer) == 0)			/* if buffer is full */
		{
			bufferGetFromFront(&Adc0Buffer);
		}
		bufferAddToEnd(&Adc0Buffer, SampleValue);
     df6:	0c 94 a0 00 	jmp	0x140	; 0x140 <bufferAddToEnd>

00000dfa <MeasureInit>:
* Returns    : none
*********************************************************************************************************
*/
void MeasureInit(void)
{
	DDRD &= ~((1<<DDD3) | (1<<DDD2));	/* Set PD3(ioHIGHT) and PD2(ioLOW) as input */
     dfa:	81 b3       	in	r24, 0x11	; 17
     dfc:	83 7f       	andi	r24, 0xF3	; 243
     dfe:	81 bb       	out	0x11, r24	; 17
*
*********************************************************************************************************
*/
void MeasureKZ1PWM(uint16_t dutyCycle)
{
	timer1PWMBSet(dutyCycle);
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 18 02 	call	0x430	; 0x430 <timer1PWMBSet>
*
*********************************************************************************************************
*/
void MeasureKZ2PWM(uint16_t dutyCycle)
{
	timer1PWMASet(dutyCycle);
     e08:	8f ef       	ldi	r24, 0xFF	; 255
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 15 02 	call	0x42a	; 0x42a <timer1PWMASet>
	DDRD &= ~((1<<DDD3) | (1<<DDD2));	/* Set PD3(ioHIGHT) and PD2(ioLOW) as input */
	
	MeasureKZ1PWM(0);
	MeasureKZ2PWM(255);

	timerAttach(TIMER2OUTCOMPARE_INT, MeasureOutputCompare2);
     e10:	65 ee       	ldi	r22, 0xE5	; 229
     e12:	76 e0       	ldi	r23, 0x06	; 6
     e14:	86 e0       	ldi	r24, 0x06	; 6
     e16:	0e 94 c8 01 	call	0x390	; 0x390 <timerAttach>
	bufferInit(&Adc0Buffer, (uint8_t *)Adc0DataArray, ADC0_BUF_SIZE);
     e1a:	4f ef       	ldi	r20, 0xFF	; 255
     e1c:	50 e0       	ldi	r21, 0x00	; 0
     e1e:	66 ef       	ldi	r22, 0xF6	; 246
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	80 e5       	ldi	r24, 0x50	; 80
     e24:	92 e0       	ldi	r25, 0x02	; 2
     e26:	0c 94 6f 00 	jmp	0xde	; 0xde <bufferInit>

00000e2a <MeasureCycleUpdate>:
* Notes      : none
*
*********************************************************************************************************
*/
void MeasureCycleUpdate(void)
{
     e2a:	cf 93       	push	r28
	if(bufferIsNotFull(&Adc0Buffer) == 0)			/* if buffer is full */
     e2c:	80 e5       	ldi	r24, 0x50	; 80
     e2e:	92 e0       	ldi	r25, 0x02	; 2
     e30:	0e 94 c1 00 	call	0x182	; 0x182 <bufferIsNotFull>
     e34:	89 2b       	or	r24, r25
     e36:	19 f5       	brne	.+70     	; 0xe7e <MeasureCycleUpdate+0x54>
     e38:	4f ef       	ldi	r20, 0xFF	; 255
     e3a:	c0 e0       	ldi	r28, 0x00	; 0
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	e6 ef       	ldi	r30, 0xF6	; 246
     e42:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t min = 0xff;
	uint16_t i;

	for(i=0, sum=0; i< size; i++, ArryPtr++)
	{
		sum += *ArryPtr;
     e44:	90 81       	ld	r25, Z
     e46:	29 0f       	add	r18, r25
     e48:	31 1d       	adc	r19, r1
     e4a:	c9 17       	cp	r28, r25
     e4c:	08 f4       	brcc	.+2      	; 0xe50 <MeasureCycleUpdate+0x26>
     e4e:	c9 2f       	mov	r28, r25
     e50:	94 17       	cp	r25, r20
     e52:	08 f4       	brcc	.+2      	; 0xe56 <MeasureCycleUpdate+0x2c>
     e54:	49 2f       	mov	r20, r25
	uint8_t avg;
	uint8_t max = 0;
	uint8_t min = 0xff;
	uint16_t i;

	for(i=0, sum=0; i< size; i++, ArryPtr++)
     e56:	31 96       	adiw	r30, 0x01	; 1
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	e5 3f       	cpi	r30, 0xF5	; 245
     e5c:	f8 07       	cpc	r31, r24
     e5e:	91 f7       	brne	.-28     	; 0xe44 <MeasureCycleUpdate+0x1a>
			min = *ArryPtr;
		}
	}
	avg = sum/size;
	
	calcPtr->sum = sum;
     e60:	30 93 47 02 	sts	0x0247, r19
     e64:	20 93 46 02 	sts	0x0246, r18
		if(*ArryPtr < min)
		{
			min = *ArryPtr;
		}
	}
	avg = sum/size;
     e68:	c9 01       	movw	r24, r18
     e6a:	6f ef       	ldi	r22, 0xFF	; 255
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	0e 94 cb 08 	call	0x1196	; 0x1196 <__udivmodhi4>
     e72:	60 93 48 02 	sts	0x0248, r22
	
	calcPtr->sum = sum;
	calcPtr->avg = avg;
	calcPtr->max = max;
     e76:	c0 93 49 02 	sts	0x0249, r28
	calcPtr->min = min;
     e7a:	40 93 4a 02 	sts	0x024A, r20
	{
		MeasureBufferCalc(&mData.calcResult[MEASURE_ADC0], (uint8_t *)Adc0DataArray, ADC0_BUF_SIZE);
	}

#if 1
	rprintf("sa%d\n",ReadADC8Bit(MEASURE_ADC0));
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	0e 94 70 08 	call	0x10e0	; 0x10e0 <ReadADC8Bit>
     e84:	1f 92       	push	r1
     e86:	8f 93       	push	r24
     e88:	8d e9       	ldi	r24, 0x9D	; 157
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	9f 93       	push	r25
     e8e:	8f 93       	push	r24
     e90:	c1 e0       	ldi	r28, 0x01	; 1
     e92:	cf 93       	push	r28
     e94:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <rprintf1RamRom>
	//rprintf("s%d\n",mData.calcResult[MEASURE_ADC0].sum);
	rprintf("a%d\n",mData.calcResult[MEASURE_ADC0].avg);
     e98:	80 91 48 02 	lds	r24, 0x0248
     e9c:	1f 92       	push	r1
     e9e:	8f 93       	push	r24
     ea0:	88 e9       	ldi	r24, 0x98	; 152
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	9f 93       	push	r25
     ea6:	8f 93       	push	r24
     ea8:	cf 93       	push	r28
     eaa:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <rprintf1RamRom>
     eae:	8d b7       	in	r24, 0x3d	; 61
     eb0:	9e b7       	in	r25, 0x3e	; 62
     eb2:	0a 96       	adiw	r24, 0x0a	; 10
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	9e bf       	out	0x3e, r25	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	8d bf       	out	0x3d, r24	; 61
	//rprintf("ma%d\n",mData.calcResult[MEASURE_ADC0].max);
	//rprintf("mi%d\r\n",mData.calcResult[MEASURE_ADC0].min);
#endif
}
     ebe:	cf 91       	pop	r28
     ec0:	08 95       	ret

00000ec2 <MeasureGetResult>:
*
*********************************************************************************************************
*/
uint16_t MeasureGetResult(void)
{
	return mData.calcResult[MEASURE_ADC0].avg;
     ec2:	80 91 48 02 	lds	r24, 0x0248
}
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	08 95       	ret

00000eca <SSDCycleUpdate>:
*
*********************************************************************************************************
*/

void SSDCycleUpdate(void)
{
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
*/
void SSDShitfOutData(void)
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
     ece:	40 91 5a 02 	lds	r20, 0x025A
     ed2:	50 91 5b 02 	lds	r21, 0x025B
     ed6:	60 91 5c 02 	lds	r22, 0x025C
     eda:	70 91 5d 02 	lds	r23, 0x025D
     ede:	80 e2       	ldi	r24, 0x20	; 32
	
	for(i = 0; i < 32; i++)
	{
		bitVal = 0;
		if(DispValTemp & 0x80000000)
     ee0:	8a 01       	movw	r16, r20
     ee2:	9b 01       	movw	r18, r22
		{
			bitVal = 1;
		}
		DispValTemp <<= 1;
     ee4:	44 0f       	add	r20, r20
     ee6:	55 1f       	adc	r21, r21
     ee8:	66 1f       	adc	r22, r22
     eea:	77 1f       	adc	r23, r23

		SSD_CLK_CLR();
     eec:	af 98       	cbi	0x15, 7	; 21
		SSD_DAT_CLR();
     eee:	ae 98       	cbi	0x15, 6	; 21
		if(bitVal)
     ef0:	37 fd       	sbrc	r19, 7
		{
			SSD_DAT_SET();
     ef2:	ae 9a       	sbi	0x15, 6	; 21
		}
		SSD_CLK_SET();
     ef4:	af 9a       	sbi	0x15, 7	; 21
     ef6:	81 50       	subi	r24, 0x01	; 1
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
	
	for(i = 0; i < 32; i++)
     ef8:	99 f7       	brne	.-26     	; 0xee0 <SSDCycleUpdate+0x16>
void SSDUpdateOnOff(void)
{
	SSD_RATE rate;
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
     efa:	90 91 58 02 	lds	r25, 0x0258
     efe:	97 70       	andi	r25, 0x07	; 7
	ft = SSD.flashTimer;
     f00:	80 91 59 02 	lds	r24, 0x0259
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
     f04:	94 30       	cpi	r25, 0x04	; 4
     f06:	19 f0       	breq	.+6      	; 0xf0e <SSDCycleUpdate+0x44>
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
	ft = SSD.flashTimer;
	
	ft += rate;
     f08:	89 0f       	add	r24, r25
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
     f0a:	8d 33       	cpi	r24, 0x3D	; 61
     f0c:	30 f0       	brcs	.+12     	; 0xf1a <SSDCycleUpdate+0x50>
	{
		ft = 0;
		SSD.ssd.state = SSD_OFF;
     f0e:	80 91 58 02 	lds	r24, 0x0258
     f12:	8f 7d       	andi	r24, 0xDF	; 223
     f14:	80 93 58 02 	sts	0x0258, r24
	ft = SSD.flashTimer;
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
	{
		ft = 0;
     f18:	80 e0       	ldi	r24, 0x00	; 0
		SSD.ssd.state = SSD_OFF;
	}
	SSD.flashTimer = ft;
     f1a:	80 93 59 02 	sts	0x0259, r24
	
	if((rate == SSD_0HZ) || (ft > (SSD_ONE_SEC/2)))
     f1e:	99 23       	and	r25, r25
     f20:	11 f0       	breq	.+4      	; 0xf26 <SSDCycleUpdate+0x5c>
     f22:	8f 31       	cpi	r24, 0x1F	; 31
     f24:	28 f0       	brcs	.+10     	; 0xf30 <SSDCycleUpdate+0x66>
	{
		SSD.ssd.state = SSD_ON;
     f26:	80 91 58 02 	lds	r24, 0x0258
     f2a:	80 62       	ori	r24, 0x20	; 32
     f2c:	80 93 58 02 	sts	0x0258, r24
*
*********************************************************************************************************
*/
void SSDUpdateComPin(void)
{
	if(SSD.ssd.state == SSD_OFF)		/* if ssd is in off state, cut power to green and color */
     f30:	80 91 58 02 	lds	r24, 0x0258
     f34:	85 fd       	sbrc	r24, 5
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <SSDCycleUpdate+0x72>
	{
		SSD_RED_CLR();
     f38:	ac 98       	cbi	0x15, 4	; 21
     f3a:	03 c0       	rjmp	.+6      	; 0xf42 <SSDCycleUpdate+0x78>
		SSD_GRN_CLR();
	}
	else
	{
		if(SSD.ssd.color == SSD_RED)		/* dispay red color */
     f3c:	88 71       	andi	r24, 0x18	; 24
     f3e:	19 f4       	brne	.+6      	; 0xf46 <SSDCycleUpdate+0x7c>
		{
			SSD_RED_SET();	/* give power to red ssd common pin */
     f40:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_CLR();	/* cut power to green ssd common pin */
     f42:	ad 98       	cbi	0x15, 5	; 21
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <SSDCycleUpdate+0x88>
		}
		else if(SSD.ssd.color == SSD_GREEN) /* dispay green color */
     f46:	88 30       	cpi	r24, 0x08	; 8
     f48:	11 f4       	brne	.+4      	; 0xf4e <SSDCycleUpdate+0x84>
		{
			SSD_RED_CLR();
     f4a:	ac 98       	cbi	0x15, 4	; 21
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <SSDCycleUpdate+0x86>
			SSD_GRN_SET();
		}
		else								/* dispay amber color */
		{
			SSD_RED_SET();
     f4e:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_SET();
     f50:	ad 9a       	sbi	0x15, 5	; 21
void SSDCycleUpdate(void)
{
	SSDShitfOutData();
	SSDUpdateOnOff();
	SSDUpdateComPin();
}
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	08 95       	ret

00000f58 <SSDDisplayDec>:
* Notes      :none
*
*********************************************************************************************************
*/
void SSDDisplayDec(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	8c 01       	movw	r16, r24
     f62:	36 2f       	mov	r19, r22
uint32_t SSDHex2Dec(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = hexValue/1000;
     f64:	68 ee       	ldi	r22, 0xE8	; 232
     f66:	73 e0       	ldi	r23, 0x03	; 3
     f68:	0e 94 cb 08 	call	0x1196	; 0x1196 <__udivmodhi4>
     f6c:	c6 2f       	mov	r28, r22
	dataSTR.hundred   = hexValue%1000/100;
     f6e:	64 e6       	ldi	r22, 0x64	; 100
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	0e 94 cb 08 	call	0x1196	; 0x1196 <__udivmodhi4>
     f76:	d6 2f       	mov	r29, r22
	dataSTR.tens      = hexValue%1000%100/10;
     f78:	6a e0       	ldi	r22, 0x0A	; 10
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	0e 94 cb 08 	call	0x1196	; 0x1196 <__udivmodhi4>
     f80:	56 2f       	mov	r21, r22
{
	SSD_DISP_T ValueCopy;
	
	SSD.DispVal.value = SSDHex2Dec(DispData);
	ValueCopy.value = SSD.DispVal.value;
	SSD.ssd.rate = rate;
     f82:	37 70       	andi	r19, 0x07	; 7
     f84:	60 91 58 02 	lds	r22, 0x0258
     f88:	60 7e       	andi	r22, 0xE0	; 224
	SSD.ssd.color = color;
     f8a:	43 70       	andi	r20, 0x03	; 3
     f8c:	94 2f       	mov	r25, r20
     f8e:	99 0f       	add	r25, r25
     f90:	99 0f       	add	r25, r25
     f92:	99 0f       	add	r25, r25
     f94:	46 2f       	mov	r20, r22
     f96:	43 2b       	or	r20, r19
     f98:	49 2b       	or	r20, r25
     f9a:	40 93 58 02 	sts	0x0258, r20
	
	/* Set display null for all 4 seven segment displays */
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
     f9e:	e3 eb       	ldi	r30, 0xB3	; 179
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	94 91       	lpm	r25, Z
     fa4:	90 93 5d 02 	sts	0x025D, r25
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
     fa8:	94 91       	lpm	r25, Z
     faa:	90 93 5c 02 	sts	0x025C, r25
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
     fae:	94 91       	lpm	r25, Z
     fb0:	90 93 5b 02 	sts	0x025B, r25
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
     fb4:	e4 91       	lpm	r30, Z
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0

	/* Set display remove zero before number */
	if(DispData > 1000)
     fba:	09 3e       	cpi	r16, 0xE9	; 233
     fbc:	83 e0       	ldi	r24, 0x03	; 3
     fbe:	18 07       	cpc	r17, r24
     fc0:	78 f0       	brcs	.+30     	; 0xfe0 <SSDDisplayDec+0x88>
	{
		SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[ValueCopy.thousands]);
     fc2:	ec 2f       	mov	r30, r28
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	ed 55       	subi	r30, 0x5D	; 93
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	84 91       	lpm	r24, Z
     fcc:	80 93 5d 02 	sts	0x025D, r24
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
     fd0:	ed 2f       	mov	r30, r29
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	ed 55       	subi	r30, 0x5D	; 93
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	e4 91       	lpm	r30, Z
     fda:	e0 93 5c 02 	sts	0x025C, r30
     fde:	0e c0       	rjmp	.+28     	; 0xffc <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 100)
     fe0:	05 36       	cpi	r16, 0x65	; 101
     fe2:	11 05       	cpc	r17, r1
     fe4:	40 f0       	brcs	.+16     	; 0xff6 <SSDDisplayDec+0x9e>
	{
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
     fe6:	ed 2f       	mov	r30, r29
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	ed 55       	subi	r30, 0x5D	; 93
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	84 91       	lpm	r24, Z
     ff0:	80 93 5c 02 	sts	0x025C, r24
     ff4:	03 c0       	rjmp	.+6      	; 0xffc <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 10)
     ff6:	0b 30       	cpi	r16, 0x0B	; 11
     ff8:	11 05       	cpc	r17, r1
     ffa:	38 f0       	brcs	.+14     	; 0x100a <SSDDisplayDec+0xb2>
	{
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
     ffc:	e5 2f       	mov	r30, r21
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	ed 55       	subi	r30, 0x5D	; 93
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	e4 91       	lpm	r30, Z
    1006:	e0 93 5b 02 	sts	0x025B, r30
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else
	{
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
    100a:	f9 01       	movw	r30, r18
    100c:	ed 55       	subi	r30, 0x5D	; 93
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	e4 91       	lpm	r30, Z
    1012:	e0 93 5a 02 	sts	0x025A, r30
	}
}
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	08 95       	ret

00001020 <SSDDisplayHex>:
uint32_t SSDHex2Hex(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = (hexValue >> 12) & 0x000f;
    1020:	39 2f       	mov	r19, r25
    1022:	32 95       	swap	r19
    1024:	3f 70       	andi	r19, 0x0F	; 15
	dataSTR.hundred   = (hexValue >> 8) & 0x000f;
    1026:	29 2f       	mov	r18, r25
    1028:	2f 70       	andi	r18, 0x0F	; 15
	dataSTR.tens      = (hexValue >> 4) & 0x000f;
    102a:	fc 01       	movw	r30, r24
    102c:	94 e0       	ldi	r25, 0x04	; 4
    102e:	f6 95       	lsr	r31
    1030:	e7 95       	ror	r30
    1032:	9a 95       	dec	r25
    1034:	e1 f7       	brne	.-8      	; 0x102e <SSDDisplayHex+0xe>
    1036:	9e 2f       	mov	r25, r30
    1038:	9f 70       	andi	r25, 0x0F	; 15
	dataSTR.units     = (hexValue >> 0) & 0x000f;
    103a:	8f 70       	andi	r24, 0x0F	; 15
*
*********************************************************************************************************
*/
void SSDDisplayHex(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
	SSD.DispVal.value = SSDHex2Hex(DispData);
    103c:	a8 e5       	ldi	r26, 0x58	; 88
    103e:	b2 e0       	ldi	r27, 0x02	; 2
	SSD.ssd.rate = rate;
    1040:	67 70       	andi	r22, 0x07	; 7
    1042:	7c 91       	ld	r23, X
    1044:	70 7e       	andi	r23, 0xE0	; 224
	SSD.ssd.color = color;
    1046:	43 70       	andi	r20, 0x03	; 3
    1048:	54 2f       	mov	r21, r20
    104a:	55 0f       	add	r21, r21
    104c:	55 0f       	add	r21, r21
    104e:	55 0f       	add	r21, r21
    1050:	47 2f       	mov	r20, r23
    1052:	46 2b       	or	r20, r22
    1054:	45 2b       	or	r20, r21
    1056:	4c 93       	st	X, r20
	
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD.DispVal.thousands]);
    1058:	e3 2f       	mov	r30, r19
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	ed 55       	subi	r30, 0x5D	; 93
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	34 91       	lpm	r19, Z
    1062:	15 96       	adiw	r26, 0x05	; 5
    1064:	3c 93       	st	X, r19
    1066:	15 97       	sbiw	r26, 0x05	; 5
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD.DispVal.hundred]);
    1068:	e2 2f       	mov	r30, r18
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	ed 55       	subi	r30, 0x5D	; 93
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	24 91       	lpm	r18, Z
    1072:	14 96       	adiw	r26, 0x04	; 4
    1074:	2c 93       	st	X, r18
    1076:	14 97       	sbiw	r26, 0x04	; 4
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD.DispVal.tens]);
    1078:	e9 2f       	mov	r30, r25
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	ed 55       	subi	r30, 0x5D	; 93
    107e:	ff 4f       	sbci	r31, 0xFF	; 255
    1080:	e4 91       	lpm	r30, Z
    1082:	13 96       	adiw	r26, 0x03	; 3
    1084:	ec 93       	st	X, r30
    1086:	13 97       	sbiw	r26, 0x03	; 3
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD.DispVal.units]);
    1088:	e8 2f       	mov	r30, r24
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	ed 55       	subi	r30, 0x5D	; 93
    108e:	ff 4f       	sbci	r31, 0xFF	; 255
    1090:	e4 91       	lpm	r30, Z
    1092:	12 96       	adiw	r26, 0x02	; 2
    1094:	ec 93       	st	X, r30
    1096:	08 95       	ret

00001098 <SSDInit>:
void SSDInit(void)
{	
	/* 
	Set PB7-PB4 as output to drive seven segment display, default display turn off
	*/
	DDRC &= ~((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
    1098:	84 b3       	in	r24, 0x14	; 20
    109a:	8f 70       	andi	r24, 0x0F	; 15
    109c:	84 bb       	out	0x14, r24	; 20
	DDRC |= ((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
    109e:	84 b3       	in	r24, 0x14	; 20
    10a0:	80 6f       	ori	r24, 0xF0	; 240
    10a2:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~((1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4));
    10a4:	85 b3       	in	r24, 0x15	; 21
    10a6:	8f 70       	andi	r24, 0x0F	; 15
    10a8:	85 bb       	out	0x15, r24	; 21

	SSDDisplayHex(0, SSD_R_OFF, SSD_RED);	/* Initial turn off all SSDs */
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	64 e0       	ldi	r22, 0x04	; 4
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0c 94 10 08 	jmp	0x1020	; 0x1020 <SSDDisplayHex>

000010b6 <ADCInit>:
*********************************************************************************************************
*/

void ADCInit (void)
{
	ADMUX  = (1 << REFS0);	/* use external AVCC as AREF,the result is right adjusted,10bits format */	
    10b6:	80 e4       	ldi	r24, 0x40	; 64
    10b8:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN) | (0 << ADIE) | (1 << ADIF) | ADPS2_0;	/* ADC Enable, Clear interrupt flag,set ADC Prescaler Selections */
    10ba:	84 e9       	ldi	r24, 0x94	; 148
    10bc:	86 b9       	out	0x06, r24	; 6
    10be:	08 95       	ret

000010c0 <ReadADC10Bit>:
uint16_t ReadADC10Bit(uint8_t channel)
{
	uint16_t result;
	uint8_t  sreg_save;  
	
    sreg_save = SREG;						/* Save AVR Status Register */
    10c0:	2f b7       	in	r18, 0x3f	; 63
	cli();									/* Global interrupt disable */
    10c2:	f8 94       	cli
	
    ADMUX  &= 0xf0; 						/* Clear MUX3:0 */
    10c4:	97 b1       	in	r25, 0x07	; 7
    10c6:	90 7f       	andi	r25, 0xF0	; 240
    10c8:	97 b9       	out	0x07, r25	; 7
	ADMUX  |= (channel&0x07);				/* Choose ADC channel */
    10ca:	97 b1       	in	r25, 0x07	; 7
    10cc:	87 70       	andi	r24, 0x07	; 7
    10ce:	89 2b       	or	r24, r25
    10d0:	87 b9       	out	0x07, r24	; 7
    ADCSRA |= (1 << ADSC);					/* ADC start conversion */	
    10d2:	36 9a       	sbi	0x06, 6	; 6
    while ((ADCSRA & (1 << ADIF)) == 0);	/* wait conversion finish */			
    10d4:	34 9b       	sbis	0x06, 4	; 6
    10d6:	fe cf       	rjmp	.-4      	; 0x10d4 <ReadADC10Bit+0x14>
    result  = ADC;							/* Read ADC value */
    10d8:	84 b1       	in	r24, 0x04	; 4
    10da:	95 b1       	in	r25, 0x05	; 5
	
    SREG = sreg_save;						/* Recover AVR Status Register */	
    10dc:	2f bf       	out	0x3f, r18	; 63
    return (result);
}
    10de:	08 95       	ret

000010e0 <ReadADC8Bit>:
*/

uint8_t ReadADC8Bit(uint8_t channel)
{
	uint16_t tempInt;
	tempInt = ReadADC10Bit(channel);
    10e0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <ReadADC10Bit>
	return tempInt>>2;
    10e4:	96 95       	lsr	r25
    10e6:	87 95       	ror	r24
    10e8:	96 95       	lsr	r25
    10ea:	87 95       	ror	r24
}
    10ec:	08 95       	ret

000010ee <ButtonInit>:
* Returns    : none
*********************************************************************************************************
*/
void ButtonInit(void)
{
	ButtonInitEx();
    10ee:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <ButtonInitEx>

000010f2 <ButtonCycleUpdate>:
* Notes      : None
*
*/
ButtonDataType ButtonGetIO_State(void)
{
	return  ButtonGetIO_StateEx();
    10f2:	0e 94 66 06 	call	0xccc	; 0xccc <ButtonGetIO_StateEx>
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
    10f6:	90 91 5e 02 	lds	r25, 0x025E
    10fa:	89 2b       	or	r24, r25
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
    10fc:	10 92 5e 02 	sts	0x025E, r1
	b = button.buttonsLastCycle.bVal;
    1100:	90 91 5f 02 	lds	r25, 0x025F
	holdTime = button.buttonHoldTime;
    1104:	20 91 64 02 	lds	r18, 0x0264
    1108:	30 91 65 02 	lds	r19, 0x0265
	
	if (button.buttonsReleased.bVal != 0) {		
    110c:	40 91 60 02 	lds	r20, 0x0260
    1110:	44 23       	and	r20, r20
    1112:	19 f0       	breq	.+6      	; 0x111a <ButtonCycleUpdate+0x28>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
    1114:	40 93 62 02 	sts	0x0262, r20
    1118:	05 c0       	rjmp	.+10     	; 0x1124 <ButtonCycleUpdate+0x32>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
    111a:	2d 33       	cpi	r18, 0x3D	; 61
    111c:	31 05       	cpc	r19, r1
    111e:	10 f0       	brcs	.+4      	; 0x1124 <ButtonCycleUpdate+0x32>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
    1120:	10 92 62 02 	sts	0x0262, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
    1124:	10 92 60 02 	sts	0x0260, r1
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
    1128:	10 92 63 02 	sts	0x0263, r1
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
    112c:	89 13       	cpse	r24, r25
    112e:	0f c0       	rjmp	.+30     	; 0x114e <ButtonCycleUpdate+0x5c>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
    1130:	2f 5f       	subi	r18, 0xFF	; 255
    1132:	3f 4f       	sbci	r19, 0xFF	; 255
    1134:	24 32       	cpi	r18, 0x24	; 36
    1136:	31 05       	cpc	r19, r1
    1138:	18 f4       	brcc	.+6      	; 0x1140 <ButtonCycleUpdate+0x4e>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
    113a:	10 92 61 02 	sts	0x0261, r1
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <ButtonCycleUpdate+0x52>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
    1140:	80 93 61 02 	sts	0x0261, r24
		}	
		button.buttonHoldTime = holdTime;
    1144:	30 93 65 02 	sts	0x0265, r19
    1148:	20 93 64 02 	sts	0x0264, r18
    114c:	08 95       	ret
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
    114e:	80 93 5f 02 	sts	0x025F, r24
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
    1152:	80 95       	com	r24
    1154:	89 23       	and	r24, r25
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
    1156:	90 91 61 02 	lds	r25, 0x0261
    115a:	98 23       	and	r25, r24
    115c:	81 f4       	brne	.+32     	; 0x117e <ButtonCycleUpdate+0x8c>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
    115e:	10 92 65 02 	sts	0x0265, r1
    1162:	10 92 64 02 	sts	0x0264, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
    1166:	23 50       	subi	r18, 0x03	; 3
    1168:	31 09       	sbc	r19, r1
    116a:	20 32       	cpi	r18, 0x20	; 32
    116c:	31 05       	cpc	r19, r1
    116e:	38 f4       	brcc	.+14     	; 0x117e <ButtonCycleUpdate+0x8c>
				button.buttonsReleased.bVal = buttons;	
    1170:	80 93 60 02 	sts	0x0260, r24
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
    1174:	90 91 62 02 	lds	r25, 0x0262
    1178:	89 23       	and	r24, r25
    117a:	80 93 63 02 	sts	0x0263, r24
    117e:	08 95       	ret

00001180 <ButtonGetHoldTime>:
*/

uint16_t ButtonGetHoldTime(void)
{
	return button.buttonHoldTime;
}
    1180:	80 91 64 02 	lds	r24, 0x0264
    1184:	90 91 65 02 	lds	r25, 0x0265
    1188:	08 95       	ret

0000118a <ButtonGetReleased>:
*/

ButtonDataType ButtonGetReleased(void)
{
	return button.buttonsReleased.bVal;
}
    118a:	80 91 60 02 	lds	r24, 0x0260
    118e:	08 95       	ret

00001190 <ButtonGetHeld>:
*/

ButtonDataType ButtonGetHeld (void)
{
	return button.buttonsHeld.bVal;
}
    1190:	80 91 61 02 	lds	r24, 0x0261
    1194:	08 95       	ret

00001196 <__udivmodhi4>:
    1196:	aa 1b       	sub	r26, r26
    1198:	bb 1b       	sub	r27, r27
    119a:	51 e1       	ldi	r21, 0x11	; 17
    119c:	07 c0       	rjmp	.+14     	; 0x11ac <__udivmodhi4_ep>

0000119e <__udivmodhi4_loop>:
    119e:	aa 1f       	adc	r26, r26
    11a0:	bb 1f       	adc	r27, r27
    11a2:	a6 17       	cp	r26, r22
    11a4:	b7 07       	cpc	r27, r23
    11a6:	10 f0       	brcs	.+4      	; 0x11ac <__udivmodhi4_ep>
    11a8:	a6 1b       	sub	r26, r22
    11aa:	b7 0b       	sbc	r27, r23

000011ac <__udivmodhi4_ep>:
    11ac:	88 1f       	adc	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	5a 95       	dec	r21
    11b2:	a9 f7       	brne	.-22     	; 0x119e <__udivmodhi4_loop>
    11b4:	80 95       	com	r24
    11b6:	90 95       	com	r25
    11b8:	bc 01       	movw	r22, r24
    11ba:	cd 01       	movw	r24, r26
    11bc:	08 95       	ret

000011be <__udivmodsi4>:
    11be:	a1 e2       	ldi	r26, 0x21	; 33
    11c0:	1a 2e       	mov	r1, r26
    11c2:	aa 1b       	sub	r26, r26
    11c4:	bb 1b       	sub	r27, r27
    11c6:	fd 01       	movw	r30, r26
    11c8:	0d c0       	rjmp	.+26     	; 0x11e4 <__udivmodsi4_ep>

000011ca <__udivmodsi4_loop>:
    11ca:	aa 1f       	adc	r26, r26
    11cc:	bb 1f       	adc	r27, r27
    11ce:	ee 1f       	adc	r30, r30
    11d0:	ff 1f       	adc	r31, r31
    11d2:	a2 17       	cp	r26, r18
    11d4:	b3 07       	cpc	r27, r19
    11d6:	e4 07       	cpc	r30, r20
    11d8:	f5 07       	cpc	r31, r21
    11da:	20 f0       	brcs	.+8      	; 0x11e4 <__udivmodsi4_ep>
    11dc:	a2 1b       	sub	r26, r18
    11de:	b3 0b       	sbc	r27, r19
    11e0:	e4 0b       	sbc	r30, r20
    11e2:	f5 0b       	sbc	r31, r21

000011e4 <__udivmodsi4_ep>:
    11e4:	66 1f       	adc	r22, r22
    11e6:	77 1f       	adc	r23, r23
    11e8:	88 1f       	adc	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	1a 94       	dec	r1
    11ee:	69 f7       	brne	.-38     	; 0x11ca <__udivmodsi4_loop>
    11f0:	60 95       	com	r22
    11f2:	70 95       	com	r23
    11f4:	80 95       	com	r24
    11f6:	90 95       	com	r25
    11f8:	9b 01       	movw	r18, r22
    11fa:	ac 01       	movw	r20, r24
    11fc:	bd 01       	movw	r22, r26
    11fe:	cf 01       	movw	r24, r30
    1200:	08 95       	ret

00001202 <__tablejump2__>:
    1202:	ee 0f       	add	r30, r30
    1204:	ff 1f       	adc	r31, r31
    1206:	05 90       	lpm	r0, Z+
    1208:	f4 91       	lpm	r31, Z
    120a:	e0 2d       	mov	r30, r0
    120c:	09 94       	ijmp

0000120e <_exit>:
    120e:	f8 94       	cli

00001210 <__stop_program>:
    1210:	ff cf       	rjmp	.-2      	; 0x1210 <__stop_program>
