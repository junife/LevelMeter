
LevelMeterMainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000111e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010d  00800060  00800060  00001192  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001192  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c0  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000350e  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013eb  00000000  00000000  00004bce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013f8  00000000  00000000  00005fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cdc  00000000  00000000  000073b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001194  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002229  00000000  00000000  00009224  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000400  00000000  00000000  0000b44d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
       4:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__vector_1>
       8:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__vector_2>
       c:	0c 94 86 03 	jmp	0x70c	; 0x70c <__vector_3>
      10:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_4>
      14:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__vector_5>
      18:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__vector_6>
      1c:	0c 94 2c 03 	jmp	0x658	; 0x658 <__vector_7>
      20:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__vector_8>
      24:	0c 94 12 02 	jmp	0x424	; 0x424 <__vector_9>
      28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      2c:	0c 94 3c 04 	jmp	0x878	; 0x878 <__vector_11>
      30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      34:	0c 94 05 04 	jmp	0x80a	; 0x80a <__vector_13>
      38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      4c:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__vector_19>
      50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
      54:	8d 04       	cpc	r8, r13
      56:	92 04       	cpc	r9, r2
      58:	9e 04       	cpc	r9, r14
      5a:	a3 04       	cpc	r10, r3
      5c:	a8 04       	cpc	r10, r8
      5e:	ad 04       	cpc	r10, r13
      60:	b2 04       	cpc	r11, r2
      62:	b7 04       	cpc	r11, r7

00000064 <__trampolines_end>:
      64:	30 31       	cpi	r19, 0x10	; 16
      66:	32 33       	cpi	r19, 0x32	; 50
      68:	34 35       	cpi	r19, 0x54	; 84
      6a:	36 37       	cpi	r19, 0x76	; 118
      6c:	38 39       	cpi	r19, 0x98	; 152
      6e:	41 42       	sbci	r20, 0x21	; 33
      70:	43 44       	sbci	r20, 0x43	; 67
      72:	45 46       	sbci	r20, 0x65	; 101
	...

00000075 <__c.2073>:
      75:	54 79 70 65 3d 25 63 0a 00                          Type=%c..

0000007e <__c.2060>:
      7e:	4d 61 69 6e 20 62 6f 61 72 64 20 68 65 72 65 21     Main board here!
      8e:	0a 00                                               ..

00000090 <ssdCharTble>:
      90:	c0 f9 a4 b0 99 92 82 f8 80 90 88 83 c6 a1 86 8e     ................
      a0:	ff fe f7 00                                         ....

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf e5       	ldi	r28, 0x5F	; 95
      aa:	d4 e0       	ldi	r29, 0x04	; 4
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_clear_bss>:
      b0:	21 e0       	ldi	r18, 0x01	; 1
      b2:	a0 e6       	ldi	r26, 0x60	; 96
      b4:	b0 e0       	ldi	r27, 0x00	; 0
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	ad 36       	cpi	r26, 0x6D	; 109
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <main>
      c4:	0c 94 8d 08 	jmp	0x111a	; 0x111a <_exit>

000000c8 <__bad_interrupt>:
      c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
      cc:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
      ce:	8f b7       	in	r24, 0x3f	; 63
      d0:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
      d2:	71 83       	std	Z+1, r23	; 0x01
      d4:	60 83       	st	Z, r22
	buffer->size = size;
      d6:	53 83       	std	Z+3, r21	; 0x03
      d8:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
      da:	17 82       	std	Z+7, r1	; 0x07
      dc:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
      de:	15 82       	std	Z+5, r1	; 0x05
      e0:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
      e2:	8f bf       	out	0x3f, r24	; 63
      e4:	08 95       	ret

000000e6 <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
      e6:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
      e8:	9f b7       	in	r25, 0x3f	; 63
      ea:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
      ec:	44 81       	ldd	r20, Z+4	; 0x04
      ee:	55 81       	ldd	r21, Z+5	; 0x05
      f0:	41 15       	cp	r20, r1
      f2:	51 05       	cpc	r21, r1
      f4:	c9 f0       	breq	.+50     	; 0x128 <bufferGetFromFront+0x42>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
      f6:	26 81       	ldd	r18, Z+6	; 0x06
      f8:	37 81       	ldd	r19, Z+7	; 0x07
      fa:	a0 81       	ld	r26, Z
      fc:	b1 81       	ldd	r27, Z+1	; 0x01
      fe:	a2 0f       	add	r26, r18
     100:	b3 1f       	adc	r27, r19
     102:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
     104:	2f 5f       	subi	r18, 0xFF	; 255
     106:	3f 4f       	sbci	r19, 0xFF	; 255
     108:	37 83       	std	Z+7, r19	; 0x07
     10a:	26 83       	std	Z+6, r18	; 0x06
		if(buffer->dataindex >= buffer->size)
     10c:	62 81       	ldd	r22, Z+2	; 0x02
     10e:	73 81       	ldd	r23, Z+3	; 0x03
     110:	26 17       	cp	r18, r22
     112:	37 07       	cpc	r19, r23
     114:	20 f0       	brcs	.+8      	; 0x11e <bufferGetFromFront+0x38>
		{
			buffer->dataindex -= buffer->size;
     116:	26 1b       	sub	r18, r22
     118:	37 0b       	sbc	r19, r23
     11a:	37 83       	std	Z+7, r19	; 0x07
     11c:	26 83       	std	Z+6, r18	; 0x06
		}
		buffer->datalength--;
     11e:	41 50       	subi	r20, 0x01	; 1
     120:	51 09       	sbc	r21, r1
     122:	55 83       	std	Z+5, r21	; 0x05
     124:	44 83       	std	Z+4, r20	; 0x04
     126:	01 c0       	rjmp	.+2      	; 0x12a <bufferGetFromFront+0x44>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
     128:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
     12a:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
     12c:	08 95       	ret

0000012e <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     12e:	fc 01       	movw	r30, r24
     130:	36 2f       	mov	r19, r22
	// begin critical section
	CRITICAL_SECTION_START;
     132:	2f b7       	in	r18, 0x3f	; 63
     134:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     136:	a4 81       	ldd	r26, Z+4	; 0x04
     138:	b5 81       	ldd	r27, Z+5	; 0x05
     13a:	62 81       	ldd	r22, Z+2	; 0x02
     13c:	73 81       	ldd	r23, Z+3	; 0x03
     13e:	a6 17       	cp	r26, r22
     140:	b7 07       	cpc	r27, r23
     142:	98 f4       	brcc	.+38     	; 0x16a <bufferAddToEnd+0x3c>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     144:	86 81       	ldd	r24, Z+6	; 0x06
     146:	97 81       	ldd	r25, Z+7	; 0x07
     148:	8a 0f       	add	r24, r26
     14a:	9b 1f       	adc	r25, r27
     14c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__udivmodhi4>
     150:	a0 81       	ld	r26, Z
     152:	b1 81       	ldd	r27, Z+1	; 0x01
     154:	a8 0f       	add	r26, r24
     156:	b9 1f       	adc	r27, r25
     158:	3c 93       	st	X, r19
		// increment the length
		buffer->datalength++;
     15a:	84 81       	ldd	r24, Z+4	; 0x04
     15c:	95 81       	ldd	r25, Z+5	; 0x05
     15e:	01 96       	adiw	r24, 0x01	; 1
     160:	95 83       	std	Z+5, r25	; 0x05
     162:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     164:	2f bf       	out	0x3f, r18	; 63
		// return success
		return -1;
     166:	8f ef       	ldi	r24, 0xFF	; 255
     168:	08 95       	ret
	}
	// end critical section
	CRITICAL_SECTION_END;
     16a:	2f bf       	out	0x3f, r18	; 63
	// return failure
	return 0;
     16c:	80 e0       	ldi	r24, 0x00	; 0
}
     16e:	08 95       	ret

00000170 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
     170:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     172:	4f b7       	in	r20, 0x3f	; 63
     174:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
     176:	82 81       	ldd	r24, Z+2	; 0x02
     178:	93 81       	ldd	r25, Z+3	; 0x03
     17a:	24 81       	ldd	r18, Z+4	; 0x04
     17c:	35 81       	ldd	r19, Z+5	; 0x05
	// end critical section
	CRITICAL_SECTION_END;
     17e:	4f bf       	out	0x3f, r20	; 63
	return bytesleft;
}
     180:	82 1b       	sub	r24, r18
     182:	93 0b       	sbc	r25, r19
     184:	08 95       	ret

00000186 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
     186:	90 93 61 00 	sts	0x0061, r25
     18a:	80 93 60 00 	sts	0x0060, r24
     18e:	08 95       	ret

00000190 <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
     190:	cf 93       	push	r28
     192:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
     194:	8a 30       	cpi	r24, 0x0A	; 10
     196:	31 f4       	brne	.+12     	; 0x1a4 <rprintfChar+0x14>
		rputchar('\r');
     198:	e0 91 60 00 	lds	r30, 0x0060
     19c:	f0 91 61 00 	lds	r31, 0x0061
     1a0:	8d e0       	ldi	r24, 0x0D	; 13
     1a2:	09 95       	icall
	// send character
	rputchar(c);
     1a4:	e0 91 60 00 	lds	r30, 0x0060
     1a8:	f0 91 61 00 	lds	r31, 0x0061
     1ac:	8c 2f       	mov	r24, r28
}
     1ae:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     1b0:	09 94       	ijmp

000001b2 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
     1b2:	8f 70       	andi	r24, 0x0F	; 15
     1b4:	e8 2f       	mov	r30, r24
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	ec 59       	subi	r30, 0x9C	; 156
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	84 91       	lpm	r24, Z
     1be:	0c 94 c8 00 	jmp	0x190	; 0x190 <rprintfChar>

000001c2 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
     1c2:	5f 92       	push	r5
     1c4:	6f 92       	push	r6
     1c6:	7f 92       	push	r7
     1c8:	8f 92       	push	r8
     1ca:	9f 92       	push	r9
     1cc:	af 92       	push	r10
     1ce:	bf 92       	push	r11
     1d0:	cf 92       	push	r12
     1d2:	df 92       	push	r13
     1d4:	ef 92       	push	r14
     1d6:	ff 92       	push	r15
     1d8:	0f 93       	push	r16
     1da:	1f 93       	push	r17
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	1f 92       	push	r1
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
     1e6:	ec 89       	ldd	r30, Y+20	; 0x14
     1e8:	fd 89       	ldd	r31, Y+21	; 0x15
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
     1ea:	3e 01       	movw	r6, r28
     1ec:	26 e1       	ldi	r18, 0x16	; 22
     1ee:	62 0e       	add	r6, r18
     1f0:	71 1c       	adc	r7, r1
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
					rprintfChar('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     1f2:	3a e0       	ldi	r19, 0x0A	; 10
     1f4:	a3 2e       	mov	r10, r19
     1f6:	b1 2c       	mov	r11, r1
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     1f8:	3b 89       	ldd	r19, Y+19	; 0x13
     1fa:	33 23       	and	r19, r19
     1fc:	81 f0       	breq	.+32     	; 0x21e <rprintf1RamRom+0x5c>
     1fe:	8f 01       	movw	r16, r30
     200:	0f 5f       	subi	r16, 0xFF	; 255
     202:	1f 4f       	sbci	r17, 0xFF	; 255
     204:	84 91       	lpm	r24, Z
     206:	85 32       	cpi	r24, 0x25	; 37
     208:	89 f0       	breq	.+34     	; 0x22c <rprintf1RamRom+0x6a>
		{	// Until '%' or '\0'
			if (!format_flag)
     20a:	88 23       	and	r24, r24
     20c:	09 f4       	brne	.+2      	; 0x210 <rprintf1RamRom+0x4e>
     20e:	66 c0       	rjmp	.+204    	; 0x2dc <rprintf1RamRom+0x11a>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
     210:	0e 94 c8 00 	call	0x190	; 0x190 <rprintfChar>
     214:	63 01       	movw	r12, r6
     216:	78 01       	movw	r14, r16
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
     218:	36 01       	movw	r6, r12
     21a:	f7 01       	movw	r30, r14
     21c:	ed cf       	rjmp	.-38     	; 0x1f8 <rprintf1RamRom+0x36>
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     21e:	80 81       	ld	r24, Z
     220:	85 32       	cpi	r24, 0x25	; 37
     222:	59 f0       	breq	.+22     	; 0x23a <rprintf1RamRom+0x78>
     224:	8f 01       	movw	r16, r30
     226:	0f 5f       	subi	r16, 0xFF	; 255
     228:	1f 4f       	sbci	r17, 0xFF	; 255
     22a:	ef cf       	rjmp	.-34     	; 0x20a <rprintf1RamRom+0x48>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
     22c:	7f 01       	movw	r14, r30
     22e:	82 e0       	ldi	r24, 0x02	; 2
     230:	e8 0e       	add	r14, r24
     232:	f1 1c       	adc	r15, r1
     234:	f8 01       	movw	r30, r16
     236:	84 91       	lpm	r24, Z
     238:	05 c0       	rjmp	.+10     	; 0x244 <rprintf1RamRom+0x82>
     23a:	7f 01       	movw	r14, r30
     23c:	22 e0       	ldi	r18, 0x02	; 2
     23e:	e2 0e       	add	r14, r18
     240:	f1 1c       	adc	r15, r1
     242:	81 81       	ldd	r24, Z+1	; 0x01
     244:	84 36       	cpi	r24, 0x64	; 100
     246:	a1 f0       	breq	.+40     	; 0x270 <rprintf1RamRom+0xae>
     248:	88 37       	cpi	r24, 0x78	; 120
     24a:	61 f0       	breq	.+24     	; 0x264 <rprintf1RamRom+0xa2>
     24c:	83 36       	cpi	r24, 0x63	; 99
     24e:	31 f4       	brne	.+12     	; 0x25c <rprintf1RamRom+0x9a>
		{
			case 'c': format_flag = va_arg(ap,int);
     250:	f3 01       	movw	r30, r6
     252:	80 81       	ld	r24, Z
     254:	93 01       	movw	r18, r6
     256:	2e 5f       	subi	r18, 0xFE	; 254
     258:	3f 4f       	sbci	r19, 0xFF	; 255
     25a:	39 01       	movw	r6, r18
			default:  rprintfChar(format_flag); continue;
     25c:	0e 94 c8 00 	call	0x190	; 0x190 <rprintfChar>
     260:	63 01       	movw	r12, r6
     262:	da cf       	rjmp	.-76     	; 0x218 <rprintf1RamRom+0x56>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
     264:	20 e1       	ldi	r18, 0x10	; 16
     266:	82 2e       	mov	r8, r18
     268:	91 2c       	mov	r9, r1
     26a:	00 e0       	ldi	r16, 0x00	; 0
     26c:	10 e1       	ldi	r17, 0x10	; 16
     26e:	05 c0       	rjmp	.+10     	; 0x27a <rprintf1RamRom+0xb8>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
     270:	9a e0       	ldi	r25, 0x0A	; 10
     272:	89 2e       	mov	r8, r25
     274:	91 2c       	mov	r9, r1
     276:	00 e1       	ldi	r16, 0x10	; 16
     278:	17 e2       	ldi	r17, 0x27	; 39
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
     27a:	63 01       	movw	r12, r6
     27c:	32 e0       	ldi	r19, 0x02	; 2
     27e:	c3 0e       	add	r12, r19
     280:	d1 1c       	adc	r13, r1
     282:	f3 01       	movw	r30, r6
     284:	60 80       	ld	r6, Z
     286:	71 80       	ldd	r7, Z+1	; 0x01
			if (format_flag == 'd')
     288:	84 36       	cpi	r24, 0x64	; 100
     28a:	a1 f4       	brne	.+40     	; 0x2b4 <rprintf1RamRom+0xf2>
			{
				if (((int)u_val) < 0)
     28c:	77 fe       	sbrs	r7, 7
     28e:	0f c0       	rjmp	.+30     	; 0x2ae <rprintf1RamRom+0xec>
				{
					u_val = - u_val;
     290:	71 94       	neg	r7
     292:	61 94       	neg	r6
     294:	71 08       	sbc	r7, r1
					rprintfChar('-');
     296:	8d e2       	ldi	r24, 0x2D	; 45
     298:	0e 94 c8 00 	call	0x190	; 0x190 <rprintfChar>
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <rprintf1RamRom+0xec>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     29e:	c8 01       	movw	r24, r16
     2a0:	b5 01       	movw	r22, r10
     2a2:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__udivmodhi4>
     2a6:	8b 01       	movw	r16, r22
     2a8:	62 30       	cpi	r22, 0x02	; 2
     2aa:	71 05       	cpc	r23, r1
     2ac:	18 f0       	brcs	.+6      	; 0x2b4 <rprintf1RamRom+0xf2>
     2ae:	60 16       	cp	r6, r16
     2b0:	71 06       	cpc	r7, r17
     2b2:	a8 f3       	brcs	.-22     	; 0x29e <rprintf1RamRom+0xdc>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
     2b4:	c3 01       	movw	r24, r6
     2b6:	b8 01       	movw	r22, r16
     2b8:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__udivmodhi4>
     2bc:	58 2e       	mov	r5, r24
     2be:	86 2f       	mov	r24, r22
     2c0:	99 83       	std	Y+1, r25	; 0x01
     2c2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <rprintfu04>
				u_val %= div_val;
     2c6:	65 2c       	mov	r6, r5
     2c8:	99 81       	ldd	r25, Y+1	; 0x01
     2ca:	79 2e       	mov	r7, r25
				div_val /= base;
     2cc:	c8 01       	movw	r24, r16
     2ce:	b4 01       	movw	r22, r8
     2d0:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__udivmodhi4>
     2d4:	8b 01       	movw	r16, r22
			} while (div_val);
     2d6:	67 2b       	or	r22, r23
     2d8:	69 f7       	brne	.-38     	; 0x2b4 <rprintf1RamRom+0xf2>
     2da:	9e cf       	rjmp	.-196    	; 0x218 <rprintf1RamRom+0x56>
		}
	}
	va_end(ap);
}
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0f 90       	pop	r0
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	1f 91       	pop	r17
     2e8:	0f 91       	pop	r16
     2ea:	ff 90       	pop	r15
     2ec:	ef 90       	pop	r14
     2ee:	df 90       	pop	r13
     2f0:	cf 90       	pop	r12
     2f2:	bf 90       	pop	r11
     2f4:	af 90       	pop	r10
     2f6:	9f 90       	pop	r9
     2f8:	8f 90       	pop	r8
     2fa:	7f 90       	pop	r7
     2fc:	6f 90       	pop	r6
     2fe:	5f 90       	pop	r5
     300:	08 95       	ret

00000302 <timer0SetPrescaler>:
#endif

void timer0SetPrescaler(u08 prescale)
{
	// set prescaler on timer 0
	outb(TCCR0, (inb(TCCR0) & ~TIMER_PRESCALE_MASK) | prescale);
     302:	93 b7       	in	r25, 0x33	; 51
     304:	98 7f       	andi	r25, 0xF8	; 248
     306:	89 2b       	or	r24, r25
     308:	83 bf       	out	0x33, r24	; 51
     30a:	08 95       	ret

0000030c <timer0Init>:
}

void timer0Init()
{
	// initialize timer 0
	timer0SetPrescaler( TIMER0PRESCALE );	// set prescaler
     30c:	85 e0       	ldi	r24, 0x05	; 5
     30e:	0e 94 81 01 	call	0x302	; 0x302 <timer0SetPrescaler>
	outb(TCNT0, 0);							// reset TCNT0
     312:	12 be       	out	0x32, r1	; 50
	sbi(TIMSK, TOIE0);						// enable TCNT0 overflow interrupt
     314:	89 b7       	in	r24, 0x39	; 57
     316:	81 60       	ori	r24, 0x01	; 1
     318:	89 bf       	out	0x39, r24	; 57
	sbi(TIMSK, OCIE0);						// enable OCR0 Output Compare Match Interrupt
     31a:	89 b7       	in	r24, 0x39	; 57
     31c:	82 60       	ori	r24, 0x02	; 2
     31e:	89 bf       	out	0x39, r24	; 57
}

void timer0ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer0Reg0 = 0;	// initialize time registers
     320:	10 92 f6 00 	sts	0x00F6, r1
     324:	10 92 f7 00 	sts	0x00F7, r1
     328:	10 92 f8 00 	sts	0x00F8, r1
     32c:	10 92 f9 00 	sts	0x00F9, r1
     330:	08 95       	ret

00000332 <timer1SetPrescaler>:
}

void timer1SetPrescaler(u08 prescale)
{
	// set prescaler on timer 1
	outb(TCCR1B, (inb(TCCR1B) & ~TIMER_PRESCALE_MASK) | prescale);
     332:	9e b5       	in	r25, 0x2e	; 46
     334:	98 7f       	andi	r25, 0xF8	; 248
     336:	89 2b       	or	r24, r25
     338:	8e bd       	out	0x2e, r24	; 46
     33a:	08 95       	ret

0000033c <timer1Init>:
}

void timer1Init(void)
{
	// initialize timer 1
	timer1SetPrescaler( TIMER1PRESCALE );	// set prescaler
     33c:	82 e0       	ldi	r24, 0x02	; 2
     33e:	0e 94 99 01 	call	0x332	; 0x332 <timer1SetPrescaler>
	outb(TCNT1H, 0);						// reset TCNT1
     342:	1d bc       	out	0x2d, r1	; 45
	outb(TCNT1L, 0);
     344:	1c bc       	out	0x2c, r1	; 44
	sbi(TIMSK, TOIE1);						// enable TCNT1 overflow
     346:	89 b7       	in	r24, 0x39	; 57
     348:	84 60       	ori	r24, 0x04	; 4
     34a:	89 bf       	out	0x39, r24	; 57
     34c:	08 95       	ret

0000034e <timer2SetPrescaler>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2SetPrescaler(u08 prescale)
{
	// set prescaler on timer 2
	outb(TCCR2, (inb(TCCR2) & ~TIMER_PRESCALE_MASK) | prescale);
     34e:	95 b5       	in	r25, 0x25	; 37
     350:	98 7f       	andi	r25, 0xF8	; 248
     352:	89 2b       	or	r24, r25
     354:	85 bd       	out	0x25, r24	; 37
     356:	08 95       	ret

00000358 <timer2Init>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2Init(void)
{
	// initialize timer 2
	timer2SetPrescaler( TIMER2PRESCALE );	// set prescaler
     358:	86 e0       	ldi	r24, 0x06	; 6
     35a:	0e 94 a7 01 	call	0x34e	; 0x34e <timer2SetPrescaler>
	outb(TCNT2, 0);							// reset TCNT2
     35e:	14 bc       	out	0x24, r1	; 36
	sbi(TIMSK, TOIE2);						// enable TCNT2 overflow
     360:	89 b7       	in	r24, 0x39	; 57
     362:	80 64       	ori	r24, 0x40	; 64
     364:	89 bf       	out	0x39, r24	; 57
	sbi(TIMSK, OCIE2);						// enable OCR2 Output Compare Match Interrupt
     366:	89 b7       	in	r24, 0x39	; 57
     368:	80 68       	ori	r24, 0x80	; 128
     36a:	89 bf       	out	0x39, r24	; 57

#ifdef TCNT2	// support timer2 only if it exists
void timer2ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer2Reg0 = 0;	// initialize time registers
     36c:	10 92 fe 00 	sts	0x00FE, r1
     370:	10 92 ff 00 	sts	0x00FF, r1
     374:	10 92 00 01 	sts	0x0100, r1
     378:	10 92 01 01 	sts	0x0101, r1
     37c:	08 95       	ret

0000037e <timerAttach>:
#endif

void timerAttach(u08 interruptNum, void (*userFunc)(void) )
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     37e:	88 30       	cpi	r24, 0x08	; 8
     380:	40 f4       	brcc	.+16     	; 0x392 <timerAttach+0x14>
	{
		// set the interrupt function to run
		// the supplied user's function
		TimerIntFunc[interruptNum] = userFunc;
     382:	e8 2f       	mov	r30, r24
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	ee 0f       	add	r30, r30
     388:	ff 1f       	adc	r31, r31
     38a:	ee 59       	subi	r30, 0x9E	; 158
     38c:	ff 4f       	sbci	r31, 0xFF	; 255
     38e:	71 83       	std	Z+1, r23	; 0x01
     390:	60 83       	st	Z, r22
     392:	08 95       	ret

00000394 <timerDetach>:
}

void timerDetach(u08 interruptNum)
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     394:	88 30       	cpi	r24, 0x08	; 8
     396:	40 f4       	brcc	.+16     	; 0x3a8 <timerDetach+0x14>
	{
		// set the interrupt function to run nothing
		TimerIntFunc[interruptNum] = 0;
     398:	e8 2f       	mov	r30, r24
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	ee 0f       	add	r30, r30
     39e:	ff 1f       	adc	r31, r31
     3a0:	ee 59       	subi	r30, 0x9E	; 158
     3a2:	ff 4f       	sbci	r31, 0xFF	; 255
     3a4:	11 82       	std	Z+1, r1	; 0x01
     3a6:	10 82       	st	Z, r1
     3a8:	08 95       	ret

000003aa <timerInit>:
                  :"r"(time_ms), "r"((unsigned short) (delay_count))
	);
}
*/
void timerInit(void)
{
     3aa:	cf 93       	push	r28
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
     3ac:	c0 e0       	ldi	r28, 0x00	; 0
		timerDetach(intNum);
     3ae:	8c 2f       	mov	r24, r28
     3b0:	0e 94 ca 01 	call	0x394	; 0x394 <timerDetach>
*/
void timerInit(void)
{
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
     3b4:	cf 5f       	subi	r28, 0xFF	; 255
     3b6:	c8 30       	cpi	r28, 0x08	; 8
     3b8:	d1 f7       	brne	.-12     	; 0x3ae <timerInit+0x4>
		timerDetach(intNum);

	// initialize all timers
	timer0Init();
     3ba:	0e 94 86 01 	call	0x30c	; 0x30c <timer0Init>
	timer1Init();
     3be:	0e 94 9e 01 	call	0x33c	; 0x33c <timer1Init>
	#ifdef TCNT2	// support timer2 only if it exists
	timer2Init();
     3c2:	0e 94 ac 01 	call	0x358	; 0x358 <timer2Init>
	#endif
	// enable interrupts
	sei();
     3c6:	78 94       	sei
}
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <timer1PWMInit>:
	// configures timer1 for use with PWM output
	// on OC1A and OC1B pins
	// phase correct PWM mode, FREQpwm=F_CPU/(2*N*TOP)

	// enable timer1 as 8,9,10bit PWM
	if(bitRes == 9)
     3cc:	89 30       	cpi	r24, 0x09	; 9
     3ce:	31 f4       	brne	.+12     	; 0x3dc <timer1PWMInit+0x10>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     3d0:	8f b5       	in	r24, 0x2f	; 47
     3d2:	82 60       	ori	r24, 0x02	; 2
     3d4:	8f bd       	out	0x2f, r24	; 47
		cbi(TCCR1A,PWM10);
     3d6:	8f b5       	in	r24, 0x2f	; 47
     3d8:	8e 7f       	andi	r24, 0xFE	; 254
     3da:	0a c0       	rjmp	.+20     	; 0x3f0 <timer1PWMInit+0x24>
	}
	else if( bitRes == 10 )
     3dc:	8a 30       	cpi	r24, 0x0A	; 10
     3de:	19 f4       	brne	.+6      	; 0x3e6 <timer1PWMInit+0x1a>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     3e0:	8f b5       	in	r24, 0x2f	; 47
     3e2:	82 60       	ori	r24, 0x02	; 2
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <timer1PWMInit+0x1e>
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     3e6:	8f b5       	in	r24, 0x2f	; 47
     3e8:	8d 7f       	andi	r24, 0xFD	; 253
     3ea:	8f bd       	out	0x2f, r24	; 47
		sbi(TCCR1A,PWM10);
     3ec:	8f b5       	in	r24, 0x2f	; 47
     3ee:	81 60       	ori	r24, 0x01	; 1
     3f0:	8f bd       	out	0x2f, r24	; 47
	}

	// clear output compare value A
	outb(OCR1AH, 0);
     3f2:	1b bc       	out	0x2b, r1	; 43
	outb(OCR1AL, 0);
     3f4:	1a bc       	out	0x2a, r1	; 42
	// clear output compare value B
	outb(OCR1BH, 0);
     3f6:	19 bc       	out	0x29, r1	; 41
	outb(OCR1BL, 0);
     3f8:	18 bc       	out	0x28, r1	; 40
     3fa:	08 95       	ret

000003fc <timer1PWMAOn>:

void timer1PWMAOn(void)
{
	// turn on channel A (OC1A) PWM output
	// set OC1A as non-inverted PWM
	sbi(TCCR1A,COM1A1);
     3fc:	8f b5       	in	r24, 0x2f	; 47
     3fe:	80 68       	ori	r24, 0x80	; 128
     400:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1A0);
     402:	8f b5       	in	r24, 0x2f	; 47
     404:	8f 7b       	andi	r24, 0xBF	; 191
     406:	8f bd       	out	0x2f, r24	; 47
     408:	08 95       	ret

0000040a <timer1PWMBOn>:

void timer1PWMBOn(void)
{
	// turn on channel B (OC1B) PWM output
	// set OC1B as non-inverted PWM
	sbi(TCCR1A,COM1B1);
     40a:	8f b5       	in	r24, 0x2f	; 47
     40c:	80 62       	ori	r24, 0x20	; 32
     40e:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1B0);
     410:	8f b5       	in	r24, 0x2f	; 47
     412:	8f 7e       	andi	r24, 0xEF	; 239
     414:	8f bd       	out	0x2f, r24	; 47
     416:	08 95       	ret

00000418 <timer1PWMASet>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1AH);		// set the high 8bits of OCR1A
	//outp( (pwmDuty&0x00FF), OCR1AL);	// set the low 8bits of OCR1A
	OCR1A = pwmDuty;
     418:	9b bd       	out	0x2b, r25	; 43
     41a:	8a bd       	out	0x2a, r24	; 42
     41c:	08 95       	ret

0000041e <timer1PWMBSet>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
     41e:	99 bd       	out	0x29, r25	; 41
     420:	88 bd       	out	0x28, r24	; 40
     422:	08 95       	ret

00000424 <__vector_9>:
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
     424:	1f 92       	push	r1
     426:	0f 92       	push	r0
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	0f 92       	push	r0
     42c:	11 24       	eor	r1, r1
     42e:	2f 93       	push	r18
     430:	3f 93       	push	r19
     432:	4f 93       	push	r20
     434:	5f 93       	push	r21
     436:	6f 93       	push	r22
     438:	7f 93       	push	r23
     43a:	8f 93       	push	r24
     43c:	9f 93       	push	r25
     43e:	af 93       	push	r26
     440:	bf 93       	push	r27
     442:	ef 93       	push	r30
     444:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
     446:	80 91 f6 00 	lds	r24, 0x00F6
     44a:	90 91 f7 00 	lds	r25, 0x00F7
     44e:	a0 91 f8 00 	lds	r26, 0x00F8
     452:	b0 91 f9 00 	lds	r27, 0x00F9
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	a1 1d       	adc	r26, r1
     45a:	b1 1d       	adc	r27, r1
     45c:	80 93 f6 00 	sts	0x00F6, r24
     460:	90 93 f7 00 	sts	0x00F7, r25
     464:	a0 93 f8 00 	sts	0x00F8, r26
     468:	b0 93 f9 00 	sts	0x00F9, r27

	// increment pause counter
	TimerPauseReg++;
     46c:	80 91 fa 00 	lds	r24, 0x00FA
     470:	90 91 fb 00 	lds	r25, 0x00FB
     474:	a0 91 fc 00 	lds	r26, 0x00FC
     478:	b0 91 fd 00 	lds	r27, 0x00FD
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	a1 1d       	adc	r26, r1
     480:	b1 1d       	adc	r27, r1
     482:	80 93 fa 00 	sts	0x00FA, r24
     486:	90 93 fb 00 	sts	0x00FB, r25
     48a:	a0 93 fc 00 	sts	0x00FC, r26
     48e:	b0 93 fd 00 	sts	0x00FD, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
     492:	80 91 62 00 	lds	r24, 0x0062
     496:	90 91 63 00 	lds	r25, 0x0063
     49a:	89 2b       	or	r24, r25
     49c:	29 f0       	breq	.+10     	; 0x4a8 <__stack+0x49>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
     49e:	e0 91 62 00 	lds	r30, 0x0062
     4a2:	f0 91 63 00 	lds	r31, 0x0063
     4a6:	09 95       	icall
}
     4a8:	ff 91       	pop	r31
     4aa:	ef 91       	pop	r30
     4ac:	bf 91       	pop	r27
     4ae:	af 91       	pop	r26
     4b0:	9f 91       	pop	r25
     4b2:	8f 91       	pop	r24
     4b4:	7f 91       	pop	r23
     4b6:	6f 91       	pop	r22
     4b8:	5f 91       	pop	r21
     4ba:	4f 91       	pop	r20
     4bc:	3f 91       	pop	r19
     4be:	2f 91       	pop	r18
     4c0:	0f 90       	pop	r0
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	0f 90       	pop	r0
     4c6:	1f 90       	pop	r1
     4c8:	18 95       	reti

000004ca <__vector_8>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
     4ca:	1f 92       	push	r1
     4cc:	0f 92       	push	r0
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	0f 92       	push	r0
     4d2:	11 24       	eor	r1, r1
     4d4:	2f 93       	push	r18
     4d6:	3f 93       	push	r19
     4d8:	4f 93       	push	r20
     4da:	5f 93       	push	r21
     4dc:	6f 93       	push	r22
     4de:	7f 93       	push	r23
     4e0:	8f 93       	push	r24
     4e2:	9f 93       	push	r25
     4e4:	af 93       	push	r26
     4e6:	bf 93       	push	r27
     4e8:	ef 93       	push	r30
     4ea:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
     4ec:	80 91 64 00 	lds	r24, 0x0064
     4f0:	90 91 65 00 	lds	r25, 0x0065
     4f4:	89 2b       	or	r24, r25
     4f6:	29 f0       	breq	.+10     	; 0x502 <__vector_8+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
     4f8:	e0 91 64 00 	lds	r30, 0x0064
     4fc:	f0 91 65 00 	lds	r31, 0x0065
     500:	09 95       	icall
}
     502:	ff 91       	pop	r31
     504:	ef 91       	pop	r30
     506:	bf 91       	pop	r27
     508:	af 91       	pop	r26
     50a:	9f 91       	pop	r25
     50c:	8f 91       	pop	r24
     50e:	7f 91       	pop	r23
     510:	6f 91       	pop	r22
     512:	5f 91       	pop	r21
     514:	4f 91       	pop	r20
     516:	3f 91       	pop	r19
     518:	2f 91       	pop	r18
     51a:	0f 90       	pop	r0
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	0f 90       	pop	r0
     520:	1f 90       	pop	r1
     522:	18 95       	reti

00000524 <__vector_4>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
     524:	1f 92       	push	r1
     526:	0f 92       	push	r0
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	2f 93       	push	r18
     530:	3f 93       	push	r19
     532:	4f 93       	push	r20
     534:	5f 93       	push	r21
     536:	6f 93       	push	r22
     538:	7f 93       	push	r23
     53a:	8f 93       	push	r24
     53c:	9f 93       	push	r25
     53e:	af 93       	push	r26
     540:	bf 93       	push	r27
     542:	ef 93       	push	r30
     544:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
     546:	80 91 fe 00 	lds	r24, 0x00FE
     54a:	90 91 ff 00 	lds	r25, 0x00FF
     54e:	a0 91 00 01 	lds	r26, 0x0100
     552:	b0 91 01 01 	lds	r27, 0x0101
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	a1 1d       	adc	r26, r1
     55a:	b1 1d       	adc	r27, r1
     55c:	80 93 fe 00 	sts	0x00FE, r24
     560:	90 93 ff 00 	sts	0x00FF, r25
     564:	a0 93 00 01 	sts	0x0100, r26
     568:	b0 93 01 01 	sts	0x0101, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
     56c:	80 91 6c 00 	lds	r24, 0x006C
     570:	90 91 6d 00 	lds	r25, 0x006D
     574:	89 2b       	or	r24, r25
     576:	29 f0       	breq	.+10     	; 0x582 <__vector_4+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
     578:	e0 91 6c 00 	lds	r30, 0x006C
     57c:	f0 91 6d 00 	lds	r31, 0x006D
     580:	09 95       	icall
}
     582:	ff 91       	pop	r31
     584:	ef 91       	pop	r30
     586:	bf 91       	pop	r27
     588:	af 91       	pop	r26
     58a:	9f 91       	pop	r25
     58c:	8f 91       	pop	r24
     58e:	7f 91       	pop	r23
     590:	6f 91       	pop	r22
     592:	5f 91       	pop	r21
     594:	4f 91       	pop	r20
     596:	3f 91       	pop	r19
     598:	2f 91       	pop	r18
     59a:	0f 90       	pop	r0
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	0f 90       	pop	r0
     5a0:	1f 90       	pop	r1
     5a2:	18 95       	reti

000005a4 <__vector_19>:

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_COMP_vect)
{
     5a4:	1f 92       	push	r1
     5a6:	0f 92       	push	r0
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	0f 92       	push	r0
     5ac:	11 24       	eor	r1, r1
     5ae:	2f 93       	push	r18
     5b0:	3f 93       	push	r19
     5b2:	4f 93       	push	r20
     5b4:	5f 93       	push	r21
     5b6:	6f 93       	push	r22
     5b8:	7f 93       	push	r23
     5ba:	8f 93       	push	r24
     5bc:	9f 93       	push	r25
     5be:	af 93       	push	r26
     5c0:	bf 93       	push	r27
     5c2:	ef 93       	push	r30
     5c4:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
     5c6:	80 91 70 00 	lds	r24, 0x0070
     5ca:	90 91 71 00 	lds	r25, 0x0071
     5ce:	89 2b       	or	r24, r25
     5d0:	29 f0       	breq	.+10     	; 0x5dc <__vector_19+0x38>
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
     5d2:	e0 91 70 00 	lds	r30, 0x0070
     5d6:	f0 91 71 00 	lds	r31, 0x0071
     5da:	09 95       	icall
}
     5dc:	ff 91       	pop	r31
     5de:	ef 91       	pop	r30
     5e0:	bf 91       	pop	r27
     5e2:	af 91       	pop	r26
     5e4:	9f 91       	pop	r25
     5e6:	8f 91       	pop	r24
     5e8:	7f 91       	pop	r23
     5ea:	6f 91       	pop	r22
     5ec:	5f 91       	pop	r21
     5ee:	4f 91       	pop	r20
     5f0:	3f 91       	pop	r19
     5f2:	2f 91       	pop	r18
     5f4:	0f 90       	pop	r0
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	0f 90       	pop	r0
     5fa:	1f 90       	pop	r1
     5fc:	18 95       	reti

000005fe <__vector_6>:
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
     5fe:	1f 92       	push	r1
     600:	0f 92       	push	r0
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	0f 92       	push	r0
     606:	11 24       	eor	r1, r1
     608:	2f 93       	push	r18
     60a:	3f 93       	push	r19
     60c:	4f 93       	push	r20
     60e:	5f 93       	push	r21
     610:	6f 93       	push	r22
     612:	7f 93       	push	r23
     614:	8f 93       	push	r24
     616:	9f 93       	push	r25
     618:	af 93       	push	r26
     61a:	bf 93       	push	r27
     61c:	ef 93       	push	r30
     61e:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
     620:	80 91 66 00 	lds	r24, 0x0066
     624:	90 91 67 00 	lds	r25, 0x0067
     628:	89 2b       	or	r24, r25
     62a:	29 f0       	breq	.+10     	; 0x636 <__vector_6+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
     62c:	e0 91 66 00 	lds	r30, 0x0066
     630:	f0 91 67 00 	lds	r31, 0x0067
     634:	09 95       	icall
}
     636:	ff 91       	pop	r31
     638:	ef 91       	pop	r30
     63a:	bf 91       	pop	r27
     63c:	af 91       	pop	r26
     63e:	9f 91       	pop	r25
     640:	8f 91       	pop	r24
     642:	7f 91       	pop	r23
     644:	6f 91       	pop	r22
     646:	5f 91       	pop	r21
     648:	4f 91       	pop	r20
     64a:	3f 91       	pop	r19
     64c:	2f 91       	pop	r18
     64e:	0f 90       	pop	r0
     650:	0f be       	out	0x3f, r0	; 63
     652:	0f 90       	pop	r0
     654:	1f 90       	pop	r1
     656:	18 95       	reti

00000658 <__vector_7>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
     658:	1f 92       	push	r1
     65a:	0f 92       	push	r0
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	0f 92       	push	r0
     660:	11 24       	eor	r1, r1
     662:	2f 93       	push	r18
     664:	3f 93       	push	r19
     666:	4f 93       	push	r20
     668:	5f 93       	push	r21
     66a:	6f 93       	push	r22
     66c:	7f 93       	push	r23
     66e:	8f 93       	push	r24
     670:	9f 93       	push	r25
     672:	af 93       	push	r26
     674:	bf 93       	push	r27
     676:	ef 93       	push	r30
     678:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
     67a:	80 91 68 00 	lds	r24, 0x0068
     67e:	90 91 69 00 	lds	r25, 0x0069
     682:	89 2b       	or	r24, r25
     684:	29 f0       	breq	.+10     	; 0x690 <__vector_7+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
     686:	e0 91 68 00 	lds	r30, 0x0068
     68a:	f0 91 69 00 	lds	r31, 0x0069
     68e:	09 95       	icall
}
     690:	ff 91       	pop	r31
     692:	ef 91       	pop	r30
     694:	bf 91       	pop	r27
     696:	af 91       	pop	r26
     698:	9f 91       	pop	r25
     69a:	8f 91       	pop	r24
     69c:	7f 91       	pop	r23
     69e:	6f 91       	pop	r22
     6a0:	5f 91       	pop	r21
     6a2:	4f 91       	pop	r20
     6a4:	3f 91       	pop	r19
     6a6:	2f 91       	pop	r18
     6a8:	0f 90       	pop	r0
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	0f 90       	pop	r0
     6ae:	1f 90       	pop	r1
     6b0:	18 95       	reti

000006b2 <__vector_5>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
     6b2:	1f 92       	push	r1
     6b4:	0f 92       	push	r0
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	0f 92       	push	r0
     6ba:	11 24       	eor	r1, r1
     6bc:	2f 93       	push	r18
     6be:	3f 93       	push	r19
     6c0:	4f 93       	push	r20
     6c2:	5f 93       	push	r21
     6c4:	6f 93       	push	r22
     6c6:	7f 93       	push	r23
     6c8:	8f 93       	push	r24
     6ca:	9f 93       	push	r25
     6cc:	af 93       	push	r26
     6ce:	bf 93       	push	r27
     6d0:	ef 93       	push	r30
     6d2:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
     6d4:	80 91 6a 00 	lds	r24, 0x006A
     6d8:	90 91 6b 00 	lds	r25, 0x006B
     6dc:	89 2b       	or	r24, r25
     6de:	29 f0       	breq	.+10     	; 0x6ea <__vector_5+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
     6e0:	e0 91 6a 00 	lds	r30, 0x006A
     6e4:	f0 91 6b 00 	lds	r31, 0x006B
     6e8:	09 95       	icall
}
     6ea:	ff 91       	pop	r31
     6ec:	ef 91       	pop	r30
     6ee:	bf 91       	pop	r27
     6f0:	af 91       	pop	r26
     6f2:	9f 91       	pop	r25
     6f4:	8f 91       	pop	r24
     6f6:	7f 91       	pop	r23
     6f8:	6f 91       	pop	r22
     6fa:	5f 91       	pop	r21
     6fc:	4f 91       	pop	r20
     6fe:	3f 91       	pop	r19
     700:	2f 91       	pop	r18
     702:	0f 90       	pop	r0
     704:	0f be       	out	0x3f, r0	; 63
     706:	0f 90       	pop	r0
     708:	1f 90       	pop	r1
     70a:	18 95       	reti

0000070c <__vector_3>:

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMP_vect)
{
     70c:	1f 92       	push	r1
     70e:	0f 92       	push	r0
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	0f 92       	push	r0
     714:	11 24       	eor	r1, r1
     716:	2f 93       	push	r18
     718:	3f 93       	push	r19
     71a:	4f 93       	push	r20
     71c:	5f 93       	push	r21
     71e:	6f 93       	push	r22
     720:	7f 93       	push	r23
     722:	8f 93       	push	r24
     724:	9f 93       	push	r25
     726:	af 93       	push	r26
     728:	bf 93       	push	r27
     72a:	ef 93       	push	r30
     72c:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     72e:	80 91 6e 00 	lds	r24, 0x006E
     732:	90 91 6f 00 	lds	r25, 0x006F
     736:	89 2b       	or	r24, r25
     738:	29 f0       	breq	.+10     	; 0x744 <__vector_3+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     73a:	e0 91 6e 00 	lds	r30, 0x006E
     73e:	f0 91 6f 00 	lds	r31, 0x006F
     742:	09 95       	icall
}
     744:	ff 91       	pop	r31
     746:	ef 91       	pop	r30
     748:	bf 91       	pop	r27
     74a:	af 91       	pop	r26
     74c:	9f 91       	pop	r25
     74e:	8f 91       	pop	r24
     750:	7f 91       	pop	r23
     752:	6f 91       	pop	r22
     754:	5f 91       	pop	r21
     756:	4f 91       	pop	r20
     758:	3f 91       	pop	r19
     75a:	2f 91       	pop	r18
     75c:	0f 90       	pop	r0
     75e:	0f be       	out	0x3f, r0	; 63
     760:	0f 90       	pop	r0
     762:	1f 90       	pop	r1
     764:	18 95       	reti

00000766 <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (unsigned char *)uartRxData, UART_RX_BUFFER_SIZE);
     766:	40 e4       	ldi	r20, 0x40	; 64
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	64 eb       	ldi	r22, 0xB4	; 180
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	83 e0       	ldi	r24, 0x03	; 3
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	0e 94 66 00 	call	0xcc	; 0xcc <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (unsigned char *)uartTxData, UART_TX_BUFFER_SIZE);
     776:	40 e4       	ldi	r20, 0x40	; 64
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	64 e7       	ldi	r22, 0x74	; 116
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	8c e0       	ldi	r24, 0x0C	; 12
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	0c 94 66 00 	jmp	0xcc	; 0xcc <bufferInit>

00000786 <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
     786:	0e 94 b3 03 	call	0x766	; 0x766 <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
     78a:	10 92 73 00 	sts	0x0073, r1
     78e:	10 92 72 00 	sts	0x0072, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     792:	88 ed       	ldi	r24, 0xD8	; 216
     794:	8a b9       	out	0x0a, r24	; 10
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
     796:	8f e5       	ldi	r24, 0x5F	; 95
     798:	89 b9       	out	0x09, r24	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
     79a:	10 bc       	out	0x20, r1	; 32
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
     79c:	8f ef       	ldi	r24, 0xFF	; 255
     79e:	80 93 02 01 	sts	0x0102, r24
	uartBufferedTx = FALSE;
     7a2:	10 92 0b 01 	sts	0x010B, r1
	// clear overflow count
	uartRxOverflow = 0;
     7a6:	10 92 15 01 	sts	0x0115, r1
     7aa:	10 92 14 01 	sts	0x0114, r1
	// enable interrupts
	sei();
     7ae:	78 94       	sei
     7b0:	08 95       	ret

000007b2 <uartSetBaudRate>:
	UartRxFunc = rx_func;
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	8b 01       	movw	r16, r22
     7b8:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
     7ba:	dc 01       	movw	r26, r24
     7bc:	cb 01       	movw	r24, r22
     7be:	90 5e       	subi	r25, 0xE0	; 224
     7c0:	a3 4e       	sbci	r26, 0xE3	; 227
     7c2:	bf 4f       	sbci	r27, 0xFF	; 255
     7c4:	bc 01       	movw	r22, r24
     7c6:	cd 01       	movw	r24, r26
     7c8:	43 e0       	ldi	r20, 0x03	; 3
     7ca:	66 0f       	add	r22, r22
     7cc:	77 1f       	adc	r23, r23
     7ce:	88 1f       	adc	r24, r24
     7d0:	99 1f       	adc	r25, r25
     7d2:	4a 95       	dec	r20
     7d4:	d1 f7       	brne	.-12     	; 0x7ca <uartSetBaudRate+0x18>
     7d6:	a9 01       	movw	r20, r18
     7d8:	98 01       	movw	r18, r16
     7da:	e4 e0       	ldi	r30, 0x04	; 4
     7dc:	22 0f       	add	r18, r18
     7de:	33 1f       	adc	r19, r19
     7e0:	44 1f       	adc	r20, r20
     7e2:	55 1f       	adc	r21, r21
     7e4:	ea 95       	dec	r30
     7e6:	d1 f7       	brne	.-12     	; 0x7dc <uartSetBaudRate+0x2a>
     7e8:	0e 94 65 08 	call	0x10ca	; 0x10ca <__udivmodsi4>
     7ec:	21 50       	subi	r18, 0x01	; 1
     7ee:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
     7f0:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
     7f2:	30 bd       	out	0x20, r19	; 32
	#endif
}
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	08 95       	ret

000007fa <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
     7fa:	90 91 02 01 	lds	r25, 0x0102
     7fe:	99 23       	and	r25, r25
     800:	e1 f3       	breq	.-8      	; 0x7fa <uartSendByte>
	// send byte
	outb(UDR, txData);
     802:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
     804:	10 92 02 01 	sts	0x0102, r1
     808:	08 95       	ret

0000080a <__vector_13>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_TRANS)
{
     80a:	1f 92       	push	r1
     80c:	0f 92       	push	r0
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	0f 92       	push	r0
     812:	11 24       	eor	r1, r1
     814:	2f 93       	push	r18
     816:	3f 93       	push	r19
     818:	4f 93       	push	r20
     81a:	5f 93       	push	r21
     81c:	6f 93       	push	r22
     81e:	7f 93       	push	r23
     820:	8f 93       	push	r24
     822:	9f 93       	push	r25
     824:	af 93       	push	r26
     826:	bf 93       	push	r27
     828:	ef 93       	push	r30
     82a:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
     82c:	80 91 0b 01 	lds	r24, 0x010B
     830:	88 23       	and	r24, r24
     832:	71 f0       	breq	.+28     	; 0x850 <__vector_13+0x46>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
     834:	80 91 10 01 	lds	r24, 0x0110
     838:	90 91 11 01 	lds	r25, 0x0111
     83c:	89 2b       	or	r24, r25
     83e:	31 f0       	breq	.+12     	; 0x84c <__vector_13+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
     840:	8c e0       	ldi	r24, 0x0C	; 12
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	0e 94 73 00 	call	0xe6	; 0xe6 <bufferGetFromFront>
     848:	8c b9       	out	0x0c, r24	; 12
     84a:	05 c0       	rjmp	.+10     	; 0x856 <__vector_13+0x4c>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
     84c:	10 92 0b 01 	sts	0x010B, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
     850:	8f ef       	ldi	r24, 0xFF	; 255
     852:	80 93 02 01 	sts	0x0102, r24
	}
}
     856:	ff 91       	pop	r31
     858:	ef 91       	pop	r30
     85a:	bf 91       	pop	r27
     85c:	af 91       	pop	r26
     85e:	9f 91       	pop	r25
     860:	8f 91       	pop	r24
     862:	7f 91       	pop	r23
     864:	6f 91       	pop	r22
     866:	5f 91       	pop	r21
     868:	4f 91       	pop	r20
     86a:	3f 91       	pop	r19
     86c:	2f 91       	pop	r18
     86e:	0f 90       	pop	r0
     870:	0f be       	out	0x3f, r0	; 63
     872:	0f 90       	pop	r0
     874:	1f 90       	pop	r1
     876:	18 95       	reti

00000878 <__vector_11>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_RECV)
{
     878:	1f 92       	push	r1
     87a:	0f 92       	push	r0
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	0f 92       	push	r0
     880:	11 24       	eor	r1, r1
     882:	2f 93       	push	r18
     884:	3f 93       	push	r19
     886:	4f 93       	push	r20
     888:	5f 93       	push	r21
     88a:	6f 93       	push	r22
     88c:	7f 93       	push	r23
     88e:	8f 93       	push	r24
     890:	9f 93       	push	r25
     892:	af 93       	push	r26
     894:	bf 93       	push	r27
     896:	ef 93       	push	r30
     898:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
     89a:	8c b1       	in	r24, 0x0c	; 12

	// if there's a user function to handle this receive event
	if(UartRxFunc)
     89c:	20 91 72 00 	lds	r18, 0x0072
     8a0:	30 91 73 00 	lds	r19, 0x0073
     8a4:	23 2b       	or	r18, r19
     8a6:	31 f0       	breq	.+12     	; 0x8b4 <__vector_11+0x3c>
	{
		// call it and pass the received data
		UartRxFunc(c);
     8a8:	e0 91 72 00 	lds	r30, 0x0072
     8ac:	f0 91 73 00 	lds	r31, 0x0073
     8b0:	09 95       	icall
     8b2:	10 c0       	rjmp	.+32     	; 0x8d4 <__vector_11+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
     8b4:	68 2f       	mov	r22, r24
     8b6:	83 e0       	ldi	r24, 0x03	; 3
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	0e 94 97 00 	call	0x12e	; 0x12e <bufferAddToEnd>
     8be:	81 11       	cpse	r24, r1
     8c0:	09 c0       	rjmp	.+18     	; 0x8d4 <__vector_11+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
     8c2:	80 91 14 01 	lds	r24, 0x0114
     8c6:	90 91 15 01 	lds	r25, 0x0115
     8ca:	01 96       	adiw	r24, 0x01	; 1
     8cc:	90 93 15 01 	sts	0x0115, r25
     8d0:	80 93 14 01 	sts	0x0114, r24
		}
	}
}
     8d4:	ff 91       	pop	r31
     8d6:	ef 91       	pop	r30
     8d8:	bf 91       	pop	r27
     8da:	af 91       	pop	r26
     8dc:	9f 91       	pop	r25
     8de:	8f 91       	pop	r24
     8e0:	7f 91       	pop	r23
     8e2:	6f 91       	pop	r22
     8e4:	5f 91       	pop	r21
     8e6:	4f 91       	pop	r20
     8e8:	3f 91       	pop	r19
     8ea:	2f 91       	pop	r18
     8ec:	0f 90       	pop	r0
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	0f 90       	pop	r0
     8f2:	1f 90       	pop	r1
     8f4:	18 95       	reti

000008f6 <AppOutputCompare0>:
* Returns    : none
*********************************************************************************************************
*/
void AppOutputCompare0(void)
{
	OCR0 = TCNT0 + CYCLEN_60HZ;
     8f6:	82 b7       	in	r24, 0x32	; 50
     8f8:	80 51       	subi	r24, 0x10	; 16
     8fa:	8c bf       	out	0x3c, r24	; 60
	appl.system.fSysPwrZC = 1;
     8fc:	e6 e1       	ldi	r30, 0x16	; 22
     8fe:	f1 e0       	ldi	r31, 0x01	; 1
     900:	80 81       	ld	r24, Z
     902:	81 60       	ori	r24, 0x01	; 1
     904:	80 83       	st	Z, r24
     906:	08 95       	ret

00000908 <AppDisplay>:
* Returns    : true, power on control has finised. false, is processing
*********************************************************************************************************
*/
void AppDisplay(DISP_CODE DispCode, WORK_MODE mode)
{
	switch(DispCode)
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	88 30       	cpi	r24, 0x08	; 8
     90c:	91 05       	cpc	r25, r1
     90e:	a8 f5       	brcc	.+106    	; 0x97a <AppDisplay+0x72>
     910:	fc 01       	movw	r30, r24
     912:	e6 5d       	subi	r30, 0xD6	; 214
     914:	ff 4f       	sbci	r31, 0xFF	; 255
     916:	0c 94 87 08 	jmp	0x110e	; 0x110e <__tablejump2__>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(START_CHAR, SSD_0HZ, SSD_RED);
     91a:	40 e0       	ldi	r20, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	29 c0       	rjmp	.+82     	; 0x976 <AppDisplay+0x6e>
			break;
			
		case CURRENT_VALUE:
			if(mode == PWR_ON)
     924:	61 30       	cpi	r22, 0x01	; 1
     926:	29 f0       	breq	.+10     	; 0x932 <AppDisplay+0x2a>
			{
				SSDDisplayDec(CURRENT_VALUE, SSD_0HZ, SSD_RED);
     928:	40 e0       	ldi	r20, 0x00	; 0
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	22 c0       	rjmp	.+68     	; 0x976 <AppDisplay+0x6e>
			}
			else if(mode == NORMAL)
			{
				SSDDisplayDec(MeasureGetResult0(), SSD_0HZ, SSD_RED);
     932:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <MeasureGetResult0>
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	1d c0       	rjmp	.+58     	; 0x976 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(FULL_WAREHOUSE, SSD_0HZ, SSD_RED);
     93c:	40 e0       	ldi	r20, 0x00	; 0
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	82 e0       	ldi	r24, 0x02	; 2
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	18 c0       	rjmp	.+48     	; 0x976 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(EMPTY_WAREHOUSE, SSD_0HZ, SSD_RED);
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	83 e0       	ldi	r24, 0x03	; 3
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	13 c0       	rjmp	.+38     	; 0x976 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(ALARM_H_PERCENT, SSD_0HZ, SSD_RED);
     950:	40 e0       	ldi	r20, 0x00	; 0
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	84 e0       	ldi	r24, 0x04	; 4
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e c0       	rjmp	.+28     	; 0x976 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(ALARM_L_PERCENT, SSD_0HZ, SSD_RED);
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	85 e0       	ldi	r24, 0x05	; 5
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	09 c0       	rjmp	.+18     	; 0x976 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(RESPONSE_TIME, SSD_0HZ, SSD_RED);
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	86 e0       	ldi	r24, 0x06	; 6
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	04 c0       	rjmp	.+8      	; 0x976 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(REMOTE_ADDR, SSD_0HZ, SSD_RED);
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	87 e0       	ldi	r24, 0x07	; 7
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0c 94 49 07 	jmp	0xe92	; 0xe92 <SSDDisplayDec>
     97a:	08 95       	ret

0000097c <McuInit>:
*/

void McuInit(void)
{
	/* Initial uart */
	uartInit();	
     97c:	0e 94 c3 03 	call	0x786	; 0x786 <uartInit>
	uartSetBaudRate(19200);
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	7b e4       	ldi	r23, 0x4B	; 75
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <uartSetBaudRate>
	rprintfInit(uartSendByte);
     98c:	8d ef       	ldi	r24, 0xFD	; 253
     98e:	93 e0       	ldi	r25, 0x03	; 3
     990:	0e 94 c3 00 	call	0x186	; 0x186 <rprintfInit>

	/* Initial ADC */
	ADCInit();
     994:	0e 94 f8 07 	call	0xff0	; 0xff0 <ADCInit>
	
	/* Initial T0, T1 and T2 */
	timerInit();
     998:	0e 94 d5 01 	call	0x3aa	; 0x3aa <timerInit>
	sbi(DDRD, PD4);		/* set PD4(OC1B) as output */
     99c:	8c 9a       	sbi	0x11, 4	; 17
	sbi(DDRD, PD5);		/* set PD5(OC1A) as output */
     99e:	8d 9a       	sbi	0x11, 5	; 17
	timer1PWMInit(8);	/* 8 bit PWM resolution, phase correct PWM mode, FREQpwm=F_CPU/(2*N*TOP) */
     9a0:	88 e0       	ldi	r24, 0x08	; 8
     9a2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <timer1PWMInit>
	timer1PWMAOn();		/* turn on the channel A PWM output of timer1 */
     9a6:	0e 94 fe 01 	call	0x3fc	; 0x3fc <timer1PWMAOn>
	timer1PWMBOn();		/* turn on the channel B PWM output of timer1 */
     9aa:	0c 94 05 02 	jmp	0x40a	; 0x40a <timer1PWMBOn>

000009ae <ApplInit>:
*********************************************************************************************************
*/

void ApplInit(void)
{
	ButtonInit();
     9ae:	0e 94 fd 07 	call	0xffa	; 0xffa <ButtonInit>
	LEDInit();
     9b2:	0e 94 65 06 	call	0xcca	; 0xcca <LEDInit>
	SSDInit();
     9b6:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <SSDInit>
*/

void ApplDataInit(void)
{
	/* Following for initial power on display steps */
	appl.workMode = PWR_ON;
     9ba:	e6 e1       	ldi	r30, 0x16	; 22
     9bc:	f1 e0       	ldi	r31, 0x01	; 1
     9be:	15 8a       	std	Z+21, r1	; 0x15
	appl.CurEvent = NULL_EVENT;
     9c0:	16 8a       	std	Z+22, r1	; 0x16
	appl.LastEvent = NULL_EVENT;
     9c2:	17 8a       	std	Z+23, r1	; 0x17
	appl.second = 0;
     9c4:	10 8e       	std	Z+24, r1	; 0x18
	appl.ModeTimer = TIME_SWITCH_TOTAL;
     9c6:	80 ee       	ldi	r24, 0xE0	; 224
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	94 8f       	std	Z+28, r25	; 0x1c
     9cc:	83 8f       	std	Z+27, r24	; 0x1b
	appl.DispCode= START_CHAR;
     9ce:	15 8e       	std	Z+29, r1	; 0x1d
{
	ButtonInit();
	LEDInit();
	SSDInit();
	ApplDataInit();
	MeasureInit();
     9d0:	0e 94 d2 06 	call	0xda4	; 0xda4 <MeasureInit>
	
	timerAttach(TIMER0OUTCOMPARE_INT, AppOutputCompare0);
     9d4:	6b e7       	ldi	r22, 0x7B	; 123
     9d6:	74 e0       	ldi	r23, 0x04	; 4
     9d8:	87 e0       	ldi	r24, 0x07	; 7
     9da:	0e 94 bf 01 	call	0x37e	; 0x37e <timerAttach>
	
	rprintf("Main board here!\n" );	
     9de:	8e e7       	ldi	r24, 0x7E	; 126
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	9f 93       	push	r25
     9e4:	8f 93       	push	r24
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	8f 93       	push	r24
     9ea:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <rprintf1RamRom>
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	0f 90       	pop	r0
     9f4:	08 95       	ret

000009f6 <AppCycleUpdate>:
*
* Returns    : none
*********************************************************************************************************
*/
void AppCycleUpdate(void)
{	
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
	char tempChar;
	static uint16_t cnt;
	cnt++;
     9fc:	80 91 f4 00 	lds	r24, 0x00F4
     a00:	90 91 f5 00 	lds	r25, 0x00F5
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	90 93 f5 00 	sts	0x00F5, r25
     a0a:	80 93 f4 00 	sts	0x00F4, r24
* Returns    : none
*********************************************************************************************************
*/
void AppUpdateTimers(void)
{
	if(++appl.second > TIMER_1_SEC_60HZ) 
     a0e:	80 91 2e 01 	lds	r24, 0x012E
     a12:	8f 5f       	subi	r24, 0xFF	; 255
     a14:	8d 33       	cpi	r24, 0x3D	; 61
     a16:	18 f4       	brcc	.+6      	; 0xa1e <AppCycleUpdate+0x28>
     a18:	80 93 2e 01 	sts	0x012E, r24
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <AppCycleUpdate+0x2c>
	{
		appl.second = 0;
     a1e:	10 92 2e 01 	sts	0x012E, r1
#endif
#endif
		
	}
	
	if(appl.ModeTimer != TIMER_TIMEOUT && appl.ModeTimer != TIMER_INT_DISABLED) appl.ModeTimer--;
     a22:	80 91 31 01 	lds	r24, 0x0131
     a26:	90 91 32 01 	lds	r25, 0x0132
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	8e 3f       	cpi	r24, 0xFE	; 254
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	92 07       	cpc	r25, r18
     a32:	20 f4       	brcc	.+8      	; 0xa3c <AppCycleUpdate+0x46>
     a34:	90 93 32 01 	sts	0x0132, r25
     a38:	80 93 31 01 	sts	0x0131, r24
	cnt++;
	
	AppUpdateTimers();

	/* work mode convert according to ModeTimer and push button events */
	switch(appl.workMode)
     a3c:	c0 91 2b 01 	lds	r28, 0x012B
     a40:	c1 30       	cpi	r28, 0x01	; 1
     a42:	09 f4       	brne	.+2      	; 0xa46 <AppCycleUpdate+0x50>
     a44:	50 c0       	rjmp	.+160    	; 0xae6 <AppCycleUpdate+0xf0>
     a46:	18 f0       	brcs	.+6      	; 0xa4e <AppCycleUpdate+0x58>
     a48:	c2 30       	cpi	r28, 0x02	; 2
     a4a:	89 f1       	breq	.+98     	; 0xaae <AppCycleUpdate+0xb8>
     a4c:	16 c1       	rjmp	.+556    	; 0xc7a <AppCycleUpdate+0x284>
	{
		case PWR_ON:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
     a4e:	80 91 31 01 	lds	r24, 0x0131
     a52:	90 91 32 01 	lds	r25, 0x0132
     a56:	9c 01       	movw	r18, r24
     a58:	21 50       	subi	r18, 0x01	; 1
     a5a:	31 09       	sbc	r19, r1
     a5c:	2e 3f       	cpi	r18, 0xFE	; 254
     a5e:	3f 4f       	sbci	r19, 0xFF	; 255
     a60:	88 f5       	brcc	.+98     	; 0xac4 <AppCycleUpdate+0xce>
			{
				if(appl.ModeTimer % (TIME_CONTENT_SWITCH - 1) == 0)
     a62:	6b e3       	ldi	r22, 0x3B	; 59
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__udivmodhi4>
     a6a:	89 2b       	or	r24, r25
     a6c:	41 f4       	brne	.+16     	; 0xa7e <AppCycleUpdate+0x88>
				{
					AppDisplay(++appl.DispCode,PWR_ON);
     a6e:	80 91 33 01 	lds	r24, 0x0133
     a72:	8f 5f       	subi	r24, 0xFF	; 255
     a74:	80 93 33 01 	sts	0x0133, r24
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	0e 94 84 04 	call	0x908	; 0x908 <AppDisplay>
				}
				
				if(ButtonJMP1HeldEvent() && (ButtonGetHoldTime() == TIME_B_HELD_RST))	/* Press/Held JMP1 after power on will set to factory default */
     a7e:	0e 94 57 06 	call	0xcae	; 0xcae <ButtonJMP1HeldEvent>
     a82:	88 23       	and	r24, r24
     a84:	09 f4       	brne	.+2      	; 0xa88 <AppCycleUpdate+0x92>
     a86:	f9 c0       	rjmp	.+498    	; 0xc7a <AppCycleUpdate+0x284>
     a88:	0e 94 46 08 	call	0x108c	; 0x108c <ButtonGetHoldTime>
     a8c:	cc 97       	sbiw	r24, 0x3c	; 60
     a8e:	09 f0       	breq	.+2      	; 0xa92 <AppCycleUpdate+0x9c>
     a90:	f4 c0       	rjmp	.+488    	; 0xc7a <AppCycleUpdate+0x284>
				{
					/* Following for initial power on display steps */
					appl.ModeTimer = TIME_SWITCH_TOTAL;
     a92:	80 ee       	ldi	r24, 0xE0	; 224
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	90 93 32 01 	sts	0x0132, r25
     a9a:	80 93 31 01 	sts	0x0131, r24
					appl.workMode = PWR_ON;
     a9e:	10 92 2b 01 	sts	0x012B, r1
					appl.LastEvent = JP1_HELD;
     aa2:	84 e0       	ldi	r24, 0x04	; 4
     aa4:	80 93 2d 01 	sts	0x012D, r24
					appl.DispCode= START_CHAR;
     aa8:	10 92 33 01 	sts	0x0133, r1
     aac:	e6 c0       	rjmp	.+460    	; 0xc7a <AppCycleUpdate+0x284>
				}
			}
			break;
			
		case SETTING:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
     aae:	80 91 31 01 	lds	r24, 0x0131
     ab2:	90 91 32 01 	lds	r25, 0x0132
     ab6:	9c 01       	movw	r18, r24
     ab8:	21 50       	subi	r18, 0x01	; 1
     aba:	31 09       	sbc	r19, r1
     abc:	2e 3f       	cpi	r18, 0xFE	; 254
     abe:	3f 4f       	sbci	r19, 0xFF	; 255
     ac0:	08 f4       	brcc	.+2      	; 0xac4 <AppCycleUpdate+0xce>
     ac2:	5b c0       	rjmp	.+182    	; 0xb7a <AppCycleUpdate+0x184>
					appl.workMode = PWR_ON;
					appl.LastEvent = JP1_HELD;
					appl.DispCode= START_CHAR;
				}
			}
			else if(appl.ModeTimer == TIMER_TIMEOUT)
     ac4:	89 2b       	or	r24, r25
     ac6:	09 f0       	breq	.+2      	; 0xaca <AppCycleUpdate+0xd4>
     ac8:	d8 c0       	rjmp	.+432    	; 0xc7a <AppCycleUpdate+0x284>
			{
				appl.ModeTimer = TIMER_INT_DISABLED;	/* Disable count */
     aca:	8f ef       	ldi	r24, 0xFF	; 255
     acc:	9f ef       	ldi	r25, 0xFF	; 255
     ace:	90 93 32 01 	sts	0x0132, r25
     ad2:	80 93 31 01 	sts	0x0131, r24
				appl.workMode = NORMAL;					/* convert to NORMAL */
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	80 93 2b 01 	sts	0x012B, r24
				appl.LastEvent = NULL_EVENT;			/* update  LastEvent */
     adc:	10 92 2d 01 	sts	0x012D, r1
				appl.DispCode = CURRENT_VALUE;			/* Initial to display material value in setting mode */
     ae0:	80 93 33 01 	sts	0x0133, r24
     ae4:	ca c0       	rjmp	.+404    	; 0xc7a <AppCycleUpdate+0x284>
			}
			break;
			
		case NORMAL:			
			if(ButtonGetReleased())
     ae6:	0e 94 4b 08 	call	0x1096	; 0x1096 <ButtonGetReleased>
     aea:	88 23       	and	r24, r24
     aec:	a9 f0       	breq	.+42     	; 0xb18 <AppCycleUpdate+0x122>
			{
				if(ButtonJMP2ReleasedEvent())
     aee:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <ButtonJMP2ReleasedEvent>
     af2:	88 23       	and	r24, r24
     af4:	61 f0       	breq	.+24     	; 0xb0e <AppCycleUpdate+0x118>
				{
					appl.ModeTimer = TIME_D_CODE_HELD;	/* Disable count */
     af6:	84 eb       	ldi	r24, 0xB4	; 180
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	90 93 32 01 	sts	0x0132, r25
     afe:	80 93 31 01 	sts	0x0131, r24
					appl.workMode = SETTING; 			/* convert to SETTING */
     b02:	82 e0       	ldi	r24, 0x02	; 2
     b04:	80 93 2b 01 	sts	0x012B, r24
					appl.LastEvent = JP2_PRESS;			/* update  LastEvent */
     b08:	c0 93 2d 01 	sts	0x012D, r28
     b0c:	b6 c0       	rjmp	.+364    	; 0xc7a <AppCycleUpdate+0x284>
	//rprintf("mT=%d,0x%x\n",appl.ModeTimer,appl.ModeTimer);
	rprintf("dC=%d\n\n",appl.DispCode);
	//rprintf("lE=%d\n\n",appl.LastEvent);
#endif
#endif
}
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
				{
					appl.ModeTimer = TIME_D_CODE_HELD;	/* Disable count */
					appl.workMode = SETTING; 			/* convert to SETTING */
					appl.LastEvent = JP2_PRESS;			/* update  LastEvent */
				}
				else if(ButtonJMP1ReleasedEvent())
     b14:	0c 94 53 06 	jmp	0xca6	; 0xca6 <ButtonJMP1ReleasedEvent>
				{
				}
			}
			else if(ButtonGetHeld())
     b18:	0e 94 4e 08 	call	0x109c	; 0x109c <ButtonGetHeld>
     b1c:	88 23       	and	r24, r24
     b1e:	49 f0       	breq	.+18     	; 0xb32 <AppCycleUpdate+0x13c>
			{
				if(ButtonJMP2HeldEvent())//(ButtonJMP2HeldEvent() && (ButtonGetHoldTime()%(TIMER_1_SEC_60HZ/2) == 0))
     b20:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ButtonJMP2HeldEvent>
     b24:	81 11       	cpse	r24, r1
     b26:	82 c0       	rjmp	.+260    	; 0xc2c <AppCycleUpdate+0x236>
	//rprintf("mT=%d,0x%x\n",appl.ModeTimer,appl.ModeTimer);
	rprintf("dC=%d\n\n",appl.DispCode);
	//rprintf("lE=%d\n\n",appl.LastEvent);
#endif
#endif
}
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
				{
					appl.ModeTimer = TIME_D_CODE_HELD;	/* Disable count */
					appl.workMode = SETTING; 			/* convert to SETTING */
					appl.LastEvent = JP2_HELD;			/* update  LastEvent */
				}
				else if(ButtonJMP1HeldEvent())
     b2e:	0c 94 57 06 	jmp	0xcae	; 0xcae <ButtonJMP1HeldEvent>
				}
			}
			else
			{
				/* Display current material, and display color change according to value compare with user setting */
				AppDisplay(appl.DispCode,NORMAL);
     b32:	61 e0       	ldi	r22, 0x01	; 1
     b34:	80 91 33 01 	lds	r24, 0x0133
     b38:	0e 94 84 04 	call	0x908	; 0x908 <AppDisplay>
				
				if(uartRxBuffer.size - bufferIsNotFull(&uartRxBuffer) != 0)
     b3c:	00 91 05 01 	lds	r16, 0x0105
     b40:	10 91 06 01 	lds	r17, 0x0106
     b44:	83 e0       	ldi	r24, 0x03	; 3
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	0e 94 b8 00 	call	0x170	; 0x170 <bufferIsNotFull>
     b4c:	08 17       	cp	r16, r24
     b4e:	19 07       	cpc	r17, r25
     b50:	09 f4       	brne	.+2      	; 0xb54 <AppCycleUpdate+0x15e>
     b52:	93 c0       	rjmp	.+294    	; 0xc7a <AppCycleUpdate+0x284>
				{
					tempChar = bufferGetFromFront(&uartRxBuffer);
     b54:	83 e0       	ldi	r24, 0x03	; 3
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	0e 94 73 00 	call	0xe6	; 0xe6 <bufferGetFromFront>
					//rprintf("char=%c\n",tempChar);
					rprintf("Type=%c\n",tempChar);
     b5c:	1f 92       	push	r1
     b5e:	8f 93       	push	r24
     b60:	85 e7       	ldi	r24, 0x75	; 117
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	9f 93       	push	r25
     b66:	8f 93       	push	r24
     b68:	cf 93       	push	r28
     b6a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <rprintf1RamRom>
     b6e:	0f 90       	pop	r0
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	80 c0       	rjmp	.+256    	; 0xc7a <AppCycleUpdate+0x284>
			break;
			
		case SETTING:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
			{
				if(ButtonGetReleased())
     b7a:	0e 94 4b 08 	call	0x1096	; 0x1096 <ButtonGetReleased>
     b7e:	88 23       	and	r24, r24
     b80:	b9 f1       	breq	.+110    	; 0xbf0 <AppCycleUpdate+0x1fa>
				{
					if(ButtonJMP2ReleasedEvent())
     b82:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <ButtonJMP2ReleasedEvent>
     b86:	88 23       	and	r24, r24
     b88:	b9 f0       	breq	.+46     	; 0xbb8 <AppCycleUpdate+0x1c2>
					{
						if(--appl.DispCode < CURRENT_VALUE)
     b8a:	80 91 33 01 	lds	r24, 0x0133
     b8e:	81 50       	subi	r24, 0x01	; 1
     b90:	09 f4       	brne	.+2      	; 0xb94 <AppCycleUpdate+0x19e>
						{
							appl.DispCode = REMOTE_ADDR;
     b92:	87 e0       	ldi	r24, 0x07	; 7
     b94:	80 93 33 01 	sts	0x0133, r24
						}
						AppDisplay(appl.DispCode,SETTING);
     b98:	62 e0       	ldi	r22, 0x02	; 2
     b9a:	80 91 33 01 	lds	r24, 0x0133
     b9e:	0e 94 84 04 	call	0x908	; 0x908 <AppDisplay>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     ba2:	84 eb       	ldi	r24, 0xB4	; 180
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	90 93 32 01 	sts	0x0132, r25
     baa:	80 93 31 01 	sts	0x0131, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     bae:	82 e0       	ldi	r24, 0x02	; 2
     bb0:	80 93 2b 01 	sts	0x012B, r24
						appl.LastEvent = JP2_PRESS; 		/* update  LastEvent */
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	5f c0       	rjmp	.+190    	; 0xc76 <AppCycleUpdate+0x280>
					}
					else if(ButtonJMP1ReleasedEvent())
     bb8:	0e 94 53 06 	call	0xca6	; 0xca6 <ButtonJMP1ReleasedEvent>
     bbc:	88 23       	and	r24, r24
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <AppCycleUpdate+0x1cc>
     bc0:	5c c0       	rjmp	.+184    	; 0xc7a <AppCycleUpdate+0x284>
					{
						SSDDisplayDec(--appl.config.FullWarehouse[DATA_SET], SSD_0HZ, SSD_GREEN);
     bc2:	80 91 19 01 	lds	r24, 0x0119
     bc6:	90 91 1a 01 	lds	r25, 0x011A
     bca:	01 97       	sbiw	r24, 0x01	; 1
     bcc:	90 93 1a 01 	sts	0x011A, r25
     bd0:	80 93 19 01 	sts	0x0119, r24
     bd4:	41 e0       	ldi	r20, 0x01	; 1
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	0e 94 49 07 	call	0xe92	; 0xe92 <SSDDisplayDec>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     bdc:	84 eb       	ldi	r24, 0xB4	; 180
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	90 93 32 01 	sts	0x0132, r25
     be4:	80 93 31 01 	sts	0x0131, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     be8:	c0 93 2b 01 	sts	0x012B, r28
						appl.LastEvent = JP1_PRESS;			/* update  LastEvent */
     bec:	83 e0       	ldi	r24, 0x03	; 3
     bee:	43 c0       	rjmp	.+134    	; 0xc76 <AppCycleUpdate+0x280>
					}
				}
				else if(ButtonGetHeld())
     bf0:	0e 94 4e 08 	call	0x109c	; 0x109c <ButtonGetHeld>
     bf4:	88 23       	and	r24, r24
     bf6:	09 f4       	brne	.+2      	; 0xbfa <AppCycleUpdate+0x204>
     bf8:	40 c0       	rjmp	.+128    	; 0xc7a <AppCycleUpdate+0x284>
				{
					if(ButtonJMP2HeldEvent() && (ButtonGetHoldTime()%(TIMER_1_SEC_60HZ/6) == 0))	/* fast increase */
     bfa:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ButtonJMP2HeldEvent>
     bfe:	88 23       	and	r24, r24
     c00:	f9 f0       	breq	.+62     	; 0xc40 <AppCycleUpdate+0x24a>
     c02:	0e 94 46 08 	call	0x108c	; 0x108c <ButtonGetHoldTime>
     c06:	6a e0       	ldi	r22, 0x0A	; 10
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__udivmodhi4>
     c0e:	89 2b       	or	r24, r25
     c10:	b9 f4       	brne	.+46     	; 0xc40 <AppCycleUpdate+0x24a>
					{
						if(++appl.DispCode > REMOTE_ADDR)
     c12:	80 91 33 01 	lds	r24, 0x0133
     c16:	8f 5f       	subi	r24, 0xFF	; 255
     c18:	88 30       	cpi	r24, 0x08	; 8
     c1a:	08 f0       	brcs	.+2      	; 0xc1e <AppCycleUpdate+0x228>
						{
							appl.DispCode = CURRENT_VALUE;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	80 93 33 01 	sts	0x0133, r24
						}
						AppDisplay(appl.DispCode,SETTING);
     c22:	62 e0       	ldi	r22, 0x02	; 2
     c24:	80 91 33 01 	lds	r24, 0x0133
     c28:	0e 94 84 04 	call	0x908	; 0x908 <AppDisplay>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     c2c:	84 eb       	ldi	r24, 0xB4	; 180
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	90 93 32 01 	sts	0x0132, r25
     c34:	80 93 31 01 	sts	0x0131, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	80 93 2b 01 	sts	0x012B, r24
     c3e:	1b c0       	rjmp	.+54     	; 0xc76 <AppCycleUpdate+0x280>
						appl.LastEvent = JP2_HELD;			/* update  LastEvent */
					}
					else if(ButtonJMP1HeldEvent())
     c40:	0e 94 57 06 	call	0xcae	; 0xcae <ButtonJMP1HeldEvent>
     c44:	88 23       	and	r24, r24
     c46:	c9 f0       	breq	.+50     	; 0xc7a <AppCycleUpdate+0x284>
					{
						SSDDisplayDec(++appl.config.FullWarehouse[DATA_SET], SSD_0HZ, SSD_AMBER);
     c48:	80 91 19 01 	lds	r24, 0x0119
     c4c:	90 91 1a 01 	lds	r25, 0x011A
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	90 93 1a 01 	sts	0x011A, r25
     c56:	80 93 19 01 	sts	0x0119, r24
     c5a:	42 e0       	ldi	r20, 0x02	; 2
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	0e 94 49 07 	call	0xe92	; 0xe92 <SSDDisplayDec>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     c62:	84 eb       	ldi	r24, 0xB4	; 180
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	90 93 32 01 	sts	0x0132, r25
     c6a:	80 93 31 01 	sts	0x0131, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     c6e:	82 e0       	ldi	r24, 0x02	; 2
     c70:	80 93 2b 01 	sts	0x012B, r24
						appl.LastEvent = JP1_HELD;			/* update  LastEvent */
     c74:	84 e0       	ldi	r24, 0x04	; 4
     c76:	80 93 2d 01 	sts	0x012D, r24
	//rprintf("mT=%d,0x%x\n",appl.ModeTimer,appl.ModeTimer);
	rprintf("dC=%d\n\n",appl.DispCode);
	//rprintf("lE=%d\n\n",appl.LastEvent);
#endif
#endif
}
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	08 95       	ret

00000c82 <AppWaitZeroCrossing>:
* Returns    : true/false means failed or pass
*********************************************************************************************************
*/
void AppWaitZeroCrossing(void)
{
	while(appl.system.fSysPwrZC == 0);
     c82:	80 91 16 01 	lds	r24, 0x0116
     c86:	80 ff       	sbrs	r24, 0
     c88:	fc cf       	rjmp	.-8      	; 0xc82 <AppWaitZeroCrossing>
	appl.system.fSysPwrZC = 0;
     c8a:	80 91 16 01 	lds	r24, 0x0116
     c8e:	8e 7f       	andi	r24, 0xFE	; 254
     c90:	80 93 16 01 	sts	0x0116, r24
     c94:	08 95       	ret

00000c96 <ButtonInitEx>:
void ButtonInitEx(void)
{	
	/* 
	Set PC1-PC0 as input, the tow IO with external pull up 10K resistor.
	*/
	DDRC &= ((1<<DDC1) | (1<<DDC0));
     c96:	84 b3       	in	r24, 0x14	; 20
     c98:	83 70       	andi	r24, 0x03	; 3
     c9a:	84 bb       	out	0x14, r24	; 20
     c9c:	08 95       	ret

00000c9e <ButtonGetIO_StateEx>:
*/
ButtonDataType ButtonGetIO_StateEx(void)
{
	ButtonDataType io_state;
	
	io_state = (~PINC) & ((1<<PINC1) | (1<<PINC0));	/* Get PC1-PC0 IO state */
     c9e:	83 b3       	in	r24, 0x13	; 19
     ca0:	80 95       	com	r24
	
	return  io_state;
}
     ca2:	83 70       	andi	r24, 0x03	; 3
     ca4:	08 95       	ret

00000ca6 <ButtonJMP1ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP1) 
     ca6:	80 91 67 01 	lds	r24, 0x0167
	{
		return true;
	}
    
    return false;
}
     caa:	81 70       	andi	r24, 0x01	; 1
     cac:	08 95       	ret

00000cae <ButtonJMP1HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1HeldEvent(void)
{
	if (button.buttonsHeld.JMP1) 
     cae:	80 91 68 01 	lds	r24, 0x0168
	{
		return true;
	}
    
    return false;
}
     cb2:	81 70       	andi	r24, 0x01	; 1
     cb4:	08 95       	ret

00000cb6 <ButtonJMP2ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP2) 
     cb6:	80 91 67 01 	lds	r24, 0x0167
	{
		return true;
	}
    
    return false;
}
     cba:	86 95       	lsr	r24
     cbc:	81 70       	andi	r24, 0x01	; 1
     cbe:	08 95       	ret

00000cc0 <ButtonJMP2HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2HeldEvent(void)
{
	if (button.buttonsHeld.JMP2) 
     cc0:	80 91 68 01 	lds	r24, 0x0168
	{
		return true;
	}
    
    return false;
}
     cc4:	86 95       	lsr	r24
     cc6:	81 70       	andi	r24, 0x01	; 1
     cc8:	08 95       	ret

00000cca <LEDInit>:
	uint8_t i;
	
	/* 
	Set PB2-PB1 as output to drive to LEDs, default turn off all LEDs
	*/
	DDRB &= ~((1<<DDB2) | (1<<DDB1));
     cca:	87 b3       	in	r24, 0x17	; 23
     ccc:	89 7f       	andi	r24, 0xF9	; 249
     cce:	87 bb       	out	0x17, r24	; 23
	DDRB |= ((1<<DDB2) | (1<<DDB1));
     cd0:	87 b3       	in	r24, 0x17	; 23
     cd2:	86 60       	ori	r24, 0x06	; 6
     cd4:	87 bb       	out	0x17, r24	; 23
	PORTB |= ((1<<DDB2) | (1<<DDB1));
     cd6:	88 b3       	in	r24, 0x18	; 24
     cd8:	86 60       	ori	r24, 0x06	; 6
     cda:	88 bb       	out	0x18, r24	; 24
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
     cdc:	e9 e4       	ldi	r30, 0x49	; 73
     cde:	f1 e0       	ldi	r31, 0x01	; 1
     ce0:	80 81       	ld	r24, Z
     ce2:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
     ce4:	84 60       	ori	r24, 0x04	; 4
     ce6:	88 60       	ori	r24, 0x08	; 8
     ce8:	80 83       	st	Z, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
     cea:	9c e3       	ldi	r25, 0x3C	; 60
     cec:	91 83       	std	Z+1, r25	; 0x01
	DDRB |= ((1<<DDB2) | (1<<DDB1));
	PORTB |= ((1<<DDB2) | (1<<DDB1));
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
     cee:	ab e4       	ldi	r26, 0x4B	; 75
     cf0:	b1 e0       	ldi	r27, 0x01	; 1
     cf2:	8c 91       	ld	r24, X
     cf4:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
     cf6:	84 60       	ori	r24, 0x04	; 4
     cf8:	88 60       	ori	r24, 0x08	; 8
     cfa:	8c 93       	st	X, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
     cfc:	93 83       	std	Z+3, r25	; 0x03
     cfe:	08 95       	ret

00000d00 <LEDCycleUpdate>:
*
*********************************************************************************************************
*/

void LEDCycleUpdate(void)
{
     d00:	aa e4       	ldi	r26, 0x4A	; 74
     d02:	b1 e0       	ldi	r27, 0x01	; 1
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
     d08:	ca 01       	movw	r24, r20
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	fc 01       	movw	r30, r24
     d10:	e7 5b       	subi	r30, 0xB7	; 183
     d12:	fe 4f       	sbci	r31, 0xFE	; 254
     d14:	30 81       	ld	r19, Z
     d16:	37 70       	andi	r19, 0x07	; 7
		ft = LEDs[i].flashTimer;
     d18:	2c 91       	ld	r18, X
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
     d1a:	34 30       	cpi	r19, 0x04	; 4
     d1c:	19 f0       	breq	.+6      	; 0xd24 <LEDCycleUpdate+0x24>
	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
		ft = LEDs[i].flashTimer;
		
		ft += rate;
     d1e:	23 0f       	add	r18, r19
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
     d20:	2d 33       	cpi	r18, 0x3D	; 61
     d22:	38 f0       	brcs	.+14     	; 0xd32 <LEDCycleUpdate+0x32>
		{
			ft = 0;
			LEDs[i].led.state = S_OFF;
     d24:	fc 01       	movw	r30, r24
     d26:	e7 5b       	subi	r30, 0xB7	; 183
     d28:	fe 4f       	sbci	r31, 0xFE	; 254
     d2a:	20 81       	ld	r18, Z
     d2c:	28 60       	ori	r18, 0x08	; 8
     d2e:	20 83       	st	Z, r18
		ft = LEDs[i].flashTimer;
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
		{
			ft = 0;
     d30:	20 e0       	ldi	r18, 0x00	; 0
			LEDs[i].led.state = S_OFF;
		}
		LEDs[i].flashTimer = ft;
     d32:	2c 93       	st	X, r18
		
		if((rate == LED_0HZ) || (ft > (LED_ONE_SEC/2)))
     d34:	33 23       	and	r19, r19
     d36:	11 f0       	breq	.+4      	; 0xd3c <LEDCycleUpdate+0x3c>
     d38:	2f 31       	cpi	r18, 0x1F	; 31
     d3a:	30 f0       	brcs	.+12     	; 0xd48 <LEDCycleUpdate+0x48>
		{
			LEDs[i].led.state = S_ON;
     d3c:	fc 01       	movw	r30, r24
     d3e:	e7 5b       	subi	r30, 0xB7	; 183
     d40:	fe 4f       	sbci	r31, 0xFE	; 254
     d42:	80 81       	ld	r24, Z
     d44:	87 7f       	andi	r24, 0xF7	; 247
     d46:	80 83       	st	Z, r24
     d48:	12 96       	adiw	r26, 0x02	; 2
{
	LED_RATE rate;
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
     d4a:	41 30       	cpi	r20, 0x01	; 1
     d4c:	51 05       	cpc	r21, r1
     d4e:	19 f0       	breq	.+6      	; 0xd56 <LEDCycleUpdate+0x56>
     d50:	41 e0       	ldi	r20, 0x01	; 1
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	d9 cf       	rjmp	.-78     	; 0xd08 <LEDCycleUpdate+0x8>
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */

	if(LEDs[0].led.state == S_OFF)
     d56:	80 91 49 01 	lds	r24, 0x0149
     d5a:	83 ff       	sbrs	r24, 3
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <LEDCycleUpdate+0x62>
	{
		state |= (1<<DDB1);
     d5e:	82 e0       	ldi	r24, 0x02	; 2
     d60:	01 c0       	rjmp	.+2      	; 0xd64 <LEDCycleUpdate+0x64>
*
*********************************************************************************************************
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */
     d62:	80 e0       	ldi	r24, 0x00	; 0
	if(LEDs[0].led.state == S_OFF)
	{
		state |= (1<<DDB1);
	}
	
	if(LEDs[1].led.state == S_OFF)
     d64:	90 91 4b 01 	lds	r25, 0x014B
     d68:	93 fd       	sbrc	r25, 3
	{
		state |= (1<<DDB2);
     d6a:	84 60       	ori	r24, 0x04	; 4
	}

	PORTB &= ~((1<<DDB2) | (1<<DDB1));
     d6c:	98 b3       	in	r25, 0x18	; 24
     d6e:	99 7f       	andi	r25, 0xF9	; 249
     d70:	98 bb       	out	0x18, r25	; 24
	PORTB |= state;
     d72:	98 b3       	in	r25, 0x18	; 24
     d74:	89 2b       	or	r24, r25
     d76:	88 bb       	out	0x18, r24	; 24
     d78:	08 95       	ret

00000d7a <main>:
int main(void)
{	
	/*
	Calll all initial function
	*/
	McuInit();
     d7a:	0e 94 be 04 	call	0x97c	; 0x97c <McuInit>
	ApplInit();
     d7e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <ApplInit>

	while(1)
	{
		AppWaitZeroCrossing();
     d82:	0e 94 41 06 	call	0xc82	; 0xc82 <AppWaitZeroCrossing>
		ButtonCycleUpdate();
     d86:	0e 94 ff 07 	call	0xffe	; 0xffe <ButtonCycleUpdate>
		AppCycleUpdate();
     d8a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <AppCycleUpdate>
		LEDCycleUpdate();
     d8e:	0e 94 80 06 	call	0xd00	; 0xd00 <LEDCycleUpdate>
		SSDCycleUpdate();
     d92:	0e 94 02 07 	call	0xe04	; 0xe04 <SSDCycleUpdate>
		MeasureCycleUpdate();
     d96:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <MeasureCycleUpdate>
	}
     d9a:	f3 cf       	rjmp	.-26     	; 0xd82 <main+0x8>

00000d9c <MeasureOutputCompare2>:
*/
void MeasureOutputCompare2(void)
{
	uint16_t SampleValue;
	
	OCR2 = TCNT2 + MEASURE_OCR2;
     d9c:	84 b5       	in	r24, 0x24	; 36
     d9e:	87 5c       	subi	r24, 0xC7	; 199
     da0:	83 bd       	out	0x23, r24	; 35
     da2:	08 95       	ret

00000da4 <MeasureInit>:
* Returns    : none
*********************************************************************************************************
*/
void MeasureInit(void)
{
	DDRD &= ~((1<<DDD3) | (1<<DDD2));	/* Set PD3(ioHIGHT) and PD2(ioLOW) as input */
     da4:	81 b3       	in	r24, 0x11	; 17
     da6:	83 7f       	andi	r24, 0xF3	; 243
     da8:	81 bb       	out	0x11, r24	; 17
*
*********************************************************************************************************
*/
void MeasureKZ1PWM(uint16_t dutyCycle)
{
	timer1PWMBSet(dutyCycle);
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 0f 02 	call	0x41e	; 0x41e <timer1PWMBSet>
*
*********************************************************************************************************
*/
void MeasureKZ2PWM(uint16_t dutyCycle)
{
	timer1PWMASet(dutyCycle);
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 94 0c 02 	call	0x418	; 0x418 <timer1PWMASet>
	DDRD &= ~((1<<DDD3) | (1<<DDD2));	/* Set PD3(ioHIGHT) and PD2(ioLOW) as input */
	
	MeasureKZ1PWM(0);// 255 0
	MeasureKZ2PWM(0);

	timerAttach(TIMER2OUTCOMPARE_INT, MeasureOutputCompare2);
     dba:	6e ec       	ldi	r22, 0xCE	; 206
     dbc:	76 e0       	ldi	r23, 0x06	; 6
     dbe:	86 e0       	ldi	r24, 0x06	; 6
     dc0:	0c 94 bf 01 	jmp	0x37e	; 0x37e <timerAttach>

00000dc4 <MeasureCycleUpdate>:
* Notes      : none
*
*********************************************************************************************************
*/
void MeasureCycleUpdate(void)
{
     dc4:	08 95       	ret

00000dc6 <MeasureGetResult0>:
*********************************************************************************************************
*/
uint16_t MeasureGetResult0(void)
{
	return mData.calcResult[MEASURE_ADC0].sum;
}
     dc6:	80 91 4d 01 	lds	r24, 0x014D
     dca:	90 91 4e 01 	lds	r25, 0x014E
     dce:	08 95       	ret

00000dd0 <__vector_1>:
* Notes      : none
*
*********************************************************************************************************
*/
ISR(INT0_vect)
{
     dd0:	1f 92       	push	r1
     dd2:	0f 92       	push	r0
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	0f 92       	push	r0
     dd8:	11 24       	eor	r1, r1
     dda:	8f 93       	push	r24
	if(ioLOW)
     ddc:	80 b3       	in	r24, 0x10	; 16
	{

	}
}
     dde:	8f 91       	pop	r24
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	0f 90       	pop	r0
     de6:	1f 90       	pop	r1
     de8:	18 95       	reti

00000dea <__vector_2>:
* Notes      : none
*
*********************************************************************************************************
*/
ISR(INT1_vect)
{
     dea:	1f 92       	push	r1
     dec:	0f 92       	push	r0
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	0f 92       	push	r0
     df2:	11 24       	eor	r1, r1
     df4:	8f 93       	push	r24
	if(ioHIGHT==0)
     df6:	80 b3       	in	r24, 0x10	; 16
	{

	}
}
     df8:	8f 91       	pop	r24
     dfa:	0f 90       	pop	r0
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	0f 90       	pop	r0
     e00:	1f 90       	pop	r1
     e02:	18 95       	reti

00000e04 <SSDCycleUpdate>:
*
*********************************************************************************************************
*/

void SSDCycleUpdate(void)
{
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
*/
void SSDShitfOutData(void)
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
     e08:	40 91 61 01 	lds	r20, 0x0161
     e0c:	50 91 62 01 	lds	r21, 0x0162
     e10:	60 91 63 01 	lds	r22, 0x0163
     e14:	70 91 64 01 	lds	r23, 0x0164
     e18:	80 e2       	ldi	r24, 0x20	; 32
	
	for(i = 0; i < 32; i++)
	{
		bitVal = 0;
		if(DispValTemp & 0x80000000)
     e1a:	8a 01       	movw	r16, r20
     e1c:	9b 01       	movw	r18, r22
		{
			bitVal = 1;
		}
		DispValTemp <<= 1;
     e1e:	44 0f       	add	r20, r20
     e20:	55 1f       	adc	r21, r21
     e22:	66 1f       	adc	r22, r22
     e24:	77 1f       	adc	r23, r23

		SSD_CLK_CLR();
     e26:	af 98       	cbi	0x15, 7	; 21
		SSD_DAT_CLR();
     e28:	ae 98       	cbi	0x15, 6	; 21
		if(bitVal)
     e2a:	37 fd       	sbrc	r19, 7
		{
			SSD_DAT_SET();
     e2c:	ae 9a       	sbi	0x15, 6	; 21
		}
		SSD_CLK_SET();
     e2e:	af 9a       	sbi	0x15, 7	; 21
     e30:	81 50       	subi	r24, 0x01	; 1
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
	
	for(i = 0; i < 32; i++)
     e32:	99 f7       	brne	.-26     	; 0xe1a <SSDCycleUpdate+0x16>
void SSDUpdateOnOff(void)
{
	SSD_RATE rate;
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
     e34:	90 91 5f 01 	lds	r25, 0x015F
     e38:	97 70       	andi	r25, 0x07	; 7
	ft = SSD.flashTimer;
     e3a:	80 91 60 01 	lds	r24, 0x0160
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
     e3e:	94 30       	cpi	r25, 0x04	; 4
     e40:	19 f0       	breq	.+6      	; 0xe48 <SSDCycleUpdate+0x44>
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
	ft = SSD.flashTimer;
	
	ft += rate;
     e42:	89 0f       	add	r24, r25
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
     e44:	8d 33       	cpi	r24, 0x3D	; 61
     e46:	30 f0       	brcs	.+12     	; 0xe54 <SSDCycleUpdate+0x50>
	{
		ft = 0;
		SSD.ssd.state = SSD_OFF;
     e48:	80 91 5f 01 	lds	r24, 0x015F
     e4c:	8f 7d       	andi	r24, 0xDF	; 223
     e4e:	80 93 5f 01 	sts	0x015F, r24
	ft = SSD.flashTimer;
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
	{
		ft = 0;
     e52:	80 e0       	ldi	r24, 0x00	; 0
		SSD.ssd.state = SSD_OFF;
	}
	SSD.flashTimer = ft;
     e54:	80 93 60 01 	sts	0x0160, r24
	
	if((rate == SSD_0HZ) || (ft > (SSD_ONE_SEC/2)))
     e58:	99 23       	and	r25, r25
     e5a:	11 f0       	breq	.+4      	; 0xe60 <SSDCycleUpdate+0x5c>
     e5c:	8f 31       	cpi	r24, 0x1F	; 31
     e5e:	28 f0       	brcs	.+10     	; 0xe6a <SSDCycleUpdate+0x66>
	{
		SSD.ssd.state = SSD_ON;
     e60:	80 91 5f 01 	lds	r24, 0x015F
     e64:	80 62       	ori	r24, 0x20	; 32
     e66:	80 93 5f 01 	sts	0x015F, r24
*
*********************************************************************************************************
*/
void SSDUpdateComPin(void)
{
	if(SSD.ssd.state == SSD_OFF)		/* if ssd is in off state, cut power to green and color */
     e6a:	80 91 5f 01 	lds	r24, 0x015F
     e6e:	85 fd       	sbrc	r24, 5
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <SSDCycleUpdate+0x72>
	{
		SSD_RED_CLR();
     e72:	ac 98       	cbi	0x15, 4	; 21
     e74:	03 c0       	rjmp	.+6      	; 0xe7c <SSDCycleUpdate+0x78>
		SSD_GRN_CLR();
	}
	else
	{
		if(SSD.ssd.color == SSD_RED)		/* dispay red color */
     e76:	88 71       	andi	r24, 0x18	; 24
     e78:	19 f4       	brne	.+6      	; 0xe80 <SSDCycleUpdate+0x7c>
		{
			SSD_RED_SET();	/* give power to red ssd common pin */
     e7a:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_CLR();	/* cut power to green ssd common pin */
     e7c:	ad 98       	cbi	0x15, 5	; 21
     e7e:	06 c0       	rjmp	.+12     	; 0xe8c <SSDCycleUpdate+0x88>
		}
		else if(SSD.ssd.color == SSD_GREEN) /* dispay green color */
     e80:	88 30       	cpi	r24, 0x08	; 8
     e82:	11 f4       	brne	.+4      	; 0xe88 <SSDCycleUpdate+0x84>
		{
			SSD_RED_CLR();
     e84:	ac 98       	cbi	0x15, 4	; 21
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <SSDCycleUpdate+0x86>
			SSD_GRN_SET();
		}
		else								/* dispay amber color */
		{
			SSD_RED_SET();
     e88:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_SET();
     e8a:	ad 9a       	sbi	0x15, 5	; 21
void SSDCycleUpdate(void)
{
	SSDShitfOutData();
	SSDUpdateOnOff();
	SSDUpdateComPin();
}
     e8c:	1f 91       	pop	r17
     e8e:	0f 91       	pop	r16
     e90:	08 95       	ret

00000e92 <SSDDisplayDec>:
* Notes      :none
*
*********************************************************************************************************
*/
void SSDDisplayDec(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	8c 01       	movw	r16, r24
     e9c:	36 2f       	mov	r19, r22
uint32_t SSDHex2Dec(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = hexValue/1000;
     e9e:	68 ee       	ldi	r22, 0xE8	; 232
     ea0:	73 e0       	ldi	r23, 0x03	; 3
     ea2:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__udivmodhi4>
     ea6:	c6 2f       	mov	r28, r22
	dataSTR.hundred   = hexValue%1000/100;
     ea8:	64 e6       	ldi	r22, 0x64	; 100
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__udivmodhi4>
     eb0:	d6 2f       	mov	r29, r22
	dataSTR.tens      = hexValue%1000%100/10;
     eb2:	6a e0       	ldi	r22, 0x0A	; 10
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__udivmodhi4>
     eba:	56 2f       	mov	r21, r22
{
	SSD_DISP_T ValueCopy;
	
	SSD.DispVal.value = SSDHex2Dec(DispData);
	ValueCopy.value = SSD.DispVal.value;
	SSD.ssd.rate = rate;
     ebc:	37 70       	andi	r19, 0x07	; 7
     ebe:	60 91 5f 01 	lds	r22, 0x015F
     ec2:	60 7e       	andi	r22, 0xE0	; 224
	SSD.ssd.color = color;
     ec4:	43 70       	andi	r20, 0x03	; 3
     ec6:	94 2f       	mov	r25, r20
     ec8:	99 0f       	add	r25, r25
     eca:	99 0f       	add	r25, r25
     ecc:	99 0f       	add	r25, r25
     ece:	46 2f       	mov	r20, r22
     ed0:	43 2b       	or	r20, r19
     ed2:	49 2b       	or	r20, r25
     ed4:	40 93 5f 01 	sts	0x015F, r20
	
	/* Set display null for all 4 seven segment displays */
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
     ed8:	e0 ea       	ldi	r30, 0xA0	; 160
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	94 91       	lpm	r25, Z
     ede:	90 93 64 01 	sts	0x0164, r25
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
     ee2:	94 91       	lpm	r25, Z
     ee4:	90 93 63 01 	sts	0x0163, r25
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
     ee8:	94 91       	lpm	r25, Z
     eea:	90 93 62 01 	sts	0x0162, r25
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
     eee:	e4 91       	lpm	r30, Z
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0

	/* Set display remove zero before number */
	if(DispData > 1000)
     ef4:	09 3e       	cpi	r16, 0xE9	; 233
     ef6:	83 e0       	ldi	r24, 0x03	; 3
     ef8:	18 07       	cpc	r17, r24
     efa:	78 f0       	brcs	.+30     	; 0xf1a <SSDDisplayDec+0x88>
	{
		SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[ValueCopy.thousands]);
     efc:	ec 2f       	mov	r30, r28
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	e0 57       	subi	r30, 0x70	; 112
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	84 91       	lpm	r24, Z
     f06:	80 93 64 01 	sts	0x0164, r24
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
     f0a:	ed 2f       	mov	r30, r29
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	e0 57       	subi	r30, 0x70	; 112
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	e4 91       	lpm	r30, Z
     f14:	e0 93 63 01 	sts	0x0163, r30
     f18:	0e c0       	rjmp	.+28     	; 0xf36 <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 100)
     f1a:	05 36       	cpi	r16, 0x65	; 101
     f1c:	11 05       	cpc	r17, r1
     f1e:	40 f0       	brcs	.+16     	; 0xf30 <SSDDisplayDec+0x9e>
	{
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
     f20:	ed 2f       	mov	r30, r29
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	e0 57       	subi	r30, 0x70	; 112
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	84 91       	lpm	r24, Z
     f2a:	80 93 63 01 	sts	0x0163, r24
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 10)
     f30:	0b 30       	cpi	r16, 0x0B	; 11
     f32:	11 05       	cpc	r17, r1
     f34:	38 f0       	brcs	.+14     	; 0xf44 <SSDDisplayDec+0xb2>
	{
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
     f36:	e5 2f       	mov	r30, r21
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	e0 57       	subi	r30, 0x70	; 112
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	e4 91       	lpm	r30, Z
     f40:	e0 93 62 01 	sts	0x0162, r30
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else
	{
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
     f44:	f9 01       	movw	r30, r18
     f46:	e0 57       	subi	r30, 0x70	; 112
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	e4 91       	lpm	r30, Z
     f4c:	e0 93 61 01 	sts	0x0161, r30
	}
}
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	08 95       	ret

00000f5a <SSDDisplayHex>:
uint32_t SSDHex2Hex(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = (hexValue >> 12) & 0x000f;
     f5a:	39 2f       	mov	r19, r25
     f5c:	32 95       	swap	r19
     f5e:	3f 70       	andi	r19, 0x0F	; 15
	dataSTR.hundred   = (hexValue >> 8) & 0x000f;
     f60:	29 2f       	mov	r18, r25
     f62:	2f 70       	andi	r18, 0x0F	; 15
	dataSTR.tens      = (hexValue >> 4) & 0x000f;
     f64:	fc 01       	movw	r30, r24
     f66:	94 e0       	ldi	r25, 0x04	; 4
     f68:	f6 95       	lsr	r31
     f6a:	e7 95       	ror	r30
     f6c:	9a 95       	dec	r25
     f6e:	e1 f7       	brne	.-8      	; 0xf68 <SSDDisplayHex+0xe>
     f70:	9e 2f       	mov	r25, r30
     f72:	9f 70       	andi	r25, 0x0F	; 15
	dataSTR.units     = (hexValue >> 0) & 0x000f;
     f74:	8f 70       	andi	r24, 0x0F	; 15
*
*********************************************************************************************************
*/
void SSDDisplayHex(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
	SSD.DispVal.value = SSDHex2Hex(DispData);
     f76:	af e5       	ldi	r26, 0x5F	; 95
     f78:	b1 e0       	ldi	r27, 0x01	; 1
	SSD.ssd.rate = rate;
     f7a:	67 70       	andi	r22, 0x07	; 7
     f7c:	7c 91       	ld	r23, X
     f7e:	70 7e       	andi	r23, 0xE0	; 224
	SSD.ssd.color = color;
     f80:	43 70       	andi	r20, 0x03	; 3
     f82:	54 2f       	mov	r21, r20
     f84:	55 0f       	add	r21, r21
     f86:	55 0f       	add	r21, r21
     f88:	55 0f       	add	r21, r21
     f8a:	47 2f       	mov	r20, r23
     f8c:	46 2b       	or	r20, r22
     f8e:	45 2b       	or	r20, r21
     f90:	4c 93       	st	X, r20
	
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD.DispVal.thousands]);
     f92:	e3 2f       	mov	r30, r19
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	e0 57       	subi	r30, 0x70	; 112
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	34 91       	lpm	r19, Z
     f9c:	15 96       	adiw	r26, 0x05	; 5
     f9e:	3c 93       	st	X, r19
     fa0:	15 97       	sbiw	r26, 0x05	; 5
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD.DispVal.hundred]);
     fa2:	e2 2f       	mov	r30, r18
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	e0 57       	subi	r30, 0x70	; 112
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	24 91       	lpm	r18, Z
     fac:	14 96       	adiw	r26, 0x04	; 4
     fae:	2c 93       	st	X, r18
     fb0:	14 97       	sbiw	r26, 0x04	; 4
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD.DispVal.tens]);
     fb2:	e9 2f       	mov	r30, r25
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	e0 57       	subi	r30, 0x70	; 112
     fb8:	ff 4f       	sbci	r31, 0xFF	; 255
     fba:	e4 91       	lpm	r30, Z
     fbc:	13 96       	adiw	r26, 0x03	; 3
     fbe:	ec 93       	st	X, r30
     fc0:	13 97       	sbiw	r26, 0x03	; 3
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD.DispVal.units]);
     fc2:	e8 2f       	mov	r30, r24
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	e0 57       	subi	r30, 0x70	; 112
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	e4 91       	lpm	r30, Z
     fcc:	12 96       	adiw	r26, 0x02	; 2
     fce:	ec 93       	st	X, r30
     fd0:	08 95       	ret

00000fd2 <SSDInit>:
void SSDInit(void)
{	
	/* 
	Set PB7-PB4 as output to drive seven segment display, default display turn off
	*/
	DDRC &= ~((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
     fd2:	84 b3       	in	r24, 0x14	; 20
     fd4:	8f 70       	andi	r24, 0x0F	; 15
     fd6:	84 bb       	out	0x14, r24	; 20
	DDRC |= ((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
     fd8:	84 b3       	in	r24, 0x14	; 20
     fda:	80 6f       	ori	r24, 0xF0	; 240
     fdc:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~((1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4));
     fde:	85 b3       	in	r24, 0x15	; 21
     fe0:	8f 70       	andi	r24, 0x0F	; 15
     fe2:	85 bb       	out	0x15, r24	; 21

	SSDDisplayHex(0, SSD_R_OFF, SSD_RED);	/* Initial turn off all SSDs */
     fe4:	40 e0       	ldi	r20, 0x00	; 0
     fe6:	64 e0       	ldi	r22, 0x04	; 4
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <SSDDisplayHex>

00000ff0 <ADCInit>:
*********************************************************************************************************
*/

void ADCInit (void)
{
	ADMUX  = (1 << REFS0);	/* use external AVCC as AREF,the result is right adjusted,10bits format */	
     ff0:	80 e4       	ldi	r24, 0x40	; 64
     ff2:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN) | (0 << ADIE) | (1 << ADIF) | ADPS2_0;	/* ADC Enable, Clear interrupt flag,set ADC Prescaler Selections */
     ff4:	84 e9       	ldi	r24, 0x94	; 148
     ff6:	86 b9       	out	0x06, r24	; 6
     ff8:	08 95       	ret

00000ffa <ButtonInit>:
* Returns    : none
*********************************************************************************************************
*/
void ButtonInit(void)
{
	ButtonInitEx();
     ffa:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <ButtonInitEx>

00000ffe <ButtonCycleUpdate>:
* Notes      : None
*
*/
ButtonDataType ButtonGetIO_State(void)
{
	return  ButtonGetIO_StateEx();
     ffe:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ButtonGetIO_StateEx>
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
    1002:	90 91 65 01 	lds	r25, 0x0165
    1006:	89 2b       	or	r24, r25
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
    1008:	10 92 65 01 	sts	0x0165, r1
	b = button.buttonsLastCycle.bVal;
    100c:	90 91 66 01 	lds	r25, 0x0166
	holdTime = button.buttonHoldTime;
    1010:	20 91 6b 01 	lds	r18, 0x016B
    1014:	30 91 6c 01 	lds	r19, 0x016C
	
	if (button.buttonsReleased.bVal != 0) {		
    1018:	40 91 67 01 	lds	r20, 0x0167
    101c:	44 23       	and	r20, r20
    101e:	19 f0       	breq	.+6      	; 0x1026 <ButtonCycleUpdate+0x28>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
    1020:	40 93 69 01 	sts	0x0169, r20
    1024:	05 c0       	rjmp	.+10     	; 0x1030 <ButtonCycleUpdate+0x32>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
    1026:	2d 33       	cpi	r18, 0x3D	; 61
    1028:	31 05       	cpc	r19, r1
    102a:	10 f0       	brcs	.+4      	; 0x1030 <ButtonCycleUpdate+0x32>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
    102c:	10 92 69 01 	sts	0x0169, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
    1030:	10 92 67 01 	sts	0x0167, r1
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
    1034:	10 92 6a 01 	sts	0x016A, r1
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
    1038:	89 13       	cpse	r24, r25
    103a:	0f c0       	rjmp	.+30     	; 0x105a <ButtonCycleUpdate+0x5c>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
    103c:	2f 5f       	subi	r18, 0xFF	; 255
    103e:	3f 4f       	sbci	r19, 0xFF	; 255
    1040:	24 32       	cpi	r18, 0x24	; 36
    1042:	31 05       	cpc	r19, r1
    1044:	18 f4       	brcc	.+6      	; 0x104c <ButtonCycleUpdate+0x4e>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
    1046:	10 92 68 01 	sts	0x0168, r1
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <ButtonCycleUpdate+0x52>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
    104c:	80 93 68 01 	sts	0x0168, r24
		}	
		button.buttonHoldTime = holdTime;
    1050:	30 93 6c 01 	sts	0x016C, r19
    1054:	20 93 6b 01 	sts	0x016B, r18
    1058:	08 95       	ret
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
    105a:	80 93 66 01 	sts	0x0166, r24
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
    105e:	80 95       	com	r24
    1060:	89 23       	and	r24, r25
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
    1062:	90 91 68 01 	lds	r25, 0x0168
    1066:	98 23       	and	r25, r24
    1068:	81 f4       	brne	.+32     	; 0x108a <ButtonCycleUpdate+0x8c>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
    106a:	10 92 6c 01 	sts	0x016C, r1
    106e:	10 92 6b 01 	sts	0x016B, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
    1072:	23 50       	subi	r18, 0x03	; 3
    1074:	31 09       	sbc	r19, r1
    1076:	20 32       	cpi	r18, 0x20	; 32
    1078:	31 05       	cpc	r19, r1
    107a:	38 f4       	brcc	.+14     	; 0x108a <ButtonCycleUpdate+0x8c>
				button.buttonsReleased.bVal = buttons;	
    107c:	80 93 67 01 	sts	0x0167, r24
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
    1080:	90 91 69 01 	lds	r25, 0x0169
    1084:	89 23       	and	r24, r25
    1086:	80 93 6a 01 	sts	0x016A, r24
    108a:	08 95       	ret

0000108c <ButtonGetHoldTime>:
*/

uint16_t ButtonGetHoldTime(void)
{
	return button.buttonHoldTime;
}
    108c:	80 91 6b 01 	lds	r24, 0x016B
    1090:	90 91 6c 01 	lds	r25, 0x016C
    1094:	08 95       	ret

00001096 <ButtonGetReleased>:
*/

ButtonDataType ButtonGetReleased(void)
{
	return button.buttonsReleased.bVal;
}
    1096:	80 91 67 01 	lds	r24, 0x0167
    109a:	08 95       	ret

0000109c <ButtonGetHeld>:
*/

ButtonDataType ButtonGetHeld (void)
{
	return button.buttonsHeld.bVal;
}
    109c:	80 91 68 01 	lds	r24, 0x0168
    10a0:	08 95       	ret

000010a2 <__udivmodhi4>:
    10a2:	aa 1b       	sub	r26, r26
    10a4:	bb 1b       	sub	r27, r27
    10a6:	51 e1       	ldi	r21, 0x11	; 17
    10a8:	07 c0       	rjmp	.+14     	; 0x10b8 <__udivmodhi4_ep>

000010aa <__udivmodhi4_loop>:
    10aa:	aa 1f       	adc	r26, r26
    10ac:	bb 1f       	adc	r27, r27
    10ae:	a6 17       	cp	r26, r22
    10b0:	b7 07       	cpc	r27, r23
    10b2:	10 f0       	brcs	.+4      	; 0x10b8 <__udivmodhi4_ep>
    10b4:	a6 1b       	sub	r26, r22
    10b6:	b7 0b       	sbc	r27, r23

000010b8 <__udivmodhi4_ep>:
    10b8:	88 1f       	adc	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	5a 95       	dec	r21
    10be:	a9 f7       	brne	.-22     	; 0x10aa <__udivmodhi4_loop>
    10c0:	80 95       	com	r24
    10c2:	90 95       	com	r25
    10c4:	bc 01       	movw	r22, r24
    10c6:	cd 01       	movw	r24, r26
    10c8:	08 95       	ret

000010ca <__udivmodsi4>:
    10ca:	a1 e2       	ldi	r26, 0x21	; 33
    10cc:	1a 2e       	mov	r1, r26
    10ce:	aa 1b       	sub	r26, r26
    10d0:	bb 1b       	sub	r27, r27
    10d2:	fd 01       	movw	r30, r26
    10d4:	0d c0       	rjmp	.+26     	; 0x10f0 <__udivmodsi4_ep>

000010d6 <__udivmodsi4_loop>:
    10d6:	aa 1f       	adc	r26, r26
    10d8:	bb 1f       	adc	r27, r27
    10da:	ee 1f       	adc	r30, r30
    10dc:	ff 1f       	adc	r31, r31
    10de:	a2 17       	cp	r26, r18
    10e0:	b3 07       	cpc	r27, r19
    10e2:	e4 07       	cpc	r30, r20
    10e4:	f5 07       	cpc	r31, r21
    10e6:	20 f0       	brcs	.+8      	; 0x10f0 <__udivmodsi4_ep>
    10e8:	a2 1b       	sub	r26, r18
    10ea:	b3 0b       	sbc	r27, r19
    10ec:	e4 0b       	sbc	r30, r20
    10ee:	f5 0b       	sbc	r31, r21

000010f0 <__udivmodsi4_ep>:
    10f0:	66 1f       	adc	r22, r22
    10f2:	77 1f       	adc	r23, r23
    10f4:	88 1f       	adc	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	1a 94       	dec	r1
    10fa:	69 f7       	brne	.-38     	; 0x10d6 <__udivmodsi4_loop>
    10fc:	60 95       	com	r22
    10fe:	70 95       	com	r23
    1100:	80 95       	com	r24
    1102:	90 95       	com	r25
    1104:	9b 01       	movw	r18, r22
    1106:	ac 01       	movw	r20, r24
    1108:	bd 01       	movw	r22, r26
    110a:	cf 01       	movw	r24, r30
    110c:	08 95       	ret

0000110e <__tablejump2__>:
    110e:	ee 0f       	add	r30, r30
    1110:	ff 1f       	adc	r31, r31
    1112:	05 90       	lpm	r0, Z+
    1114:	f4 91       	lpm	r31, Z
    1116:	e0 2d       	mov	r30, r0
    1118:	09 94       	ijmp

0000111a <_exit>:
    111a:	f8 94       	cli

0000111c <__stop_program>:
    111c:	ff cf       	rjmp	.-2      	; 0x111c <__stop_program>
