
LevelMeterMainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000868  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000008dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ac  00800060  00800060  000008dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000090c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001911  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ad  00000000  00000000  00002449  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b1  00000000  00000000  00002df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c0  00000000  00000000  000037a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000805  00000000  00000000  00003d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001630  00000000  00000000  0000456d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00005b9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 67 00 	jmp	0xce	; 0xce <__ctors_end>
   4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  2c:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__vector_11>
  30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  34:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_13>
  38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  40:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	30 31       	cpi	r19, 0x10	; 16
  56:	32 33       	cpi	r19, 0x32	; 50
  58:	34 35       	cpi	r19, 0x54	; 84
  5a:	36 37       	cpi	r19, 0x76	; 118
  5c:	38 39       	cpi	r19, 0x98	; 152
  5e:	41 42       	sbci	r20, 0x21	; 33
  60:	43 44       	sbci	r20, 0x43	; 67
  62:	45 46       	sbci	r20, 0x65	; 101
	...

00000065 <__c.2032>:
  65:	54 79 70 65 3d 25 63 0a 00                          Type=%c..

0000006e <__c.2030>:
  6e:	50 42 74 6e 31 38 2c 43 6c 65 61 72 20 48 6f 6d     PBtn18,Clear Hom
  7e:	65 0a 00                                            e..

00000081 <__c.2028>:
  81:	50 42 74 6e 39 0a 00                                PBtn9..

00000088 <__c.2025>:
  88:	50 42 74 6e 35 0a 00                                PBtn5..

0000008f <__c.2022>:
  8f:	50 42 74 6e 31 0a 00                                PBtn1..

00000096 <__c.2019>:
  96:	50 42 74 6e 31 35 0a 00                             PBtn15..

0000009e <__c.2016>:
  9e:	50 42 74 6e 31 34 0a 00                             PBtn14..

000000a6 <__c.2013>:
  a6:	50 42 74 6e 31 33 0a 00                             PBtn13..

000000ae <__c.2010>:
  ae:	72 68 3d 25 78 0a 00                                rh=%x..

000000b5 <__c.2008>:
  b5:	72 6c 3d 25 78 0a 00                                rl=%x..

000000bc <__c.2002>:
  bc:	52 46 20 72 65 6d 6f 74 65 20 73 74 61 72 74 21     RF remote start!
  cc:	0a 00                                               ..

000000ce <__ctors_end>:
  ce:	11 24       	eor	r1, r1
  d0:	1f be       	out	0x3f, r1	; 63
  d2:	cf e5       	ldi	r28, 0x5F	; 95
  d4:	d4 e0       	ldi	r29, 0x04	; 4
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	cd bf       	out	0x3d, r28	; 61

000000da <__do_clear_bss>:
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	a0 e6       	ldi	r26, 0x60	; 96
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	ac 30       	cpi	r26, 0x0C	; 12
  e6:	b2 07       	cpc	r27, r18
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	0e 94 67 03 	call	0x6ce	; 0x6ce <main>
  ee:	0c 94 32 04 	jmp	0x864	; 0x864 <_exit>

000000f2 <__bad_interrupt>:
  f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
  f6:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
  f8:	8f b7       	in	r24, 0x3f	; 63
  fa:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
  fc:	71 83       	std	Z+1, r23	; 0x01
  fe:	60 83       	st	Z, r22
	buffer->size = size;
 100:	53 83       	std	Z+3, r21	; 0x03
 102:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
 104:	17 82       	std	Z+7, r1	; 0x07
 106:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
 108:	15 82       	std	Z+5, r1	; 0x05
 10a:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
 110:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
 112:	9f b7       	in	r25, 0x3f	; 63
 114:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
 116:	44 81       	ldd	r20, Z+4	; 0x04
 118:	55 81       	ldd	r21, Z+5	; 0x05
 11a:	41 15       	cp	r20, r1
 11c:	51 05       	cpc	r21, r1
 11e:	c9 f0       	breq	.+50     	; 0x152 <bufferGetFromFront+0x42>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
 120:	26 81       	ldd	r18, Z+6	; 0x06
 122:	37 81       	ldd	r19, Z+7	; 0x07
 124:	a0 81       	ld	r26, Z
 126:	b1 81       	ldd	r27, Z+1	; 0x01
 128:	a2 0f       	add	r26, r18
 12a:	b3 1f       	adc	r27, r19
 12c:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	3f 4f       	sbci	r19, 0xFF	; 255
 132:	37 83       	std	Z+7, r19	; 0x07
 134:	26 83       	std	Z+6, r18	; 0x06
		if(buffer->dataindex >= buffer->size)
 136:	62 81       	ldd	r22, Z+2	; 0x02
 138:	73 81       	ldd	r23, Z+3	; 0x03
 13a:	26 17       	cp	r18, r22
 13c:	37 07       	cpc	r19, r23
 13e:	20 f0       	brcs	.+8      	; 0x148 <bufferGetFromFront+0x38>
		{
			buffer->dataindex -= buffer->size;
 140:	26 1b       	sub	r18, r22
 142:	37 0b       	sbc	r19, r23
 144:	37 83       	std	Z+7, r19	; 0x07
 146:	26 83       	std	Z+6, r18	; 0x06
		}
		buffer->datalength--;
 148:	41 50       	subi	r20, 0x01	; 1
 14a:	51 09       	sbc	r21, r1
 14c:	55 83       	std	Z+5, r21	; 0x05
 14e:	44 83       	std	Z+4, r20	; 0x04
 150:	01 c0       	rjmp	.+2      	; 0x154 <bufferGetFromFront+0x44>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
 152:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
 154:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
 156:	08 95       	ret

00000158 <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	fc 01       	movw	r30, r24
 15e:	d6 2f       	mov	r29, r22
	// begin critical section
	CRITICAL_SECTION_START;
 160:	cf b7       	in	r28, 0x3f	; 63
 162:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
 164:	44 81       	ldd	r20, Z+4	; 0x04
 166:	55 81       	ldd	r21, Z+5	; 0x05
 168:	62 81       	ldd	r22, Z+2	; 0x02
 16a:	73 81       	ldd	r23, Z+3	; 0x03
 16c:	46 17       	cp	r20, r22
 16e:	57 07       	cpc	r21, r23
 170:	98 f4       	brcc	.+38     	; 0x198 <bufferAddToEnd+0x40>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
 172:	86 81       	ldd	r24, Z+6	; 0x06
 174:	97 81       	ldd	r25, Z+7	; 0x07
 176:	84 0f       	add	r24, r20
 178:	95 1f       	adc	r25, r21
 17a:	0e 94 ed 03 	call	0x7da	; 0x7da <__udivmodhi4>
 17e:	a0 81       	ld	r26, Z
 180:	b1 81       	ldd	r27, Z+1	; 0x01
 182:	a8 0f       	add	r26, r24
 184:	b9 1f       	adc	r27, r25
 186:	dc 93       	st	X, r29
		// increment the length
		buffer->datalength++;
 188:	84 81       	ldd	r24, Z+4	; 0x04
 18a:	95 81       	ldd	r25, Z+5	; 0x05
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	95 83       	std	Z+5, r25	; 0x05
 190:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
 192:	cf bf       	out	0x3f, r28	; 63
		// return success
		return -1;
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	02 c0       	rjmp	.+4      	; 0x19c <bufferAddToEnd+0x44>
	}
	// end critical section
	CRITICAL_SECTION_END;
 198:	cf bf       	out	0x3f, r28	; 63
	// return failure
	return 0;
 19a:	80 e0       	ldi	r24, 0x00	; 0
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
 1a2:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
 1a4:	4f b7       	in	r20, 0x3f	; 63
 1a6:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
 1a8:	82 81       	ldd	r24, Z+2	; 0x02
 1aa:	93 81       	ldd	r25, Z+3	; 0x03
 1ac:	24 81       	ldd	r18, Z+4	; 0x04
 1ae:	35 81       	ldd	r19, Z+5	; 0x05
	// end critical section
	CRITICAL_SECTION_END;
 1b0:	4f bf       	out	0x3f, r20	; 63
	return bytesleft;
}
 1b2:	82 1b       	sub	r24, r18
 1b4:	93 0b       	sbc	r25, r19
 1b6:	08 95       	ret

000001b8 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
 1b8:	90 93 61 00 	sts	0x0061, r25
 1bc:	80 93 60 00 	sts	0x0060, r24
 1c0:	08 95       	ret

000001c2 <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
 1c2:	cf 93       	push	r28
 1c4:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
 1c6:	8a 30       	cpi	r24, 0x0A	; 10
 1c8:	31 f4       	brne	.+12     	; 0x1d6 <rprintfChar+0x14>
		rputchar('\r');
 1ca:	e0 91 60 00 	lds	r30, 0x0060
 1ce:	f0 91 61 00 	lds	r31, 0x0061
 1d2:	8d e0       	ldi	r24, 0x0D	; 13
 1d4:	09 95       	icall
	// send character
	rputchar(c);
 1d6:	e0 91 60 00 	lds	r30, 0x0060
 1da:	f0 91 61 00 	lds	r31, 0x0061
 1de:	8c 2f       	mov	r24, r28
 1e0:	09 95       	icall
}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
 1e6:	8f 70       	andi	r24, 0x0F	; 15
 1e8:	e8 2f       	mov	r30, r24
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	ec 5a       	subi	r30, 0xAC	; 172
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	84 91       	lpm	r24, Z
 1f2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <rprintfChar>
 1f6:	08 95       	ret

000001f8 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
 1f8:	2f 92       	push	r2
 1fa:	3f 92       	push	r3
 1fc:	4f 92       	push	r4
 1fe:	5f 92       	push	r5
 200:	6f 92       	push	r6
 202:	7f 92       	push	r7
 204:	8f 92       	push	r8
 206:	9f 92       	push	r9
 208:	af 92       	push	r10
 20a:	bf 92       	push	r11
 20c:	cf 92       	push	r12
 20e:	df 92       	push	r13
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	7d 88       	ldd	r7, Y+21	; 0x15
 222:	ce 88       	ldd	r12, Y+22	; 0x16
 224:	df 88       	ldd	r13, Y+23	; 0x17
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
 226:	4e 01       	movw	r8, r28
 228:	28 e1       	ldi	r18, 0x18	; 24
 22a:	82 0e       	add	r8, r18
 22c:	91 1c       	adc	r9, r1

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 22e:	51 2c       	mov	r5, r1
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 230:	61 2c       	mov	r6, r1
 232:	41 2c       	mov	r4, r1
 234:	06 c0       	rjmp	.+12     	; 0x242 <rprintf1RamRom+0x4a>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
 236:	88 23       	and	r24, r24
 238:	09 f4       	brne	.+2      	; 0x23c <rprintf1RamRom+0x44>
 23a:	8d c0       	rjmp	.+282    	; 0x356 <rprintf1RamRom+0x15e>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
 23c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <rprintfChar>
 240:	68 01       	movw	r12, r16
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 242:	77 20       	and	r7, r7
 244:	41 f0       	breq	.+16     	; 0x256 <rprintf1RamRom+0x5e>
 246:	86 01       	movw	r16, r12
 248:	0f 5f       	subi	r16, 0xFF	; 255
 24a:	1f 4f       	sbci	r17, 0xFF	; 255
 24c:	f6 01       	movw	r30, r12
 24e:	84 91       	lpm	r24, Z
 250:	85 32       	cpi	r24, 0x25	; 37
 252:	89 f7       	brne	.-30     	; 0x236 <rprintf1RamRom+0x3e>
 254:	08 c0       	rjmp	.+16     	; 0x266 <rprintf1RamRom+0x6e>
 256:	f6 01       	movw	r30, r12
 258:	80 81       	ld	r24, Z
 25a:	85 32       	cpi	r24, 0x25	; 37
 25c:	51 f0       	breq	.+20     	; 0x272 <rprintf1RamRom+0x7a>
 25e:	86 01       	movw	r16, r12
 260:	0f 5f       	subi	r16, 0xFF	; 255
 262:	1f 4f       	sbci	r17, 0xFF	; 255
 264:	e8 cf       	rjmp	.-48     	; 0x236 <rprintf1RamRom+0x3e>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
 266:	f2 e0       	ldi	r31, 0x02	; 2
 268:	cf 0e       	add	r12, r31
 26a:	d1 1c       	adc	r13, r1
 26c:	f8 01       	movw	r30, r16
 26e:	84 91       	lpm	r24, Z
 270:	06 c0       	rjmp	.+12     	; 0x27e <rprintf1RamRom+0x86>
 272:	f6 01       	movw	r30, r12
 274:	81 81       	ldd	r24, Z+1	; 0x01
 276:	96 01       	movw	r18, r12
 278:	2e 5f       	subi	r18, 0xFE	; 254
 27a:	3f 4f       	sbci	r19, 0xFF	; 255
 27c:	69 01       	movw	r12, r18
 27e:	84 36       	cpi	r24, 0x64	; 100
 280:	71 f0       	breq	.+28     	; 0x29e <rprintf1RamRom+0xa6>
 282:	88 37       	cpi	r24, 0x78	; 120
 284:	09 f4       	brne	.+2      	; 0x288 <rprintf1RamRom+0x90>
 286:	59 c0       	rjmp	.+178    	; 0x33a <rprintf1RamRom+0x142>
 288:	83 36       	cpi	r24, 0x63	; 99
 28a:	31 f4       	brne	.+12     	; 0x298 <rprintf1RamRom+0xa0>
		{
			case 'c': format_flag = va_arg(ap,int);
 28c:	f4 01       	movw	r30, r8
 28e:	80 81       	ld	r24, Z
 290:	94 01       	movw	r18, r8
 292:	2e 5f       	subi	r18, 0xFE	; 254
 294:	3f 4f       	sbci	r19, 0xFF	; 255
 296:	49 01       	movw	r8, r18
			default:  rprintfChar(format_flag); continue;
 298:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <rprintfChar>
 29c:	d2 cf       	rjmp	.-92     	; 0x242 <rprintf1RamRom+0x4a>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 29e:	f4 01       	movw	r30, r8
 2a0:	e0 80       	ld	r14, Z
 2a2:	f1 80       	ldd	r15, Z+1	; 0x01
 2a4:	32 e0       	ldi	r19, 0x02	; 2
 2a6:	83 0e       	add	r8, r19
 2a8:	91 1c       	adc	r9, r1
			if (format_flag == 'd')
			{
				if (((int)u_val) < 0)
 2aa:	ff 20       	and	r15, r15
 2ac:	34 f4       	brge	.+12     	; 0x2ba <rprintf1RamRom+0xc2>
				{
					u_val = - u_val;
 2ae:	f1 94       	neg	r15
 2b0:	e1 94       	neg	r14
 2b2:	f1 08       	sbc	r15, r1
					rprintfChar('-');
 2b4:	8d e2       	ldi	r24, 0x2D	; 45
 2b6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <rprintfChar>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 2ba:	80 e1       	ldi	r24, 0x10	; 16
 2bc:	e8 16       	cp	r14, r24
 2be:	87 e2       	ldi	r24, 0x27	; 39
 2c0:	f8 06       	cpc	r15, r24
 2c2:	d0 f4       	brcc	.+52     	; 0x2f8 <rprintf1RamRom+0x100>
 2c4:	00 e1       	ldi	r16, 0x10	; 16
 2c6:	17 e2       	ldi	r17, 0x27	; 39
 2c8:	98 01       	movw	r18, r16
 2ca:	ad ec       	ldi	r26, 0xCD	; 205
 2cc:	bc ec       	ldi	r27, 0xCC	; 204
 2ce:	0e 94 23 04 	call	0x846	; 0x846 <__umulhisi3>
 2d2:	8c 01       	movw	r16, r24
 2d4:	16 95       	lsr	r17
 2d6:	07 95       	ror	r16
 2d8:	16 95       	lsr	r17
 2da:	07 95       	ror	r16
 2dc:	16 95       	lsr	r17
 2de:	07 95       	ror	r16
 2e0:	02 30       	cpi	r16, 0x02	; 2
 2e2:	11 05       	cpc	r17, r1
 2e4:	88 f0       	brcs	.+34     	; 0x308 <rprintf1RamRom+0x110>
 2e6:	e0 16       	cp	r14, r16
 2e8:	f1 06       	cpc	r15, r17
 2ea:	70 f3       	brcs	.-36     	; 0x2c8 <rprintf1RamRom+0xd0>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 2ec:	0f 2e       	mov	r0, r31
 2ee:	fa e0       	ldi	r31, 0x0A	; 10
 2f0:	2f 2e       	mov	r2, r31
 2f2:	f0 2d       	mov	r31, r0
 2f4:	35 2c       	mov	r3, r5
 2f6:	0d c0       	rjmp	.+26     	; 0x312 <rprintf1RamRom+0x11a>
 2f8:	0f 2e       	mov	r0, r31
 2fa:	fa e0       	ldi	r31, 0x0A	; 10
 2fc:	2f 2e       	mov	r2, r31
 2fe:	f0 2d       	mov	r31, r0
 300:	35 2c       	mov	r3, r5
 302:	00 e1       	ldi	r16, 0x10	; 16
 304:	17 e2       	ldi	r17, 0x27	; 39
 306:	05 c0       	rjmp	.+10     	; 0x312 <rprintf1RamRom+0x11a>
 308:	0f 2e       	mov	r0, r31
 30a:	fa e0       	ldi	r31, 0x0A	; 10
 30c:	2f 2e       	mov	r2, r31
 30e:	f0 2d       	mov	r31, r0
 310:	35 2c       	mov	r3, r5
				while (div_val > 1 && div_val > u_val) div_val /= 10;
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
 312:	c7 01       	movw	r24, r14
 314:	b8 01       	movw	r22, r16
 316:	0e 94 ed 03 	call	0x7da	; 0x7da <__udivmodhi4>
 31a:	a8 2e       	mov	r10, r24
 31c:	b9 2e       	mov	r11, r25
 31e:	86 2f       	mov	r24, r22
 320:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <rprintfu04>
				u_val %= div_val;
 324:	ea 2c       	mov	r14, r10
 326:	fb 2c       	mov	r15, r11
				div_val /= base;
 328:	c8 01       	movw	r24, r16
 32a:	62 2d       	mov	r22, r2
 32c:	73 2d       	mov	r23, r3
 32e:	0e 94 ed 03 	call	0x7da	; 0x7da <__udivmodhi4>
 332:	8b 01       	movw	r16, r22
			} while (div_val);
 334:	67 2b       	or	r22, r23
 336:	69 f7       	brne	.-38     	; 0x312 <rprintf1RamRom+0x11a>
 338:	84 cf       	rjmp	.-248    	; 0x242 <rprintf1RamRom+0x4a>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 33a:	f4 01       	movw	r30, r8
 33c:	e0 80       	ld	r14, Z
 33e:	f1 80       	ldd	r15, Z+1	; 0x01
 340:	94 01       	movw	r18, r8
 342:	2e 5f       	subi	r18, 0xFE	; 254
 344:	3f 4f       	sbci	r19, 0xFF	; 255
 346:	49 01       	movw	r8, r18
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 348:	68 94       	set
 34a:	22 24       	eor	r2, r2
 34c:	24 f8       	bld	r2, 4
 34e:	36 2c       	mov	r3, r6
 350:	04 2d       	mov	r16, r4
 352:	10 e1       	ldi	r17, 0x10	; 16
 354:	de cf       	rjmp	.-68     	; 0x312 <rprintf1RamRom+0x11a>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	ef 90       	pop	r14
 366:	df 90       	pop	r13
 368:	cf 90       	pop	r12
 36a:	bf 90       	pop	r11
 36c:	af 90       	pop	r10
 36e:	9f 90       	pop	r9
 370:	8f 90       	pop	r8
 372:	7f 90       	pop	r7
 374:	6f 90       	pop	r6
 376:	5f 90       	pop	r5
 378:	4f 90       	pop	r4
 37a:	3f 90       	pop	r3
 37c:	2f 90       	pop	r2
 37e:	08 95       	ret

00000380 <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (unsigned char *)uartRxData, UART_RX_BUFFER_SIZE);
 380:	40 e4       	ldi	r20, 0x40	; 64
 382:	50 e0       	ldi	r21, 0x00	; 0
 384:	64 ea       	ldi	r22, 0xA4	; 164
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	85 ee       	ldi	r24, 0xE5	; 229
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 7b 00 	call	0xf6	; 0xf6 <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (unsigned char *)uartTxData, UART_TX_BUFFER_SIZE);
 390:	40 e4       	ldi	r20, 0x40	; 64
 392:	50 e0       	ldi	r21, 0x00	; 0
 394:	64 e6       	ldi	r22, 0x64	; 100
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	8e ee       	ldi	r24, 0xEE	; 238
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 7b 00 	call	0xf6	; 0xf6 <bufferInit>
 3a0:	08 95       	ret

000003a2 <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
 3a2:	0e 94 c0 01 	call	0x380	; 0x380 <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
 3a6:	10 92 63 00 	sts	0x0063, r1
 3aa:	10 92 62 00 	sts	0x0062, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
 3ae:	88 ed       	ldi	r24, 0xD8	; 216
 3b0:	8a b9       	out	0x0a, r24	; 10
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
 3b2:	8f e5       	ldi	r24, 0x5F	; 95
 3b4:	89 b9       	out	0x09, r24	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 3b6:	10 bc       	out	0x20, r1	; 32
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	80 93 e4 00 	sts	0x00E4, r24
	uartBufferedTx = FALSE;
 3be:	10 92 ed 00 	sts	0x00ED, r1
	// clear overflow count
	uartRxOverflow = 0;
 3c2:	10 92 f7 00 	sts	0x00F7, r1
 3c6:	10 92 f6 00 	sts	0x00F6, r1
	// enable interrupts
	sei();
 3ca:	78 94       	sei
 3cc:	08 95       	ret

000003ce <uartSetBaudRate>:
	UartRxFunc = rx_func;
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
 3ce:	0f 93       	push	r16
 3d0:	1f 93       	push	r17
 3d2:	8b 01       	movw	r16, r22
 3d4:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
 3d6:	dc 01       	movw	r26, r24
 3d8:	cb 01       	movw	r24, r22
 3da:	90 5e       	subi	r25, 0xE0	; 224
 3dc:	a3 4e       	sbci	r26, 0xE3	; 227
 3de:	bf 4f       	sbci	r27, 0xFF	; 255
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	aa 1f       	adc	r26, r26
 3e6:	bb 1f       	adc	r27, r27
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	aa 1f       	adc	r26, r26
 3ee:	bb 1f       	adc	r27, r27
 3f0:	bc 01       	movw	r22, r24
 3f2:	cd 01       	movw	r24, r26
 3f4:	66 0f       	add	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	88 1f       	adc	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	00 0f       	add	r16, r16
 3fe:	11 1f       	adc	r17, r17
 400:	22 1f       	adc	r18, r18
 402:	33 1f       	adc	r19, r19
 404:	00 0f       	add	r16, r16
 406:	11 1f       	adc	r17, r17
 408:	22 1f       	adc	r18, r18
 40a:	33 1f       	adc	r19, r19
 40c:	a9 01       	movw	r20, r18
 40e:	98 01       	movw	r18, r16
 410:	22 0f       	add	r18, r18
 412:	33 1f       	adc	r19, r19
 414:	44 1f       	adc	r20, r20
 416:	55 1f       	adc	r21, r21
 418:	22 0f       	add	r18, r18
 41a:	33 1f       	adc	r19, r19
 41c:	44 1f       	adc	r20, r20
 41e:	55 1f       	adc	r21, r21
 420:	0e 94 01 04 	call	0x802	; 0x802 <__udivmodsi4>
 424:	21 50       	subi	r18, 0x01	; 1
 426:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
 428:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 42a:	30 bd       	out	0x20, r19	; 32
	#endif
}
 42c:	1f 91       	pop	r17
 42e:	0f 91       	pop	r16
 430:	08 95       	ret

00000432 <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
 432:	90 91 e4 00 	lds	r25, 0x00E4
 436:	99 23       	and	r25, r25
 438:	e1 f3       	breq	.-8      	; 0x432 <uartSendByte>
	// send byte
	outb(UDR, txData);
 43a:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
 43c:	10 92 e4 00 	sts	0x00E4, r1
 440:	08 95       	ret

00000442 <__vector_13>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_TRANS)
{
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	2f 93       	push	r18
 44e:	3f 93       	push	r19
 450:	4f 93       	push	r20
 452:	5f 93       	push	r21
 454:	6f 93       	push	r22
 456:	7f 93       	push	r23
 458:	8f 93       	push	r24
 45a:	9f 93       	push	r25
 45c:	af 93       	push	r26
 45e:	bf 93       	push	r27
 460:	ef 93       	push	r30
 462:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
 464:	80 91 ed 00 	lds	r24, 0x00ED
 468:	88 23       	and	r24, r24
 46a:	91 f0       	breq	.+36     	; 0x490 <__stack+0x31>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
 46c:	80 91 f2 00 	lds	r24, 0x00F2
 470:	90 91 f3 00 	lds	r25, 0x00F3
 474:	89 2b       	or	r24, r25
 476:	31 f0       	breq	.+12     	; 0x484 <__stack+0x25>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
 478:	8e ee       	ldi	r24, 0xEE	; 238
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 88 00 	call	0x110	; 0x110 <bufferGetFromFront>
 480:	8c b9       	out	0x0c, r24	; 12
 482:	09 c0       	rjmp	.+18     	; 0x496 <__stack+0x37>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
 484:	10 92 ed 00 	sts	0x00ED, r1
			// return to ready state
			uartReadyTx = TRUE;
 488:	8f ef       	ldi	r24, 0xFF	; 255
 48a:	80 93 e4 00 	sts	0x00E4, r24
 48e:	03 c0       	rjmp	.+6      	; 0x496 <__stack+0x37>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
 490:	8f ef       	ldi	r24, 0xFF	; 255
 492:	80 93 e4 00 	sts	0x00E4, r24
	}
}
 496:	ff 91       	pop	r31
 498:	ef 91       	pop	r30
 49a:	bf 91       	pop	r27
 49c:	af 91       	pop	r26
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	7f 91       	pop	r23
 4a4:	6f 91       	pop	r22
 4a6:	5f 91       	pop	r21
 4a8:	4f 91       	pop	r20
 4aa:	3f 91       	pop	r19
 4ac:	2f 91       	pop	r18
 4ae:	0f 90       	pop	r0
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	0f 90       	pop	r0
 4b4:	1f 90       	pop	r1
 4b6:	18 95       	reti

000004b8 <__vector_11>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_RECV)
{
 4b8:	1f 92       	push	r1
 4ba:	0f 92       	push	r0
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	0f 92       	push	r0
 4c0:	11 24       	eor	r1, r1
 4c2:	2f 93       	push	r18
 4c4:	3f 93       	push	r19
 4c6:	4f 93       	push	r20
 4c8:	5f 93       	push	r21
 4ca:	6f 93       	push	r22
 4cc:	7f 93       	push	r23
 4ce:	8f 93       	push	r24
 4d0:	9f 93       	push	r25
 4d2:	af 93       	push	r26
 4d4:	bf 93       	push	r27
 4d6:	ef 93       	push	r30
 4d8:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
 4da:	8c b1       	in	r24, 0x0c	; 12

	// if there's a user function to handle this receive event
	if(UartRxFunc)
 4dc:	20 91 62 00 	lds	r18, 0x0062
 4e0:	30 91 63 00 	lds	r19, 0x0063
 4e4:	23 2b       	or	r18, r19
 4e6:	31 f0       	breq	.+12     	; 0x4f4 <__vector_11+0x3c>
	{
		// call it and pass the received data
		UartRxFunc(c);
 4e8:	e0 91 62 00 	lds	r30, 0x0062
 4ec:	f0 91 63 00 	lds	r31, 0x0063
 4f0:	09 95       	icall
 4f2:	10 c0       	rjmp	.+32     	; 0x514 <__vector_11+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
 4f4:	68 2f       	mov	r22, r24
 4f6:	85 ee       	ldi	r24, 0xE5	; 229
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 ac 00 	call	0x158	; 0x158 <bufferAddToEnd>
 4fe:	81 11       	cpse	r24, r1
 500:	09 c0       	rjmp	.+18     	; 0x514 <__vector_11+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
 502:	80 91 f6 00 	lds	r24, 0x00F6
 506:	90 91 f7 00 	lds	r25, 0x00F7
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	90 93 f7 00 	sts	0x00F7, r25
 510:	80 93 f6 00 	sts	0x00F6, r24
		}
	}
}
 514:	ff 91       	pop	r31
 516:	ef 91       	pop	r30
 518:	bf 91       	pop	r27
 51a:	af 91       	pop	r26
 51c:	9f 91       	pop	r25
 51e:	8f 91       	pop	r24
 520:	7f 91       	pop	r23
 522:	6f 91       	pop	r22
 524:	5f 91       	pop	r21
 526:	4f 91       	pop	r20
 528:	3f 91       	pop	r19
 52a:	2f 91       	pop	r18
 52c:	0f 90       	pop	r0
 52e:	0f be       	out	0x3f, r0	; 63
 530:	0f 90       	pop	r0
 532:	1f 90       	pop	r1
 534:	18 95       	reti

00000536 <McuInit>:

void McuInit(void)
{
	// initialize our libraries
	// initialize the UART (serial port)
	uartInit();		/* sei() call in the function */
 536:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <uartInit>
	// set the baud rate of the UART for our debug/reporting output
	uartSetBaudRate(9600);
 53a:	60 e8       	ldi	r22, 0x80	; 128
 53c:	75 e2       	ldi	r23, 0x25	; 37
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 e7 01 	call	0x3ce	; 0x3ce <uartSetBaudRate>
	// initialize rprintf system
	rprintfInit(uartSendByte);
 546:	89 e1       	ldi	r24, 0x19	; 25
 548:	92 e0       	ldi	r25, 0x02	; 2
 54a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <rprintfInit>
 54e:	08 95       	ret

00000550 <ApplInit>:
*********************************************************************************************************
*/

void ApplInit(void)
{
	ButtonInit();
 550:	0e 94 77 03 	call	0x6ee	; 0x6ee <ButtonInit>
	
	//glcdInit();	/* Need connect to LCD device because MCU will check lcd busy or not will cause waiting */
	
	//glcdPutStr(&greeting[0]);
	// Just print message for debug.
	rprintf("RF remote start!\n" );	
 554:	8c eb       	ldi	r24, 0xBC	; 188
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	9f 93       	push	r25
 55a:	8f 93       	push	r24
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	8f 93       	push	r24
 560:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <rprintf1RamRom>
 564:	0f 90       	pop	r0
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	08 95       	ret

0000056c <AppCycleUpdate>:
*
* Returns    : none
*********************************************************************************************************
*/
void AppCycleUpdate(void)
{	
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
	char tempChar;
	//if(button.buttonsReleased.bVal) rprintf("rl=%x\n", button.buttonsReleased.bVal);
	if(button.buttonsReleased.bVal) 
 570:	80 91 fe 00 	lds	r24, 0x00FE
 574:	88 23       	and	r24, r24
 576:	09 f4       	brne	.+2      	; 0x57a <AppCycleUpdate+0xe>
 578:	89 c0       	rjmp	.+274    	; 0x68c <AppCycleUpdate+0x120>
	{
		rprintf("rl=%x\n", button.buttonsReleased.bVal);
 57a:	1f 92       	push	r1
 57c:	8f 93       	push	r24
 57e:	85 eb       	ldi	r24, 0xB5	; 181
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	9f 93       	push	r25
 584:	8f 93       	push	r24
 586:	c1 e0       	ldi	r28, 0x01	; 1
 588:	cf 93       	push	r28
 58a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <rprintf1RamRom>
		rprintf("rh=%x\n", button.buttonsReleased.bVal>>16);
 58e:	80 91 fe 00 	lds	r24, 0x00FE
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	99 0f       	add	r25, r25
 596:	88 0b       	sbc	r24, r24
 598:	98 2f       	mov	r25, r24
 59a:	9f 93       	push	r25
 59c:	8f 93       	push	r24
 59e:	8e ea       	ldi	r24, 0xAE	; 174
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	9f 93       	push	r25
 5a4:	8f 93       	push	r24
 5a6:	cf 93       	push	r28
 5a8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <rprintf1RamRom>
		
		if(button.buttonsReleased.PBtn13)
 5ac:	80 91 ff 00 	lds	r24, 0x00FF
 5b0:	2d b7       	in	r18, 0x3d	; 61
 5b2:	3e b7       	in	r19, 0x3e	; 62
 5b4:	26 5f       	subi	r18, 0xF6	; 246
 5b6:	3f 4f       	sbci	r19, 0xFF	; 255
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	f8 94       	cli
 5bc:	3e bf       	out	0x3e, r19	; 62
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	2d bf       	out	0x3d, r18	; 61
 5c2:	84 ff       	sbrs	r24, 4
 5c4:	0c c0       	rjmp	.+24     	; 0x5de <AppCycleUpdate+0x72>
		{
			//glcdSetAddress(0,0);
			char greeting[] = "PBtn13,Hello World!";
			//glcdPutStr(&greeting[0]);
			rprintf("PBtn13\n");
 5c6:	86 ea       	ldi	r24, 0xA6	; 166
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	9f 93       	push	r25
 5cc:	8f 93       	push	r24
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	8f 93       	push	r24
 5d2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <rprintf1RamRom>
 5d6:	0f 90       	pop	r0
 5d8:	0f 90       	pop	r0
 5da:	0f 90       	pop	r0
 5dc:	57 c0       	rjmp	.+174    	; 0x68c <AppCycleUpdate+0x120>
		}
		else if(button.buttonsReleased.PBtn14)
 5de:	80 ff       	sbrs	r24, 0
 5e0:	0c c0       	rjmp	.+24     	; 0x5fa <AppCycleUpdate+0x8e>
		{
			//glcdSetAddress(0,1);
			char greeting[] = "PBtn14,Hello World!";
			//glcdPutStr(&greeting[0]);
			rprintf("PBtn14\n");
 5e2:	8e e9       	ldi	r24, 0x9E	; 158
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	9f 93       	push	r25
 5e8:	8f 93       	push	r24
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	8f 93       	push	r24
 5ee:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <rprintf1RamRom>
 5f2:	0f 90       	pop	r0
 5f4:	0f 90       	pop	r0
 5f6:	0f 90       	pop	r0
 5f8:	49 c0       	rjmp	.+146    	; 0x68c <AppCycleUpdate+0x120>
		}
		else if(button.buttonsReleased.PBtn15)
 5fa:	90 91 fe 00 	lds	r25, 0x00FE
 5fe:	94 ff       	sbrs	r25, 4
 600:	0c c0       	rjmp	.+24     	; 0x61a <AppCycleUpdate+0xae>
		{
			//glcdSetAddress(0,2);
			char greeting[] = "PBtn15,Hello World!";
			//glcdPutStr(&greeting[0]);
			rprintf("PBtn15\n");
 602:	86 e9       	ldi	r24, 0x96	; 150
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	9f 93       	push	r25
 608:	8f 93       	push	r24
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	8f 93       	push	r24
 60e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <rprintf1RamRom>
 612:	0f 90       	pop	r0
 614:	0f 90       	pop	r0
 616:	0f 90       	pop	r0
 618:	39 c0       	rjmp	.+114    	; 0x68c <AppCycleUpdate+0x120>
		}
		else if(button.buttonsReleased.PBtn1)
 61a:	88 23       	and	r24, r24
 61c:	64 f4       	brge	.+24     	; 0x636 <AppCycleUpdate+0xca>
		{
			//glcdSetAddress(0,3);
			char greeting[] = "PBtn1,Hello World!";
			//glcdPutStr(&greeting[0]);
			rprintf("PBtn1\n");
 61e:	8f e8       	ldi	r24, 0x8F	; 143
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	9f 93       	push	r25
 624:	8f 93       	push	r24
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	8f 93       	push	r24
 62a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <rprintf1RamRom>
 62e:	0f 90       	pop	r0
 630:	0f 90       	pop	r0
 632:	0f 90       	pop	r0
 634:	2b c0       	rjmp	.+86     	; 0x68c <AppCycleUpdate+0x120>
		}
		else if(button.buttonsReleased.PBtn5)
 636:	86 ff       	sbrs	r24, 6
 638:	0c c0       	rjmp	.+24     	; 0x652 <AppCycleUpdate+0xe6>
		{
			//glcdSetAddress(0,4);
			char greeting[] = "PBtn5,Hello World!";
			//glcdPutStr(&greeting[0]);
			rprintf("PBtn5\n");
 63a:	88 e8       	ldi	r24, 0x88	; 136
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	9f 93       	push	r25
 640:	8f 93       	push	r24
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	8f 93       	push	r24
 646:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <rprintf1RamRom>
 64a:	0f 90       	pop	r0
 64c:	0f 90       	pop	r0
 64e:	0f 90       	pop	r0
 650:	1d c0       	rjmp	.+58     	; 0x68c <AppCycleUpdate+0x120>
		}
		else if(button.buttonsReleased.PBtn9)
 652:	85 ff       	sbrs	r24, 5
 654:	0c c0       	rjmp	.+24     	; 0x66e <AppCycleUpdate+0x102>
		{
			//glcdSetAddress(0,5);
			char greeting[] = "PBtn9,Hello World!";
			//glcdPutStr(&greeting[0]);
			rprintf("PBtn9\n");
 656:	81 e8       	ldi	r24, 0x81	; 129
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	9f 93       	push	r25
 65c:	8f 93       	push	r24
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	8f 93       	push	r24
 662:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <rprintf1RamRom>
 666:	0f 90       	pop	r0
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	0f c0       	rjmp	.+30     	; 0x68c <AppCycleUpdate+0x120>
		}
		else if(button.buttonsReleased.PBtn18)
 66e:	80 91 00 01 	lds	r24, 0x0100
 672:	82 ff       	sbrs	r24, 2
 674:	0b c0       	rjmp	.+22     	; 0x68c <AppCycleUpdate+0x120>
		{
			//glcdSetAddress(0,1);
			//glcdClearScreen();
			rprintf("PBtn18,Clear Home\n");
 676:	8e e6       	ldi	r24, 0x6E	; 110
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	9f 93       	push	r25
 67c:	8f 93       	push	r24
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	8f 93       	push	r24
 682:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <rprintf1RamRom>
 686:	0f 90       	pop	r0
 688:	0f 90       	pop	r0
 68a:	0f 90       	pop	r0
		}
	}

	if(uartRxBuffer.size - bufferIsNotFull(&uartRxBuffer) != 0)
 68c:	c0 91 e7 00 	lds	r28, 0x00E7
 690:	d0 91 e8 00 	lds	r29, 0x00E8
 694:	85 ee       	ldi	r24, 0xE5	; 229
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <bufferIsNotFull>
 69c:	c8 17       	cp	r28, r24
 69e:	d9 07       	cpc	r29, r25
 6a0:	99 f0       	breq	.+38     	; 0x6c8 <AppCycleUpdate+0x15c>
	{
		tempChar = bufferGetFromFront(&uartRxBuffer);
 6a2:	85 ee       	ldi	r24, 0xE5	; 229
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 94 88 00 	call	0x110	; 0x110 <bufferGetFromFront>
		//rprintf("char=%c\n",tempChar);
		rprintf("Type=%c\n",tempChar);
 6aa:	1f 92       	push	r1
 6ac:	8f 93       	push	r24
 6ae:	85 e6       	ldi	r24, 0x65	; 101
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	9f 93       	push	r25
 6b4:	8f 93       	push	r24
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	8f 93       	push	r24
 6ba:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <rprintf1RamRom>
 6be:	0f 90       	pop	r0
 6c0:	0f 90       	pop	r0
 6c2:	0f 90       	pop	r0
 6c4:	0f 90       	pop	r0
 6c6:	0f 90       	pop	r0
	}
	//rprintf("D=%d\n",uartRxBuffer.datalength);

	//rprintfChar('a');
	//glcdWriteChar(cnt++/2);
}
 6c8:	df 91       	pop	r29
 6ca:	cf 91       	pop	r28
 6cc:	08 95       	ret

000006ce <main>:
int main(void)
{	
	/*
	Calll all initial function
	*/
	McuInit();
 6ce:	0e 94 9b 02 	call	0x536	; 0x536 <McuInit>
	ApplInit();
 6d2:	0e 94 a8 02 	call	0x550	; 0x550 <ApplInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6d6:	26 e6       	ldi	r18, 0x66	; 102
 6d8:	86 ee       	ldi	r24, 0xE6	; 230
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	21 50       	subi	r18, 0x01	; 1
 6de:	80 40       	sbci	r24, 0x00	; 0
 6e0:	90 40       	sbci	r25, 0x00	; 0
 6e2:	e1 f7       	brne	.-8      	; 0x6dc <main+0xe>
	
	while(1)
	{
		_delay_ms(20);
		ButtonCycleUpdate();
 6e4:	0e 94 81 03 	call	0x702	; 0x702 <ButtonCycleUpdate>
		AppCycleUpdate();
 6e8:	0e 94 b6 02 	call	0x56c	; 0x56c <AppCycleUpdate>
	}
 6ec:	f4 cf       	rjmp	.-24     	; 0x6d6 <main+0x8>

000006ee <ButtonInit>:
*********************************************************************************************************
*/

void ButtonInit(void)
{
	DDRD  &= ~((1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3));	/* Set PD6-PD3 as input */
 6ee:	81 b3       	in	r24, 0x11	; 17
 6f0:	87 78       	andi	r24, 0x87	; 135
 6f2:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<PD6) | (1<<PD5) | (1<<PD4) | (1<<PD3);			/* Set PD6-PD3 as internal pull up */
 6f4:	82 b3       	in	r24, 0x12	; 18
 6f6:	88 67       	ori	r24, 0x78	; 120
 6f8:	82 bb       	out	0x12, r24	; 18
	
	/* 
	Set PC7-PC4 as input as internal pull up
	Set PC3-PC0 as Tri-state (Hi-Z) 
	*/
	DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 6fa:	14 ba       	out	0x14, r1	; 20
	PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 6fc:	80 ef       	ldi	r24, 0xF0	; 240
 6fe:	85 bb       	out	0x15, r24	; 21
 700:	08 95       	ret

00000702 <ButtonCycleUpdate>:
	ButtonDataType io_state = 0;
	ButtonDataType tempValue;
	ButtonDataType MatrixButtonValue;
	uint8_t Col;
	
	tempValue = (~PIND) & ((1<<PIND6) | (1<<PIND5) | (1<<PIND4) | (1<<PIND3));	/* Get PD6-PD3 IO state */
 702:	80 b3       	in	r24, 0x10	; 16
 704:	40 e0       	ldi	r20, 0x00	; 0
 706:	50 e0       	ldi	r21, 0x00	; 0
	tempValue >>= 3;	/* right rotate to low 4 bits location */
	
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
 708:	20 e0       	ldi	r18, 0x00	; 0
		/* 
		Set PC7-PC4 as input as internal pull up
		Set PC3-PC0 as Tri-state (Hi-Z)
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 70a:	e0 ef       	ldi	r30, 0xF0	; 240
	
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
 70c:	68 e0       	ldi	r22, 0x08	; 8
 70e:	70 e0       	ldi	r23, 0x00	; 0
	{
		/* 
		Set PC7-PC4 as input as internal pull up
		Set PC3-PC0 as Tri-state (Hi-Z)
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 710:	14 ba       	out	0x14, r1	; 20
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 712:	e5 bb       	out	0x15, r30	; 21
	
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
 714:	34 b3       	in	r19, 0x14	; 20
 716:	cb 01       	movw	r24, r22
 718:	04 2e       	mov	r0, r20
 71a:	02 c0       	rjmp	.+4      	; 0x720 <ButtonCycleUpdate+0x1e>
 71c:	95 95       	asr	r25
 71e:	87 95       	ror	r24
 720:	0a 94       	dec	r0
 722:	e2 f7       	brpl	.-8      	; 0x71c <ButtonCycleUpdate+0x1a>
 724:	93 2f       	mov	r25, r19
 726:	98 2b       	or	r25, r24
 728:	94 bb       	out	0x14, r25	; 20
		PORTC &= ~(0x08>>Col);		/* Set the column as low */
 72a:	95 b3       	in	r25, 0x15	; 21
 72c:	80 95       	com	r24
 72e:	89 23       	and	r24, r25
 730:	85 bb       	out	0x15, r24	; 21
		
		/* read and save button state after the column which active as low */
		MatrixButtonValue <<= 4;	/* newer 4 button state store in lower four bits */
		MatrixButtonValue |= ((~PINC) & 0x00f0) >> 4;
 732:	83 b3       	in	r24, 0x13	; 19
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	80 95       	com	r24
 738:	90 95       	com	r25
 73a:	80 7f       	andi	r24, 0xF0	; 240
 73c:	99 27       	eor	r25, r25
 73e:	95 95       	asr	r25
 740:	87 95       	ror	r24
 742:	95 95       	asr	r25
 744:	87 95       	ror	r24
 746:	95 95       	asr	r25
 748:	87 95       	ror	r24
 74a:	95 95       	asr	r25
 74c:	87 95       	ror	r24
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
		PORTC &= ~(0x08>>Col);		/* Set the column as low */
		
		/* read and save button state after the column which active as low */
		MatrixButtonValue <<= 4;	/* newer 4 button state store in lower four bits */
 74e:	22 95       	swap	r18
 750:	20 7f       	andi	r18, 0xF0	; 240
		MatrixButtonValue |= ((~PINC) & 0x00f0) >> 4;
 752:	28 2b       	or	r18, r24
 754:	4f 5f       	subi	r20, 0xFF	; 255
 756:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t Col;
	
	tempValue = (~PIND) & ((1<<PIND6) | (1<<PIND5) | (1<<PIND4) | (1<<PIND3));	/* Get PD6-PD3 IO state */
	tempValue >>= 3;	/* right rotate to low 4 bits location */
	
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
 758:	44 30       	cpi	r20, 0x04	; 4
 75a:	51 05       	cpc	r21, r1
 75c:	c9 f6       	brne	.-78     	; 0x710 <ButtonCycleUpdate+0xe>
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
 75e:	e8 ef       	ldi	r30, 0xF8	; 248
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	80 81       	ld	r24, Z
 764:	28 2b       	or	r18, r24
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
 766:	10 82       	st	Z, r1
	b = button.buttonsLastCycle.bVal;
 768:	83 81       	ldd	r24, Z+3	; 0x03
	holdTime = button.buttonHoldTime;
 76a:	42 89       	ldd	r20, Z+18	; 0x12
 76c:	53 89       	ldd	r21, Z+19	; 0x13
	
	if (button.buttonsReleased.bVal != 0) {		
 76e:	96 81       	ldd	r25, Z+6	; 0x06
 770:	99 23       	and	r25, r25
 772:	19 f0       	breq	.+6      	; 0x77a <ButtonCycleUpdate+0x78>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
 774:	90 93 04 01 	sts	0x0104, r25
 778:	05 c0       	rjmp	.+10     	; 0x784 <ButtonCycleUpdate+0x82>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
 77a:	4d 33       	cpi	r20, 0x3D	; 61
 77c:	51 05       	cpc	r21, r1
 77e:	10 f0       	brcs	.+4      	; 0x784 <ButtonCycleUpdate+0x82>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
 780:	10 92 04 01 	sts	0x0104, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
 784:	e8 ef       	ldi	r30, 0xF8	; 248
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	16 82       	std	Z+6, r1	; 0x06
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
 78a:	17 86       	std	Z+15, r1	; 0x0f
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
 78c:	28 13       	cpse	r18, r24
 78e:	0f c0       	rjmp	.+30     	; 0x7ae <ButtonCycleUpdate+0xac>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
 790:	4f 5f       	subi	r20, 0xFF	; 255
 792:	5f 4f       	sbci	r21, 0xFF	; 255
 794:	44 32       	cpi	r20, 0x24	; 36
 796:	51 05       	cpc	r21, r1
 798:	18 f4       	brcc	.+6      	; 0x7a0 <ButtonCycleUpdate+0x9e>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
 79a:	10 92 01 01 	sts	0x0101, r1
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <ButtonCycleUpdate+0xa2>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
 7a0:	20 93 01 01 	sts	0x0101, r18
		}	
		button.buttonHoldTime = holdTime;
 7a4:	50 93 0b 01 	sts	0x010B, r21
 7a8:	40 93 0a 01 	sts	0x010A, r20
 7ac:	08 95       	ret
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
 7ae:	e8 ef       	ldi	r30, 0xF8	; 248
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	23 83       	std	Z+3, r18	; 0x03
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
 7b4:	20 95       	com	r18
 7b6:	28 23       	and	r18, r24
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
 7b8:	81 85       	ldd	r24, Z+9	; 0x09
 7ba:	82 23       	and	r24, r18
 7bc:	69 f4       	brne	.+26     	; 0x7d8 <ButtonCycleUpdate+0xd6>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
 7be:	10 92 0b 01 	sts	0x010B, r1
 7c2:	10 92 0a 01 	sts	0x010A, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
 7c6:	43 50       	subi	r20, 0x03	; 3
 7c8:	51 09       	sbc	r21, r1
 7ca:	40 32       	cpi	r20, 0x20	; 32
 7cc:	51 05       	cpc	r21, r1
 7ce:	20 f4       	brcc	.+8      	; 0x7d8 <ButtonCycleUpdate+0xd6>
				button.buttonsReleased.bVal = buttons;	
 7d0:	26 83       	std	Z+6, r18	; 0x06
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
 7d2:	84 85       	ldd	r24, Z+12	; 0x0c
 7d4:	28 23       	and	r18, r24
 7d6:	27 87       	std	Z+15, r18	; 0x0f
 7d8:	08 95       	ret

000007da <__udivmodhi4>:
 7da:	aa 1b       	sub	r26, r26
 7dc:	bb 1b       	sub	r27, r27
 7de:	51 e1       	ldi	r21, 0x11	; 17
 7e0:	07 c0       	rjmp	.+14     	; 0x7f0 <__udivmodhi4_ep>

000007e2 <__udivmodhi4_loop>:
 7e2:	aa 1f       	adc	r26, r26
 7e4:	bb 1f       	adc	r27, r27
 7e6:	a6 17       	cp	r26, r22
 7e8:	b7 07       	cpc	r27, r23
 7ea:	10 f0       	brcs	.+4      	; 0x7f0 <__udivmodhi4_ep>
 7ec:	a6 1b       	sub	r26, r22
 7ee:	b7 0b       	sbc	r27, r23

000007f0 <__udivmodhi4_ep>:
 7f0:	88 1f       	adc	r24, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	5a 95       	dec	r21
 7f6:	a9 f7       	brne	.-22     	; 0x7e2 <__udivmodhi4_loop>
 7f8:	80 95       	com	r24
 7fa:	90 95       	com	r25
 7fc:	bc 01       	movw	r22, r24
 7fe:	cd 01       	movw	r24, r26
 800:	08 95       	ret

00000802 <__udivmodsi4>:
 802:	a1 e2       	ldi	r26, 0x21	; 33
 804:	1a 2e       	mov	r1, r26
 806:	aa 1b       	sub	r26, r26
 808:	bb 1b       	sub	r27, r27
 80a:	fd 01       	movw	r30, r26
 80c:	0d c0       	rjmp	.+26     	; 0x828 <__udivmodsi4_ep>

0000080e <__udivmodsi4_loop>:
 80e:	aa 1f       	adc	r26, r26
 810:	bb 1f       	adc	r27, r27
 812:	ee 1f       	adc	r30, r30
 814:	ff 1f       	adc	r31, r31
 816:	a2 17       	cp	r26, r18
 818:	b3 07       	cpc	r27, r19
 81a:	e4 07       	cpc	r30, r20
 81c:	f5 07       	cpc	r31, r21
 81e:	20 f0       	brcs	.+8      	; 0x828 <__udivmodsi4_ep>
 820:	a2 1b       	sub	r26, r18
 822:	b3 0b       	sbc	r27, r19
 824:	e4 0b       	sbc	r30, r20
 826:	f5 0b       	sbc	r31, r21

00000828 <__udivmodsi4_ep>:
 828:	66 1f       	adc	r22, r22
 82a:	77 1f       	adc	r23, r23
 82c:	88 1f       	adc	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	1a 94       	dec	r1
 832:	69 f7       	brne	.-38     	; 0x80e <__udivmodsi4_loop>
 834:	60 95       	com	r22
 836:	70 95       	com	r23
 838:	80 95       	com	r24
 83a:	90 95       	com	r25
 83c:	9b 01       	movw	r18, r22
 83e:	ac 01       	movw	r20, r24
 840:	bd 01       	movw	r22, r26
 842:	cf 01       	movw	r24, r30
 844:	08 95       	ret

00000846 <__umulhisi3>:
 846:	a2 9f       	mul	r26, r18
 848:	b0 01       	movw	r22, r0
 84a:	b3 9f       	mul	r27, r19
 84c:	c0 01       	movw	r24, r0
 84e:	a3 9f       	mul	r26, r19
 850:	70 0d       	add	r23, r0
 852:	81 1d       	adc	r24, r1
 854:	11 24       	eor	r1, r1
 856:	91 1d       	adc	r25, r1
 858:	b2 9f       	mul	r27, r18
 85a:	70 0d       	add	r23, r0
 85c:	81 1d       	adc	r24, r1
 85e:	11 24       	eor	r1, r1
 860:	91 1d       	adc	r25, r1
 862:	08 95       	ret

00000864 <_exit>:
 864:	f8 94       	cli

00000866 <__stop_program>:
 866:	ff cf       	rjmp	.-2      	; 0x866 <__stop_program>
