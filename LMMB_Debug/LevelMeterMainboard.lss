
LevelMeterMainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000086a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000008de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ac  00800060  00800060  000008de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000910  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001911  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ad  00000000  00000000  0000244d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b1  00000000  00000000  00002dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c0  00000000  00000000  000037ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000805  00000000  00000000  00003d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001630  00000000  00000000  00004571  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00005ba1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__ctors_end>
   4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  2c:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__vector_11>
  30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  34:	0c 94 22 02 	jmp	0x444	; 0x444 <__vector_13>
  38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  40:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  48:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  4c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	30 31       	cpi	r19, 0x10	; 16
  56:	32 33       	cpi	r19, 0x32	; 50
  58:	34 35       	cpi	r19, 0x54	; 84
  5a:	36 37       	cpi	r19, 0x76	; 118
  5c:	38 39       	cpi	r19, 0x98	; 152
  5e:	41 42       	sbci	r20, 0x21	; 33
  60:	43 44       	sbci	r20, 0x43	; 67
  62:	45 46       	sbci	r20, 0x65	; 101
	...

00000065 <__c.2034>:
  65:	54 79 70 65 3d 25 63 0a 00                          Type=%c..

0000006e <__c.2032>:
  6e:	50 42 74 6e 31 38 2c 43 6c 65 61 72 20 48 6f 6d     PBtn18,Clear Hom
  7e:	65 0a 00                                            e..

00000081 <__c.2030>:
  81:	50 42 74 6e 39 0a 00                                PBtn9..

00000088 <__c.2027>:
  88:	50 42 74 6e 35 0a 00                                PBtn5..

0000008f <__c.2024>:
  8f:	50 42 74 6e 31 0a 00                                PBtn1..

00000096 <__c.2021>:
  96:	50 42 74 6e 31 35 0a 00                             PBtn15..

0000009e <__c.2018>:
  9e:	50 42 74 6e 31 34 0a 00                             PBtn14..

000000a6 <__c.2015>:
  a6:	50 42 74 6e 31 33 0a 00                             PBtn13..

000000ae <__c.2012>:
  ae:	72 68 3d 25 78 0a 00                                rh=%x..

000000b5 <__c.2010>:
  b5:	72 6c 3d 25 78 0a 00                                rl=%x..

000000bc <__c.2004>:
  bc:	4d 61 69 6e 20 42 6f 61 72 64 20 73 74 61 72 74     Main Board start
  cc:	21 0a 00 00                                         !...

000000d0 <__ctors_end>:
  d0:	11 24       	eor	r1, r1
  d2:	1f be       	out	0x3f, r1	; 63
  d4:	cf e5       	ldi	r28, 0x5F	; 95
  d6:	d4 e0       	ldi	r29, 0x04	; 4
  d8:	de bf       	out	0x3e, r29	; 62
  da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_clear_bss>:
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	a0 e6       	ldi	r26, 0x60	; 96
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
  e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
  e6:	ac 30       	cpi	r26, 0x0C	; 12
  e8:	b2 07       	cpc	r27, r18
  ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
  ec:	0e 94 68 03 	call	0x6d0	; 0x6d0 <main>
  f0:	0c 94 33 04 	jmp	0x866	; 0x866 <_exit>

000000f4 <__bad_interrupt>:
  f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
  f8:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
  fa:	8f b7       	in	r24, 0x3f	; 63
  fc:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
  fe:	71 83       	std	Z+1, r23	; 0x01
 100:	60 83       	st	Z, r22
	buffer->size = size;
 102:	53 83       	std	Z+3, r21	; 0x03
 104:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
 106:	17 82       	std	Z+7, r1	; 0x07
 108:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
 10a:	15 82       	std	Z+5, r1	; 0x05
 10c:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
 10e:	8f bf       	out	0x3f, r24	; 63
 110:	08 95       	ret

00000112 <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
 112:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
 114:	9f b7       	in	r25, 0x3f	; 63
 116:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
 118:	44 81       	ldd	r20, Z+4	; 0x04
 11a:	55 81       	ldd	r21, Z+5	; 0x05
 11c:	41 15       	cp	r20, r1
 11e:	51 05       	cpc	r21, r1
 120:	c9 f0       	breq	.+50     	; 0x154 <bufferGetFromFront+0x42>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
 122:	26 81       	ldd	r18, Z+6	; 0x06
 124:	37 81       	ldd	r19, Z+7	; 0x07
 126:	a0 81       	ld	r26, Z
 128:	b1 81       	ldd	r27, Z+1	; 0x01
 12a:	a2 0f       	add	r26, r18
 12c:	b3 1f       	adc	r27, r19
 12e:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
 130:	2f 5f       	subi	r18, 0xFF	; 255
 132:	3f 4f       	sbci	r19, 0xFF	; 255
 134:	37 83       	std	Z+7, r19	; 0x07
 136:	26 83       	std	Z+6, r18	; 0x06
		if(buffer->dataindex >= buffer->size)
 138:	62 81       	ldd	r22, Z+2	; 0x02
 13a:	73 81       	ldd	r23, Z+3	; 0x03
 13c:	26 17       	cp	r18, r22
 13e:	37 07       	cpc	r19, r23
 140:	20 f0       	brcs	.+8      	; 0x14a <bufferGetFromFront+0x38>
		{
			buffer->dataindex -= buffer->size;
 142:	26 1b       	sub	r18, r22
 144:	37 0b       	sbc	r19, r23
 146:	37 83       	std	Z+7, r19	; 0x07
 148:	26 83       	std	Z+6, r18	; 0x06
		}
		buffer->datalength--;
 14a:	41 50       	subi	r20, 0x01	; 1
 14c:	51 09       	sbc	r21, r1
 14e:	55 83       	std	Z+5, r21	; 0x05
 150:	44 83       	std	Z+4, r20	; 0x04
 152:	01 c0       	rjmp	.+2      	; 0x156 <bufferGetFromFront+0x44>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
 154:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
 156:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
 158:	08 95       	ret

0000015a <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	fc 01       	movw	r30, r24
 160:	d6 2f       	mov	r29, r22
	// begin critical section
	CRITICAL_SECTION_START;
 162:	cf b7       	in	r28, 0x3f	; 63
 164:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
 166:	44 81       	ldd	r20, Z+4	; 0x04
 168:	55 81       	ldd	r21, Z+5	; 0x05
 16a:	62 81       	ldd	r22, Z+2	; 0x02
 16c:	73 81       	ldd	r23, Z+3	; 0x03
 16e:	46 17       	cp	r20, r22
 170:	57 07       	cpc	r21, r23
 172:	98 f4       	brcc	.+38     	; 0x19a <bufferAddToEnd+0x40>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
 174:	86 81       	ldd	r24, Z+6	; 0x06
 176:	97 81       	ldd	r25, Z+7	; 0x07
 178:	84 0f       	add	r24, r20
 17a:	95 1f       	adc	r25, r21
 17c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__udivmodhi4>
 180:	a0 81       	ld	r26, Z
 182:	b1 81       	ldd	r27, Z+1	; 0x01
 184:	a8 0f       	add	r26, r24
 186:	b9 1f       	adc	r27, r25
 188:	dc 93       	st	X, r29
		// increment the length
		buffer->datalength++;
 18a:	84 81       	ldd	r24, Z+4	; 0x04
 18c:	95 81       	ldd	r25, Z+5	; 0x05
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	95 83       	std	Z+5, r25	; 0x05
 192:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
 194:	cf bf       	out	0x3f, r28	; 63
		// return success
		return -1;
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	02 c0       	rjmp	.+4      	; 0x19e <bufferAddToEnd+0x44>
	}
	// end critical section
	CRITICAL_SECTION_END;
 19a:	cf bf       	out	0x3f, r28	; 63
	// return failure
	return 0;
 19c:	80 e0       	ldi	r24, 0x00	; 0
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
 1a4:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
 1a6:	4f b7       	in	r20, 0x3f	; 63
 1a8:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
 1aa:	82 81       	ldd	r24, Z+2	; 0x02
 1ac:	93 81       	ldd	r25, Z+3	; 0x03
 1ae:	24 81       	ldd	r18, Z+4	; 0x04
 1b0:	35 81       	ldd	r19, Z+5	; 0x05
	// end critical section
	CRITICAL_SECTION_END;
 1b2:	4f bf       	out	0x3f, r20	; 63
	return bytesleft;
}
 1b4:	82 1b       	sub	r24, r18
 1b6:	93 0b       	sbc	r25, r19
 1b8:	08 95       	ret

000001ba <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
 1ba:	90 93 61 00 	sts	0x0061, r25
 1be:	80 93 60 00 	sts	0x0060, r24
 1c2:	08 95       	ret

000001c4 <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
 1c4:	cf 93       	push	r28
 1c6:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
 1c8:	8a 30       	cpi	r24, 0x0A	; 10
 1ca:	31 f4       	brne	.+12     	; 0x1d8 <rprintfChar+0x14>
		rputchar('\r');
 1cc:	e0 91 60 00 	lds	r30, 0x0060
 1d0:	f0 91 61 00 	lds	r31, 0x0061
 1d4:	8d e0       	ldi	r24, 0x0D	; 13
 1d6:	09 95       	icall
	// send character
	rputchar(c);
 1d8:	e0 91 60 00 	lds	r30, 0x0060
 1dc:	f0 91 61 00 	lds	r31, 0x0061
 1e0:	8c 2f       	mov	r24, r28
 1e2:	09 95       	icall
}
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
 1e8:	8f 70       	andi	r24, 0x0F	; 15
 1ea:	e8 2f       	mov	r30, r24
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	ec 5a       	subi	r30, 0xAC	; 172
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	84 91       	lpm	r24, Z
 1f4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <rprintfChar>
 1f8:	08 95       	ret

000001fa <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
 1fa:	2f 92       	push	r2
 1fc:	3f 92       	push	r3
 1fe:	4f 92       	push	r4
 200:	5f 92       	push	r5
 202:	6f 92       	push	r6
 204:	7f 92       	push	r7
 206:	8f 92       	push	r8
 208:	9f 92       	push	r9
 20a:	af 92       	push	r10
 20c:	bf 92       	push	r11
 20e:	cf 92       	push	r12
 210:	df 92       	push	r13
 212:	ef 92       	push	r14
 214:	ff 92       	push	r15
 216:	0f 93       	push	r16
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	7d 88       	ldd	r7, Y+21	; 0x15
 224:	ce 88       	ldd	r12, Y+22	; 0x16
 226:	df 88       	ldd	r13, Y+23	; 0x17
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
 228:	4e 01       	movw	r8, r28
 22a:	28 e1       	ldi	r18, 0x18	; 24
 22c:	82 0e       	add	r8, r18
 22e:	91 1c       	adc	r9, r1

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 230:	51 2c       	mov	r5, r1
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 232:	61 2c       	mov	r6, r1
 234:	41 2c       	mov	r4, r1
 236:	06 c0       	rjmp	.+12     	; 0x244 <rprintf1RamRom+0x4a>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
 238:	88 23       	and	r24, r24
 23a:	09 f4       	brne	.+2      	; 0x23e <rprintf1RamRom+0x44>
 23c:	8d c0       	rjmp	.+282    	; 0x358 <rprintf1RamRom+0x15e>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
 23e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <rprintfChar>
 242:	68 01       	movw	r12, r16
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 244:	77 20       	and	r7, r7
 246:	41 f0       	breq	.+16     	; 0x258 <rprintf1RamRom+0x5e>
 248:	86 01       	movw	r16, r12
 24a:	0f 5f       	subi	r16, 0xFF	; 255
 24c:	1f 4f       	sbci	r17, 0xFF	; 255
 24e:	f6 01       	movw	r30, r12
 250:	84 91       	lpm	r24, Z
 252:	85 32       	cpi	r24, 0x25	; 37
 254:	89 f7       	brne	.-30     	; 0x238 <rprintf1RamRom+0x3e>
 256:	08 c0       	rjmp	.+16     	; 0x268 <rprintf1RamRom+0x6e>
 258:	f6 01       	movw	r30, r12
 25a:	80 81       	ld	r24, Z
 25c:	85 32       	cpi	r24, 0x25	; 37
 25e:	51 f0       	breq	.+20     	; 0x274 <rprintf1RamRom+0x7a>
 260:	86 01       	movw	r16, r12
 262:	0f 5f       	subi	r16, 0xFF	; 255
 264:	1f 4f       	sbci	r17, 0xFF	; 255
 266:	e8 cf       	rjmp	.-48     	; 0x238 <rprintf1RamRom+0x3e>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
 268:	f2 e0       	ldi	r31, 0x02	; 2
 26a:	cf 0e       	add	r12, r31
 26c:	d1 1c       	adc	r13, r1
 26e:	f8 01       	movw	r30, r16
 270:	84 91       	lpm	r24, Z
 272:	06 c0       	rjmp	.+12     	; 0x280 <rprintf1RamRom+0x86>
 274:	f6 01       	movw	r30, r12
 276:	81 81       	ldd	r24, Z+1	; 0x01
 278:	96 01       	movw	r18, r12
 27a:	2e 5f       	subi	r18, 0xFE	; 254
 27c:	3f 4f       	sbci	r19, 0xFF	; 255
 27e:	69 01       	movw	r12, r18
 280:	84 36       	cpi	r24, 0x64	; 100
 282:	71 f0       	breq	.+28     	; 0x2a0 <rprintf1RamRom+0xa6>
 284:	88 37       	cpi	r24, 0x78	; 120
 286:	09 f4       	brne	.+2      	; 0x28a <rprintf1RamRom+0x90>
 288:	59 c0       	rjmp	.+178    	; 0x33c <rprintf1RamRom+0x142>
 28a:	83 36       	cpi	r24, 0x63	; 99
 28c:	31 f4       	brne	.+12     	; 0x29a <rprintf1RamRom+0xa0>
		{
			case 'c': format_flag = va_arg(ap,int);
 28e:	f4 01       	movw	r30, r8
 290:	80 81       	ld	r24, Z
 292:	94 01       	movw	r18, r8
 294:	2e 5f       	subi	r18, 0xFE	; 254
 296:	3f 4f       	sbci	r19, 0xFF	; 255
 298:	49 01       	movw	r8, r18
			default:  rprintfChar(format_flag); continue;
 29a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <rprintfChar>
 29e:	d2 cf       	rjmp	.-92     	; 0x244 <rprintf1RamRom+0x4a>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 2a0:	f4 01       	movw	r30, r8
 2a2:	e0 80       	ld	r14, Z
 2a4:	f1 80       	ldd	r15, Z+1	; 0x01
 2a6:	32 e0       	ldi	r19, 0x02	; 2
 2a8:	83 0e       	add	r8, r19
 2aa:	91 1c       	adc	r9, r1
			if (format_flag == 'd')
			{
				if (((int)u_val) < 0)
 2ac:	ff 20       	and	r15, r15
 2ae:	34 f4       	brge	.+12     	; 0x2bc <rprintf1RamRom+0xc2>
				{
					u_val = - u_val;
 2b0:	f1 94       	neg	r15
 2b2:	e1 94       	neg	r14
 2b4:	f1 08       	sbc	r15, r1
					rprintfChar('-');
 2b6:	8d e2       	ldi	r24, 0x2D	; 45
 2b8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <rprintfChar>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 2bc:	80 e1       	ldi	r24, 0x10	; 16
 2be:	e8 16       	cp	r14, r24
 2c0:	87 e2       	ldi	r24, 0x27	; 39
 2c2:	f8 06       	cpc	r15, r24
 2c4:	d0 f4       	brcc	.+52     	; 0x2fa <rprintf1RamRom+0x100>
 2c6:	00 e1       	ldi	r16, 0x10	; 16
 2c8:	17 e2       	ldi	r17, 0x27	; 39
 2ca:	98 01       	movw	r18, r16
 2cc:	ad ec       	ldi	r26, 0xCD	; 205
 2ce:	bc ec       	ldi	r27, 0xCC	; 204
 2d0:	0e 94 24 04 	call	0x848	; 0x848 <__umulhisi3>
 2d4:	8c 01       	movw	r16, r24
 2d6:	16 95       	lsr	r17
 2d8:	07 95       	ror	r16
 2da:	16 95       	lsr	r17
 2dc:	07 95       	ror	r16
 2de:	16 95       	lsr	r17
 2e0:	07 95       	ror	r16
 2e2:	02 30       	cpi	r16, 0x02	; 2
 2e4:	11 05       	cpc	r17, r1
 2e6:	88 f0       	brcs	.+34     	; 0x30a <rprintf1RamRom+0x110>
 2e8:	e0 16       	cp	r14, r16
 2ea:	f1 06       	cpc	r15, r17
 2ec:	70 f3       	brcs	.-36     	; 0x2ca <rprintf1RamRom+0xd0>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 2ee:	0f 2e       	mov	r0, r31
 2f0:	fa e0       	ldi	r31, 0x0A	; 10
 2f2:	2f 2e       	mov	r2, r31
 2f4:	f0 2d       	mov	r31, r0
 2f6:	35 2c       	mov	r3, r5
 2f8:	0d c0       	rjmp	.+26     	; 0x314 <rprintf1RamRom+0x11a>
 2fa:	0f 2e       	mov	r0, r31
 2fc:	fa e0       	ldi	r31, 0x0A	; 10
 2fe:	2f 2e       	mov	r2, r31
 300:	f0 2d       	mov	r31, r0
 302:	35 2c       	mov	r3, r5
 304:	00 e1       	ldi	r16, 0x10	; 16
 306:	17 e2       	ldi	r17, 0x27	; 39
 308:	05 c0       	rjmp	.+10     	; 0x314 <rprintf1RamRom+0x11a>
 30a:	0f 2e       	mov	r0, r31
 30c:	fa e0       	ldi	r31, 0x0A	; 10
 30e:	2f 2e       	mov	r2, r31
 310:	f0 2d       	mov	r31, r0
 312:	35 2c       	mov	r3, r5
				while (div_val > 1 && div_val > u_val) div_val /= 10;
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
 314:	c7 01       	movw	r24, r14
 316:	b8 01       	movw	r22, r16
 318:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__udivmodhi4>
 31c:	a8 2e       	mov	r10, r24
 31e:	b9 2e       	mov	r11, r25
 320:	86 2f       	mov	r24, r22
 322:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <rprintfu04>
				u_val %= div_val;
 326:	ea 2c       	mov	r14, r10
 328:	fb 2c       	mov	r15, r11
				div_val /= base;
 32a:	c8 01       	movw	r24, r16
 32c:	62 2d       	mov	r22, r2
 32e:	73 2d       	mov	r23, r3
 330:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__udivmodhi4>
 334:	8b 01       	movw	r16, r22
			} while (div_val);
 336:	67 2b       	or	r22, r23
 338:	69 f7       	brne	.-38     	; 0x314 <rprintf1RamRom+0x11a>
 33a:	84 cf       	rjmp	.-248    	; 0x244 <rprintf1RamRom+0x4a>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 33c:	f4 01       	movw	r30, r8
 33e:	e0 80       	ld	r14, Z
 340:	f1 80       	ldd	r15, Z+1	; 0x01
 342:	94 01       	movw	r18, r8
 344:	2e 5f       	subi	r18, 0xFE	; 254
 346:	3f 4f       	sbci	r19, 0xFF	; 255
 348:	49 01       	movw	r8, r18
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 34a:	68 94       	set
 34c:	22 24       	eor	r2, r2
 34e:	24 f8       	bld	r2, 4
 350:	36 2c       	mov	r3, r6
 352:	04 2d       	mov	r16, r4
 354:	10 e1       	ldi	r17, 0x10	; 16
 356:	de cf       	rjmp	.-68     	; 0x314 <rprintf1RamRom+0x11a>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	ff 90       	pop	r15
 366:	ef 90       	pop	r14
 368:	df 90       	pop	r13
 36a:	cf 90       	pop	r12
 36c:	bf 90       	pop	r11
 36e:	af 90       	pop	r10
 370:	9f 90       	pop	r9
 372:	8f 90       	pop	r8
 374:	7f 90       	pop	r7
 376:	6f 90       	pop	r6
 378:	5f 90       	pop	r5
 37a:	4f 90       	pop	r4
 37c:	3f 90       	pop	r3
 37e:	2f 90       	pop	r2
 380:	08 95       	ret

00000382 <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (unsigned char *)uartRxData, UART_RX_BUFFER_SIZE);
 382:	40 e4       	ldi	r20, 0x40	; 64
 384:	50 e0       	ldi	r21, 0x00	; 0
 386:	64 ea       	ldi	r22, 0xA4	; 164
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	85 ee       	ldi	r24, 0xE5	; 229
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 7c 00 	call	0xf8	; 0xf8 <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (unsigned char *)uartTxData, UART_TX_BUFFER_SIZE);
 392:	40 e4       	ldi	r20, 0x40	; 64
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	64 e6       	ldi	r22, 0x64	; 100
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	8e ee       	ldi	r24, 0xEE	; 238
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 7c 00 	call	0xf8	; 0xf8 <bufferInit>
 3a2:	08 95       	ret

000003a4 <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
 3a4:	0e 94 c1 01 	call	0x382	; 0x382 <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
 3a8:	10 92 63 00 	sts	0x0063, r1
 3ac:	10 92 62 00 	sts	0x0062, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
 3b0:	88 ed       	ldi	r24, 0xD8	; 216
 3b2:	8a b9       	out	0x0a, r24	; 10
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
 3b4:	8f e5       	ldi	r24, 0x5F	; 95
 3b6:	89 b9       	out	0x09, r24	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 3b8:	10 bc       	out	0x20, r1	; 32
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	80 93 e4 00 	sts	0x00E4, r24
	uartBufferedTx = FALSE;
 3c0:	10 92 ed 00 	sts	0x00ED, r1
	// clear overflow count
	uartRxOverflow = 0;
 3c4:	10 92 f7 00 	sts	0x00F7, r1
 3c8:	10 92 f6 00 	sts	0x00F6, r1
	// enable interrupts
	sei();
 3cc:	78 94       	sei
 3ce:	08 95       	ret

000003d0 <uartSetBaudRate>:
	UartRxFunc = rx_func;
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
 3d0:	0f 93       	push	r16
 3d2:	1f 93       	push	r17
 3d4:	8b 01       	movw	r16, r22
 3d6:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
 3d8:	dc 01       	movw	r26, r24
 3da:	cb 01       	movw	r24, r22
 3dc:	90 5e       	subi	r25, 0xE0	; 224
 3de:	a3 4e       	sbci	r26, 0xE3	; 227
 3e0:	bf 4f       	sbci	r27, 0xFF	; 255
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	aa 1f       	adc	r26, r26
 3e8:	bb 1f       	adc	r27, r27
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	aa 1f       	adc	r26, r26
 3f0:	bb 1f       	adc	r27, r27
 3f2:	bc 01       	movw	r22, r24
 3f4:	cd 01       	movw	r24, r26
 3f6:	66 0f       	add	r22, r22
 3f8:	77 1f       	adc	r23, r23
 3fa:	88 1f       	adc	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	00 0f       	add	r16, r16
 400:	11 1f       	adc	r17, r17
 402:	22 1f       	adc	r18, r18
 404:	33 1f       	adc	r19, r19
 406:	00 0f       	add	r16, r16
 408:	11 1f       	adc	r17, r17
 40a:	22 1f       	adc	r18, r18
 40c:	33 1f       	adc	r19, r19
 40e:	a9 01       	movw	r20, r18
 410:	98 01       	movw	r18, r16
 412:	22 0f       	add	r18, r18
 414:	33 1f       	adc	r19, r19
 416:	44 1f       	adc	r20, r20
 418:	55 1f       	adc	r21, r21
 41a:	22 0f       	add	r18, r18
 41c:	33 1f       	adc	r19, r19
 41e:	44 1f       	adc	r20, r20
 420:	55 1f       	adc	r21, r21
 422:	0e 94 02 04 	call	0x804	; 0x804 <__udivmodsi4>
 426:	21 50       	subi	r18, 0x01	; 1
 428:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
 42a:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 42c:	30 bd       	out	0x20, r19	; 32
	#endif
}
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	08 95       	ret

00000434 <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
 434:	90 91 e4 00 	lds	r25, 0x00E4
 438:	99 23       	and	r25, r25
 43a:	e1 f3       	breq	.-8      	; 0x434 <uartSendByte>
	// send byte
	outb(UDR, txData);
 43c:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
 43e:	10 92 e4 00 	sts	0x00E4, r1
 442:	08 95       	ret

00000444 <__vector_13>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_TRANS)
{
 444:	1f 92       	push	r1
 446:	0f 92       	push	r0
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	0f 92       	push	r0
 44c:	11 24       	eor	r1, r1
 44e:	2f 93       	push	r18
 450:	3f 93       	push	r19
 452:	4f 93       	push	r20
 454:	5f 93       	push	r21
 456:	6f 93       	push	r22
 458:	7f 93       	push	r23
 45a:	8f 93       	push	r24
 45c:	9f 93       	push	r25
 45e:	af 93       	push	r26
 460:	bf 93       	push	r27
 462:	ef 93       	push	r30
 464:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
 466:	80 91 ed 00 	lds	r24, 0x00ED
 46a:	88 23       	and	r24, r24
 46c:	91 f0       	breq	.+36     	; 0x492 <__stack+0x33>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
 46e:	80 91 f2 00 	lds	r24, 0x00F2
 472:	90 91 f3 00 	lds	r25, 0x00F3
 476:	89 2b       	or	r24, r25
 478:	31 f0       	breq	.+12     	; 0x486 <__stack+0x27>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
 47a:	8e ee       	ldi	r24, 0xEE	; 238
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 89 00 	call	0x112	; 0x112 <bufferGetFromFront>
 482:	8c b9       	out	0x0c, r24	; 12
 484:	09 c0       	rjmp	.+18     	; 0x498 <__stack+0x39>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
 486:	10 92 ed 00 	sts	0x00ED, r1
			// return to ready state
			uartReadyTx = TRUE;
 48a:	8f ef       	ldi	r24, 0xFF	; 255
 48c:	80 93 e4 00 	sts	0x00E4, r24
 490:	03 c0       	rjmp	.+6      	; 0x498 <__stack+0x39>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
 492:	8f ef       	ldi	r24, 0xFF	; 255
 494:	80 93 e4 00 	sts	0x00E4, r24
	}
}
 498:	ff 91       	pop	r31
 49a:	ef 91       	pop	r30
 49c:	bf 91       	pop	r27
 49e:	af 91       	pop	r26
 4a0:	9f 91       	pop	r25
 4a2:	8f 91       	pop	r24
 4a4:	7f 91       	pop	r23
 4a6:	6f 91       	pop	r22
 4a8:	5f 91       	pop	r21
 4aa:	4f 91       	pop	r20
 4ac:	3f 91       	pop	r19
 4ae:	2f 91       	pop	r18
 4b0:	0f 90       	pop	r0
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	0f 90       	pop	r0
 4b6:	1f 90       	pop	r1
 4b8:	18 95       	reti

000004ba <__vector_11>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_RECV)
{
 4ba:	1f 92       	push	r1
 4bc:	0f 92       	push	r0
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	0f 92       	push	r0
 4c2:	11 24       	eor	r1, r1
 4c4:	2f 93       	push	r18
 4c6:	3f 93       	push	r19
 4c8:	4f 93       	push	r20
 4ca:	5f 93       	push	r21
 4cc:	6f 93       	push	r22
 4ce:	7f 93       	push	r23
 4d0:	8f 93       	push	r24
 4d2:	9f 93       	push	r25
 4d4:	af 93       	push	r26
 4d6:	bf 93       	push	r27
 4d8:	ef 93       	push	r30
 4da:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
 4dc:	8c b1       	in	r24, 0x0c	; 12

	// if there's a user function to handle this receive event
	if(UartRxFunc)
 4de:	20 91 62 00 	lds	r18, 0x0062
 4e2:	30 91 63 00 	lds	r19, 0x0063
 4e6:	23 2b       	or	r18, r19
 4e8:	31 f0       	breq	.+12     	; 0x4f6 <__vector_11+0x3c>
	{
		// call it and pass the received data
		UartRxFunc(c);
 4ea:	e0 91 62 00 	lds	r30, 0x0062
 4ee:	f0 91 63 00 	lds	r31, 0x0063
 4f2:	09 95       	icall
 4f4:	10 c0       	rjmp	.+32     	; 0x516 <__vector_11+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
 4f6:	68 2f       	mov	r22, r24
 4f8:	85 ee       	ldi	r24, 0xE5	; 229
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 ad 00 	call	0x15a	; 0x15a <bufferAddToEnd>
 500:	81 11       	cpse	r24, r1
 502:	09 c0       	rjmp	.+18     	; 0x516 <__vector_11+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
 504:	80 91 f6 00 	lds	r24, 0x00F6
 508:	90 91 f7 00 	lds	r25, 0x00F7
 50c:	01 96       	adiw	r24, 0x01	; 1
 50e:	90 93 f7 00 	sts	0x00F7, r25
 512:	80 93 f6 00 	sts	0x00F6, r24
		}
	}
}
 516:	ff 91       	pop	r31
 518:	ef 91       	pop	r30
 51a:	bf 91       	pop	r27
 51c:	af 91       	pop	r26
 51e:	9f 91       	pop	r25
 520:	8f 91       	pop	r24
 522:	7f 91       	pop	r23
 524:	6f 91       	pop	r22
 526:	5f 91       	pop	r21
 528:	4f 91       	pop	r20
 52a:	3f 91       	pop	r19
 52c:	2f 91       	pop	r18
 52e:	0f 90       	pop	r0
 530:	0f be       	out	0x3f, r0	; 63
 532:	0f 90       	pop	r0
 534:	1f 90       	pop	r1
 536:	18 95       	reti

00000538 <McuInit>:

void McuInit(void)
{
	// initialize our libraries
	// initialize the UART (serial port)
	uartInit();		/* sei() call in the function */
 538:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <uartInit>
	// set the baud rate of the UART for our debug/reporting output
	uartSetBaudRate(9600);
 53c:	60 e8       	ldi	r22, 0x80	; 128
 53e:	75 e2       	ldi	r23, 0x25	; 37
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <uartSetBaudRate>
	// initialize rprintf system
	rprintfInit(uartSendByte);
 548:	8a e1       	ldi	r24, 0x1A	; 26
 54a:	92 e0       	ldi	r25, 0x02	; 2
 54c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <rprintfInit>
 550:	08 95       	ret

00000552 <ApplInit>:
*********************************************************************************************************
*/

void ApplInit(void)
{
	ButtonInit();
 552:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ButtonInit>
	
	//glcdInit();	/* Need connect to LCD device because MCU will check lcd busy or not will cause waiting */
	
	//glcdPutStr(&greeting[0]);
	// Just print message for debug.
	rprintf("Main Board start!\n" );	
 556:	8c eb       	ldi	r24, 0xBC	; 188
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	9f 93       	push	r25
 55c:	8f 93       	push	r24
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	8f 93       	push	r24
 562:	0e 94 fd 00 	call	0x1fa	; 0x1fa <rprintf1RamRom>
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	0f 90       	pop	r0
 56c:	08 95       	ret

0000056e <AppCycleUpdate>:
*
* Returns    : none
*********************************************************************************************************
*/
void AppCycleUpdate(void)
{	
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
	char tempChar;
	//if(button.buttonsReleased.bVal) rprintf("rl=%x\n", button.buttonsReleased.bVal);
	if(button.buttonsReleased.bVal) 
 572:	80 91 fe 00 	lds	r24, 0x00FE
 576:	88 23       	and	r24, r24
 578:	09 f4       	brne	.+2      	; 0x57c <AppCycleUpdate+0xe>
 57a:	89 c0       	rjmp	.+274    	; 0x68e <AppCycleUpdate+0x120>
	{
		rprintf("rl=%x\n", button.buttonsReleased.bVal);
 57c:	1f 92       	push	r1
 57e:	8f 93       	push	r24
 580:	85 eb       	ldi	r24, 0xB5	; 181
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	9f 93       	push	r25
 586:	8f 93       	push	r24
 588:	c1 e0       	ldi	r28, 0x01	; 1
 58a:	cf 93       	push	r28
 58c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <rprintf1RamRom>
		rprintf("rh=%x\n", button.buttonsReleased.bVal>>16);
 590:	80 91 fe 00 	lds	r24, 0x00FE
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	99 0f       	add	r25, r25
 598:	88 0b       	sbc	r24, r24
 59a:	98 2f       	mov	r25, r24
 59c:	9f 93       	push	r25
 59e:	8f 93       	push	r24
 5a0:	8e ea       	ldi	r24, 0xAE	; 174
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	9f 93       	push	r25
 5a6:	8f 93       	push	r24
 5a8:	cf 93       	push	r28
 5aa:	0e 94 fd 00 	call	0x1fa	; 0x1fa <rprintf1RamRom>
		
		if(button.buttonsReleased.PBtn13)
 5ae:	80 91 ff 00 	lds	r24, 0x00FF
 5b2:	2d b7       	in	r18, 0x3d	; 61
 5b4:	3e b7       	in	r19, 0x3e	; 62
 5b6:	26 5f       	subi	r18, 0xF6	; 246
 5b8:	3f 4f       	sbci	r19, 0xFF	; 255
 5ba:	0f b6       	in	r0, 0x3f	; 63
 5bc:	f8 94       	cli
 5be:	3e bf       	out	0x3e, r19	; 62
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	2d bf       	out	0x3d, r18	; 61
 5c4:	84 ff       	sbrs	r24, 4
 5c6:	0c c0       	rjmp	.+24     	; 0x5e0 <AppCycleUpdate+0x72>
		{
			//glcdSetAddress(0,0);
			char greeting[] = "PBtn13,Hello World!";
			//glcdPutStr(&greeting[0]);
			rprintf("PBtn13\n");
 5c8:	86 ea       	ldi	r24, 0xA6	; 166
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	9f 93       	push	r25
 5ce:	8f 93       	push	r24
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	8f 93       	push	r24
 5d4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <rprintf1RamRom>
 5d8:	0f 90       	pop	r0
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	57 c0       	rjmp	.+174    	; 0x68e <AppCycleUpdate+0x120>
		}
		else if(button.buttonsReleased.PBtn14)
 5e0:	80 ff       	sbrs	r24, 0
 5e2:	0c c0       	rjmp	.+24     	; 0x5fc <AppCycleUpdate+0x8e>
		{
			//glcdSetAddress(0,1);
			char greeting[] = "PBtn14,Hello World!";
			//glcdPutStr(&greeting[0]);
			rprintf("PBtn14\n");
 5e4:	8e e9       	ldi	r24, 0x9E	; 158
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	9f 93       	push	r25
 5ea:	8f 93       	push	r24
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	8f 93       	push	r24
 5f0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <rprintf1RamRom>
 5f4:	0f 90       	pop	r0
 5f6:	0f 90       	pop	r0
 5f8:	0f 90       	pop	r0
 5fa:	49 c0       	rjmp	.+146    	; 0x68e <AppCycleUpdate+0x120>
		}
		else if(button.buttonsReleased.PBtn15)
 5fc:	90 91 fe 00 	lds	r25, 0x00FE
 600:	94 ff       	sbrs	r25, 4
 602:	0c c0       	rjmp	.+24     	; 0x61c <AppCycleUpdate+0xae>
		{
			//glcdSetAddress(0,2);
			char greeting[] = "PBtn15,Hello World!";
			//glcdPutStr(&greeting[0]);
			rprintf("PBtn15\n");
 604:	86 e9       	ldi	r24, 0x96	; 150
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	9f 93       	push	r25
 60a:	8f 93       	push	r24
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	8f 93       	push	r24
 610:	0e 94 fd 00 	call	0x1fa	; 0x1fa <rprintf1RamRom>
 614:	0f 90       	pop	r0
 616:	0f 90       	pop	r0
 618:	0f 90       	pop	r0
 61a:	39 c0       	rjmp	.+114    	; 0x68e <AppCycleUpdate+0x120>
		}
		else if(button.buttonsReleased.PBtn1)
 61c:	88 23       	and	r24, r24
 61e:	64 f4       	brge	.+24     	; 0x638 <AppCycleUpdate+0xca>
		{
			//glcdSetAddress(0,3);
			char greeting[] = "PBtn1,Hello World!";
			//glcdPutStr(&greeting[0]);
			rprintf("PBtn1\n");
 620:	8f e8       	ldi	r24, 0x8F	; 143
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	9f 93       	push	r25
 626:	8f 93       	push	r24
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	8f 93       	push	r24
 62c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <rprintf1RamRom>
 630:	0f 90       	pop	r0
 632:	0f 90       	pop	r0
 634:	0f 90       	pop	r0
 636:	2b c0       	rjmp	.+86     	; 0x68e <AppCycleUpdate+0x120>
		}
		else if(button.buttonsReleased.PBtn5)
 638:	86 ff       	sbrs	r24, 6
 63a:	0c c0       	rjmp	.+24     	; 0x654 <AppCycleUpdate+0xe6>
		{
			//glcdSetAddress(0,4);
			char greeting[] = "PBtn5,Hello World!";
			//glcdPutStr(&greeting[0]);
			rprintf("PBtn5\n");
 63c:	88 e8       	ldi	r24, 0x88	; 136
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	9f 93       	push	r25
 642:	8f 93       	push	r24
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	8f 93       	push	r24
 648:	0e 94 fd 00 	call	0x1fa	; 0x1fa <rprintf1RamRom>
 64c:	0f 90       	pop	r0
 64e:	0f 90       	pop	r0
 650:	0f 90       	pop	r0
 652:	1d c0       	rjmp	.+58     	; 0x68e <AppCycleUpdate+0x120>
		}
		else if(button.buttonsReleased.PBtn9)
 654:	85 ff       	sbrs	r24, 5
 656:	0c c0       	rjmp	.+24     	; 0x670 <AppCycleUpdate+0x102>
		{
			//glcdSetAddress(0,5);
			char greeting[] = "PBtn9,Hello World!";
			//glcdPutStr(&greeting[0]);
			rprintf("PBtn9\n");
 658:	81 e8       	ldi	r24, 0x81	; 129
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	9f 93       	push	r25
 65e:	8f 93       	push	r24
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	8f 93       	push	r24
 664:	0e 94 fd 00 	call	0x1fa	; 0x1fa <rprintf1RamRom>
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	0f c0       	rjmp	.+30     	; 0x68e <AppCycleUpdate+0x120>
		}
		else if(button.buttonsReleased.PBtn18)
 670:	80 91 00 01 	lds	r24, 0x0100
 674:	82 ff       	sbrs	r24, 2
 676:	0b c0       	rjmp	.+22     	; 0x68e <AppCycleUpdate+0x120>
		{
			//glcdSetAddress(0,1);
			//glcdClearScreen();
			rprintf("PBtn18,Clear Home\n");
 678:	8e e6       	ldi	r24, 0x6E	; 110
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	9f 93       	push	r25
 67e:	8f 93       	push	r24
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	8f 93       	push	r24
 684:	0e 94 fd 00 	call	0x1fa	; 0x1fa <rprintf1RamRom>
 688:	0f 90       	pop	r0
 68a:	0f 90       	pop	r0
 68c:	0f 90       	pop	r0
		}
	}

	if(uartRxBuffer.size - bufferIsNotFull(&uartRxBuffer) != 0)
 68e:	c0 91 e7 00 	lds	r28, 0x00E7
 692:	d0 91 e8 00 	lds	r29, 0x00E8
 696:	85 ee       	ldi	r24, 0xE5	; 229
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <bufferIsNotFull>
 69e:	c8 17       	cp	r28, r24
 6a0:	d9 07       	cpc	r29, r25
 6a2:	99 f0       	breq	.+38     	; 0x6ca <AppCycleUpdate+0x15c>
	{
		tempChar = bufferGetFromFront(&uartRxBuffer);
 6a4:	85 ee       	ldi	r24, 0xE5	; 229
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0e 94 89 00 	call	0x112	; 0x112 <bufferGetFromFront>
		//rprintf("char=%c\n",tempChar);
		rprintf("Type=%c\n",tempChar);
 6ac:	1f 92       	push	r1
 6ae:	8f 93       	push	r24
 6b0:	85 e6       	ldi	r24, 0x65	; 101
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	9f 93       	push	r25
 6b6:	8f 93       	push	r24
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	8f 93       	push	r24
 6bc:	0e 94 fd 00 	call	0x1fa	; 0x1fa <rprintf1RamRom>
 6c0:	0f 90       	pop	r0
 6c2:	0f 90       	pop	r0
 6c4:	0f 90       	pop	r0
 6c6:	0f 90       	pop	r0
 6c8:	0f 90       	pop	r0
	}
	//rprintf("D=%d\n",uartRxBuffer.datalength);

	//rprintfChar('a');
	//glcdWriteChar(cnt++/2);
}
 6ca:	df 91       	pop	r29
 6cc:	cf 91       	pop	r28
 6ce:	08 95       	ret

000006d0 <main>:
int main(void)
{	
	/*
	Calll all initial function
	*/
	McuInit();
 6d0:	0e 94 9c 02 	call	0x538	; 0x538 <McuInit>
	ApplInit();
 6d4:	0e 94 a9 02 	call	0x552	; 0x552 <ApplInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6d8:	26 e6       	ldi	r18, 0x66	; 102
 6da:	86 ee       	ldi	r24, 0xE6	; 230
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	21 50       	subi	r18, 0x01	; 1
 6e0:	80 40       	sbci	r24, 0x00	; 0
 6e2:	90 40       	sbci	r25, 0x00	; 0
 6e4:	e1 f7       	brne	.-8      	; 0x6de <main+0xe>
	
	while(1)
	{
		_delay_ms(20);
		ButtonCycleUpdate();
 6e6:	0e 94 82 03 	call	0x704	; 0x704 <ButtonCycleUpdate>
		AppCycleUpdate();
 6ea:	0e 94 b7 02 	call	0x56e	; 0x56e <AppCycleUpdate>
	}
 6ee:	f4 cf       	rjmp	.-24     	; 0x6d8 <main+0x8>

000006f0 <ButtonInit>:
*********************************************************************************************************
*/

void ButtonInit(void)
{
	DDRD  &= ~((1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3));	/* Set PD6-PD3 as input */
 6f0:	81 b3       	in	r24, 0x11	; 17
 6f2:	87 78       	andi	r24, 0x87	; 135
 6f4:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<PD6) | (1<<PD5) | (1<<PD4) | (1<<PD3);			/* Set PD6-PD3 as internal pull up */
 6f6:	82 b3       	in	r24, 0x12	; 18
 6f8:	88 67       	ori	r24, 0x78	; 120
 6fa:	82 bb       	out	0x12, r24	; 18
	
	/* 
	Set PC7-PC4 as input as internal pull up
	Set PC3-PC0 as Tri-state (Hi-Z) 
	*/
	DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 6fc:	14 ba       	out	0x14, r1	; 20
	PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 6fe:	80 ef       	ldi	r24, 0xF0	; 240
 700:	85 bb       	out	0x15, r24	; 21
 702:	08 95       	ret

00000704 <ButtonCycleUpdate>:
	ButtonDataType io_state = 0;
	ButtonDataType tempValue;
	ButtonDataType MatrixButtonValue;
	uint8_t Col;
	
	tempValue = (~PIND) & ((1<<PIND6) | (1<<PIND5) | (1<<PIND4) | (1<<PIND3));	/* Get PD6-PD3 IO state */
 704:	80 b3       	in	r24, 0x10	; 16
 706:	40 e0       	ldi	r20, 0x00	; 0
 708:	50 e0       	ldi	r21, 0x00	; 0
	tempValue >>= 3;	/* right rotate to low 4 bits location */
	
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
 70a:	20 e0       	ldi	r18, 0x00	; 0
		/* 
		Set PC7-PC4 as input as internal pull up
		Set PC3-PC0 as Tri-state (Hi-Z)
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 70c:	e0 ef       	ldi	r30, 0xF0	; 240
	
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
 70e:	68 e0       	ldi	r22, 0x08	; 8
 710:	70 e0       	ldi	r23, 0x00	; 0
	{
		/* 
		Set PC7-PC4 as input as internal pull up
		Set PC3-PC0 as Tri-state (Hi-Z)
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 712:	14 ba       	out	0x14, r1	; 20
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 714:	e5 bb       	out	0x15, r30	; 21
	
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
 716:	34 b3       	in	r19, 0x14	; 20
 718:	cb 01       	movw	r24, r22
 71a:	04 2e       	mov	r0, r20
 71c:	02 c0       	rjmp	.+4      	; 0x722 <ButtonCycleUpdate+0x1e>
 71e:	95 95       	asr	r25
 720:	87 95       	ror	r24
 722:	0a 94       	dec	r0
 724:	e2 f7       	brpl	.-8      	; 0x71e <ButtonCycleUpdate+0x1a>
 726:	93 2f       	mov	r25, r19
 728:	98 2b       	or	r25, r24
 72a:	94 bb       	out	0x14, r25	; 20
		PORTC &= ~(0x08>>Col);		/* Set the column as low */
 72c:	95 b3       	in	r25, 0x15	; 21
 72e:	80 95       	com	r24
 730:	89 23       	and	r24, r25
 732:	85 bb       	out	0x15, r24	; 21
		
		/* read and save button state after the column which active as low */
		MatrixButtonValue <<= 4;	/* newer 4 button state store in lower four bits */
		MatrixButtonValue |= ((~PINC) & 0x00f0) >> 4;
 734:	83 b3       	in	r24, 0x13	; 19
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	80 95       	com	r24
 73a:	90 95       	com	r25
 73c:	80 7f       	andi	r24, 0xF0	; 240
 73e:	99 27       	eor	r25, r25
 740:	95 95       	asr	r25
 742:	87 95       	ror	r24
 744:	95 95       	asr	r25
 746:	87 95       	ror	r24
 748:	95 95       	asr	r25
 74a:	87 95       	ror	r24
 74c:	95 95       	asr	r25
 74e:	87 95       	ror	r24
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
		PORTC &= ~(0x08>>Col);		/* Set the column as low */
		
		/* read and save button state after the column which active as low */
		MatrixButtonValue <<= 4;	/* newer 4 button state store in lower four bits */
 750:	22 95       	swap	r18
 752:	20 7f       	andi	r18, 0xF0	; 240
		MatrixButtonValue |= ((~PINC) & 0x00f0) >> 4;
 754:	28 2b       	or	r18, r24
 756:	4f 5f       	subi	r20, 0xFF	; 255
 758:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t Col;
	
	tempValue = (~PIND) & ((1<<PIND6) | (1<<PIND5) | (1<<PIND4) | (1<<PIND3));	/* Get PD6-PD3 IO state */
	tempValue >>= 3;	/* right rotate to low 4 bits location */
	
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
 75a:	44 30       	cpi	r20, 0x04	; 4
 75c:	51 05       	cpc	r21, r1
 75e:	c9 f6       	brne	.-78     	; 0x712 <ButtonCycleUpdate+0xe>
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
 760:	e8 ef       	ldi	r30, 0xF8	; 248
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	80 81       	ld	r24, Z
 766:	28 2b       	or	r18, r24
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
 768:	10 82       	st	Z, r1
	b = button.buttonsLastCycle.bVal;
 76a:	83 81       	ldd	r24, Z+3	; 0x03
	holdTime = button.buttonHoldTime;
 76c:	42 89       	ldd	r20, Z+18	; 0x12
 76e:	53 89       	ldd	r21, Z+19	; 0x13
	
	if (button.buttonsReleased.bVal != 0) {		
 770:	96 81       	ldd	r25, Z+6	; 0x06
 772:	99 23       	and	r25, r25
 774:	19 f0       	breq	.+6      	; 0x77c <ButtonCycleUpdate+0x78>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
 776:	90 93 04 01 	sts	0x0104, r25
 77a:	05 c0       	rjmp	.+10     	; 0x786 <ButtonCycleUpdate+0x82>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
 77c:	4d 33       	cpi	r20, 0x3D	; 61
 77e:	51 05       	cpc	r21, r1
 780:	10 f0       	brcs	.+4      	; 0x786 <ButtonCycleUpdate+0x82>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
 782:	10 92 04 01 	sts	0x0104, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
 786:	e8 ef       	ldi	r30, 0xF8	; 248
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	16 82       	std	Z+6, r1	; 0x06
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
 78c:	17 86       	std	Z+15, r1	; 0x0f
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
 78e:	28 13       	cpse	r18, r24
 790:	0f c0       	rjmp	.+30     	; 0x7b0 <ButtonCycleUpdate+0xac>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
 792:	4f 5f       	subi	r20, 0xFF	; 255
 794:	5f 4f       	sbci	r21, 0xFF	; 255
 796:	44 32       	cpi	r20, 0x24	; 36
 798:	51 05       	cpc	r21, r1
 79a:	18 f4       	brcc	.+6      	; 0x7a2 <ButtonCycleUpdate+0x9e>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
 79c:	10 92 01 01 	sts	0x0101, r1
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <ButtonCycleUpdate+0xa2>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
 7a2:	20 93 01 01 	sts	0x0101, r18
		}	
		button.buttonHoldTime = holdTime;
 7a6:	50 93 0b 01 	sts	0x010B, r21
 7aa:	40 93 0a 01 	sts	0x010A, r20
 7ae:	08 95       	ret
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
 7b0:	e8 ef       	ldi	r30, 0xF8	; 248
 7b2:	f0 e0       	ldi	r31, 0x00	; 0
 7b4:	23 83       	std	Z+3, r18	; 0x03
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
 7b6:	20 95       	com	r18
 7b8:	28 23       	and	r18, r24
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
 7ba:	81 85       	ldd	r24, Z+9	; 0x09
 7bc:	82 23       	and	r24, r18
 7be:	69 f4       	brne	.+26     	; 0x7da <ButtonCycleUpdate+0xd6>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
 7c0:	10 92 0b 01 	sts	0x010B, r1
 7c4:	10 92 0a 01 	sts	0x010A, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
 7c8:	43 50       	subi	r20, 0x03	; 3
 7ca:	51 09       	sbc	r21, r1
 7cc:	40 32       	cpi	r20, 0x20	; 32
 7ce:	51 05       	cpc	r21, r1
 7d0:	20 f4       	brcc	.+8      	; 0x7da <ButtonCycleUpdate+0xd6>
				button.buttonsReleased.bVal = buttons;	
 7d2:	26 83       	std	Z+6, r18	; 0x06
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
 7d4:	84 85       	ldd	r24, Z+12	; 0x0c
 7d6:	28 23       	and	r18, r24
 7d8:	27 87       	std	Z+15, r18	; 0x0f
 7da:	08 95       	ret

000007dc <__udivmodhi4>:
 7dc:	aa 1b       	sub	r26, r26
 7de:	bb 1b       	sub	r27, r27
 7e0:	51 e1       	ldi	r21, 0x11	; 17
 7e2:	07 c0       	rjmp	.+14     	; 0x7f2 <__udivmodhi4_ep>

000007e4 <__udivmodhi4_loop>:
 7e4:	aa 1f       	adc	r26, r26
 7e6:	bb 1f       	adc	r27, r27
 7e8:	a6 17       	cp	r26, r22
 7ea:	b7 07       	cpc	r27, r23
 7ec:	10 f0       	brcs	.+4      	; 0x7f2 <__udivmodhi4_ep>
 7ee:	a6 1b       	sub	r26, r22
 7f0:	b7 0b       	sbc	r27, r23

000007f2 <__udivmodhi4_ep>:
 7f2:	88 1f       	adc	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	5a 95       	dec	r21
 7f8:	a9 f7       	brne	.-22     	; 0x7e4 <__udivmodhi4_loop>
 7fa:	80 95       	com	r24
 7fc:	90 95       	com	r25
 7fe:	bc 01       	movw	r22, r24
 800:	cd 01       	movw	r24, r26
 802:	08 95       	ret

00000804 <__udivmodsi4>:
 804:	a1 e2       	ldi	r26, 0x21	; 33
 806:	1a 2e       	mov	r1, r26
 808:	aa 1b       	sub	r26, r26
 80a:	bb 1b       	sub	r27, r27
 80c:	fd 01       	movw	r30, r26
 80e:	0d c0       	rjmp	.+26     	; 0x82a <__udivmodsi4_ep>

00000810 <__udivmodsi4_loop>:
 810:	aa 1f       	adc	r26, r26
 812:	bb 1f       	adc	r27, r27
 814:	ee 1f       	adc	r30, r30
 816:	ff 1f       	adc	r31, r31
 818:	a2 17       	cp	r26, r18
 81a:	b3 07       	cpc	r27, r19
 81c:	e4 07       	cpc	r30, r20
 81e:	f5 07       	cpc	r31, r21
 820:	20 f0       	brcs	.+8      	; 0x82a <__udivmodsi4_ep>
 822:	a2 1b       	sub	r26, r18
 824:	b3 0b       	sbc	r27, r19
 826:	e4 0b       	sbc	r30, r20
 828:	f5 0b       	sbc	r31, r21

0000082a <__udivmodsi4_ep>:
 82a:	66 1f       	adc	r22, r22
 82c:	77 1f       	adc	r23, r23
 82e:	88 1f       	adc	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	1a 94       	dec	r1
 834:	69 f7       	brne	.-38     	; 0x810 <__udivmodsi4_loop>
 836:	60 95       	com	r22
 838:	70 95       	com	r23
 83a:	80 95       	com	r24
 83c:	90 95       	com	r25
 83e:	9b 01       	movw	r18, r22
 840:	ac 01       	movw	r20, r24
 842:	bd 01       	movw	r22, r26
 844:	cf 01       	movw	r24, r30
 846:	08 95       	ret

00000848 <__umulhisi3>:
 848:	a2 9f       	mul	r26, r18
 84a:	b0 01       	movw	r22, r0
 84c:	b3 9f       	mul	r27, r19
 84e:	c0 01       	movw	r24, r0
 850:	a3 9f       	mul	r26, r19
 852:	70 0d       	add	r23, r0
 854:	81 1d       	adc	r24, r1
 856:	11 24       	eor	r1, r1
 858:	91 1d       	adc	r25, r1
 85a:	b2 9f       	mul	r27, r18
 85c:	70 0d       	add	r23, r0
 85e:	81 1d       	adc	r24, r1
 860:	11 24       	eor	r1, r1
 862:	91 1d       	adc	r25, r1
 864:	08 95       	ret

00000866 <_exit>:
 866:	f8 94       	cli

00000868 <__stop_program>:
 868:	ff cf       	rjmp	.-2      	; 0x868 <__stop_program>
