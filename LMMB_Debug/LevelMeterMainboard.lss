
LevelMeterMainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f5  00800060  00800060  00001170  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b8  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034ab  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013ed  00000000  00000000  00004b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013ce  00000000  00000000  00005f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cd4  00000000  00000000  000072fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000119a  00000000  00000000  00007fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021f5  00000000  00000000  0000916a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  0000b35f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__ctors_end>
       4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
       8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
       c:	0c 94 8a 03 	jmp	0x714	; 0x714 <__vector_3>
      10:	0c 94 96 02 	jmp	0x52c	; 0x52c <__vector_4>
      14:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__vector_5>
      18:	0c 94 03 03 	jmp	0x606	; 0x606 <__vector_6>
      1c:	0c 94 30 03 	jmp	0x660	; 0x660 <__vector_7>
      20:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__vector_8>
      24:	0c 94 16 02 	jmp	0x42c	; 0x42c <__vector_9>
      28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      2c:	0c 94 40 04 	jmp	0x880	; 0x880 <__vector_11>
      30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      34:	0c 94 09 04 	jmp	0x812	; 0x812 <__vector_13>
      38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      4c:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__vector_19>
      50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      54:	93 04       	cpc	r9, r3
      56:	96 04       	cpc	r9, r6
      58:	99 04       	cpc	r9, r9
      5a:	9c 04       	cpc	r9, r12
      5c:	9f 04       	cpc	r9, r15
      5e:	a2 04       	cpc	r10, r2
      60:	a5 04       	cpc	r10, r5
      62:	a8 04       	cpc	r10, r8

00000064 <__trampolines_end>:
      64:	30 31       	cpi	r19, 0x10	; 16
      66:	32 33       	cpi	r19, 0x32	; 50
      68:	34 35       	cpi	r19, 0x54	; 84
      6a:	36 37       	cpi	r19, 0x76	; 118
      6c:	38 39       	cpi	r19, 0x98	; 152
      6e:	41 42       	sbci	r20, 0x21	; 33
      70:	43 44       	sbci	r20, 0x43	; 67
      72:	45 46       	sbci	r20, 0x65	; 101
	...

00000075 <__c.2079>:
      75:	64 43 3d 25 64 0a 0a 00                             dC=%d...

0000007d <__c.2075>:
      7d:	54 79 70 65 3d 25 63 0a 00                          Type=%c..

00000086 <__c.2062>:
      86:	4d 61 69 6e 20 62 6f 61 72 64 20 68 65 72 65 21     Main board here!
      96:	0a 00                                               ..

00000098 <__c.1829>:
      98:	61 3d 25 64 0d 0a 00                                a=%d...

0000009f <ssdCharTble>:
      9f:	c0 f9 a4 b0 99 92 82 f8 80 90 88 83 c6 a1 86 8e     ................
      af:	ff fe f7                                            ...

000000b2 <__ctors_end>:
      b2:	11 24       	eor	r1, r1
      b4:	1f be       	out	0x3f, r1	; 63
      b6:	cf e5       	ldi	r28, 0x5F	; 95
      b8:	d4 e0       	ldi	r29, 0x04	; 4
      ba:	de bf       	out	0x3e, r29	; 62
      bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_clear_bss>:
      be:	21 e0       	ldi	r18, 0x01	; 1
      c0:	a0 e6       	ldi	r26, 0x60	; 96
      c2:	b0 e0       	ldi	r27, 0x00	; 0
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a5 35       	cpi	r26, 0x55	; 85
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	0e 94 b5 06 	call	0xd6a	; 0xd6a <main>
      d2:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <_exit>

000000d6 <__bad_interrupt>:
      d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
      da:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
      dc:	8f b7       	in	r24, 0x3f	; 63
      de:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
      e0:	71 83       	std	Z+1, r23	; 0x01
      e2:	60 83       	st	Z, r22
	buffer->size = size;
      e4:	53 83       	std	Z+3, r21	; 0x03
      e6:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
      e8:	17 82       	std	Z+7, r1	; 0x07
      ea:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
      ec:	15 82       	std	Z+5, r1	; 0x05
      ee:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
      f0:	8f bf       	out	0x3f, r24	; 63
      f2:	08 95       	ret

000000f4 <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
      f4:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
      f6:	9f b7       	in	r25, 0x3f	; 63
      f8:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
      fa:	44 81       	ldd	r20, Z+4	; 0x04
      fc:	55 81       	ldd	r21, Z+5	; 0x05
      fe:	41 15       	cp	r20, r1
     100:	51 05       	cpc	r21, r1
     102:	c9 f0       	breq	.+50     	; 0x136 <bufferGetFromFront+0x42>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
     104:	26 81       	ldd	r18, Z+6	; 0x06
     106:	37 81       	ldd	r19, Z+7	; 0x07
     108:	a0 81       	ld	r26, Z
     10a:	b1 81       	ldd	r27, Z+1	; 0x01
     10c:	a2 0f       	add	r26, r18
     10e:	b3 1f       	adc	r27, r19
     110:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
     112:	2f 5f       	subi	r18, 0xFF	; 255
     114:	3f 4f       	sbci	r19, 0xFF	; 255
     116:	37 83       	std	Z+7, r19	; 0x07
     118:	26 83       	std	Z+6, r18	; 0x06
		if(buffer->dataindex >= buffer->size)
     11a:	62 81       	ldd	r22, Z+2	; 0x02
     11c:	73 81       	ldd	r23, Z+3	; 0x03
     11e:	26 17       	cp	r18, r22
     120:	37 07       	cpc	r19, r23
     122:	20 f0       	brcs	.+8      	; 0x12c <bufferGetFromFront+0x38>
		{
			buffer->dataindex -= buffer->size;
     124:	26 1b       	sub	r18, r22
     126:	37 0b       	sbc	r19, r23
     128:	37 83       	std	Z+7, r19	; 0x07
     12a:	26 83       	std	Z+6, r18	; 0x06
		}
		buffer->datalength--;
     12c:	41 50       	subi	r20, 0x01	; 1
     12e:	51 09       	sbc	r21, r1
     130:	55 83       	std	Z+5, r21	; 0x05
     132:	44 83       	std	Z+4, r20	; 0x04
     134:	01 c0       	rjmp	.+2      	; 0x138 <bufferGetFromFront+0x44>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
     136:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
     138:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
     13a:	08 95       	ret

0000013c <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     13c:	fc 01       	movw	r30, r24
     13e:	36 2f       	mov	r19, r22
	// begin critical section
	CRITICAL_SECTION_START;
     140:	2f b7       	in	r18, 0x3f	; 63
     142:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     144:	a4 81       	ldd	r26, Z+4	; 0x04
     146:	b5 81       	ldd	r27, Z+5	; 0x05
     148:	62 81       	ldd	r22, Z+2	; 0x02
     14a:	73 81       	ldd	r23, Z+3	; 0x03
     14c:	a6 17       	cp	r26, r22
     14e:	b7 07       	cpc	r27, r23
     150:	98 f4       	brcc	.+38     	; 0x178 <bufferAddToEnd+0x3c>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     152:	86 81       	ldd	r24, Z+6	; 0x06
     154:	97 81       	ldd	r25, Z+7	; 0x07
     156:	8a 0f       	add	r24, r26
     158:	9b 1f       	adc	r25, r27
     15a:	0e 94 40 08 	call	0x1080	; 0x1080 <__udivmodhi4>
     15e:	a0 81       	ld	r26, Z
     160:	b1 81       	ldd	r27, Z+1	; 0x01
     162:	a8 0f       	add	r26, r24
     164:	b9 1f       	adc	r27, r25
     166:	3c 93       	st	X, r19
		// increment the length
		buffer->datalength++;
     168:	84 81       	ldd	r24, Z+4	; 0x04
     16a:	95 81       	ldd	r25, Z+5	; 0x05
     16c:	01 96       	adiw	r24, 0x01	; 1
     16e:	95 83       	std	Z+5, r25	; 0x05
     170:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     172:	2f bf       	out	0x3f, r18	; 63
		// return success
		return -1;
     174:	8f ef       	ldi	r24, 0xFF	; 255
     176:	08 95       	ret
	}
	// end critical section
	CRITICAL_SECTION_END;
     178:	2f bf       	out	0x3f, r18	; 63
	// return failure
	return 0;
     17a:	80 e0       	ldi	r24, 0x00	; 0
}
     17c:	08 95       	ret

0000017e <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
     17e:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     180:	4f b7       	in	r20, 0x3f	; 63
     182:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
     184:	82 81       	ldd	r24, Z+2	; 0x02
     186:	93 81       	ldd	r25, Z+3	; 0x03
     188:	24 81       	ldd	r18, Z+4	; 0x04
     18a:	35 81       	ldd	r19, Z+5	; 0x05
	// end critical section
	CRITICAL_SECTION_END;
     18c:	4f bf       	out	0x3f, r20	; 63
	return bytesleft;
}
     18e:	82 1b       	sub	r24, r18
     190:	93 0b       	sbc	r25, r19
     192:	08 95       	ret

00000194 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
     194:	90 93 61 00 	sts	0x0061, r25
     198:	80 93 60 00 	sts	0x0060, r24
     19c:	08 95       	ret

0000019e <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
     19e:	cf 93       	push	r28
     1a0:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
     1a2:	8a 30       	cpi	r24, 0x0A	; 10
     1a4:	31 f4       	brne	.+12     	; 0x1b2 <rprintfChar+0x14>
		rputchar('\r');
     1a6:	e0 91 60 00 	lds	r30, 0x0060
     1aa:	f0 91 61 00 	lds	r31, 0x0061
     1ae:	8d e0       	ldi	r24, 0x0D	; 13
     1b0:	09 95       	icall
	// send character
	rputchar(c);
     1b2:	e0 91 60 00 	lds	r30, 0x0060
     1b6:	f0 91 61 00 	lds	r31, 0x0061
     1ba:	8c 2f       	mov	r24, r28
}
     1bc:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     1be:	09 94       	ijmp

000001c0 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
     1c0:	8f 70       	andi	r24, 0x0F	; 15
     1c2:	e8 2f       	mov	r30, r24
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	ec 59       	subi	r30, 0x9C	; 156
     1c8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ca:	84 91       	lpm	r24, Z
     1cc:	0c 94 cf 00 	jmp	0x19e	; 0x19e <rprintfChar>

000001d0 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
     1d0:	5f 92       	push	r5
     1d2:	6f 92       	push	r6
     1d4:	7f 92       	push	r7
     1d6:	8f 92       	push	r8
     1d8:	9f 92       	push	r9
     1da:	af 92       	push	r10
     1dc:	bf 92       	push	r11
     1de:	cf 92       	push	r12
     1e0:	df 92       	push	r13
     1e2:	ef 92       	push	r14
     1e4:	ff 92       	push	r15
     1e6:	0f 93       	push	r16
     1e8:	1f 93       	push	r17
     1ea:	cf 93       	push	r28
     1ec:	df 93       	push	r29
     1ee:	1f 92       	push	r1
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
     1f4:	ec 89       	ldd	r30, Y+20	; 0x14
     1f6:	fd 89       	ldd	r31, Y+21	; 0x15
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
     1f8:	3e 01       	movw	r6, r28
     1fa:	26 e1       	ldi	r18, 0x16	; 22
     1fc:	62 0e       	add	r6, r18
     1fe:	71 1c       	adc	r7, r1
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
					rprintfChar('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     200:	3a e0       	ldi	r19, 0x0A	; 10
     202:	a3 2e       	mov	r10, r19
     204:	b1 2c       	mov	r11, r1
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     206:	3b 89       	ldd	r19, Y+19	; 0x13
     208:	33 23       	and	r19, r19
     20a:	81 f0       	breq	.+32     	; 0x22c <rprintf1RamRom+0x5c>
     20c:	8f 01       	movw	r16, r30
     20e:	0f 5f       	subi	r16, 0xFF	; 255
     210:	1f 4f       	sbci	r17, 0xFF	; 255
     212:	84 91       	lpm	r24, Z
     214:	85 32       	cpi	r24, 0x25	; 37
     216:	89 f0       	breq	.+34     	; 0x23a <rprintf1RamRom+0x6a>
		{	// Until '%' or '\0'
			if (!format_flag)
     218:	88 23       	and	r24, r24
     21a:	09 f4       	brne	.+2      	; 0x21e <rprintf1RamRom+0x4e>
     21c:	66 c0       	rjmp	.+204    	; 0x2ea <rprintf1RamRom+0x11a>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
     21e:	0e 94 cf 00 	call	0x19e	; 0x19e <rprintfChar>
     222:	63 01       	movw	r12, r6
     224:	78 01       	movw	r14, r16
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
     226:	36 01       	movw	r6, r12
     228:	f7 01       	movw	r30, r14
     22a:	ed cf       	rjmp	.-38     	; 0x206 <rprintf1RamRom+0x36>
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     22c:	80 81       	ld	r24, Z
     22e:	85 32       	cpi	r24, 0x25	; 37
     230:	59 f0       	breq	.+22     	; 0x248 <rprintf1RamRom+0x78>
     232:	8f 01       	movw	r16, r30
     234:	0f 5f       	subi	r16, 0xFF	; 255
     236:	1f 4f       	sbci	r17, 0xFF	; 255
     238:	ef cf       	rjmp	.-34     	; 0x218 <rprintf1RamRom+0x48>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
     23a:	7f 01       	movw	r14, r30
     23c:	82 e0       	ldi	r24, 0x02	; 2
     23e:	e8 0e       	add	r14, r24
     240:	f1 1c       	adc	r15, r1
     242:	f8 01       	movw	r30, r16
     244:	84 91       	lpm	r24, Z
     246:	05 c0       	rjmp	.+10     	; 0x252 <rprintf1RamRom+0x82>
     248:	7f 01       	movw	r14, r30
     24a:	22 e0       	ldi	r18, 0x02	; 2
     24c:	e2 0e       	add	r14, r18
     24e:	f1 1c       	adc	r15, r1
     250:	81 81       	ldd	r24, Z+1	; 0x01
     252:	84 36       	cpi	r24, 0x64	; 100
     254:	a1 f0       	breq	.+40     	; 0x27e <rprintf1RamRom+0xae>
     256:	88 37       	cpi	r24, 0x78	; 120
     258:	61 f0       	breq	.+24     	; 0x272 <rprintf1RamRom+0xa2>
     25a:	83 36       	cpi	r24, 0x63	; 99
     25c:	31 f4       	brne	.+12     	; 0x26a <rprintf1RamRom+0x9a>
		{
			case 'c': format_flag = va_arg(ap,int);
     25e:	f3 01       	movw	r30, r6
     260:	80 81       	ld	r24, Z
     262:	93 01       	movw	r18, r6
     264:	2e 5f       	subi	r18, 0xFE	; 254
     266:	3f 4f       	sbci	r19, 0xFF	; 255
     268:	39 01       	movw	r6, r18
			default:  rprintfChar(format_flag); continue;
     26a:	0e 94 cf 00 	call	0x19e	; 0x19e <rprintfChar>
     26e:	63 01       	movw	r12, r6
     270:	da cf       	rjmp	.-76     	; 0x226 <rprintf1RamRom+0x56>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
     272:	20 e1       	ldi	r18, 0x10	; 16
     274:	82 2e       	mov	r8, r18
     276:	91 2c       	mov	r9, r1
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	10 e1       	ldi	r17, 0x10	; 16
     27c:	05 c0       	rjmp	.+10     	; 0x288 <rprintf1RamRom+0xb8>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
     27e:	9a e0       	ldi	r25, 0x0A	; 10
     280:	89 2e       	mov	r8, r25
     282:	91 2c       	mov	r9, r1
     284:	00 e1       	ldi	r16, 0x10	; 16
     286:	17 e2       	ldi	r17, 0x27	; 39
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
     288:	63 01       	movw	r12, r6
     28a:	32 e0       	ldi	r19, 0x02	; 2
     28c:	c3 0e       	add	r12, r19
     28e:	d1 1c       	adc	r13, r1
     290:	f3 01       	movw	r30, r6
     292:	60 80       	ld	r6, Z
     294:	71 80       	ldd	r7, Z+1	; 0x01
			if (format_flag == 'd')
     296:	84 36       	cpi	r24, 0x64	; 100
     298:	a1 f4       	brne	.+40     	; 0x2c2 <rprintf1RamRom+0xf2>
			{
				if (((int)u_val) < 0)
     29a:	77 fe       	sbrs	r7, 7
     29c:	0f c0       	rjmp	.+30     	; 0x2bc <rprintf1RamRom+0xec>
				{
					u_val = - u_val;
     29e:	71 94       	neg	r7
     2a0:	61 94       	neg	r6
     2a2:	71 08       	sbc	r7, r1
					rprintfChar('-');
     2a4:	8d e2       	ldi	r24, 0x2D	; 45
     2a6:	0e 94 cf 00 	call	0x19e	; 0x19e <rprintfChar>
     2aa:	08 c0       	rjmp	.+16     	; 0x2bc <rprintf1RamRom+0xec>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     2ac:	c8 01       	movw	r24, r16
     2ae:	b5 01       	movw	r22, r10
     2b0:	0e 94 40 08 	call	0x1080	; 0x1080 <__udivmodhi4>
     2b4:	8b 01       	movw	r16, r22
     2b6:	62 30       	cpi	r22, 0x02	; 2
     2b8:	71 05       	cpc	r23, r1
     2ba:	18 f0       	brcs	.+6      	; 0x2c2 <rprintf1RamRom+0xf2>
     2bc:	60 16       	cp	r6, r16
     2be:	71 06       	cpc	r7, r17
     2c0:	a8 f3       	brcs	.-22     	; 0x2ac <rprintf1RamRom+0xdc>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
     2c2:	c3 01       	movw	r24, r6
     2c4:	b8 01       	movw	r22, r16
     2c6:	0e 94 40 08 	call	0x1080	; 0x1080 <__udivmodhi4>
     2ca:	58 2e       	mov	r5, r24
     2cc:	86 2f       	mov	r24, r22
     2ce:	99 83       	std	Y+1, r25	; 0x01
     2d0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <rprintfu04>
				u_val %= div_val;
     2d4:	65 2c       	mov	r6, r5
     2d6:	99 81       	ldd	r25, Y+1	; 0x01
     2d8:	79 2e       	mov	r7, r25
				div_val /= base;
     2da:	c8 01       	movw	r24, r16
     2dc:	b4 01       	movw	r22, r8
     2de:	0e 94 40 08 	call	0x1080	; 0x1080 <__udivmodhi4>
     2e2:	8b 01       	movw	r16, r22
			} while (div_val);
     2e4:	67 2b       	or	r22, r23
     2e6:	69 f7       	brne	.-38     	; 0x2c2 <rprintf1RamRom+0xf2>
     2e8:	9e cf       	rjmp	.-196    	; 0x226 <rprintf1RamRom+0x56>
		}
	}
	va_end(ap);
}
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0f 90       	pop	r0
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	0f 91       	pop	r16
     2f8:	ff 90       	pop	r15
     2fa:	ef 90       	pop	r14
     2fc:	df 90       	pop	r13
     2fe:	cf 90       	pop	r12
     300:	bf 90       	pop	r11
     302:	af 90       	pop	r10
     304:	9f 90       	pop	r9
     306:	8f 90       	pop	r8
     308:	7f 90       	pop	r7
     30a:	6f 90       	pop	r6
     30c:	5f 90       	pop	r5
     30e:	08 95       	ret

00000310 <timer0SetPrescaler>:
#endif

void timer0SetPrescaler(u08 prescale)
{
	// set prescaler on timer 0
	outb(TCCR0, (inb(TCCR0) & ~TIMER_PRESCALE_MASK) | prescale);
     310:	93 b7       	in	r25, 0x33	; 51
     312:	98 7f       	andi	r25, 0xF8	; 248
     314:	89 2b       	or	r24, r25
     316:	83 bf       	out	0x33, r24	; 51
     318:	08 95       	ret

0000031a <timer0Init>:
}

void timer0Init()
{
	// initialize timer 0
	timer0SetPrescaler( TIMER0PRESCALE );	// set prescaler
     31a:	85 e0       	ldi	r24, 0x05	; 5
     31c:	0e 94 88 01 	call	0x310	; 0x310 <timer0SetPrescaler>
	outb(TCNT0, 0);							// reset TCNT0
     320:	12 be       	out	0x32, r1	; 50
	sbi(TIMSK, TOIE0);						// enable TCNT0 overflow interrupt
     322:	89 b7       	in	r24, 0x39	; 57
     324:	81 60       	ori	r24, 0x01	; 1
     326:	89 bf       	out	0x39, r24	; 57
	sbi(TIMSK, OCIE0);						// enable OCR0 Output Compare Match Interrupt
     328:	89 b7       	in	r24, 0x39	; 57
     32a:	82 60       	ori	r24, 0x02	; 2
     32c:	89 bf       	out	0x39, r24	; 57
}

void timer0ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer0Reg0 = 0;	// initialize time registers
     32e:	10 92 f6 00 	sts	0x00F6, r1
     332:	10 92 f7 00 	sts	0x00F7, r1
     336:	10 92 f8 00 	sts	0x00F8, r1
     33a:	10 92 f9 00 	sts	0x00F9, r1
     33e:	08 95       	ret

00000340 <timer1SetPrescaler>:
}

void timer1SetPrescaler(u08 prescale)
{
	// set prescaler on timer 1
	outb(TCCR1B, (inb(TCCR1B) & ~TIMER_PRESCALE_MASK) | prescale);
     340:	9e b5       	in	r25, 0x2e	; 46
     342:	98 7f       	andi	r25, 0xF8	; 248
     344:	89 2b       	or	r24, r25
     346:	8e bd       	out	0x2e, r24	; 46
     348:	08 95       	ret

0000034a <timer1Init>:
}

void timer1Init(void)
{
	// initialize timer 1
	timer1SetPrescaler( TIMER1PRESCALE );	// set prescaler
     34a:	82 e0       	ldi	r24, 0x02	; 2
     34c:	0e 94 a0 01 	call	0x340	; 0x340 <timer1SetPrescaler>
	outb(TCNT1H, 0);						// reset TCNT1
     350:	1d bc       	out	0x2d, r1	; 45
	outb(TCNT1L, 0);
     352:	1c bc       	out	0x2c, r1	; 44
	sbi(TIMSK, TOIE1);						// enable TCNT1 overflow
     354:	89 b7       	in	r24, 0x39	; 57
     356:	84 60       	ori	r24, 0x04	; 4
     358:	89 bf       	out	0x39, r24	; 57
     35a:	08 95       	ret

0000035c <timer2SetPrescaler>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2SetPrescaler(u08 prescale)
{
	// set prescaler on timer 2
	outb(TCCR2, (inb(TCCR2) & ~TIMER_PRESCALE_MASK) | prescale);
     35c:	95 b5       	in	r25, 0x25	; 37
     35e:	98 7f       	andi	r25, 0xF8	; 248
     360:	89 2b       	or	r24, r25
     362:	85 bd       	out	0x25, r24	; 37
     364:	08 95       	ret

00000366 <timer2Init>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2Init(void)
{
	// initialize timer 2
	timer2SetPrescaler( TIMER2PRESCALE );	// set prescaler
     366:	84 e0       	ldi	r24, 0x04	; 4
     368:	0e 94 ae 01 	call	0x35c	; 0x35c <timer2SetPrescaler>
	outb(TCNT2, 0);							// reset TCNT2
     36c:	14 bc       	out	0x24, r1	; 36
	sbi(TIMSK, TOIE2);						// enable TCNT2 overflow
     36e:	89 b7       	in	r24, 0x39	; 57
     370:	80 64       	ori	r24, 0x40	; 64
     372:	89 bf       	out	0x39, r24	; 57

#ifdef TCNT2	// support timer2 only if it exists
void timer2ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer2Reg0 = 0;	// initialize time registers
     374:	10 92 fe 00 	sts	0x00FE, r1
     378:	10 92 ff 00 	sts	0x00FF, r1
     37c:	10 92 00 01 	sts	0x0100, r1
     380:	10 92 01 01 	sts	0x0101, r1
     384:	08 95       	ret

00000386 <timerAttach>:
#endif

void timerAttach(u08 interruptNum, void (*userFunc)(void) )
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     386:	88 30       	cpi	r24, 0x08	; 8
     388:	40 f4       	brcc	.+16     	; 0x39a <timerAttach+0x14>
	{
		// set the interrupt function to run
		// the supplied user's function
		TimerIntFunc[interruptNum] = userFunc;
     38a:	e8 2f       	mov	r30, r24
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	ee 0f       	add	r30, r30
     390:	ff 1f       	adc	r31, r31
     392:	ee 59       	subi	r30, 0x9E	; 158
     394:	ff 4f       	sbci	r31, 0xFF	; 255
     396:	71 83       	std	Z+1, r23	; 0x01
     398:	60 83       	st	Z, r22
     39a:	08 95       	ret

0000039c <timerDetach>:
}

void timerDetach(u08 interruptNum)
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     39c:	88 30       	cpi	r24, 0x08	; 8
     39e:	40 f4       	brcc	.+16     	; 0x3b0 <timerDetach+0x14>
	{
		// set the interrupt function to run nothing
		TimerIntFunc[interruptNum] = 0;
     3a0:	e8 2f       	mov	r30, r24
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	ee 0f       	add	r30, r30
     3a6:	ff 1f       	adc	r31, r31
     3a8:	ee 59       	subi	r30, 0x9E	; 158
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	11 82       	std	Z+1, r1	; 0x01
     3ae:	10 82       	st	Z, r1
     3b0:	08 95       	ret

000003b2 <timerInit>:
                  :"r"(time_ms), "r"((unsigned short) (delay_count))
	);
}
*/
void timerInit(void)
{
     3b2:	cf 93       	push	r28
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
     3b4:	c0 e0       	ldi	r28, 0x00	; 0
		timerDetach(intNum);
     3b6:	8c 2f       	mov	r24, r28
     3b8:	0e 94 ce 01 	call	0x39c	; 0x39c <timerDetach>
*/
void timerInit(void)
{
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
     3bc:	cf 5f       	subi	r28, 0xFF	; 255
     3be:	c8 30       	cpi	r28, 0x08	; 8
     3c0:	d1 f7       	brne	.-12     	; 0x3b6 <timerInit+0x4>
		timerDetach(intNum);

	// initialize all timers
	timer0Init();
     3c2:	0e 94 8d 01 	call	0x31a	; 0x31a <timer0Init>
	timer1Init();
     3c6:	0e 94 a5 01 	call	0x34a	; 0x34a <timer1Init>
	#ifdef TCNT2	// support timer2 only if it exists
	timer2Init();
     3ca:	0e 94 b3 01 	call	0x366	; 0x366 <timer2Init>
	#endif
	// enable interrupts
	sei();
     3ce:	78 94       	sei
}
     3d0:	cf 91       	pop	r28
     3d2:	08 95       	ret

000003d4 <timer1PWMInit>:
	// configures timer1 for use with PWM output
	// on OC1A and OC1B pins
	// phase correct PWM mode, FREQpwm=F_CPU/(2*N*TOP)

	// enable timer1 as 8,9,10bit PWM
	if(bitRes == 9)
     3d4:	89 30       	cpi	r24, 0x09	; 9
     3d6:	31 f4       	brne	.+12     	; 0x3e4 <timer1PWMInit+0x10>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     3d8:	8f b5       	in	r24, 0x2f	; 47
     3da:	82 60       	ori	r24, 0x02	; 2
     3dc:	8f bd       	out	0x2f, r24	; 47
		cbi(TCCR1A,PWM10);
     3de:	8f b5       	in	r24, 0x2f	; 47
     3e0:	8e 7f       	andi	r24, 0xFE	; 254
     3e2:	0a c0       	rjmp	.+20     	; 0x3f8 <timer1PWMInit+0x24>
	}
	else if( bitRes == 10 )
     3e4:	8a 30       	cpi	r24, 0x0A	; 10
     3e6:	19 f4       	brne	.+6      	; 0x3ee <timer1PWMInit+0x1a>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     3e8:	8f b5       	in	r24, 0x2f	; 47
     3ea:	82 60       	ori	r24, 0x02	; 2
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <timer1PWMInit+0x1e>
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     3ee:	8f b5       	in	r24, 0x2f	; 47
     3f0:	8d 7f       	andi	r24, 0xFD	; 253
     3f2:	8f bd       	out	0x2f, r24	; 47
		sbi(TCCR1A,PWM10);
     3f4:	8f b5       	in	r24, 0x2f	; 47
     3f6:	81 60       	ori	r24, 0x01	; 1
     3f8:	8f bd       	out	0x2f, r24	; 47
	}

	// clear output compare value A
	outb(OCR1AH, 0);
     3fa:	1b bc       	out	0x2b, r1	; 43
	outb(OCR1AL, 0);
     3fc:	1a bc       	out	0x2a, r1	; 42
	// clear output compare value B
	outb(OCR1BH, 0);
     3fe:	19 bc       	out	0x29, r1	; 41
	outb(OCR1BL, 0);
     400:	18 bc       	out	0x28, r1	; 40
     402:	08 95       	ret

00000404 <timer1PWMAOn>:

void timer1PWMAOn(void)
{
	// turn on channel A (OC1A) PWM output
	// set OC1A as non-inverted PWM
	sbi(TCCR1A,COM1A1);
     404:	8f b5       	in	r24, 0x2f	; 47
     406:	80 68       	ori	r24, 0x80	; 128
     408:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1A0);
     40a:	8f b5       	in	r24, 0x2f	; 47
     40c:	8f 7b       	andi	r24, 0xBF	; 191
     40e:	8f bd       	out	0x2f, r24	; 47
     410:	08 95       	ret

00000412 <timer1PWMBOn>:

void timer1PWMBOn(void)
{
	// turn on channel B (OC1B) PWM output
	// set OC1B as non-inverted PWM
	sbi(TCCR1A,COM1B1);
     412:	8f b5       	in	r24, 0x2f	; 47
     414:	80 62       	ori	r24, 0x20	; 32
     416:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1B0);
     418:	8f b5       	in	r24, 0x2f	; 47
     41a:	8f 7e       	andi	r24, 0xEF	; 239
     41c:	8f bd       	out	0x2f, r24	; 47
     41e:	08 95       	ret

00000420 <timer1PWMASet>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1AH);		// set the high 8bits of OCR1A
	//outp( (pwmDuty&0x00FF), OCR1AL);	// set the low 8bits of OCR1A
	OCR1A = pwmDuty;
     420:	9b bd       	out	0x2b, r25	; 43
     422:	8a bd       	out	0x2a, r24	; 42
     424:	08 95       	ret

00000426 <timer1PWMBSet>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
     426:	99 bd       	out	0x29, r25	; 41
     428:	88 bd       	out	0x28, r24	; 40
     42a:	08 95       	ret

0000042c <__vector_9>:
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
     42c:	1f 92       	push	r1
     42e:	0f 92       	push	r0
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	0f 92       	push	r0
     434:	11 24       	eor	r1, r1
     436:	2f 93       	push	r18
     438:	3f 93       	push	r19
     43a:	4f 93       	push	r20
     43c:	5f 93       	push	r21
     43e:	6f 93       	push	r22
     440:	7f 93       	push	r23
     442:	8f 93       	push	r24
     444:	9f 93       	push	r25
     446:	af 93       	push	r26
     448:	bf 93       	push	r27
     44a:	ef 93       	push	r30
     44c:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
     44e:	80 91 f6 00 	lds	r24, 0x00F6
     452:	90 91 f7 00 	lds	r25, 0x00F7
     456:	a0 91 f8 00 	lds	r26, 0x00F8
     45a:	b0 91 f9 00 	lds	r27, 0x00F9
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	a1 1d       	adc	r26, r1
     462:	b1 1d       	adc	r27, r1
     464:	80 93 f6 00 	sts	0x00F6, r24
     468:	90 93 f7 00 	sts	0x00F7, r25
     46c:	a0 93 f8 00 	sts	0x00F8, r26
     470:	b0 93 f9 00 	sts	0x00F9, r27

	// increment pause counter
	TimerPauseReg++;
     474:	80 91 fa 00 	lds	r24, 0x00FA
     478:	90 91 fb 00 	lds	r25, 0x00FB
     47c:	a0 91 fc 00 	lds	r26, 0x00FC
     480:	b0 91 fd 00 	lds	r27, 0x00FD
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	a1 1d       	adc	r26, r1
     488:	b1 1d       	adc	r27, r1
     48a:	80 93 fa 00 	sts	0x00FA, r24
     48e:	90 93 fb 00 	sts	0x00FB, r25
     492:	a0 93 fc 00 	sts	0x00FC, r26
     496:	b0 93 fd 00 	sts	0x00FD, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
     49a:	80 91 62 00 	lds	r24, 0x0062
     49e:	90 91 63 00 	lds	r25, 0x0063
     4a2:	89 2b       	or	r24, r25
     4a4:	29 f0       	breq	.+10     	; 0x4b0 <__stack+0x51>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
     4a6:	e0 91 62 00 	lds	r30, 0x0062
     4aa:	f0 91 63 00 	lds	r31, 0x0063
     4ae:	09 95       	icall
}
     4b0:	ff 91       	pop	r31
     4b2:	ef 91       	pop	r30
     4b4:	bf 91       	pop	r27
     4b6:	af 91       	pop	r26
     4b8:	9f 91       	pop	r25
     4ba:	8f 91       	pop	r24
     4bc:	7f 91       	pop	r23
     4be:	6f 91       	pop	r22
     4c0:	5f 91       	pop	r21
     4c2:	4f 91       	pop	r20
     4c4:	3f 91       	pop	r19
     4c6:	2f 91       	pop	r18
     4c8:	0f 90       	pop	r0
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	0f 90       	pop	r0
     4ce:	1f 90       	pop	r1
     4d0:	18 95       	reti

000004d2 <__vector_8>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
     4d2:	1f 92       	push	r1
     4d4:	0f 92       	push	r0
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	0f 92       	push	r0
     4da:	11 24       	eor	r1, r1
     4dc:	2f 93       	push	r18
     4de:	3f 93       	push	r19
     4e0:	4f 93       	push	r20
     4e2:	5f 93       	push	r21
     4e4:	6f 93       	push	r22
     4e6:	7f 93       	push	r23
     4e8:	8f 93       	push	r24
     4ea:	9f 93       	push	r25
     4ec:	af 93       	push	r26
     4ee:	bf 93       	push	r27
     4f0:	ef 93       	push	r30
     4f2:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
     4f4:	80 91 64 00 	lds	r24, 0x0064
     4f8:	90 91 65 00 	lds	r25, 0x0065
     4fc:	89 2b       	or	r24, r25
     4fe:	29 f0       	breq	.+10     	; 0x50a <__vector_8+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
     500:	e0 91 64 00 	lds	r30, 0x0064
     504:	f0 91 65 00 	lds	r31, 0x0065
     508:	09 95       	icall
}
     50a:	ff 91       	pop	r31
     50c:	ef 91       	pop	r30
     50e:	bf 91       	pop	r27
     510:	af 91       	pop	r26
     512:	9f 91       	pop	r25
     514:	8f 91       	pop	r24
     516:	7f 91       	pop	r23
     518:	6f 91       	pop	r22
     51a:	5f 91       	pop	r21
     51c:	4f 91       	pop	r20
     51e:	3f 91       	pop	r19
     520:	2f 91       	pop	r18
     522:	0f 90       	pop	r0
     524:	0f be       	out	0x3f, r0	; 63
     526:	0f 90       	pop	r0
     528:	1f 90       	pop	r1
     52a:	18 95       	reti

0000052c <__vector_4>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
     52c:	1f 92       	push	r1
     52e:	0f 92       	push	r0
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	0f 92       	push	r0
     534:	11 24       	eor	r1, r1
     536:	2f 93       	push	r18
     538:	3f 93       	push	r19
     53a:	4f 93       	push	r20
     53c:	5f 93       	push	r21
     53e:	6f 93       	push	r22
     540:	7f 93       	push	r23
     542:	8f 93       	push	r24
     544:	9f 93       	push	r25
     546:	af 93       	push	r26
     548:	bf 93       	push	r27
     54a:	ef 93       	push	r30
     54c:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
     54e:	80 91 fe 00 	lds	r24, 0x00FE
     552:	90 91 ff 00 	lds	r25, 0x00FF
     556:	a0 91 00 01 	lds	r26, 0x0100
     55a:	b0 91 01 01 	lds	r27, 0x0101
     55e:	01 96       	adiw	r24, 0x01	; 1
     560:	a1 1d       	adc	r26, r1
     562:	b1 1d       	adc	r27, r1
     564:	80 93 fe 00 	sts	0x00FE, r24
     568:	90 93 ff 00 	sts	0x00FF, r25
     56c:	a0 93 00 01 	sts	0x0100, r26
     570:	b0 93 01 01 	sts	0x0101, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
     574:	80 91 6c 00 	lds	r24, 0x006C
     578:	90 91 6d 00 	lds	r25, 0x006D
     57c:	89 2b       	or	r24, r25
     57e:	29 f0       	breq	.+10     	; 0x58a <__vector_4+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
     580:	e0 91 6c 00 	lds	r30, 0x006C
     584:	f0 91 6d 00 	lds	r31, 0x006D
     588:	09 95       	icall
}
     58a:	ff 91       	pop	r31
     58c:	ef 91       	pop	r30
     58e:	bf 91       	pop	r27
     590:	af 91       	pop	r26
     592:	9f 91       	pop	r25
     594:	8f 91       	pop	r24
     596:	7f 91       	pop	r23
     598:	6f 91       	pop	r22
     59a:	5f 91       	pop	r21
     59c:	4f 91       	pop	r20
     59e:	3f 91       	pop	r19
     5a0:	2f 91       	pop	r18
     5a2:	0f 90       	pop	r0
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	0f 90       	pop	r0
     5a8:	1f 90       	pop	r1
     5aa:	18 95       	reti

000005ac <__vector_19>:

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_COMP_vect)
{
     5ac:	1f 92       	push	r1
     5ae:	0f 92       	push	r0
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	0f 92       	push	r0
     5b4:	11 24       	eor	r1, r1
     5b6:	2f 93       	push	r18
     5b8:	3f 93       	push	r19
     5ba:	4f 93       	push	r20
     5bc:	5f 93       	push	r21
     5be:	6f 93       	push	r22
     5c0:	7f 93       	push	r23
     5c2:	8f 93       	push	r24
     5c4:	9f 93       	push	r25
     5c6:	af 93       	push	r26
     5c8:	bf 93       	push	r27
     5ca:	ef 93       	push	r30
     5cc:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
     5ce:	80 91 70 00 	lds	r24, 0x0070
     5d2:	90 91 71 00 	lds	r25, 0x0071
     5d6:	89 2b       	or	r24, r25
     5d8:	29 f0       	breq	.+10     	; 0x5e4 <__vector_19+0x38>
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
     5da:	e0 91 70 00 	lds	r30, 0x0070
     5de:	f0 91 71 00 	lds	r31, 0x0071
     5e2:	09 95       	icall
}
     5e4:	ff 91       	pop	r31
     5e6:	ef 91       	pop	r30
     5e8:	bf 91       	pop	r27
     5ea:	af 91       	pop	r26
     5ec:	9f 91       	pop	r25
     5ee:	8f 91       	pop	r24
     5f0:	7f 91       	pop	r23
     5f2:	6f 91       	pop	r22
     5f4:	5f 91       	pop	r21
     5f6:	4f 91       	pop	r20
     5f8:	3f 91       	pop	r19
     5fa:	2f 91       	pop	r18
     5fc:	0f 90       	pop	r0
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	0f 90       	pop	r0
     602:	1f 90       	pop	r1
     604:	18 95       	reti

00000606 <__vector_6>:
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
     606:	1f 92       	push	r1
     608:	0f 92       	push	r0
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	0f 92       	push	r0
     60e:	11 24       	eor	r1, r1
     610:	2f 93       	push	r18
     612:	3f 93       	push	r19
     614:	4f 93       	push	r20
     616:	5f 93       	push	r21
     618:	6f 93       	push	r22
     61a:	7f 93       	push	r23
     61c:	8f 93       	push	r24
     61e:	9f 93       	push	r25
     620:	af 93       	push	r26
     622:	bf 93       	push	r27
     624:	ef 93       	push	r30
     626:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
     628:	80 91 66 00 	lds	r24, 0x0066
     62c:	90 91 67 00 	lds	r25, 0x0067
     630:	89 2b       	or	r24, r25
     632:	29 f0       	breq	.+10     	; 0x63e <__vector_6+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
     634:	e0 91 66 00 	lds	r30, 0x0066
     638:	f0 91 67 00 	lds	r31, 0x0067
     63c:	09 95       	icall
}
     63e:	ff 91       	pop	r31
     640:	ef 91       	pop	r30
     642:	bf 91       	pop	r27
     644:	af 91       	pop	r26
     646:	9f 91       	pop	r25
     648:	8f 91       	pop	r24
     64a:	7f 91       	pop	r23
     64c:	6f 91       	pop	r22
     64e:	5f 91       	pop	r21
     650:	4f 91       	pop	r20
     652:	3f 91       	pop	r19
     654:	2f 91       	pop	r18
     656:	0f 90       	pop	r0
     658:	0f be       	out	0x3f, r0	; 63
     65a:	0f 90       	pop	r0
     65c:	1f 90       	pop	r1
     65e:	18 95       	reti

00000660 <__vector_7>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
     660:	1f 92       	push	r1
     662:	0f 92       	push	r0
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	0f 92       	push	r0
     668:	11 24       	eor	r1, r1
     66a:	2f 93       	push	r18
     66c:	3f 93       	push	r19
     66e:	4f 93       	push	r20
     670:	5f 93       	push	r21
     672:	6f 93       	push	r22
     674:	7f 93       	push	r23
     676:	8f 93       	push	r24
     678:	9f 93       	push	r25
     67a:	af 93       	push	r26
     67c:	bf 93       	push	r27
     67e:	ef 93       	push	r30
     680:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
     682:	80 91 68 00 	lds	r24, 0x0068
     686:	90 91 69 00 	lds	r25, 0x0069
     68a:	89 2b       	or	r24, r25
     68c:	29 f0       	breq	.+10     	; 0x698 <__vector_7+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
     68e:	e0 91 68 00 	lds	r30, 0x0068
     692:	f0 91 69 00 	lds	r31, 0x0069
     696:	09 95       	icall
}
     698:	ff 91       	pop	r31
     69a:	ef 91       	pop	r30
     69c:	bf 91       	pop	r27
     69e:	af 91       	pop	r26
     6a0:	9f 91       	pop	r25
     6a2:	8f 91       	pop	r24
     6a4:	7f 91       	pop	r23
     6a6:	6f 91       	pop	r22
     6a8:	5f 91       	pop	r21
     6aa:	4f 91       	pop	r20
     6ac:	3f 91       	pop	r19
     6ae:	2f 91       	pop	r18
     6b0:	0f 90       	pop	r0
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	0f 90       	pop	r0
     6b6:	1f 90       	pop	r1
     6b8:	18 95       	reti

000006ba <__vector_5>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
     6ba:	1f 92       	push	r1
     6bc:	0f 92       	push	r0
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	0f 92       	push	r0
     6c2:	11 24       	eor	r1, r1
     6c4:	2f 93       	push	r18
     6c6:	3f 93       	push	r19
     6c8:	4f 93       	push	r20
     6ca:	5f 93       	push	r21
     6cc:	6f 93       	push	r22
     6ce:	7f 93       	push	r23
     6d0:	8f 93       	push	r24
     6d2:	9f 93       	push	r25
     6d4:	af 93       	push	r26
     6d6:	bf 93       	push	r27
     6d8:	ef 93       	push	r30
     6da:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
     6dc:	80 91 6a 00 	lds	r24, 0x006A
     6e0:	90 91 6b 00 	lds	r25, 0x006B
     6e4:	89 2b       	or	r24, r25
     6e6:	29 f0       	breq	.+10     	; 0x6f2 <__vector_5+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
     6e8:	e0 91 6a 00 	lds	r30, 0x006A
     6ec:	f0 91 6b 00 	lds	r31, 0x006B
     6f0:	09 95       	icall
}
     6f2:	ff 91       	pop	r31
     6f4:	ef 91       	pop	r30
     6f6:	bf 91       	pop	r27
     6f8:	af 91       	pop	r26
     6fa:	9f 91       	pop	r25
     6fc:	8f 91       	pop	r24
     6fe:	7f 91       	pop	r23
     700:	6f 91       	pop	r22
     702:	5f 91       	pop	r21
     704:	4f 91       	pop	r20
     706:	3f 91       	pop	r19
     708:	2f 91       	pop	r18
     70a:	0f 90       	pop	r0
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	0f 90       	pop	r0
     710:	1f 90       	pop	r1
     712:	18 95       	reti

00000714 <__vector_3>:

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMP_vect)
{
     714:	1f 92       	push	r1
     716:	0f 92       	push	r0
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	0f 92       	push	r0
     71c:	11 24       	eor	r1, r1
     71e:	2f 93       	push	r18
     720:	3f 93       	push	r19
     722:	4f 93       	push	r20
     724:	5f 93       	push	r21
     726:	6f 93       	push	r22
     728:	7f 93       	push	r23
     72a:	8f 93       	push	r24
     72c:	9f 93       	push	r25
     72e:	af 93       	push	r26
     730:	bf 93       	push	r27
     732:	ef 93       	push	r30
     734:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     736:	80 91 6e 00 	lds	r24, 0x006E
     73a:	90 91 6f 00 	lds	r25, 0x006F
     73e:	89 2b       	or	r24, r25
     740:	29 f0       	breq	.+10     	; 0x74c <__vector_3+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     742:	e0 91 6e 00 	lds	r30, 0x006E
     746:	f0 91 6f 00 	lds	r31, 0x006F
     74a:	09 95       	icall
}
     74c:	ff 91       	pop	r31
     74e:	ef 91       	pop	r30
     750:	bf 91       	pop	r27
     752:	af 91       	pop	r26
     754:	9f 91       	pop	r25
     756:	8f 91       	pop	r24
     758:	7f 91       	pop	r23
     75a:	6f 91       	pop	r22
     75c:	5f 91       	pop	r21
     75e:	4f 91       	pop	r20
     760:	3f 91       	pop	r19
     762:	2f 91       	pop	r18
     764:	0f 90       	pop	r0
     766:	0f be       	out	0x3f, r0	; 63
     768:	0f 90       	pop	r0
     76a:	1f 90       	pop	r1
     76c:	18 95       	reti

0000076e <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (unsigned char *)uartRxData, UART_RX_BUFFER_SIZE);
     76e:	40 e4       	ldi	r20, 0x40	; 64
     770:	50 e0       	ldi	r21, 0x00	; 0
     772:	64 eb       	ldi	r22, 0xB4	; 180
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	83 e0       	ldi	r24, 0x03	; 3
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 6d 00 	call	0xda	; 0xda <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (unsigned char *)uartTxData, UART_TX_BUFFER_SIZE);
     77e:	40 e4       	ldi	r20, 0x40	; 64
     780:	50 e0       	ldi	r21, 0x00	; 0
     782:	64 e7       	ldi	r22, 0x74	; 116
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	8c e0       	ldi	r24, 0x0C	; 12
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	0c 94 6d 00 	jmp	0xda	; 0xda <bufferInit>

0000078e <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
     78e:	0e 94 b7 03 	call	0x76e	; 0x76e <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
     792:	10 92 73 00 	sts	0x0073, r1
     796:	10 92 72 00 	sts	0x0072, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     79a:	88 ed       	ldi	r24, 0xD8	; 216
     79c:	8a b9       	out	0x0a, r24	; 10
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
     79e:	8f e5       	ldi	r24, 0x5F	; 95
     7a0:	89 b9       	out	0x09, r24	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
     7a2:	10 bc       	out	0x20, r1	; 32
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
     7a4:	8f ef       	ldi	r24, 0xFF	; 255
     7a6:	80 93 02 01 	sts	0x0102, r24
	uartBufferedTx = FALSE;
     7aa:	10 92 0b 01 	sts	0x010B, r1
	// clear overflow count
	uartRxOverflow = 0;
     7ae:	10 92 15 01 	sts	0x0115, r1
     7b2:	10 92 14 01 	sts	0x0114, r1
	// enable interrupts
	sei();
     7b6:	78 94       	sei
     7b8:	08 95       	ret

000007ba <uartSetBaudRate>:
	UartRxFunc = rx_func;
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	8b 01       	movw	r16, r22
     7c0:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
     7c2:	dc 01       	movw	r26, r24
     7c4:	cb 01       	movw	r24, r22
     7c6:	90 5e       	subi	r25, 0xE0	; 224
     7c8:	a3 4e       	sbci	r26, 0xE3	; 227
     7ca:	bf 4f       	sbci	r27, 0xFF	; 255
     7cc:	bc 01       	movw	r22, r24
     7ce:	cd 01       	movw	r24, r26
     7d0:	43 e0       	ldi	r20, 0x03	; 3
     7d2:	66 0f       	add	r22, r22
     7d4:	77 1f       	adc	r23, r23
     7d6:	88 1f       	adc	r24, r24
     7d8:	99 1f       	adc	r25, r25
     7da:	4a 95       	dec	r20
     7dc:	d1 f7       	brne	.-12     	; 0x7d2 <uartSetBaudRate+0x18>
     7de:	a9 01       	movw	r20, r18
     7e0:	98 01       	movw	r18, r16
     7e2:	e4 e0       	ldi	r30, 0x04	; 4
     7e4:	22 0f       	add	r18, r18
     7e6:	33 1f       	adc	r19, r19
     7e8:	44 1f       	adc	r20, r20
     7ea:	55 1f       	adc	r21, r21
     7ec:	ea 95       	dec	r30
     7ee:	d1 f7       	brne	.-12     	; 0x7e4 <uartSetBaudRate+0x2a>
     7f0:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__udivmodsi4>
     7f4:	21 50       	subi	r18, 0x01	; 1
     7f6:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
     7f8:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
     7fa:	30 bd       	out	0x20, r19	; 32
	#endif
}
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	08 95       	ret

00000802 <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
     802:	90 91 02 01 	lds	r25, 0x0102
     806:	99 23       	and	r25, r25
     808:	e1 f3       	breq	.-8      	; 0x802 <uartSendByte>
	// send byte
	outb(UDR, txData);
     80a:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
     80c:	10 92 02 01 	sts	0x0102, r1
     810:	08 95       	ret

00000812 <__vector_13>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_TRANS)
{
     812:	1f 92       	push	r1
     814:	0f 92       	push	r0
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	0f 92       	push	r0
     81a:	11 24       	eor	r1, r1
     81c:	2f 93       	push	r18
     81e:	3f 93       	push	r19
     820:	4f 93       	push	r20
     822:	5f 93       	push	r21
     824:	6f 93       	push	r22
     826:	7f 93       	push	r23
     828:	8f 93       	push	r24
     82a:	9f 93       	push	r25
     82c:	af 93       	push	r26
     82e:	bf 93       	push	r27
     830:	ef 93       	push	r30
     832:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
     834:	80 91 0b 01 	lds	r24, 0x010B
     838:	88 23       	and	r24, r24
     83a:	71 f0       	breq	.+28     	; 0x858 <__vector_13+0x46>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
     83c:	80 91 10 01 	lds	r24, 0x0110
     840:	90 91 11 01 	lds	r25, 0x0111
     844:	89 2b       	or	r24, r25
     846:	31 f0       	breq	.+12     	; 0x854 <__vector_13+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
     848:	8c e0       	ldi	r24, 0x0C	; 12
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 7a 00 	call	0xf4	; 0xf4 <bufferGetFromFront>
     850:	8c b9       	out	0x0c, r24	; 12
     852:	05 c0       	rjmp	.+10     	; 0x85e <__vector_13+0x4c>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
     854:	10 92 0b 01 	sts	0x010B, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
     858:	8f ef       	ldi	r24, 0xFF	; 255
     85a:	80 93 02 01 	sts	0x0102, r24
	}
}
     85e:	ff 91       	pop	r31
     860:	ef 91       	pop	r30
     862:	bf 91       	pop	r27
     864:	af 91       	pop	r26
     866:	9f 91       	pop	r25
     868:	8f 91       	pop	r24
     86a:	7f 91       	pop	r23
     86c:	6f 91       	pop	r22
     86e:	5f 91       	pop	r21
     870:	4f 91       	pop	r20
     872:	3f 91       	pop	r19
     874:	2f 91       	pop	r18
     876:	0f 90       	pop	r0
     878:	0f be       	out	0x3f, r0	; 63
     87a:	0f 90       	pop	r0
     87c:	1f 90       	pop	r1
     87e:	18 95       	reti

00000880 <__vector_11>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_RECV)
{
     880:	1f 92       	push	r1
     882:	0f 92       	push	r0
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	0f 92       	push	r0
     888:	11 24       	eor	r1, r1
     88a:	2f 93       	push	r18
     88c:	3f 93       	push	r19
     88e:	4f 93       	push	r20
     890:	5f 93       	push	r21
     892:	6f 93       	push	r22
     894:	7f 93       	push	r23
     896:	8f 93       	push	r24
     898:	9f 93       	push	r25
     89a:	af 93       	push	r26
     89c:	bf 93       	push	r27
     89e:	ef 93       	push	r30
     8a0:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
     8a2:	8c b1       	in	r24, 0x0c	; 12

	// if there's a user function to handle this receive event
	if(UartRxFunc)
     8a4:	20 91 72 00 	lds	r18, 0x0072
     8a8:	30 91 73 00 	lds	r19, 0x0073
     8ac:	23 2b       	or	r18, r19
     8ae:	31 f0       	breq	.+12     	; 0x8bc <__vector_11+0x3c>
	{
		// call it and pass the received data
		UartRxFunc(c);
     8b0:	e0 91 72 00 	lds	r30, 0x0072
     8b4:	f0 91 73 00 	lds	r31, 0x0073
     8b8:	09 95       	icall
     8ba:	10 c0       	rjmp	.+32     	; 0x8dc <__vector_11+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
     8bc:	68 2f       	mov	r22, r24
     8be:	83 e0       	ldi	r24, 0x03	; 3
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	0e 94 9e 00 	call	0x13c	; 0x13c <bufferAddToEnd>
     8c6:	81 11       	cpse	r24, r1
     8c8:	09 c0       	rjmp	.+18     	; 0x8dc <__vector_11+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
     8ca:	80 91 14 01 	lds	r24, 0x0114
     8ce:	90 91 15 01 	lds	r25, 0x0115
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	90 93 15 01 	sts	0x0115, r25
     8d8:	80 93 14 01 	sts	0x0114, r24
		}
	}
}
     8dc:	ff 91       	pop	r31
     8de:	ef 91       	pop	r30
     8e0:	bf 91       	pop	r27
     8e2:	af 91       	pop	r26
     8e4:	9f 91       	pop	r25
     8e6:	8f 91       	pop	r24
     8e8:	7f 91       	pop	r23
     8ea:	6f 91       	pop	r22
     8ec:	5f 91       	pop	r21
     8ee:	4f 91       	pop	r20
     8f0:	3f 91       	pop	r19
     8f2:	2f 91       	pop	r18
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <AppOutputCompare0>:
*********************************************************************************************************
*/
void AppOutputCompare0(void)
{
	//PORTD ^= (1<<PD4);
	OCR0 = TCNT0 + CYCLEN_60HZ;
     8fe:	82 b7       	in	r24, 0x32	; 50
     900:	80 51       	subi	r24, 0x10	; 16
     902:	8c bf       	out	0x3c, r24	; 60
	appl.fSysPwrZC = 1;
     904:	e6 e1       	ldi	r30, 0x16	; 22
     906:	f1 e0       	ldi	r31, 0x01	; 1
     908:	80 81       	ld	r24, Z
     90a:	81 60       	ori	r24, 0x01	; 1
     90c:	80 83       	st	Z, r24
     90e:	08 95       	ret

00000910 <AppDisplay.isra.0>:
* Returns    : true, power on control has finised. false, is processing
*********************************************************************************************************
*/
void AppDisplay(DISP_CODE DispCode, WORK_MODE mode)
{
	switch(DispCode)
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	88 30       	cpi	r24, 0x08	; 8
     914:	91 05       	cpc	r25, r1
     916:	00 f5       	brcc	.+64     	; 0x958 <AppDisplay.isra.0+0x48>
     918:	fc 01       	movw	r30, r24
     91a:	e6 5d       	subi	r30, 0xD6	; 214
     91c:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(REMOTE_ADDR, SSD_0HZ, SSD_RED);
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	60 e0       	ldi	r22, 0x00	; 0
* Returns    : true, power on control has finised. false, is processing
*********************************************************************************************************
*/
void AppDisplay(DISP_CODE DispCode, WORK_MODE mode)
{
	switch(DispCode)
     922:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__tablejump2__>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(START_CHAR, SSD_0HZ, SSD_RED);
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	14 c0       	rjmp	.+40     	; 0x954 <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(CURRENT_VALUE, SSD_0HZ, SSD_RED);
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	11 c0       	rjmp	.+34     	; 0x954 <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(FULL_WAREHOUSE, SSD_0HZ, SSD_RED);
     932:	82 e0       	ldi	r24, 0x02	; 2
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e c0       	rjmp	.+28     	; 0x954 <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(EMPTY_WAREHOUSE, SSD_0HZ, SSD_RED);
     938:	83 e0       	ldi	r24, 0x03	; 3
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0b c0       	rjmp	.+22     	; 0x954 <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(ALARM_H_PERCENT, SSD_0HZ, SSD_RED);
     93e:	84 e0       	ldi	r24, 0x04	; 4
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	08 c0       	rjmp	.+16     	; 0x954 <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(ALARM_L_PERCENT, SSD_0HZ, SSD_RED);
     944:	85 e0       	ldi	r24, 0x05	; 5
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	05 c0       	rjmp	.+10     	; 0x954 <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(RESPONSE_TIME, SSD_0HZ, SSD_RED);
     94a:	86 e0       	ldi	r24, 0x06	; 6
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	02 c0       	rjmp	.+4      	; 0x954 <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(REMOTE_ADDR, SSD_0HZ, SSD_RED);
     950:	87 e0       	ldi	r24, 0x07	; 7
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0c 94 28 07 	jmp	0xe50	; 0xe50 <SSDDisplayDec>
     958:	08 95       	ret

0000095a <McuInit>:
*/

void McuInit(void)
{
	/* Initial uart */
	uartInit();	
     95a:	0e 94 c7 03 	call	0x78e	; 0x78e <uartInit>
	uartSetBaudRate(9600);
     95e:	60 e8       	ldi	r22, 0x80	; 128
     960:	75 e2       	ldi	r23, 0x25	; 37
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 dd 03 	call	0x7ba	; 0x7ba <uartSetBaudRate>
	rprintfInit(uartSendByte);
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	94 e0       	ldi	r25, 0x04	; 4
     96e:	0e 94 ca 00 	call	0x194	; 0x194 <rprintfInit>

	/* Initial ADC */
	ADCInit();
     972:	0e 94 d7 07 	call	0xfae	; 0xfae <ADCInit>
	
	/* Initial T0, T1 and T2 */
	timerInit();
     976:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <timerInit>
	sbi(DDRD, PD4);		/* set PD4(OC1B) as output */
     97a:	8c 9a       	sbi	0x11, 4	; 17
	sbi(DDRD, PD5);		/* set PD5(OC1A) as output */	
     97c:	8d 9a       	sbi	0x11, 5	; 17
	timer1PWMInit(8);	/* 8 bit PWM resolution, phase correct PWM mode, FREQpwm=F_CPU/(2*N*TOP) */
     97e:	88 e0       	ldi	r24, 0x08	; 8
     980:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <timer1PWMInit>
	timer1PWMAOn();		/* turn on the channel A PWM output of timer1 */
     984:	0e 94 02 02 	call	0x404	; 0x404 <timer1PWMAOn>
	timer1PWMBOn();		/* turn on the channel B PWM output of timer1 */
     988:	0c 94 09 02 	jmp	0x412	; 0x412 <timer1PWMBOn>

0000098c <ApplInit>:
*********************************************************************************************************
*/

void ApplInit(void)
{
	ButtonInit();
     98c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <ButtonInit>
	LEDInit();
     990:	0e 94 5d 06 	call	0xcba	; 0xcba <LEDInit>
	SSDInit();
     994:	0e 94 c8 07 	call	0xf90	; 0xf90 <SSDInit>
*/

void ApplDataInit(void)
{
	/* Following for initial power on display steps */
	appl.workMode = PWR_ON;
     998:	e6 e1       	ldi	r30, 0x16	; 22
     99a:	f1 e0       	ldi	r31, 0x01	; 1
     99c:	15 86       	std	Z+13, r1	; 0x0d
	appl.CurEvent = NULL_EVENT;
     99e:	16 86       	std	Z+14, r1	; 0x0e
	appl.LastEvent = NULL_EVENT;
     9a0:	17 86       	std	Z+15, r1	; 0x0f
	appl.second = 0;
     9a2:	10 8a       	std	Z+16, r1	; 0x10
	appl.ModeTimer = TIME_SWITCH_TOTAL;
     9a4:	80 ee       	ldi	r24, 0xE0	; 224
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	94 8b       	std	Z+20, r25	; 0x14
     9aa:	83 8b       	std	Z+19, r24	; 0x13
	appl.DispCode= START_CHAR;
     9ac:	15 8a       	std	Z+21, r1	; 0x15
	appl.PwrOnSteps = DISP_START;
     9ae:	16 8a       	std	Z+22, r1	; 0x16
{
	ButtonInit();
	LEDInit();
	SSDInit();
	ApplDataInit();
	MeasureInit();
     9b0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <MeasureInit>
	
	rprintf("Main board here!\n" );	
     9b4:	86 e8       	ldi	r24, 0x86	; 134
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	9f 93       	push	r25
     9ba:	8f 93       	push	r24
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	8f 93       	push	r24
     9c0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <rprintf1RamRom>

	timerAttach(TIMER0OUTCOMPARE_INT, AppOutputCompare0);
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	6f e7       	ldi	r22, 0x7F	; 127
     9cc:	74 e0       	ldi	r23, 0x04	; 4
     9ce:	87 e0       	ldi	r24, 0x07	; 7
     9d0:	0c 94 c3 01 	jmp	0x386	; 0x386 <timerAttach>

000009d4 <AppCycleUpdate>:
*
* Returns    : none
*********************************************************************************************************
*/
void AppCycleUpdate(void)
{	
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
	char tempChar;
	static uint16_t cnt;
	cnt++;
     9da:	80 91 f4 00 	lds	r24, 0x00F4
     9de:	90 91 f5 00 	lds	r25, 0x00F5
     9e2:	01 96       	adiw	r24, 0x01	; 1
     9e4:	90 93 f5 00 	sts	0x00F5, r25
     9e8:	80 93 f4 00 	sts	0x00F4, r24
* Returns    : none
*********************************************************************************************************
*/
void AppUpdateTimers(void)
{
	if(++appl.second > TIMER_1_SEC_60HZ) 
     9ec:	80 91 26 01 	lds	r24, 0x0126
     9f0:	8f 5f       	subi	r24, 0xFF	; 255
     9f2:	8d 33       	cpi	r24, 0x3D	; 61
     9f4:	18 f4       	brcc	.+6      	; 0x9fc <AppCycleUpdate+0x28>
     9f6:	80 93 26 01 	sts	0x0126, r24
     9fa:	02 c0       	rjmp	.+4      	; 0xa00 <AppCycleUpdate+0x2c>
	{
		appl.second = 0;
     9fc:	10 92 26 01 	sts	0x0126, r1
#endif
#endif
		
	}
	
	if(appl.ModeTimer != TIMER_TIMEOUT && appl.ModeTimer != TIMER_INT_DISABLED) appl.ModeTimer--;
     a00:	80 91 29 01 	lds	r24, 0x0129
     a04:	90 91 2a 01 	lds	r25, 0x012A
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	8e 3f       	cpi	r24, 0xFE	; 254
     a0c:	2f ef       	ldi	r18, 0xFF	; 255
     a0e:	92 07       	cpc	r25, r18
     a10:	20 f4       	brcc	.+8      	; 0xa1a <AppCycleUpdate+0x46>
     a12:	90 93 2a 01 	sts	0x012A, r25
     a16:	80 93 29 01 	sts	0x0129, r24
	cnt++;
	
	AppUpdateTimers();

	/* work mode convert according to ModeTimer and push button events */
	switch(appl.workMode)
     a1a:	c0 91 23 01 	lds	r28, 0x0123
     a1e:	c1 30       	cpi	r28, 0x01	; 1
     a20:	09 f4       	brne	.+2      	; 0xa24 <AppCycleUpdate+0x50>
     a22:	4f c0       	rjmp	.+158    	; 0xac2 <AppCycleUpdate+0xee>
     a24:	18 f0       	brcs	.+6      	; 0xa2c <AppCycleUpdate+0x58>
     a26:	c2 30       	cpi	r28, 0x02	; 2
     a28:	81 f1       	breq	.+96     	; 0xa8a <AppCycleUpdate+0xb6>
     a2a:	0e c1       	rjmp	.+540    	; 0xc48 <AppCycleUpdate+0x274>
	{
		case PWR_ON:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
     a2c:	80 91 29 01 	lds	r24, 0x0129
     a30:	90 91 2a 01 	lds	r25, 0x012A
     a34:	9c 01       	movw	r18, r24
     a36:	21 50       	subi	r18, 0x01	; 1
     a38:	31 09       	sbc	r19, r1
     a3a:	2e 3f       	cpi	r18, 0xFE	; 254
     a3c:	3f 4f       	sbci	r19, 0xFF	; 255
     a3e:	80 f5       	brcc	.+96     	; 0xaa0 <AppCycleUpdate+0xcc>
			{
				if(appl.ModeTimer % (TIME_CONTENT_SWITCH - 1) == 0)
     a40:	6b e3       	ldi	r22, 0x3B	; 59
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	0e 94 40 08 	call	0x1080	; 0x1080 <__udivmodhi4>
     a48:	89 2b       	or	r24, r25
     a4a:	39 f4       	brne	.+14     	; 0xa5a <AppCycleUpdate+0x86>
				{
					AppDisplay(++appl.DispCode,PWR_ON);
     a4c:	80 91 2b 01 	lds	r24, 0x012B
     a50:	8f 5f       	subi	r24, 0xFF	; 255
     a52:	80 93 2b 01 	sts	0x012B, r24
     a56:	0e 94 88 04 	call	0x910	; 0x910 <AppDisplay.isra.0>
				}
				
				if(ButtonJMP1HeldEvent() && (ButtonGetHoldTime() == TIME_B_HELD_RST))	/* Press/Held JMP1 after power on will set to factory default */
     a5a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ButtonJMP1HeldEvent>
     a5e:	88 23       	and	r24, r24
     a60:	09 f4       	brne	.+2      	; 0xa64 <AppCycleUpdate+0x90>
     a62:	f2 c0       	rjmp	.+484    	; 0xc48 <AppCycleUpdate+0x274>
     a64:	0e 94 35 08 	call	0x106a	; 0x106a <ButtonGetHoldTime>
     a68:	cc 97       	sbiw	r24, 0x3c	; 60
     a6a:	09 f0       	breq	.+2      	; 0xa6e <AppCycleUpdate+0x9a>
     a6c:	ed c0       	rjmp	.+474    	; 0xc48 <AppCycleUpdate+0x274>
				{
					/* Following for initial power on display steps */
					appl.ModeTimer = TIME_SWITCH_TOTAL;
     a6e:	80 ee       	ldi	r24, 0xE0	; 224
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	90 93 2a 01 	sts	0x012A, r25
     a76:	80 93 29 01 	sts	0x0129, r24
					appl.workMode = PWR_ON;
     a7a:	10 92 23 01 	sts	0x0123, r1
					appl.LastEvent = JP1_HELD;
     a7e:	84 e0       	ldi	r24, 0x04	; 4
     a80:	80 93 25 01 	sts	0x0125, r24
					appl.DispCode= START_CHAR;
     a84:	10 92 2b 01 	sts	0x012B, r1
     a88:	df c0       	rjmp	.+446    	; 0xc48 <AppCycleUpdate+0x274>
				}
			}
			break;
			
		case SETTING:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
     a8a:	80 91 29 01 	lds	r24, 0x0129
     a8e:	90 91 2a 01 	lds	r25, 0x012A
     a92:	9c 01       	movw	r18, r24
     a94:	21 50       	subi	r18, 0x01	; 1
     a96:	31 09       	sbc	r19, r1
     a98:	2e 3f       	cpi	r18, 0xFE	; 254
     a9a:	3f 4f       	sbci	r19, 0xFF	; 255
     a9c:	08 f4       	brcc	.+2      	; 0xaa0 <AppCycleUpdate+0xcc>
     a9e:	56 c0       	rjmp	.+172    	; 0xb4c <AppCycleUpdate+0x178>
					appl.workMode = PWR_ON;
					appl.LastEvent = JP1_HELD;
					appl.DispCode= START_CHAR;
				}
			}
			else if(appl.ModeTimer == TIMER_TIMEOUT)
     aa0:	89 2b       	or	r24, r25
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <AppCycleUpdate+0xd2>
     aa4:	d1 c0       	rjmp	.+418    	; 0xc48 <AppCycleUpdate+0x274>
			{
				appl.ModeTimer = TIMER_INT_DISABLED;	/* Disable count */
     aa6:	8f ef       	ldi	r24, 0xFF	; 255
     aa8:	9f ef       	ldi	r25, 0xFF	; 255
     aaa:	90 93 2a 01 	sts	0x012A, r25
     aae:	80 93 29 01 	sts	0x0129, r24
				appl.workMode = NORMAL;					/* convert to NORMAL */
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	80 93 23 01 	sts	0x0123, r24
				appl.LastEvent = NULL_EVENT;			/* update  LastEvent */
     ab8:	10 92 25 01 	sts	0x0125, r1
				appl.DispCode = CURRENT_VALUE;			/* Initial to display material value in setting mode */
     abc:	80 93 2b 01 	sts	0x012B, r24
     ac0:	c3 c0       	rjmp	.+390    	; 0xc48 <AppCycleUpdate+0x274>
			}
			break;
			
		case NORMAL:			
			if(ButtonGetReleased())
     ac2:	0e 94 3a 08 	call	0x1074	; 0x1074 <ButtonGetReleased>
     ac6:	88 23       	and	r24, r24
     ac8:	99 f0       	breq	.+38     	; 0xaf0 <AppCycleUpdate+0x11c>
			{
				if(ButtonJMP2ReleasedEvent())
     aca:	0e 94 53 06 	call	0xca6	; 0xca6 <ButtonJMP2ReleasedEvent>
     ace:	88 23       	and	r24, r24
     ad0:	61 f0       	breq	.+24     	; 0xaea <AppCycleUpdate+0x116>
				{
					appl.ModeTimer = TIME_D_CODE_HELD;	/* Disable count */
     ad2:	84 eb       	ldi	r24, 0xB4	; 180
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	90 93 2a 01 	sts	0x012A, r25
     ada:	80 93 29 01 	sts	0x0129, r24
					appl.workMode = SETTING; 			/* convert to SETTING */
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	80 93 23 01 	sts	0x0123, r24
					appl.LastEvent = JP2_PRESS;			/* update  LastEvent */
     ae4:	c0 93 25 01 	sts	0x0125, r28
     ae8:	af c0       	rjmp	.+350    	; 0xc48 <AppCycleUpdate+0x274>
				}
				else if(ButtonJMP1ReleasedEvent())
     aea:	0e 94 4b 06 	call	0xc96	; 0xc96 <ButtonJMP1ReleasedEvent>
     aee:	ac c0       	rjmp	.+344    	; 0xc48 <AppCycleUpdate+0x274>
				{
				}
			}
			else if(ButtonGetHeld())
     af0:	0e 94 3d 08 	call	0x107a	; 0x107a <ButtonGetHeld>
     af4:	88 23       	and	r24, r24
     af6:	39 f0       	breq	.+14     	; 0xb06 <AppCycleUpdate+0x132>
			{
				if(ButtonJMP2HeldEvent())//(ButtonJMP2HeldEvent() && (ButtonGetHoldTime()%(TIMER_1_SEC_60HZ/2) == 0))
     af8:	0e 94 58 06 	call	0xcb0	; 0xcb0 <ButtonJMP2HeldEvent>
     afc:	81 11       	cpse	r24, r1
     afe:	7d c0       	rjmp	.+250    	; 0xbfa <AppCycleUpdate+0x226>
				{
					appl.ModeTimer = TIME_D_CODE_HELD;	/* Disable count */
					appl.workMode = SETTING; 			/* convert to SETTING */
					appl.LastEvent = JP2_HELD;			/* update  LastEvent */
				}
				else if(ButtonJMP1HeldEvent())
     b00:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ButtonJMP1HeldEvent>
     b04:	a1 c0       	rjmp	.+322    	; 0xc48 <AppCycleUpdate+0x274>
				}
			}
			else
			{
				/* Display current material, and display color change according to value compare with user setting */
				AppDisplay(appl.DispCode,NORMAL);
     b06:	80 91 2b 01 	lds	r24, 0x012B
     b0a:	0e 94 88 04 	call	0x910	; 0x910 <AppDisplay.isra.0>
				
				if(uartRxBuffer.size - bufferIsNotFull(&uartRxBuffer) != 0)
     b0e:	00 91 05 01 	lds	r16, 0x0105
     b12:	10 91 06 01 	lds	r17, 0x0106
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 bf 00 	call	0x17e	; 0x17e <bufferIsNotFull>
     b1e:	08 17       	cp	r16, r24
     b20:	19 07       	cpc	r17, r25
     b22:	09 f4       	brne	.+2      	; 0xb26 <AppCycleUpdate+0x152>
     b24:	91 c0       	rjmp	.+290    	; 0xc48 <AppCycleUpdate+0x274>
				{
					tempChar = bufferGetFromFront(&uartRxBuffer);
     b26:	83 e0       	ldi	r24, 0x03	; 3
     b28:	91 e0       	ldi	r25, 0x01	; 1
     b2a:	0e 94 7a 00 	call	0xf4	; 0xf4 <bufferGetFromFront>
					//rprintf("char=%c\n",tempChar);
					rprintf("Type=%c\n",tempChar);
     b2e:	1f 92       	push	r1
     b30:	8f 93       	push	r24
     b32:	8d e7       	ldi	r24, 0x7D	; 125
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	9f 93       	push	r25
     b38:	8f 93       	push	r24
     b3a:	cf 93       	push	r28
     b3c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <rprintf1RamRom>
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	7e c0       	rjmp	.+252    	; 0xc48 <AppCycleUpdate+0x274>
			break;
			
		case SETTING:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
			{
				if(ButtonGetReleased())
     b4c:	0e 94 3a 08 	call	0x1074	; 0x1074 <ButtonGetReleased>
     b50:	88 23       	and	r24, r24
     b52:	b1 f1       	breq	.+108    	; 0xbc0 <AppCycleUpdate+0x1ec>
				{
					if(ButtonJMP2ReleasedEvent())
     b54:	0e 94 53 06 	call	0xca6	; 0xca6 <ButtonJMP2ReleasedEvent>
     b58:	88 23       	and	r24, r24
     b5a:	b1 f0       	breq	.+44     	; 0xb88 <AppCycleUpdate+0x1b4>
					{
						if(--appl.DispCode < CURRENT_VALUE)
     b5c:	80 91 2b 01 	lds	r24, 0x012B
     b60:	81 50       	subi	r24, 0x01	; 1
     b62:	09 f4       	brne	.+2      	; 0xb66 <AppCycleUpdate+0x192>
						{
							appl.DispCode = REMOTE_ADDR;
     b64:	87 e0       	ldi	r24, 0x07	; 7
     b66:	80 93 2b 01 	sts	0x012B, r24
						}
						AppDisplay(appl.DispCode,SETTING);
     b6a:	80 91 2b 01 	lds	r24, 0x012B
     b6e:	0e 94 88 04 	call	0x910	; 0x910 <AppDisplay.isra.0>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     b72:	84 eb       	ldi	r24, 0xB4	; 180
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	90 93 2a 01 	sts	0x012A, r25
     b7a:	80 93 29 01 	sts	0x0129, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	80 93 23 01 	sts	0x0123, r24
						appl.LastEvent = JP2_PRESS; 		/* update  LastEvent */
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	5e c0       	rjmp	.+188    	; 0xc44 <AppCycleUpdate+0x270>
					}
					else if(ButtonJMP1ReleasedEvent())
     b88:	0e 94 4b 06 	call	0xc96	; 0xc96 <ButtonJMP1ReleasedEvent>
     b8c:	88 23       	and	r24, r24
     b8e:	09 f4       	brne	.+2      	; 0xb92 <AppCycleUpdate+0x1be>
     b90:	5b c0       	rjmp	.+182    	; 0xc48 <AppCycleUpdate+0x274>
					{
						SSDDisplayDec(--appl.FullWarehouse, SSD_0HZ, SSD_GREEN);
     b92:	80 91 19 01 	lds	r24, 0x0119
     b96:	90 91 1a 01 	lds	r25, 0x011A
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	90 93 1a 01 	sts	0x011A, r25
     ba0:	80 93 19 01 	sts	0x0119, r24
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	0e 94 28 07 	call	0xe50	; 0xe50 <SSDDisplayDec>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     bac:	84 eb       	ldi	r24, 0xB4	; 180
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	90 93 2a 01 	sts	0x012A, r25
     bb4:	80 93 29 01 	sts	0x0129, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     bb8:	c0 93 23 01 	sts	0x0123, r28
						appl.LastEvent = JP1_PRESS;			/* update  LastEvent */
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	42 c0       	rjmp	.+132    	; 0xc44 <AppCycleUpdate+0x270>
					}
				}
				else if(ButtonGetHeld())
     bc0:	0e 94 3d 08 	call	0x107a	; 0x107a <ButtonGetHeld>
     bc4:	88 23       	and	r24, r24
     bc6:	09 f4       	brne	.+2      	; 0xbca <AppCycleUpdate+0x1f6>
     bc8:	3f c0       	rjmp	.+126    	; 0xc48 <AppCycleUpdate+0x274>
				{
					if(ButtonJMP2HeldEvent() && (ButtonGetHoldTime()%(TIMER_1_SEC_60HZ/6) == 0))	/* fast increase */
     bca:	0e 94 58 06 	call	0xcb0	; 0xcb0 <ButtonJMP2HeldEvent>
     bce:	88 23       	and	r24, r24
     bd0:	f1 f0       	breq	.+60     	; 0xc0e <AppCycleUpdate+0x23a>
     bd2:	0e 94 35 08 	call	0x106a	; 0x106a <ButtonGetHoldTime>
     bd6:	6a e0       	ldi	r22, 0x0A	; 10
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	0e 94 40 08 	call	0x1080	; 0x1080 <__udivmodhi4>
     bde:	89 2b       	or	r24, r25
     be0:	b1 f4       	brne	.+44     	; 0xc0e <AppCycleUpdate+0x23a>
					{
						if(++appl.DispCode > REMOTE_ADDR)
     be2:	80 91 2b 01 	lds	r24, 0x012B
     be6:	8f 5f       	subi	r24, 0xFF	; 255
     be8:	88 30       	cpi	r24, 0x08	; 8
     bea:	08 f0       	brcs	.+2      	; 0xbee <AppCycleUpdate+0x21a>
						{
							appl.DispCode = CURRENT_VALUE;
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	80 93 2b 01 	sts	0x012B, r24
						}
						AppDisplay(appl.DispCode,SETTING);
     bf2:	80 91 2b 01 	lds	r24, 0x012B
     bf6:	0e 94 88 04 	call	0x910	; 0x910 <AppDisplay.isra.0>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     bfa:	84 eb       	ldi	r24, 0xB4	; 180
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	90 93 2a 01 	sts	0x012A, r25
     c02:	80 93 29 01 	sts	0x0129, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	80 93 23 01 	sts	0x0123, r24
     c0c:	1b c0       	rjmp	.+54     	; 0xc44 <AppCycleUpdate+0x270>
						appl.LastEvent = JP2_HELD;			/* update  LastEvent */
					}
					else if(ButtonJMP1HeldEvent())
     c0e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ButtonJMP1HeldEvent>
     c12:	88 23       	and	r24, r24
     c14:	c9 f0       	breq	.+50     	; 0xc48 <AppCycleUpdate+0x274>
					{
						SSDDisplayDec(++appl.FullWarehouse, SSD_0HZ, SSD_AMBER);
     c16:	80 91 19 01 	lds	r24, 0x0119
     c1a:	90 91 1a 01 	lds	r25, 0x011A
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	90 93 1a 01 	sts	0x011A, r25
     c24:	80 93 19 01 	sts	0x0119, r24
     c28:	42 e0       	ldi	r20, 0x02	; 2
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	0e 94 28 07 	call	0xe50	; 0xe50 <SSDDisplayDec>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     c30:	84 eb       	ldi	r24, 0xB4	; 180
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	90 93 2a 01 	sts	0x012A, r25
     c38:	80 93 29 01 	sts	0x0129, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	80 93 23 01 	sts	0x0123, r24
						appl.LastEvent = JP1_HELD;			/* update  LastEvent */
     c42:	84 e0       	ldi	r24, 0x04	; 4
     c44:	80 93 25 01 	sts	0x0125, r24

#if 1		
#if (FOR_DEBUG==1)
	//rprintf("wM=%d\n",appl.workMode);
	//rprintf("mT=%d,0x%x\n",appl.ModeTimer,appl.ModeTimer);
	rprintf("dC=%d\n\n",appl.DispCode);
     c48:	80 91 2b 01 	lds	r24, 0x012B
     c4c:	1f 92       	push	r1
     c4e:	8f 93       	push	r24
     c50:	85 e7       	ldi	r24, 0x75	; 117
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	9f 93       	push	r25
     c56:	8f 93       	push	r24
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	8f 93       	push	r24
     c5c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <rprintf1RamRom>
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
			appl.PwrOnSteps = DISP_START;
			appl.ModeTimer = TIME_SWITCH_TOTAL;
		}
	}
#endif	
}
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	08 95       	ret

00000c72 <AppWaitZeroCrossing>:
* Returns    : true/false means failed or pass
*********************************************************************************************************
*/
void AppWaitZeroCrossing(void)
{
	while(appl.fSysPwrZC == 0);
     c72:	80 91 16 01 	lds	r24, 0x0116
     c76:	80 ff       	sbrs	r24, 0
     c78:	fc cf       	rjmp	.-8      	; 0xc72 <AppWaitZeroCrossing>
	appl.fSysPwrZC = 0;
     c7a:	80 91 16 01 	lds	r24, 0x0116
     c7e:	8e 7f       	andi	r24, 0xFE	; 254
     c80:	80 93 16 01 	sts	0x0116, r24
     c84:	08 95       	ret

00000c86 <ButtonInitEx>:
void ButtonInitEx(void)
{	
	/* 
	Set PC1-PC0 as input, the tow IO with external pull up 10K resistor.
	*/
	DDRC &= ((1<<DDC1) | (1<<DDC0));
     c86:	84 b3       	in	r24, 0x14	; 20
     c88:	83 70       	andi	r24, 0x03	; 3
     c8a:	84 bb       	out	0x14, r24	; 20
     c8c:	08 95       	ret

00000c8e <ButtonGetIO_StateEx>:
*/
ButtonDataType ButtonGetIO_StateEx(void)
{
	ButtonDataType io_state;
	
	io_state = (~PINC) & ((1<<PINC1) | (1<<PINC0));	/* Get PC1-PC0 IO state */
     c8e:	83 b3       	in	r24, 0x13	; 19
     c90:	80 95       	com	r24
	
	return  io_state;
}
     c92:	83 70       	andi	r24, 0x03	; 3
     c94:	08 95       	ret

00000c96 <ButtonJMP1ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP1) 
     c96:	80 91 4f 01 	lds	r24, 0x014F
	{
		return true;
	}
    
    return false;
}
     c9a:	81 70       	andi	r24, 0x01	; 1
     c9c:	08 95       	ret

00000c9e <ButtonJMP1HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1HeldEvent(void)
{
	if (button.buttonsHeld.JMP1) 
     c9e:	80 91 50 01 	lds	r24, 0x0150
	{
		return true;
	}
    
    return false;
}
     ca2:	81 70       	andi	r24, 0x01	; 1
     ca4:	08 95       	ret

00000ca6 <ButtonJMP2ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP2) 
     ca6:	80 91 4f 01 	lds	r24, 0x014F
	{
		return true;
	}
    
    return false;
}
     caa:	86 95       	lsr	r24
     cac:	81 70       	andi	r24, 0x01	; 1
     cae:	08 95       	ret

00000cb0 <ButtonJMP2HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2HeldEvent(void)
{
	if (button.buttonsHeld.JMP2) 
     cb0:	80 91 50 01 	lds	r24, 0x0150
	{
		return true;
	}
    
    return false;
}
     cb4:	86 95       	lsr	r24
     cb6:	81 70       	andi	r24, 0x01	; 1
     cb8:	08 95       	ret

00000cba <LEDInit>:
	uint8_t i;
	
	/* 
	Set PB2-PB1 as output to drive to LEDs, default turn off all LEDs
	*/
	DDRB &= ~((1<<DDB2) | (1<<DDB1));
     cba:	87 b3       	in	r24, 0x17	; 23
     cbc:	89 7f       	andi	r24, 0xF9	; 249
     cbe:	87 bb       	out	0x17, r24	; 23
	DDRB |= ((1<<DDB2) | (1<<DDB1));
     cc0:	87 b3       	in	r24, 0x17	; 23
     cc2:	86 60       	ori	r24, 0x06	; 6
     cc4:	87 bb       	out	0x17, r24	; 23
	PORTB |= ((1<<DDB2) | (1<<DDB1));
     cc6:	88 b3       	in	r24, 0x18	; 24
     cc8:	86 60       	ori	r24, 0x06	; 6
     cca:	88 bb       	out	0x18, r24	; 24
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
     ccc:	e3 e4       	ldi	r30, 0x43	; 67
     cce:	f1 e0       	ldi	r31, 0x01	; 1
     cd0:	80 81       	ld	r24, Z
     cd2:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
     cd4:	84 60       	ori	r24, 0x04	; 4
     cd6:	88 60       	ori	r24, 0x08	; 8
     cd8:	80 83       	st	Z, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
     cda:	9c e3       	ldi	r25, 0x3C	; 60
     cdc:	91 83       	std	Z+1, r25	; 0x01
	DDRB |= ((1<<DDB2) | (1<<DDB1));
	PORTB |= ((1<<DDB2) | (1<<DDB1));
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
     cde:	a5 e4       	ldi	r26, 0x45	; 69
     ce0:	b1 e0       	ldi	r27, 0x01	; 1
     ce2:	8c 91       	ld	r24, X
     ce4:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
     ce6:	84 60       	ori	r24, 0x04	; 4
     ce8:	88 60       	ori	r24, 0x08	; 8
     cea:	8c 93       	st	X, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
     cec:	93 83       	std	Z+3, r25	; 0x03
     cee:	08 95       	ret

00000cf0 <LEDCycleUpdate>:
*
*********************************************************************************************************
*/

void LEDCycleUpdate(void)
{
     cf0:	a4 e4       	ldi	r26, 0x44	; 68
     cf2:	b1 e0       	ldi	r27, 0x01	; 1
     cf4:	40 e0       	ldi	r20, 0x00	; 0
     cf6:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
     cf8:	ca 01       	movw	r24, r20
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	fc 01       	movw	r30, r24
     d00:	ed 5b       	subi	r30, 0xBD	; 189
     d02:	fe 4f       	sbci	r31, 0xFE	; 254
     d04:	30 81       	ld	r19, Z
     d06:	37 70       	andi	r19, 0x07	; 7
		ft = LEDs[i].flashTimer;
     d08:	2c 91       	ld	r18, X
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
     d0a:	34 30       	cpi	r19, 0x04	; 4
     d0c:	19 f0       	breq	.+6      	; 0xd14 <LEDCycleUpdate+0x24>
	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
		ft = LEDs[i].flashTimer;
		
		ft += rate;
     d0e:	23 0f       	add	r18, r19
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
     d10:	2d 33       	cpi	r18, 0x3D	; 61
     d12:	38 f0       	brcs	.+14     	; 0xd22 <LEDCycleUpdate+0x32>
		{
			ft = 0;
			LEDs[i].led.state = S_OFF;
     d14:	fc 01       	movw	r30, r24
     d16:	ed 5b       	subi	r30, 0xBD	; 189
     d18:	fe 4f       	sbci	r31, 0xFE	; 254
     d1a:	20 81       	ld	r18, Z
     d1c:	28 60       	ori	r18, 0x08	; 8
     d1e:	20 83       	st	Z, r18
		ft = LEDs[i].flashTimer;
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
		{
			ft = 0;
     d20:	20 e0       	ldi	r18, 0x00	; 0
			LEDs[i].led.state = S_OFF;
		}
		LEDs[i].flashTimer = ft;
     d22:	2c 93       	st	X, r18
		
		if((rate == LED_0HZ) || (ft > (LED_ONE_SEC/2)))
     d24:	33 23       	and	r19, r19
     d26:	11 f0       	breq	.+4      	; 0xd2c <LEDCycleUpdate+0x3c>
     d28:	2f 31       	cpi	r18, 0x1F	; 31
     d2a:	30 f0       	brcs	.+12     	; 0xd38 <LEDCycleUpdate+0x48>
		{
			LEDs[i].led.state = S_ON;
     d2c:	fc 01       	movw	r30, r24
     d2e:	ed 5b       	subi	r30, 0xBD	; 189
     d30:	fe 4f       	sbci	r31, 0xFE	; 254
     d32:	80 81       	ld	r24, Z
     d34:	87 7f       	andi	r24, 0xF7	; 247
     d36:	80 83       	st	Z, r24
     d38:	12 96       	adiw	r26, 0x02	; 2
{
	LED_RATE rate;
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
     d3a:	41 30       	cpi	r20, 0x01	; 1
     d3c:	51 05       	cpc	r21, r1
     d3e:	19 f0       	breq	.+6      	; 0xd46 <LEDCycleUpdate+0x56>
     d40:	41 e0       	ldi	r20, 0x01	; 1
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	d9 cf       	rjmp	.-78     	; 0xcf8 <LEDCycleUpdate+0x8>
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */

	if(LEDs[0].led.state == S_OFF)
     d46:	80 91 43 01 	lds	r24, 0x0143
     d4a:	83 ff       	sbrs	r24, 3
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <LEDCycleUpdate+0x62>
	{
		state |= (1<<DDB1);
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	01 c0       	rjmp	.+2      	; 0xd54 <LEDCycleUpdate+0x64>
*
*********************************************************************************************************
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */
     d52:	80 e0       	ldi	r24, 0x00	; 0
	if(LEDs[0].led.state == S_OFF)
	{
		state |= (1<<DDB1);
	}
	
	if(LEDs[1].led.state == S_OFF)
     d54:	90 91 45 01 	lds	r25, 0x0145
     d58:	93 fd       	sbrc	r25, 3
	{
		state |= (1<<DDB2);
     d5a:	84 60       	ori	r24, 0x04	; 4
	}

	PORTB &= ~((1<<DDB2) | (1<<DDB1));
     d5c:	98 b3       	in	r25, 0x18	; 24
     d5e:	99 7f       	andi	r25, 0xF9	; 249
     d60:	98 bb       	out	0x18, r25	; 24
	PORTB |= state;
     d62:	98 b3       	in	r25, 0x18	; 24
     d64:	89 2b       	or	r24, r25
     d66:	88 bb       	out	0x18, r24	; 24
     d68:	08 95       	ret

00000d6a <main>:
int main(void)
{	
	/*
	Calll all initial function
	*/
	McuInit();
     d6a:	0e 94 ad 04 	call	0x95a	; 0x95a <McuInit>
	ApplInit();
     d6e:	0e 94 c6 04 	call	0x98c	; 0x98c <ApplInit>

	while(1)
	{
		AppWaitZeroCrossing();
     d72:	0e 94 39 06 	call	0xc72	; 0xc72 <AppWaitZeroCrossing>
		ButtonCycleUpdate();
     d76:	0e 94 ee 07 	call	0xfdc	; 0xfdc <ButtonCycleUpdate>
		AppCycleUpdate();
     d7a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <AppCycleUpdate>
		LEDCycleUpdate();
     d7e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <LEDCycleUpdate>
		SSDCycleUpdate();
     d82:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <SSDCycleUpdate>
		MeasureCycleUpdate();
     d86:	0e 94 ce 06 	call	0xd9c	; 0xd9c <MeasureCycleUpdate>
	}
     d8a:	f3 cf       	rjmp	.-26     	; 0xd72 <main+0x8>

00000d8c <MeasureInit>:
*
*********************************************************************************************************
*/
void MeasureKZ1PWM(uint16_t dutyCycle)
{
	timer1PWMBSet(dutyCycle);
     d8c:	8a e0       	ldi	r24, 0x0A	; 10
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 13 02 	call	0x426	; 0x426 <timer1PWMBSet>
*
*********************************************************************************************************
*/
void MeasureKZ2PWM(uint16_t dutyCycle)
{
	timer1PWMASet(dutyCycle);
     d94:	8f ef       	ldi	r24, 0xFF	; 255
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0c 94 10 02 	jmp	0x420	; 0x420 <timer1PWMASet>

00000d9c <MeasureCycleUpdate>:
*********************************************************************************************************
*/
void MeasureCycleUpdate(void)
{
	uint16_t value;
	value = ReadADC10Bit(0);//a2dConvert10bit ReadADC10Bit
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <ReadADC10Bit>
	rprintf("a=%d\r\n",value);
     da2:	9f 93       	push	r25
     da4:	8f 93       	push	r24
     da6:	88 e9       	ldi	r24, 0x98	; 152
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	9f 93       	push	r25
     dac:	8f 93       	push	r24
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	8f 93       	push	r24
     db2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <rprintf1RamRom>
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	08 95       	ret

00000dc2 <SSDCycleUpdate>:
*
*********************************************************************************************************
*/

void SSDCycleUpdate(void)
{
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
*/
void SSDShitfOutData(void)
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
     dc6:	40 91 49 01 	lds	r20, 0x0149
     dca:	50 91 4a 01 	lds	r21, 0x014A
     dce:	60 91 4b 01 	lds	r22, 0x014B
     dd2:	70 91 4c 01 	lds	r23, 0x014C
     dd6:	80 e2       	ldi	r24, 0x20	; 32
	
	for(i = 0; i < 32; i++)
	{
		bitVal = 0;
		if(DispValTemp & 0x80000000)
     dd8:	8a 01       	movw	r16, r20
     dda:	9b 01       	movw	r18, r22
		{
			bitVal = 1;
		}
		DispValTemp <<= 1;
     ddc:	44 0f       	add	r20, r20
     dde:	55 1f       	adc	r21, r21
     de0:	66 1f       	adc	r22, r22
     de2:	77 1f       	adc	r23, r23

		SSD_CLK_CLR();
     de4:	af 98       	cbi	0x15, 7	; 21
		SSD_DAT_CLR();
     de6:	ae 98       	cbi	0x15, 6	; 21
		if(bitVal)
     de8:	37 fd       	sbrc	r19, 7
		{
			SSD_DAT_SET();
     dea:	ae 9a       	sbi	0x15, 6	; 21
		}
		SSD_CLK_SET();
     dec:	af 9a       	sbi	0x15, 7	; 21
     dee:	81 50       	subi	r24, 0x01	; 1
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
	
	for(i = 0; i < 32; i++)
     df0:	99 f7       	brne	.-26     	; 0xdd8 <SSDCycleUpdate+0x16>
void SSDUpdateOnOff(void)
{
	SSD_RATE rate;
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
     df2:	90 91 47 01 	lds	r25, 0x0147
     df6:	97 70       	andi	r25, 0x07	; 7
	ft = SSD.flashTimer;
     df8:	80 91 48 01 	lds	r24, 0x0148
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
     dfc:	94 30       	cpi	r25, 0x04	; 4
     dfe:	19 f0       	breq	.+6      	; 0xe06 <SSDCycleUpdate+0x44>
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
	ft = SSD.flashTimer;
	
	ft += rate;
     e00:	89 0f       	add	r24, r25
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
     e02:	8d 33       	cpi	r24, 0x3D	; 61
     e04:	30 f0       	brcs	.+12     	; 0xe12 <SSDCycleUpdate+0x50>
	{
		ft = 0;
		SSD.ssd.state = SSD_OFF;
     e06:	80 91 47 01 	lds	r24, 0x0147
     e0a:	8f 7d       	andi	r24, 0xDF	; 223
     e0c:	80 93 47 01 	sts	0x0147, r24
	ft = SSD.flashTimer;
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
	{
		ft = 0;
     e10:	80 e0       	ldi	r24, 0x00	; 0
		SSD.ssd.state = SSD_OFF;
	}
	SSD.flashTimer = ft;
     e12:	80 93 48 01 	sts	0x0148, r24
	
	if((rate == SSD_0HZ) || (ft > (SSD_ONE_SEC/2)))
     e16:	99 23       	and	r25, r25
     e18:	11 f0       	breq	.+4      	; 0xe1e <SSDCycleUpdate+0x5c>
     e1a:	8f 31       	cpi	r24, 0x1F	; 31
     e1c:	28 f0       	brcs	.+10     	; 0xe28 <SSDCycleUpdate+0x66>
	{
		SSD.ssd.state = SSD_ON;
     e1e:	80 91 47 01 	lds	r24, 0x0147
     e22:	80 62       	ori	r24, 0x20	; 32
     e24:	80 93 47 01 	sts	0x0147, r24
*
*********************************************************************************************************
*/
void SSDUpdateComPin(void)
{
	if(SSD.ssd.state == SSD_OFF)		/* if ssd is in off state, cut power to green and color */
     e28:	80 91 47 01 	lds	r24, 0x0147
     e2c:	85 fd       	sbrc	r24, 5
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <SSDCycleUpdate+0x72>
	{
		SSD_RED_CLR();
     e30:	ac 98       	cbi	0x15, 4	; 21
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <SSDCycleUpdate+0x78>
		SSD_GRN_CLR();
	}
	else
	{
		if(SSD.ssd.color == SSD_RED)		/* dispay red color */
     e34:	88 71       	andi	r24, 0x18	; 24
     e36:	19 f4       	brne	.+6      	; 0xe3e <SSDCycleUpdate+0x7c>
		{
			SSD_RED_SET();	/* give power to red ssd common pin */
     e38:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_CLR();	/* cut power to green ssd common pin */
     e3a:	ad 98       	cbi	0x15, 5	; 21
     e3c:	06 c0       	rjmp	.+12     	; 0xe4a <SSDCycleUpdate+0x88>
		}
		else if(SSD.ssd.color == SSD_GREEN) /* dispay green color */
     e3e:	88 30       	cpi	r24, 0x08	; 8
     e40:	11 f4       	brne	.+4      	; 0xe46 <SSDCycleUpdate+0x84>
		{
			SSD_RED_CLR();
     e42:	ac 98       	cbi	0x15, 4	; 21
     e44:	01 c0       	rjmp	.+2      	; 0xe48 <SSDCycleUpdate+0x86>
			SSD_GRN_SET();
		}
		else								/* dispay amber color */
		{
			SSD_RED_SET();
     e46:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_SET();
     e48:	ad 9a       	sbi	0x15, 5	; 21
void SSDCycleUpdate(void)
{
	SSDShitfOutData();
	SSDUpdateOnOff();
	SSDUpdateComPin();
}
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	08 95       	ret

00000e50 <SSDDisplayDec>:
* Notes      :none
*
*********************************************************************************************************
*/
void SSDDisplayDec(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	8c 01       	movw	r16, r24
     e5a:	36 2f       	mov	r19, r22
uint32_t SSDHex2Dec(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = hexValue/1000;
     e5c:	68 ee       	ldi	r22, 0xE8	; 232
     e5e:	73 e0       	ldi	r23, 0x03	; 3
     e60:	0e 94 40 08 	call	0x1080	; 0x1080 <__udivmodhi4>
     e64:	c6 2f       	mov	r28, r22
	dataSTR.hundred   = hexValue%1000/100;
     e66:	64 e6       	ldi	r22, 0x64	; 100
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	0e 94 40 08 	call	0x1080	; 0x1080 <__udivmodhi4>
     e6e:	d6 2f       	mov	r29, r22
	dataSTR.tens      = hexValue%1000%100/10;
     e70:	6a e0       	ldi	r22, 0x0A	; 10
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	0e 94 40 08 	call	0x1080	; 0x1080 <__udivmodhi4>
     e78:	56 2f       	mov	r21, r22
{
	SSD_DISP_T ValueCopy;
	
	SSD.DispVal.value = SSDHex2Dec(DispData);
	ValueCopy.value = SSD.DispVal.value;
	SSD.ssd.rate = rate;
     e7a:	37 70       	andi	r19, 0x07	; 7
     e7c:	60 91 47 01 	lds	r22, 0x0147
     e80:	60 7e       	andi	r22, 0xE0	; 224
	SSD.ssd.color = color;
     e82:	43 70       	andi	r20, 0x03	; 3
     e84:	94 2f       	mov	r25, r20
     e86:	99 0f       	add	r25, r25
     e88:	99 0f       	add	r25, r25
     e8a:	99 0f       	add	r25, r25
     e8c:	46 2f       	mov	r20, r22
     e8e:	43 2b       	or	r20, r19
     e90:	49 2b       	or	r20, r25
     e92:	40 93 47 01 	sts	0x0147, r20
	
	/* Set display null for all 4 seven segment displays */
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
     e96:	ef ea       	ldi	r30, 0xAF	; 175
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	94 91       	lpm	r25, Z
     e9c:	90 93 4c 01 	sts	0x014C, r25
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
     ea0:	94 91       	lpm	r25, Z
     ea2:	90 93 4b 01 	sts	0x014B, r25
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
     ea6:	94 91       	lpm	r25, Z
     ea8:	90 93 4a 01 	sts	0x014A, r25
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
     eac:	e4 91       	lpm	r30, Z
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0

	/* Set display remove zero before number */
	if(DispData > 1000)
     eb2:	09 3e       	cpi	r16, 0xE9	; 233
     eb4:	83 e0       	ldi	r24, 0x03	; 3
     eb6:	18 07       	cpc	r17, r24
     eb8:	78 f0       	brcs	.+30     	; 0xed8 <SSDDisplayDec+0x88>
	{
		SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[ValueCopy.thousands]);
     eba:	ec 2f       	mov	r30, r28
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	e1 56       	subi	r30, 0x61	; 97
     ec0:	ff 4f       	sbci	r31, 0xFF	; 255
     ec2:	84 91       	lpm	r24, Z
     ec4:	80 93 4c 01 	sts	0x014C, r24
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
     ec8:	ed 2f       	mov	r30, r29
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	e1 56       	subi	r30, 0x61	; 97
     ece:	ff 4f       	sbci	r31, 0xFF	; 255
     ed0:	e4 91       	lpm	r30, Z
     ed2:	e0 93 4b 01 	sts	0x014B, r30
     ed6:	0e c0       	rjmp	.+28     	; 0xef4 <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 100)
     ed8:	05 36       	cpi	r16, 0x65	; 101
     eda:	11 05       	cpc	r17, r1
     edc:	40 f0       	brcs	.+16     	; 0xeee <SSDDisplayDec+0x9e>
	{
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
     ede:	ed 2f       	mov	r30, r29
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	e1 56       	subi	r30, 0x61	; 97
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	84 91       	lpm	r24, Z
     ee8:	80 93 4b 01 	sts	0x014B, r24
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 10)
     eee:	0b 30       	cpi	r16, 0x0B	; 11
     ef0:	11 05       	cpc	r17, r1
     ef2:	38 f0       	brcs	.+14     	; 0xf02 <SSDDisplayDec+0xb2>
	{
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
     ef4:	e5 2f       	mov	r30, r21
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	e1 56       	subi	r30, 0x61	; 97
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	e4 91       	lpm	r30, Z
     efe:	e0 93 4a 01 	sts	0x014A, r30
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else
	{
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
     f02:	f9 01       	movw	r30, r18
     f04:	e1 56       	subi	r30, 0x61	; 97
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	e4 91       	lpm	r30, Z
     f0a:	e0 93 49 01 	sts	0x0149, r30
	}
}
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	08 95       	ret

00000f18 <SSDDisplayHex>:
uint32_t SSDHex2Hex(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = (hexValue >> 12) & 0x000f;
     f18:	39 2f       	mov	r19, r25
     f1a:	32 95       	swap	r19
     f1c:	3f 70       	andi	r19, 0x0F	; 15
	dataSTR.hundred   = (hexValue >> 8) & 0x000f;
     f1e:	29 2f       	mov	r18, r25
     f20:	2f 70       	andi	r18, 0x0F	; 15
	dataSTR.tens      = (hexValue >> 4) & 0x000f;
     f22:	fc 01       	movw	r30, r24
     f24:	94 e0       	ldi	r25, 0x04	; 4
     f26:	f6 95       	lsr	r31
     f28:	e7 95       	ror	r30
     f2a:	9a 95       	dec	r25
     f2c:	e1 f7       	brne	.-8      	; 0xf26 <SSDDisplayHex+0xe>
     f2e:	9e 2f       	mov	r25, r30
     f30:	9f 70       	andi	r25, 0x0F	; 15
	dataSTR.units     = (hexValue >> 0) & 0x000f;
     f32:	8f 70       	andi	r24, 0x0F	; 15
*
*********************************************************************************************************
*/
void SSDDisplayHex(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
	SSD.DispVal.value = SSDHex2Hex(DispData);
     f34:	a7 e4       	ldi	r26, 0x47	; 71
     f36:	b1 e0       	ldi	r27, 0x01	; 1
	SSD.ssd.rate = rate;
     f38:	67 70       	andi	r22, 0x07	; 7
     f3a:	7c 91       	ld	r23, X
     f3c:	70 7e       	andi	r23, 0xE0	; 224
	SSD.ssd.color = color;
     f3e:	43 70       	andi	r20, 0x03	; 3
     f40:	54 2f       	mov	r21, r20
     f42:	55 0f       	add	r21, r21
     f44:	55 0f       	add	r21, r21
     f46:	55 0f       	add	r21, r21
     f48:	47 2f       	mov	r20, r23
     f4a:	46 2b       	or	r20, r22
     f4c:	45 2b       	or	r20, r21
     f4e:	4c 93       	st	X, r20
	
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD.DispVal.thousands]);
     f50:	e3 2f       	mov	r30, r19
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	e1 56       	subi	r30, 0x61	; 97
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	34 91       	lpm	r19, Z
     f5a:	15 96       	adiw	r26, 0x05	; 5
     f5c:	3c 93       	st	X, r19
     f5e:	15 97       	sbiw	r26, 0x05	; 5
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD.DispVal.hundred]);
     f60:	e2 2f       	mov	r30, r18
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	e1 56       	subi	r30, 0x61	; 97
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	24 91       	lpm	r18, Z
     f6a:	14 96       	adiw	r26, 0x04	; 4
     f6c:	2c 93       	st	X, r18
     f6e:	14 97       	sbiw	r26, 0x04	; 4
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD.DispVal.tens]);
     f70:	e9 2f       	mov	r30, r25
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	e1 56       	subi	r30, 0x61	; 97
     f76:	ff 4f       	sbci	r31, 0xFF	; 255
     f78:	e4 91       	lpm	r30, Z
     f7a:	13 96       	adiw	r26, 0x03	; 3
     f7c:	ec 93       	st	X, r30
     f7e:	13 97       	sbiw	r26, 0x03	; 3
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD.DispVal.units]);
     f80:	e8 2f       	mov	r30, r24
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	e1 56       	subi	r30, 0x61	; 97
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	e4 91       	lpm	r30, Z
     f8a:	12 96       	adiw	r26, 0x02	; 2
     f8c:	ec 93       	st	X, r30
     f8e:	08 95       	ret

00000f90 <SSDInit>:
void SSDInit(void)
{	
	/* 
	Set PB7-PB4 as output to drive seven segment display, default display turn off
	*/
	DDRC &= ~((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
     f90:	84 b3       	in	r24, 0x14	; 20
     f92:	8f 70       	andi	r24, 0x0F	; 15
     f94:	84 bb       	out	0x14, r24	; 20
	DDRC |= ((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
     f96:	84 b3       	in	r24, 0x14	; 20
     f98:	80 6f       	ori	r24, 0xF0	; 240
     f9a:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~((1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4));
     f9c:	85 b3       	in	r24, 0x15	; 21
     f9e:	8f 70       	andi	r24, 0x0F	; 15
     fa0:	85 bb       	out	0x15, r24	; 21

	SSDDisplayHex(0, SSD_R_OFF, SSD_RED);	/* Initial turn off all SSDs */
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	64 e0       	ldi	r22, 0x04	; 4
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <SSDDisplayHex>

00000fae <ADCInit>:
*********************************************************************************************************
*/

void ADCInit (void)
{
	ADMUX  = (1 << REFS0);	/* use external AVCC as AREF,the result is right adjusted,10bits format */	
     fae:	80 e4       	ldi	r24, 0x40	; 64
     fb0:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN) | (0 << ADIE) | (1 << ADIF) | ADPS2_0;	/* ADC Enable, Clear interrupt flag,set ADC Prescaler Selections */
     fb2:	84 e9       	ldi	r24, 0x94	; 148
     fb4:	86 b9       	out	0x06, r24	; 6
     fb6:	08 95       	ret

00000fb8 <ReadADC10Bit>:
uint16_t ReadADC10Bit(uint8_t channel)
{
	uint16_t result;
	uint8_t  sreg_save;  
	
    sreg_save = SREG;						/* Save AVR Status Register */
     fb8:	2f b7       	in	r18, 0x3f	; 63
	cli();									/* Global interrupt disable */
     fba:	f8 94       	cli
	
    ADMUX  &= 0xf0; 						/* Clear MUX3:0 */
     fbc:	97 b1       	in	r25, 0x07	; 7
     fbe:	90 7f       	andi	r25, 0xF0	; 240
     fc0:	97 b9       	out	0x07, r25	; 7
	ADMUX  |= (channel&0x07);				/* Choose ADC channel */
     fc2:	97 b1       	in	r25, 0x07	; 7
     fc4:	87 70       	andi	r24, 0x07	; 7
     fc6:	89 2b       	or	r24, r25
     fc8:	87 b9       	out	0x07, r24	; 7
    ADCSRA |= (1 << ADSC);					/* ADC start conversion */	
     fca:	36 9a       	sbi	0x06, 6	; 6
    while ((ADCSRA & (1 << ADIF)) == 0);	/* wait conversion finish */			
     fcc:	34 9b       	sbis	0x06, 4	; 6
     fce:	fe cf       	rjmp	.-4      	; 0xfcc <ReadADC10Bit+0x14>
    result  = ADC;							/* Read ADC value */
     fd0:	84 b1       	in	r24, 0x04	; 4
     fd2:	95 b1       	in	r25, 0x05	; 5
	
    SREG = sreg_save;						/* Recover AVR Status Register */	
     fd4:	2f bf       	out	0x3f, r18	; 63
    return (result);
}
     fd6:	08 95       	ret

00000fd8 <ButtonInit>:
* Returns    : none
*********************************************************************************************************
*/
void ButtonInit(void)
{
	ButtonInitEx();
     fd8:	0c 94 43 06 	jmp	0xc86	; 0xc86 <ButtonInitEx>

00000fdc <ButtonCycleUpdate>:
* Notes      : None
*
*/
ButtonDataType ButtonGetIO_State(void)
{
	return  ButtonGetIO_StateEx();
     fdc:	0e 94 47 06 	call	0xc8e	; 0xc8e <ButtonGetIO_StateEx>
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
     fe0:	90 91 4d 01 	lds	r25, 0x014D
     fe4:	89 2b       	or	r24, r25
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
     fe6:	10 92 4d 01 	sts	0x014D, r1
	b = button.buttonsLastCycle.bVal;
     fea:	90 91 4e 01 	lds	r25, 0x014E
	holdTime = button.buttonHoldTime;
     fee:	20 91 53 01 	lds	r18, 0x0153
     ff2:	30 91 54 01 	lds	r19, 0x0154
	
	if (button.buttonsReleased.bVal != 0) {		
     ff6:	40 91 4f 01 	lds	r20, 0x014F
     ffa:	44 23       	and	r20, r20
     ffc:	19 f0       	breq	.+6      	; 0x1004 <ButtonCycleUpdate+0x28>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
     ffe:	40 93 51 01 	sts	0x0151, r20
    1002:	05 c0       	rjmp	.+10     	; 0x100e <ButtonCycleUpdate+0x32>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
    1004:	2d 33       	cpi	r18, 0x3D	; 61
    1006:	31 05       	cpc	r19, r1
    1008:	10 f0       	brcs	.+4      	; 0x100e <ButtonCycleUpdate+0x32>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
    100a:	10 92 51 01 	sts	0x0151, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
    100e:	10 92 4f 01 	sts	0x014F, r1
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
    1012:	10 92 52 01 	sts	0x0152, r1
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
    1016:	89 13       	cpse	r24, r25
    1018:	0f c0       	rjmp	.+30     	; 0x1038 <ButtonCycleUpdate+0x5c>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
    101a:	2f 5f       	subi	r18, 0xFF	; 255
    101c:	3f 4f       	sbci	r19, 0xFF	; 255
    101e:	24 32       	cpi	r18, 0x24	; 36
    1020:	31 05       	cpc	r19, r1
    1022:	18 f4       	brcc	.+6      	; 0x102a <ButtonCycleUpdate+0x4e>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
    1024:	10 92 50 01 	sts	0x0150, r1
    1028:	02 c0       	rjmp	.+4      	; 0x102e <ButtonCycleUpdate+0x52>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
    102a:	80 93 50 01 	sts	0x0150, r24
		}	
		button.buttonHoldTime = holdTime;
    102e:	30 93 54 01 	sts	0x0154, r19
    1032:	20 93 53 01 	sts	0x0153, r18
    1036:	08 95       	ret
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
    1038:	80 93 4e 01 	sts	0x014E, r24
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
    103c:	80 95       	com	r24
    103e:	89 23       	and	r24, r25
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
    1040:	90 91 50 01 	lds	r25, 0x0150
    1044:	98 23       	and	r25, r24
    1046:	81 f4       	brne	.+32     	; 0x1068 <ButtonCycleUpdate+0x8c>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
    1048:	10 92 54 01 	sts	0x0154, r1
    104c:	10 92 53 01 	sts	0x0153, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
    1050:	23 50       	subi	r18, 0x03	; 3
    1052:	31 09       	sbc	r19, r1
    1054:	20 32       	cpi	r18, 0x20	; 32
    1056:	31 05       	cpc	r19, r1
    1058:	38 f4       	brcc	.+14     	; 0x1068 <ButtonCycleUpdate+0x8c>
				button.buttonsReleased.bVal = buttons;	
    105a:	80 93 4f 01 	sts	0x014F, r24
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
    105e:	90 91 51 01 	lds	r25, 0x0151
    1062:	89 23       	and	r24, r25
    1064:	80 93 52 01 	sts	0x0152, r24
    1068:	08 95       	ret

0000106a <ButtonGetHoldTime>:
*/

uint16_t ButtonGetHoldTime(void)
{
	return button.buttonHoldTime;
}
    106a:	80 91 53 01 	lds	r24, 0x0153
    106e:	90 91 54 01 	lds	r25, 0x0154
    1072:	08 95       	ret

00001074 <ButtonGetReleased>:
*/

ButtonDataType ButtonGetReleased(void)
{
	return button.buttonsReleased.bVal;
}
    1074:	80 91 4f 01 	lds	r24, 0x014F
    1078:	08 95       	ret

0000107a <ButtonGetHeld>:
*/

ButtonDataType ButtonGetHeld (void)
{
	return button.buttonsHeld.bVal;
}
    107a:	80 91 50 01 	lds	r24, 0x0150
    107e:	08 95       	ret

00001080 <__udivmodhi4>:
    1080:	aa 1b       	sub	r26, r26
    1082:	bb 1b       	sub	r27, r27
    1084:	51 e1       	ldi	r21, 0x11	; 17
    1086:	07 c0       	rjmp	.+14     	; 0x1096 <__udivmodhi4_ep>

00001088 <__udivmodhi4_loop>:
    1088:	aa 1f       	adc	r26, r26
    108a:	bb 1f       	adc	r27, r27
    108c:	a6 17       	cp	r26, r22
    108e:	b7 07       	cpc	r27, r23
    1090:	10 f0       	brcs	.+4      	; 0x1096 <__udivmodhi4_ep>
    1092:	a6 1b       	sub	r26, r22
    1094:	b7 0b       	sbc	r27, r23

00001096 <__udivmodhi4_ep>:
    1096:	88 1f       	adc	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	5a 95       	dec	r21
    109c:	a9 f7       	brne	.-22     	; 0x1088 <__udivmodhi4_loop>
    109e:	80 95       	com	r24
    10a0:	90 95       	com	r25
    10a2:	bc 01       	movw	r22, r24
    10a4:	cd 01       	movw	r24, r26
    10a6:	08 95       	ret

000010a8 <__udivmodsi4>:
    10a8:	a1 e2       	ldi	r26, 0x21	; 33
    10aa:	1a 2e       	mov	r1, r26
    10ac:	aa 1b       	sub	r26, r26
    10ae:	bb 1b       	sub	r27, r27
    10b0:	fd 01       	movw	r30, r26
    10b2:	0d c0       	rjmp	.+26     	; 0x10ce <__udivmodsi4_ep>

000010b4 <__udivmodsi4_loop>:
    10b4:	aa 1f       	adc	r26, r26
    10b6:	bb 1f       	adc	r27, r27
    10b8:	ee 1f       	adc	r30, r30
    10ba:	ff 1f       	adc	r31, r31
    10bc:	a2 17       	cp	r26, r18
    10be:	b3 07       	cpc	r27, r19
    10c0:	e4 07       	cpc	r30, r20
    10c2:	f5 07       	cpc	r31, r21
    10c4:	20 f0       	brcs	.+8      	; 0x10ce <__udivmodsi4_ep>
    10c6:	a2 1b       	sub	r26, r18
    10c8:	b3 0b       	sbc	r27, r19
    10ca:	e4 0b       	sbc	r30, r20
    10cc:	f5 0b       	sbc	r31, r21

000010ce <__udivmodsi4_ep>:
    10ce:	66 1f       	adc	r22, r22
    10d0:	77 1f       	adc	r23, r23
    10d2:	88 1f       	adc	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	1a 94       	dec	r1
    10d8:	69 f7       	brne	.-38     	; 0x10b4 <__udivmodsi4_loop>
    10da:	60 95       	com	r22
    10dc:	70 95       	com	r23
    10de:	80 95       	com	r24
    10e0:	90 95       	com	r25
    10e2:	9b 01       	movw	r18, r22
    10e4:	ac 01       	movw	r20, r24
    10e6:	bd 01       	movw	r22, r26
    10e8:	cf 01       	movw	r24, r30
    10ea:	08 95       	ret

000010ec <__tablejump2__>:
    10ec:	ee 0f       	add	r30, r30
    10ee:	ff 1f       	adc	r31, r31
    10f0:	05 90       	lpm	r0, Z+
    10f2:	f4 91       	lpm	r31, Z
    10f4:	e0 2d       	mov	r30, r0
    10f6:	09 94       	ijmp

000010f8 <_exit>:
    10f8:	f8 94       	cli

000010fa <__stop_program>:
    10fa:	ff cf       	rjmp	.-2      	; 0x10fa <__stop_program>
