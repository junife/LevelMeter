
LevelMeterMainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b78  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000bec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d2  00800060  00800060  00000bec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002662  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f3c  00000000  00000000  000035c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e4c  00000000  00000000  000044fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000079c  00000000  00000000  0000534c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d5b  00000000  00000000  00005ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001938  00000000  00000000  00006843  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000817b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  14:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  18:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  1c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  20:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  28:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  2c:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_11>
  30:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  34:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__vector_13>
  38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  3c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  40:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  50:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	30 31       	cpi	r19, 0x10	; 16
  56:	32 33       	cpi	r19, 0x32	; 50
  58:	34 35       	cpi	r19, 0x54	; 84
  5a:	36 37       	cpi	r19, 0x76	; 118
  5c:	38 39       	cpi	r19, 0x98	; 152
  5e:	41 42       	sbci	r20, 0x21	; 33
  60:	43 44       	sbci	r20, 0x43	; 67
  62:	45 46       	sbci	r20, 0x65	; 101
	...

00000065 <__c.2186>:
  65:	73 74 3d 25 78 0a 00                                st=%x..

0000006c <__c.2184>:
  6c:	74 6d 3d 25 64 0a 00                                tm=%d..

00000073 <__c.2172>:
  73:	73 74 3d 25 78 0a 00                                st=%x..

0000007a <__c.2170>:
  7a:	74 6d 3d 25 64 0a 00                                tm=%d..

00000081 <__c.2162>:
  81:	54 79 70 65 3d 25 63 0a 00                          Type=%c..

0000008a <__c.2160>:
  8a:	48 2d 4a 4d 50 31 0a 00                             H-JMP1..

00000092 <__c.2158>:
  92:	48 2d 4a 4d 50 32 0a 00                             H-JMP2..

0000009a <__c.2156>:
  9a:	4a 4d 50 31 0a 00                                   JMP1..

000000a0 <__c.2154>:
  a0:	4a 4d 50 32 0a 00                                   JMP2..

000000a6 <__c.2144>:
  a6:	4d 61 69 6e 20 62 6f 61 72 64 20 68 65 72 65 21     Main board here!
  b6:	0a 00                                               ..

000000b8 <ssdCharTble>:
  b8:	c0 f9 a4 b0 99 92 82 f8 80 90 88 83 c6 a1 86 8e     ................
  c8:	ff fe f7 00                                         ....

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf e5       	ldi	r28, 0x5F	; 95
  d2:	d4 e0       	ldi	r29, 0x04	; 4
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_clear_bss>:
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	a0 e6       	ldi	r26, 0x60	; 96
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
  e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
  e2:	a2 33       	cpi	r26, 0x32	; 50
  e4:	b2 07       	cpc	r27, r18
  e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
  e8:	0e 94 2e 04 	call	0x85c	; 0x85c <main>
  ec:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <_exit>

000000f0 <__bad_interrupt>:
  f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f4 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
  f4:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
  f6:	8f b7       	in	r24, 0x3f	; 63
  f8:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
  fa:	71 83       	std	Z+1, r23	; 0x01
  fc:	60 83       	st	Z, r22
	buffer->size = size;
  fe:	53 83       	std	Z+3, r21	; 0x03
 100:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
 102:	17 82       	std	Z+7, r1	; 0x07
 104:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
 106:	15 82       	std	Z+5, r1	; 0x05
 108:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
 10a:	8f bf       	out	0x3f, r24	; 63
 10c:	08 95       	ret

0000010e <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
 10e:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
 110:	9f b7       	in	r25, 0x3f	; 63
 112:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
 114:	44 81       	ldd	r20, Z+4	; 0x04
 116:	55 81       	ldd	r21, Z+5	; 0x05
 118:	41 15       	cp	r20, r1
 11a:	51 05       	cpc	r21, r1
 11c:	c9 f0       	breq	.+50     	; 0x150 <bufferGetFromFront+0x42>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
 11e:	26 81       	ldd	r18, Z+6	; 0x06
 120:	37 81       	ldd	r19, Z+7	; 0x07
 122:	a0 81       	ld	r26, Z
 124:	b1 81       	ldd	r27, Z+1	; 0x01
 126:	a2 0f       	add	r26, r18
 128:	b3 1f       	adc	r27, r19
 12a:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
 12c:	2f 5f       	subi	r18, 0xFF	; 255
 12e:	3f 4f       	sbci	r19, 0xFF	; 255
 130:	37 83       	std	Z+7, r19	; 0x07
 132:	26 83       	std	Z+6, r18	; 0x06
		if(buffer->dataindex >= buffer->size)
 134:	62 81       	ldd	r22, Z+2	; 0x02
 136:	73 81       	ldd	r23, Z+3	; 0x03
 138:	26 17       	cp	r18, r22
 13a:	37 07       	cpc	r19, r23
 13c:	20 f0       	brcs	.+8      	; 0x146 <bufferGetFromFront+0x38>
		{
			buffer->dataindex -= buffer->size;
 13e:	26 1b       	sub	r18, r22
 140:	37 0b       	sbc	r19, r23
 142:	37 83       	std	Z+7, r19	; 0x07
 144:	26 83       	std	Z+6, r18	; 0x06
		}
		buffer->datalength--;
 146:	41 50       	subi	r20, 0x01	; 1
 148:	51 09       	sbc	r21, r1
 14a:	55 83       	std	Z+5, r21	; 0x05
 14c:	44 83       	std	Z+4, r20	; 0x04
 14e:	01 c0       	rjmp	.+2      	; 0x152 <bufferGetFromFront+0x44>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
 150:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
 152:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
 154:	08 95       	ret

00000156 <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
 156:	fc 01       	movw	r30, r24
 158:	36 2f       	mov	r19, r22
	// begin critical section
	CRITICAL_SECTION_START;
 15a:	2f b7       	in	r18, 0x3f	; 63
 15c:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
 15e:	a4 81       	ldd	r26, Z+4	; 0x04
 160:	b5 81       	ldd	r27, Z+5	; 0x05
 162:	62 81       	ldd	r22, Z+2	; 0x02
 164:	73 81       	ldd	r23, Z+3	; 0x03
 166:	a6 17       	cp	r26, r22
 168:	b7 07       	cpc	r27, r23
 16a:	98 f4       	brcc	.+38     	; 0x192 <bufferAddToEnd+0x3c>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
 16c:	86 81       	ldd	r24, Z+6	; 0x06
 16e:	97 81       	ldd	r25, Z+7	; 0x07
 170:	8a 0f       	add	r24, r26
 172:	9b 1f       	adc	r25, r27
 174:	0e 94 84 05 	call	0xb08	; 0xb08 <__udivmodhi4>
 178:	a0 81       	ld	r26, Z
 17a:	b1 81       	ldd	r27, Z+1	; 0x01
 17c:	a8 0f       	add	r26, r24
 17e:	b9 1f       	adc	r27, r25
 180:	3c 93       	st	X, r19
		// increment the length
		buffer->datalength++;
 182:	84 81       	ldd	r24, Z+4	; 0x04
 184:	95 81       	ldd	r25, Z+5	; 0x05
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	95 83       	std	Z+5, r25	; 0x05
 18a:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
 18c:	2f bf       	out	0x3f, r18	; 63
		// return success
		return -1;
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	08 95       	ret
	}
	// end critical section
	CRITICAL_SECTION_END;
 192:	2f bf       	out	0x3f, r18	; 63
	// return failure
	return 0;
 194:	80 e0       	ldi	r24, 0x00	; 0
}
 196:	08 95       	ret

00000198 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
 198:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
 19a:	4f b7       	in	r20, 0x3f	; 63
 19c:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
 19e:	82 81       	ldd	r24, Z+2	; 0x02
 1a0:	93 81       	ldd	r25, Z+3	; 0x03
 1a2:	24 81       	ldd	r18, Z+4	; 0x04
 1a4:	35 81       	ldd	r19, Z+5	; 0x05
	// end critical section
	CRITICAL_SECTION_END;
 1a6:	4f bf       	out	0x3f, r20	; 63
	return bytesleft;
}
 1a8:	82 1b       	sub	r24, r18
 1aa:	93 0b       	sbc	r25, r19
 1ac:	08 95       	ret

000001ae <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
 1ae:	90 93 61 00 	sts	0x0061, r25
 1b2:	80 93 60 00 	sts	0x0060, r24
 1b6:	08 95       	ret

000001b8 <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
 1b8:	cf 93       	push	r28
 1ba:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
 1bc:	8a 30       	cpi	r24, 0x0A	; 10
 1be:	31 f4       	brne	.+12     	; 0x1cc <rprintfChar+0x14>
		rputchar('\r');
 1c0:	e0 91 60 00 	lds	r30, 0x0060
 1c4:	f0 91 61 00 	lds	r31, 0x0061
 1c8:	8d e0       	ldi	r24, 0x0D	; 13
 1ca:	09 95       	icall
	// send character
	rputchar(c);
 1cc:	e0 91 60 00 	lds	r30, 0x0060
 1d0:	f0 91 61 00 	lds	r31, 0x0061
 1d4:	8c 2f       	mov	r24, r28
}
 1d6:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
 1d8:	09 94       	ijmp

000001da <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
 1da:	8f 70       	andi	r24, 0x0F	; 15
 1dc:	e8 2f       	mov	r30, r24
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	ec 5a       	subi	r30, 0xAC	; 172
 1e2:	ff 4f       	sbci	r31, 0xFF	; 255
 1e4:	84 91       	lpm	r24, Z
 1e6:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <rprintfChar>

000001ea <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
 1ea:	5f 92       	push	r5
 1ec:	6f 92       	push	r6
 1ee:	7f 92       	push	r7
 1f0:	8f 92       	push	r8
 1f2:	9f 92       	push	r9
 1f4:	af 92       	push	r10
 1f6:	bf 92       	push	r11
 1f8:	cf 92       	push	r12
 1fa:	df 92       	push	r13
 1fc:	ef 92       	push	r14
 1fe:	ff 92       	push	r15
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	1f 92       	push	r1
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
 20e:	ec 89       	ldd	r30, Y+20	; 0x14
 210:	fd 89       	ldd	r31, Y+21	; 0x15
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
 212:	3e 01       	movw	r6, r28
 214:	26 e1       	ldi	r18, 0x16	; 22
 216:	62 0e       	add	r6, r18
 218:	71 1c       	adc	r7, r1
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
					rprintfChar('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 21a:	3a e0       	ldi	r19, 0x0A	; 10
 21c:	a3 2e       	mov	r10, r19
 21e:	b1 2c       	mov	r11, r1
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 220:	3b 89       	ldd	r19, Y+19	; 0x13
 222:	33 23       	and	r19, r19
 224:	81 f0       	breq	.+32     	; 0x246 <rprintf1RamRom+0x5c>
 226:	8f 01       	movw	r16, r30
 228:	0f 5f       	subi	r16, 0xFF	; 255
 22a:	1f 4f       	sbci	r17, 0xFF	; 255
 22c:	84 91       	lpm	r24, Z
 22e:	85 32       	cpi	r24, 0x25	; 37
 230:	89 f0       	breq	.+34     	; 0x254 <rprintf1RamRom+0x6a>
		{	// Until '%' or '\0'
			if (!format_flag)
 232:	88 23       	and	r24, r24
 234:	09 f4       	brne	.+2      	; 0x238 <rprintf1RamRom+0x4e>
 236:	66 c0       	rjmp	.+204    	; 0x304 <rprintf1RamRom+0x11a>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
 238:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <rprintfChar>
 23c:	63 01       	movw	r12, r6
 23e:	78 01       	movw	r14, r16
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
 240:	36 01       	movw	r6, r12
 242:	f7 01       	movw	r30, r14
 244:	ed cf       	rjmp	.-38     	; 0x220 <rprintf1RamRom+0x36>
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 246:	80 81       	ld	r24, Z
 248:	85 32       	cpi	r24, 0x25	; 37
 24a:	59 f0       	breq	.+22     	; 0x262 <rprintf1RamRom+0x78>
 24c:	8f 01       	movw	r16, r30
 24e:	0f 5f       	subi	r16, 0xFF	; 255
 250:	1f 4f       	sbci	r17, 0xFF	; 255
 252:	ef cf       	rjmp	.-34     	; 0x232 <rprintf1RamRom+0x48>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
 254:	7f 01       	movw	r14, r30
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	e8 0e       	add	r14, r24
 25a:	f1 1c       	adc	r15, r1
 25c:	f8 01       	movw	r30, r16
 25e:	84 91       	lpm	r24, Z
 260:	05 c0       	rjmp	.+10     	; 0x26c <rprintf1RamRom+0x82>
 262:	7f 01       	movw	r14, r30
 264:	22 e0       	ldi	r18, 0x02	; 2
 266:	e2 0e       	add	r14, r18
 268:	f1 1c       	adc	r15, r1
 26a:	81 81       	ldd	r24, Z+1	; 0x01
 26c:	84 36       	cpi	r24, 0x64	; 100
 26e:	a1 f0       	breq	.+40     	; 0x298 <rprintf1RamRom+0xae>
 270:	88 37       	cpi	r24, 0x78	; 120
 272:	61 f0       	breq	.+24     	; 0x28c <rprintf1RamRom+0xa2>
 274:	83 36       	cpi	r24, 0x63	; 99
 276:	31 f4       	brne	.+12     	; 0x284 <rprintf1RamRom+0x9a>
		{
			case 'c': format_flag = va_arg(ap,int);
 278:	f3 01       	movw	r30, r6
 27a:	80 81       	ld	r24, Z
 27c:	93 01       	movw	r18, r6
 27e:	2e 5f       	subi	r18, 0xFE	; 254
 280:	3f 4f       	sbci	r19, 0xFF	; 255
 282:	39 01       	movw	r6, r18
			default:  rprintfChar(format_flag); continue;
 284:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <rprintfChar>
 288:	63 01       	movw	r12, r6
 28a:	da cf       	rjmp	.-76     	; 0x240 <rprintf1RamRom+0x56>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 28c:	20 e1       	ldi	r18, 0x10	; 16
 28e:	82 2e       	mov	r8, r18
 290:	91 2c       	mov	r9, r1
 292:	00 e0       	ldi	r16, 0x00	; 0
 294:	10 e1       	ldi	r17, 0x10	; 16
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <rprintf1RamRom+0xb8>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 298:	9a e0       	ldi	r25, 0x0A	; 10
 29a:	89 2e       	mov	r8, r25
 29c:	91 2c       	mov	r9, r1
 29e:	00 e1       	ldi	r16, 0x10	; 16
 2a0:	17 e2       	ldi	r17, 0x27	; 39
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 2a2:	63 01       	movw	r12, r6
 2a4:	32 e0       	ldi	r19, 0x02	; 2
 2a6:	c3 0e       	add	r12, r19
 2a8:	d1 1c       	adc	r13, r1
 2aa:	f3 01       	movw	r30, r6
 2ac:	60 80       	ld	r6, Z
 2ae:	71 80       	ldd	r7, Z+1	; 0x01
			if (format_flag == 'd')
 2b0:	84 36       	cpi	r24, 0x64	; 100
 2b2:	a1 f4       	brne	.+40     	; 0x2dc <rprintf1RamRom+0xf2>
			{
				if (((int)u_val) < 0)
 2b4:	77 fe       	sbrs	r7, 7
 2b6:	0f c0       	rjmp	.+30     	; 0x2d6 <rprintf1RamRom+0xec>
				{
					u_val = - u_val;
 2b8:	71 94       	neg	r7
 2ba:	61 94       	neg	r6
 2bc:	71 08       	sbc	r7, r1
					rprintfChar('-');
 2be:	8d e2       	ldi	r24, 0x2D	; 45
 2c0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <rprintfChar>
 2c4:	08 c0       	rjmp	.+16     	; 0x2d6 <rprintf1RamRom+0xec>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 2c6:	c8 01       	movw	r24, r16
 2c8:	b5 01       	movw	r22, r10
 2ca:	0e 94 84 05 	call	0xb08	; 0xb08 <__udivmodhi4>
 2ce:	8b 01       	movw	r16, r22
 2d0:	62 30       	cpi	r22, 0x02	; 2
 2d2:	71 05       	cpc	r23, r1
 2d4:	18 f0       	brcs	.+6      	; 0x2dc <rprintf1RamRom+0xf2>
 2d6:	60 16       	cp	r6, r16
 2d8:	71 06       	cpc	r7, r17
 2da:	a8 f3       	brcs	.-22     	; 0x2c6 <rprintf1RamRom+0xdc>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
 2dc:	c3 01       	movw	r24, r6
 2de:	b8 01       	movw	r22, r16
 2e0:	0e 94 84 05 	call	0xb08	; 0xb08 <__udivmodhi4>
 2e4:	58 2e       	mov	r5, r24
 2e6:	86 2f       	mov	r24, r22
 2e8:	99 83       	std	Y+1, r25	; 0x01
 2ea:	0e 94 ed 00 	call	0x1da	; 0x1da <rprintfu04>
				u_val %= div_val;
 2ee:	65 2c       	mov	r6, r5
 2f0:	99 81       	ldd	r25, Y+1	; 0x01
 2f2:	79 2e       	mov	r7, r25
				div_val /= base;
 2f4:	c8 01       	movw	r24, r16
 2f6:	b4 01       	movw	r22, r8
 2f8:	0e 94 84 05 	call	0xb08	; 0xb08 <__udivmodhi4>
 2fc:	8b 01       	movw	r16, r22
			} while (div_val);
 2fe:	67 2b       	or	r22, r23
 300:	69 f7       	brne	.-38     	; 0x2dc <rprintf1RamRom+0xf2>
 302:	9e cf       	rjmp	.-196    	; 0x240 <rprintf1RamRom+0x56>
		}
	}
	va_end(ap);
}
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0f 90       	pop	r0
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	0f 91       	pop	r16
 312:	ff 90       	pop	r15
 314:	ef 90       	pop	r14
 316:	df 90       	pop	r13
 318:	cf 90       	pop	r12
 31a:	bf 90       	pop	r11
 31c:	af 90       	pop	r10
 31e:	9f 90       	pop	r9
 320:	8f 90       	pop	r8
 322:	7f 90       	pop	r7
 324:	6f 90       	pop	r6
 326:	5f 90       	pop	r5
 328:	08 95       	ret

0000032a <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (unsigned char *)uartRxData, UART_RX_BUFFER_SIZE);
 32a:	40 e4       	ldi	r20, 0x40	; 64
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	64 ea       	ldi	r22, 0xA4	; 164
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	87 ee       	ldi	r24, 0xE7	; 231
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 7a 00 	call	0xf4	; 0xf4 <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (unsigned char *)uartTxData, UART_TX_BUFFER_SIZE);
 33a:	40 e4       	ldi	r20, 0x40	; 64
 33c:	50 e0       	ldi	r21, 0x00	; 0
 33e:	64 e6       	ldi	r22, 0x64	; 100
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	80 ef       	ldi	r24, 0xF0	; 240
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <bufferInit>

0000034a <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
 34a:	0e 94 95 01 	call	0x32a	; 0x32a <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
 34e:	10 92 63 00 	sts	0x0063, r1
 352:	10 92 62 00 	sts	0x0062, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
 356:	88 ed       	ldi	r24, 0xD8	; 216
 358:	8a b9       	out	0x0a, r24	; 10
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
 35a:	8f e5       	ldi	r24, 0x5F	; 95
 35c:	89 b9       	out	0x09, r24	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 35e:	10 bc       	out	0x20, r1	; 32
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	80 93 e6 00 	sts	0x00E6, r24
	uartBufferedTx = FALSE;
 366:	10 92 ef 00 	sts	0x00EF, r1
	// clear overflow count
	uartRxOverflow = 0;
 36a:	10 92 f9 00 	sts	0x00F9, r1
 36e:	10 92 f8 00 	sts	0x00F8, r1
	// enable interrupts
	sei();
 372:	78 94       	sei
 374:	08 95       	ret

00000376 <uartSetBaudRate>:
	UartRxFunc = rx_func;
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	8b 01       	movw	r16, r22
 37c:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
 37e:	dc 01       	movw	r26, r24
 380:	cb 01       	movw	r24, r22
 382:	90 5e       	subi	r25, 0xE0	; 224
 384:	a3 4e       	sbci	r26, 0xE3	; 227
 386:	bf 4f       	sbci	r27, 0xFF	; 255
 388:	bc 01       	movw	r22, r24
 38a:	cd 01       	movw	r24, r26
 38c:	43 e0       	ldi	r20, 0x03	; 3
 38e:	66 0f       	add	r22, r22
 390:	77 1f       	adc	r23, r23
 392:	88 1f       	adc	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	4a 95       	dec	r20
 398:	d1 f7       	brne	.-12     	; 0x38e <uartSetBaudRate+0x18>
 39a:	a9 01       	movw	r20, r18
 39c:	98 01       	movw	r18, r16
 39e:	e4 e0       	ldi	r30, 0x04	; 4
 3a0:	22 0f       	add	r18, r18
 3a2:	33 1f       	adc	r19, r19
 3a4:	44 1f       	adc	r20, r20
 3a6:	55 1f       	adc	r21, r21
 3a8:	ea 95       	dec	r30
 3aa:	d1 f7       	brne	.-12     	; 0x3a0 <uartSetBaudRate+0x2a>
 3ac:	0e 94 98 05 	call	0xb30	; 0xb30 <__udivmodsi4>
 3b0:	21 50       	subi	r18, 0x01	; 1
 3b2:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
 3b4:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 3b6:	30 bd       	out	0x20, r19	; 32
	#endif
}
 3b8:	1f 91       	pop	r17
 3ba:	0f 91       	pop	r16
 3bc:	08 95       	ret

000003be <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
 3be:	90 91 e6 00 	lds	r25, 0x00E6
 3c2:	99 23       	and	r25, r25
 3c4:	e1 f3       	breq	.-8      	; 0x3be <uartSendByte>
	// send byte
	outb(UDR, txData);
 3c6:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
 3c8:	10 92 e6 00 	sts	0x00E6, r1
 3cc:	08 95       	ret

000003ce <__vector_13>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_TRANS)
{
 3ce:	1f 92       	push	r1
 3d0:	0f 92       	push	r0
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	0f 92       	push	r0
 3d6:	11 24       	eor	r1, r1
 3d8:	2f 93       	push	r18
 3da:	3f 93       	push	r19
 3dc:	4f 93       	push	r20
 3de:	5f 93       	push	r21
 3e0:	6f 93       	push	r22
 3e2:	7f 93       	push	r23
 3e4:	8f 93       	push	r24
 3e6:	9f 93       	push	r25
 3e8:	af 93       	push	r26
 3ea:	bf 93       	push	r27
 3ec:	ef 93       	push	r30
 3ee:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
 3f0:	80 91 ef 00 	lds	r24, 0x00EF
 3f4:	88 23       	and	r24, r24
 3f6:	71 f0       	breq	.+28     	; 0x414 <__vector_13+0x46>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
 3f8:	80 91 f4 00 	lds	r24, 0x00F4
 3fc:	90 91 f5 00 	lds	r25, 0x00F5
 400:	89 2b       	or	r24, r25
 402:	31 f0       	breq	.+12     	; 0x410 <__vector_13+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
 404:	80 ef       	ldi	r24, 0xF0	; 240
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 87 00 	call	0x10e	; 0x10e <bufferGetFromFront>
 40c:	8c b9       	out	0x0c, r24	; 12
 40e:	05 c0       	rjmp	.+10     	; 0x41a <__vector_13+0x4c>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
 410:	10 92 ef 00 	sts	0x00EF, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
 414:	8f ef       	ldi	r24, 0xFF	; 255
 416:	80 93 e6 00 	sts	0x00E6, r24
	}
}
 41a:	ff 91       	pop	r31
 41c:	ef 91       	pop	r30
 41e:	bf 91       	pop	r27
 420:	af 91       	pop	r26
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	7f 91       	pop	r23
 428:	6f 91       	pop	r22
 42a:	5f 91       	pop	r21
 42c:	4f 91       	pop	r20
 42e:	3f 91       	pop	r19
 430:	2f 91       	pop	r18
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
 438:	1f 90       	pop	r1
 43a:	18 95       	reti

0000043c <__vector_11>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_RECV)
{
 43c:	1f 92       	push	r1
 43e:	0f 92       	push	r0
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	0f 92       	push	r0
 444:	11 24       	eor	r1, r1
 446:	2f 93       	push	r18
 448:	3f 93       	push	r19
 44a:	4f 93       	push	r20
 44c:	5f 93       	push	r21
 44e:	6f 93       	push	r22
 450:	7f 93       	push	r23
 452:	8f 93       	push	r24
 454:	9f 93       	push	r25
 456:	af 93       	push	r26
 458:	bf 93       	push	r27
 45a:	ef 93       	push	r30
 45c:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
 45e:	8c b1       	in	r24, 0x0c	; 12

	// if there's a user function to handle this receive event
	if(UartRxFunc)
 460:	20 91 62 00 	lds	r18, 0x0062
 464:	30 91 63 00 	lds	r19, 0x0063
 468:	23 2b       	or	r18, r19
 46a:	31 f0       	breq	.+12     	; 0x478 <__stack+0x19>
	{
		// call it and pass the received data
		UartRxFunc(c);
 46c:	e0 91 62 00 	lds	r30, 0x0062
 470:	f0 91 63 00 	lds	r31, 0x0063
 474:	09 95       	icall
 476:	10 c0       	rjmp	.+32     	; 0x498 <__stack+0x39>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
 478:	68 2f       	mov	r22, r24
 47a:	87 ee       	ldi	r24, 0xE7	; 231
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 ab 00 	call	0x156	; 0x156 <bufferAddToEnd>
 482:	81 11       	cpse	r24, r1
 484:	09 c0       	rjmp	.+18     	; 0x498 <__stack+0x39>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
 486:	80 91 f8 00 	lds	r24, 0x00F8
 48a:	90 91 f9 00 	lds	r25, 0x00F9
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	90 93 f9 00 	sts	0x00F9, r25
 494:	80 93 f8 00 	sts	0x00F8, r24
		}
	}
}
 498:	ff 91       	pop	r31
 49a:	ef 91       	pop	r30
 49c:	bf 91       	pop	r27
 49e:	af 91       	pop	r26
 4a0:	9f 91       	pop	r25
 4a2:	8f 91       	pop	r24
 4a4:	7f 91       	pop	r23
 4a6:	6f 91       	pop	r22
 4a8:	5f 91       	pop	r21
 4aa:	4f 91       	pop	r20
 4ac:	3f 91       	pop	r19
 4ae:	2f 91       	pop	r18
 4b0:	0f 90       	pop	r0
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	0f 90       	pop	r0
 4b6:	1f 90       	pop	r1
 4b8:	18 95       	reti

000004ba <McuInit>:

void McuInit(void)
{
	// initialize our libraries
	// initialize the UART (serial port)
	uartInit();		/* sei() call in the function */
 4ba:	0e 94 a5 01 	call	0x34a	; 0x34a <uartInit>
	// set the baud rate of the UART for our debug/reporting output
	uartSetBaudRate(9600);
 4be:	60 e8       	ldi	r22, 0x80	; 128
 4c0:	75 e2       	ldi	r23, 0x25	; 37
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 bb 01 	call	0x376	; 0x376 <uartSetBaudRate>
	// initialize rprintf system
	rprintfInit(uartSendByte);
 4ca:	8f ed       	ldi	r24, 0xDF	; 223
 4cc:	91 e0       	ldi	r25, 0x01	; 1
 4ce:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <rprintfInit>

000004d2 <ApplInit>:
*********************************************************************************************************
*/

void ApplInit(void)
{
	ButtonInit();
 4d2:	0e 94 35 05 	call	0xa6a	; 0xa6a <ButtonInit>
	LEDInit();
 4d6:	0e 94 a0 03 	call	0x740	; 0x740 <LEDInit>
	SSDInit();
 4da:	0e 94 26 05 	call	0xa4c	; 0xa4c <SSDInit>
*/

void ApplDataInit(void)
{
	/* Following for power on display steps */
	appl.PwrOnSteps = DISP_START;
 4de:	ea ef       	ldi	r30, 0xFA	; 250
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	10 8a       	std	Z+16, r1	; 0x10
	appl.PwrOnTimer = TIME_SWITCH_TOTAL;
 4e4:	80 ec       	ldi	r24, 0xC0	; 192
 4e6:	93 e0       	ldi	r25, 0x03	; 3
 4e8:	96 87       	std	Z+14, r25	; 0x0e
 4ea:	85 87       	std	Z+13, r24	; 0x0d
	ButtonInit();
	LEDInit();
	SSDInit();
	ApplDataInit();
	
	rprintf("Main board here!\n" );	
 4ec:	86 ea       	ldi	r24, 0xA6	; 166
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	9f 93       	push	r25
 4f2:	8f 93       	push	r24
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	8f 93       	push	r24
 4f8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <rprintf1RamRom>
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	08 95       	ret

00000504 <AppCycleUpdate>:
*
* Returns    : none
*********************************************************************************************************
*/
void AppCycleUpdate(void)
{	
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
	char tempChar;
	static uint16_t cnt;
	cnt++;
 508:	80 91 e4 00 	lds	r24, 0x00E4
 50c:	90 91 e5 00 	lds	r25, 0x00E5
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	90 93 e5 00 	sts	0x00E5, r25
 516:	80 93 e4 00 	sts	0x00E4, r24
* Returns    : none
*********************************************************************************************************
*/
void AppUpdateTimers(void)
{
	if(++appl.second > TIMER_1_SEC_60HZ) 
 51a:	80 91 06 01 	lds	r24, 0x0106
 51e:	8f 5f       	subi	r24, 0xFF	; 255
 520:	8d 33       	cpi	r24, 0x3D	; 61
 522:	18 f4       	brcc	.+6      	; 0x52a <AppCycleUpdate+0x26>
 524:	80 93 06 01 	sts	0x0106, r24
 528:	02 c0       	rjmp	.+4      	; 0x52e <AppCycleUpdate+0x2a>
	{
		appl.second = 0;
 52a:	10 92 06 01 	sts	0x0106, r1
	}
	
	if(appl.PwrOnTimer != TIMER_TIMEOUT && appl.PwrOnTimer != TIMER_INT_DISABLED) appl.PwrOnTimer--;
 52e:	80 91 07 01 	lds	r24, 0x0107
 532:	90 91 08 01 	lds	r25, 0x0108
 536:	01 97       	sbiw	r24, 0x01	; 1
 538:	8e 3f       	cpi	r24, 0xFE	; 254
 53a:	2f ef       	ldi	r18, 0xFF	; 255
 53c:	92 07       	cpc	r25, r18
 53e:	20 f4       	brcc	.+8      	; 0x548 <AppCycleUpdate+0x44>
 540:	90 93 08 01 	sts	0x0108, r25
 544:	80 93 07 01 	sts	0x0107, r24
* Returns    : true, power on control has finised. false, is processing
*********************************************************************************************************
*/
bool AppPwrOnCtrl(void)
{
	if((appl.PwrOnTimer != TIMER_INT_DISABLED && appl.PwrOnTimer != TIMER_TIMEOUT))
 548:	20 91 07 01 	lds	r18, 0x0107
 54c:	30 91 08 01 	lds	r19, 0x0108
 550:	c9 01       	movw	r24, r18
 552:	01 97       	sbiw	r24, 0x01	; 1
 554:	8e 3f       	cpi	r24, 0xFE	; 254
 556:	9f 4f       	sbci	r25, 0xFF	; 255
 558:	58 f5       	brcc	.+86     	; 0x5b0 <AppCycleUpdate+0xac>
	{
		if(appl.PwrOnTimer % (TIME_CONTENT_SWITCH - 1) == 0)
 55a:	c9 01       	movw	r24, r18
 55c:	67 e7       	ldi	r22, 0x77	; 119
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	0e 94 84 05 	call	0xb08	; 0xb08 <__udivmodhi4>
 564:	89 2b       	or	r24, r25
 566:	09 f0       	breq	.+2      	; 0x56a <AppCycleUpdate+0x66>
 568:	ce c0       	rjmp	.+412    	; 0x706 <AppCycleUpdate+0x202>
		{
#if (FOR_DEBUG==1)
						rprintf("tm=%d\n",appl.PwrOnTimer);
 56a:	3f 93       	push	r19
 56c:	2f 93       	push	r18
 56e:	8a e7       	ldi	r24, 0x7A	; 122
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	9f 93       	push	r25
 574:	8f 93       	push	r24
 576:	c1 e0       	ldi	r28, 0x01	; 1
 578:	cf 93       	push	r28
 57a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <rprintf1RamRom>
						rprintf("st=%x\n",appl.PwrOnSteps);
 57e:	80 91 0a 01 	lds	r24, 0x010A
 582:	1f 92       	push	r1
 584:	8f 93       	push	r24
 586:	83 e7       	ldi	r24, 0x73	; 115
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	9f 93       	push	r25
 58c:	8f 93       	push	r24
 58e:	cf 93       	push	r28
 590:	0e 94 f5 00 	call	0x1ea	; 0x1ea <rprintf1RamRom>
					break;
					
				default:
					break;						
			}
			appl.PwrOnSteps++;
 594:	80 91 0a 01 	lds	r24, 0x010A
 598:	8f 5f       	subi	r24, 0xFF	; 255
 59a:	80 93 0a 01 	sts	0x010A, r24
 59e:	8d b7       	in	r24, 0x3d	; 61
 5a0:	9e b7       	in	r25, 0x3e	; 62
 5a2:	0a 96       	adiw	r24, 0x0a	; 10
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	f8 94       	cli
 5a8:	9e bf       	out	0x3e, r25	; 62
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	8d bf       	out	0x3d, r24	; 61
 5ae:	ab c0       	rjmp	.+342    	; 0x706 <AppCycleUpdate+0x202>
		}
		return false;
	}
	else if(appl.PwrOnTimer == TIMER_TIMEOUT)
 5b0:	23 2b       	or	r18, r19
 5b2:	19 f5       	brne	.+70     	; 0x5fa <AppCycleUpdate+0xf6>
	{
		appl.PwrOnTimer = TIMER_INT_DISABLED;
 5b4:	8f ef       	ldi	r24, 0xFF	; 255
 5b6:	9f ef       	ldi	r25, 0xFF	; 255
 5b8:	90 93 08 01 	sts	0x0108, r25
 5bc:	80 93 07 01 	sts	0x0107, r24
#if (FOR_DEBUG==1)
		rprintf("tm=%d\n",appl.PwrOnTimer);
 5c0:	8f 93       	push	r24
 5c2:	8f 93       	push	r24
 5c4:	8c e6       	ldi	r24, 0x6C	; 108
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	9f 93       	push	r25
 5ca:	8f 93       	push	r24
 5cc:	c1 e0       	ldi	r28, 0x01	; 1
 5ce:	cf 93       	push	r28
 5d0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <rprintf1RamRom>
		rprintf("st=%x\n",appl.PwrOnSteps);
 5d4:	80 91 0a 01 	lds	r24, 0x010A
 5d8:	1f 92       	push	r1
 5da:	8f 93       	push	r24
 5dc:	85 e6       	ldi	r24, 0x65	; 101
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	9f 93       	push	r25
 5e2:	8f 93       	push	r24
 5e4:	cf 93       	push	r28
 5e6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <rprintf1RamRom>
 5ea:	8d b7       	in	r24, 0x3d	; 61
 5ec:	9e b7       	in	r25, 0x3e	; 62
 5ee:	0a 96       	adiw	r24, 0x0a	; 10
 5f0:	0f b6       	in	r0, 0x3f	; 63
 5f2:	f8 94       	cli
 5f4:	9e bf       	out	0x3e, r25	; 62
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	8d bf       	out	0x3d, r24	; 61
	
	AppUpdateTimers();

	if(AppPwrOnCtrl() == true)
	{
		if(ButtonGetReleased())
 5fa:	0e 94 7e 05 	call	0xafc	; 0xafc <ButtonGetReleased>
 5fe:	88 23       	and	r24, r24
 600:	81 f1       	breq	.+96     	; 0x662 <AppCycleUpdate+0x15e>
		{
			if(ButtonJMP2ReleasedEvent())
 602:	0e 94 96 03 	call	0x72c	; 0x72c <ButtonJMP2ReleasedEvent>
 606:	88 23       	and	r24, r24
 608:	99 f0       	breq	.+38     	; 0x630 <AppCycleUpdate+0x12c>
			{
				rprintf("JMP2\n");
 60a:	80 ea       	ldi	r24, 0xA0	; 160
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	9f 93       	push	r25
 610:	8f 93       	push	r24
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	8f 93       	push	r24
 616:	0e 94 f5 00 	call	0x1ea	; 0x1ea <rprintf1RamRom>
				LEDFlag1On();
 61a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LEDFlag1On>
				LEDFlag2On();
 61e:	0e 94 13 04 	call	0x826	; 0x826 <LEDFlag2On>
				SSDDisplayDec(9, SSD_0HZ, SSD_GREEN);
 622:	41 e0       	ldi	r20, 0x01	; 1
 624:	60 e0       	ldi	r22, 0x00	; 0
 626:	89 e0       	ldi	r24, 0x09	; 9
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 86 04 	call	0x90c	; 0x90c <SSDDisplayDec>
 62e:	16 c0       	rjmp	.+44     	; 0x65c <AppCycleUpdate+0x158>
			}
			else if(ButtonJMP1ReleasedEvent())
 630:	0e 94 8e 03 	call	0x71c	; 0x71c <ButtonJMP1ReleasedEvent>
 634:	88 23       	and	r24, r24
 636:	a9 f0       	breq	.+42     	; 0x662 <AppCycleUpdate+0x15e>
			{
				rprintf("JMP1\n");
 638:	8a e9       	ldi	r24, 0x9A	; 154
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	9f 93       	push	r25
 63e:	8f 93       	push	r24
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	8f 93       	push	r24
 644:	0e 94 f5 00 	call	0x1ea	; 0x1ea <rprintf1RamRom>
				LEDFlag1Off();
 648:	0e 94 0c 04 	call	0x818	; 0x818 <LEDFlag1Off>
				LEDFlag2Off();
 64c:	0e 94 27 04 	call	0x84e	; 0x84e <LEDFlag2Off>
				SSDDisplayHex(0x1abc, SSD_0HZ, SSD_RED);
 650:	40 e0       	ldi	r20, 0x00	; 0
 652:	60 e0       	ldi	r22, 0x00	; 0
 654:	8c eb       	ldi	r24, 0xBC	; 188
 656:	9a e1       	ldi	r25, 0x1A	; 26
 658:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <SSDDisplayHex>
 65c:	0f 90       	pop	r0
 65e:	0f 90       	pop	r0
 660:	0f 90       	pop	r0
			}
		}

		if(ButtonGetHeld())
 662:	0e 94 81 05 	call	0xb02	; 0xb02 <ButtonGetHeld>
 666:	88 23       	and	r24, r24
 668:	81 f1       	breq	.+96     	; 0x6ca <AppCycleUpdate+0x1c6>
		{
			if(ButtonJMP2HeldEvent())
 66a:	0e 94 9b 03 	call	0x736	; 0x736 <ButtonJMP2HeldEvent>
 66e:	88 23       	and	r24, r24
 670:	99 f0       	breq	.+38     	; 0x698 <AppCycleUpdate+0x194>
			{
				rprintf("H-JMP2\n");
 672:	82 e9       	ldi	r24, 0x92	; 146
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	9f 93       	push	r25
 678:	8f 93       	push	r24
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	8f 93       	push	r24
 67e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <rprintf1RamRom>
				LEDFlag1Flash1Hz();
 682:	0e 94 fe 03 	call	0x7fc	; 0x7fc <LEDFlag1Flash1Hz>
				LEDFlag2Flash1Hz();
 686:	0e 94 19 04 	call	0x832	; 0x832 <LEDFlag2Flash1Hz>
				SSDDisplayDec(0x1def, SSD_1HZ, SSD_AMBER);
 68a:	42 e0       	ldi	r20, 0x02	; 2
 68c:	61 e0       	ldi	r22, 0x01	; 1
 68e:	8f ee       	ldi	r24, 0xEF	; 239
 690:	9d e1       	ldi	r25, 0x1D	; 29
 692:	0e 94 86 04 	call	0x90c	; 0x90c <SSDDisplayDec>
 696:	16 c0       	rjmp	.+44     	; 0x6c4 <AppCycleUpdate+0x1c0>
			}
			
			else if(ButtonJMP1HeldEvent())
 698:	0e 94 92 03 	call	0x724	; 0x724 <ButtonJMP1HeldEvent>
 69c:	88 23       	and	r24, r24
 69e:	a9 f0       	breq	.+42     	; 0x6ca <AppCycleUpdate+0x1c6>
			{
				rprintf("H-JMP1\n");
 6a0:	8a e8       	ldi	r24, 0x8A	; 138
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	9f 93       	push	r25
 6a6:	8f 93       	push	r24
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	8f 93       	push	r24
 6ac:	0e 94 f5 00 	call	0x1ea	; 0x1ea <rprintf1RamRom>
				LEDFlag1Flash3Hz();
 6b0:	0e 94 05 04 	call	0x80a	; 0x80a <LEDFlag1Flash3Hz>
				LEDFlag2Flash3Hz();
 6b4:	0e 94 20 04 	call	0x840	; 0x840 <LEDFlag2Flash3Hz>
				SSDDisplayHex(0x1def, SSD_3HZ, SSD_RED);
 6b8:	40 e0       	ldi	r20, 0x00	; 0
 6ba:	63 e0       	ldi	r22, 0x03	; 3
 6bc:	8f ee       	ldi	r24, 0xEF	; 239
 6be:	9d e1       	ldi	r25, 0x1D	; 29
 6c0:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <SSDDisplayHex>
 6c4:	0f 90       	pop	r0
 6c6:	0f 90       	pop	r0
 6c8:	0f 90       	pop	r0
			}
		}
		
		if(uartRxBuffer.size - bufferIsNotFull(&uartRxBuffer) != 0)
 6ca:	c0 91 e9 00 	lds	r28, 0x00E9
 6ce:	d0 91 ea 00 	lds	r29, 0x00EA
 6d2:	87 ee       	ldi	r24, 0xE7	; 231
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 cc 00 	call	0x198	; 0x198 <bufferIsNotFull>
 6da:	c8 17       	cp	r28, r24
 6dc:	d9 07       	cpc	r29, r25
 6de:	99 f0       	breq	.+38     	; 0x706 <AppCycleUpdate+0x202>
		{
			tempChar = bufferGetFromFront(&uartRxBuffer);
 6e0:	87 ee       	ldi	r24, 0xE7	; 231
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 87 00 	call	0x10e	; 0x10e <bufferGetFromFront>
			//rprintf("char=%c\n",tempChar);
			rprintf("Type=%c\n",tempChar);
 6e8:	1f 92       	push	r1
 6ea:	8f 93       	push	r24
 6ec:	81 e8       	ldi	r24, 0x81	; 129
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	9f 93       	push	r25
 6f2:	8f 93       	push	r24
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	8f 93       	push	r24
 6f8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <rprintf1RamRom>
 6fc:	0f 90       	pop	r0
 6fe:	0f 90       	pop	r0
 700:	0f 90       	pop	r0
 702:	0f 90       	pop	r0
 704:	0f 90       	pop	r0
		}
	}
}
 706:	df 91       	pop	r29
 708:	cf 91       	pop	r28
 70a:	08 95       	ret

0000070c <ButtonInitEx>:
void ButtonInitEx(void)
{	
	/* 
	Set PC1-PC0 as input, the tow IO with external pull up 10K resistor.
	*/
	DDRC &= ((1<<DDC1) | (1<<DDC0));
 70c:	84 b3       	in	r24, 0x14	; 20
 70e:	83 70       	andi	r24, 0x03	; 3
 710:	84 bb       	out	0x14, r24	; 20
 712:	08 95       	ret

00000714 <ButtonGetIO_StateEx>:
*/
ButtonDataType ButtonGetIO_StateEx(void)
{
	ButtonDataType io_state;
	
	io_state = (~PINC) & ((1<<PINC1) | (1<<PINC0));	/* Get PC1-PC0 IO state */
 714:	83 b3       	in	r24, 0x13	; 19
 716:	80 95       	com	r24
	
	return  io_state;
}
 718:	83 70       	andi	r24, 0x03	; 3
 71a:	08 95       	ret

0000071c <ButtonJMP1ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP1) 
 71c:	80 91 2c 01 	lds	r24, 0x012C
	{
		return true;
	}
    
    return false;
}
 720:	81 70       	andi	r24, 0x01	; 1
 722:	08 95       	ret

00000724 <ButtonJMP1HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1HeldEvent(void)
{
	if (button.buttonsHeld.JMP1) 
 724:	80 91 2d 01 	lds	r24, 0x012D
	{
		return true;
	}
    
    return false;
}
 728:	81 70       	andi	r24, 0x01	; 1
 72a:	08 95       	ret

0000072c <ButtonJMP2ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP2) 
 72c:	80 91 2c 01 	lds	r24, 0x012C
	{
		return true;
	}
    
    return false;
}
 730:	86 95       	lsr	r24
 732:	81 70       	andi	r24, 0x01	; 1
 734:	08 95       	ret

00000736 <ButtonJMP2HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2HeldEvent(void)
{
	if (button.buttonsHeld.JMP2) 
 736:	80 91 2d 01 	lds	r24, 0x012D
	{
		return true;
	}
    
    return false;
}
 73a:	86 95       	lsr	r24
 73c:	81 70       	andi	r24, 0x01	; 1
 73e:	08 95       	ret

00000740 <LEDInit>:
	uint8_t i;
	
	/* 
	Set PB2-PB1 as output to drive to LEDs, default turn off all LEDs
	*/
	DDRB &= ~((1<<DDB2) | (1<<DDB1));
 740:	87 b3       	in	r24, 0x17	; 23
 742:	89 7f       	andi	r24, 0xF9	; 249
 744:	87 bb       	out	0x17, r24	; 23
	DDRB |= ((1<<DDB2) | (1<<DDB1));
 746:	87 b3       	in	r24, 0x17	; 23
 748:	86 60       	ori	r24, 0x06	; 6
 74a:	87 bb       	out	0x17, r24	; 23
	PORTB |= ((1<<DDB2) | (1<<DDB1));
 74c:	88 b3       	in	r24, 0x18	; 24
 74e:	86 60       	ori	r24, 0x06	; 6
 750:	88 bb       	out	0x18, r24	; 24
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
 752:	e0 e2       	ldi	r30, 0x20	; 32
 754:	f1 e0       	ldi	r31, 0x01	; 1
 756:	80 81       	ld	r24, Z
 758:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
 75a:	84 60       	ori	r24, 0x04	; 4
 75c:	88 60       	ori	r24, 0x08	; 8
 75e:	80 83       	st	Z, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
 760:	9c e3       	ldi	r25, 0x3C	; 60
 762:	91 83       	std	Z+1, r25	; 0x01
	DDRB |= ((1<<DDB2) | (1<<DDB1));
	PORTB |= ((1<<DDB2) | (1<<DDB1));
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
 764:	a2 e2       	ldi	r26, 0x22	; 34
 766:	b1 e0       	ldi	r27, 0x01	; 1
 768:	8c 91       	ld	r24, X
 76a:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
 76c:	84 60       	ori	r24, 0x04	; 4
 76e:	88 60       	ori	r24, 0x08	; 8
 770:	8c 93       	st	X, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
 772:	93 83       	std	Z+3, r25	; 0x03
 774:	08 95       	ret

00000776 <LEDCycleUpdate>:
*
*********************************************************************************************************
*/

void LEDCycleUpdate(void)
{
 776:	a1 e2       	ldi	r26, 0x21	; 33
 778:	b1 e0       	ldi	r27, 0x01	; 1
 77a:	40 e0       	ldi	r20, 0x00	; 0
 77c:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
 77e:	ca 01       	movw	r24, r20
 780:	88 0f       	add	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	fc 01       	movw	r30, r24
 786:	e0 5e       	subi	r30, 0xE0	; 224
 788:	fe 4f       	sbci	r31, 0xFE	; 254
 78a:	30 81       	ld	r19, Z
 78c:	37 70       	andi	r19, 0x07	; 7
		ft = LEDs[i].flashTimer;
 78e:	2c 91       	ld	r18, X
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
 790:	34 30       	cpi	r19, 0x04	; 4
 792:	19 f0       	breq	.+6      	; 0x79a <LEDCycleUpdate+0x24>
	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
		ft = LEDs[i].flashTimer;
		
		ft += rate;
 794:	23 0f       	add	r18, r19
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
 796:	2d 33       	cpi	r18, 0x3D	; 61
 798:	38 f0       	brcs	.+14     	; 0x7a8 <LEDCycleUpdate+0x32>
		{
			ft = 0;
			LEDs[i].led.state = S_OFF;
 79a:	fc 01       	movw	r30, r24
 79c:	e0 5e       	subi	r30, 0xE0	; 224
 79e:	fe 4f       	sbci	r31, 0xFE	; 254
 7a0:	20 81       	ld	r18, Z
 7a2:	28 60       	ori	r18, 0x08	; 8
 7a4:	20 83       	st	Z, r18
		ft = LEDs[i].flashTimer;
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
		{
			ft = 0;
 7a6:	20 e0       	ldi	r18, 0x00	; 0
			LEDs[i].led.state = S_OFF;
		}
		LEDs[i].flashTimer = ft;
 7a8:	2c 93       	st	X, r18
		
		if((rate == LED_0HZ) || (ft > (LED_ONE_SEC/2)))
 7aa:	33 23       	and	r19, r19
 7ac:	11 f0       	breq	.+4      	; 0x7b2 <LEDCycleUpdate+0x3c>
 7ae:	2f 31       	cpi	r18, 0x1F	; 31
 7b0:	30 f0       	brcs	.+12     	; 0x7be <LEDCycleUpdate+0x48>
		{
			LEDs[i].led.state = S_ON;
 7b2:	fc 01       	movw	r30, r24
 7b4:	e0 5e       	subi	r30, 0xE0	; 224
 7b6:	fe 4f       	sbci	r31, 0xFE	; 254
 7b8:	80 81       	ld	r24, Z
 7ba:	87 7f       	andi	r24, 0xF7	; 247
 7bc:	80 83       	st	Z, r24
 7be:	12 96       	adiw	r26, 0x02	; 2
{
	LED_RATE rate;
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
 7c0:	41 30       	cpi	r20, 0x01	; 1
 7c2:	51 05       	cpc	r21, r1
 7c4:	19 f0       	breq	.+6      	; 0x7cc <LEDCycleUpdate+0x56>
 7c6:	41 e0       	ldi	r20, 0x01	; 1
 7c8:	50 e0       	ldi	r21, 0x00	; 0
 7ca:	d9 cf       	rjmp	.-78     	; 0x77e <LEDCycleUpdate+0x8>
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */

	if(LEDs[0].led.state == S_OFF)
 7cc:	80 91 20 01 	lds	r24, 0x0120
 7d0:	83 ff       	sbrs	r24, 3
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <LEDCycleUpdate+0x62>
	{
		state |= (1<<DDB1);
 7d4:	82 e0       	ldi	r24, 0x02	; 2
 7d6:	01 c0       	rjmp	.+2      	; 0x7da <LEDCycleUpdate+0x64>
*
*********************************************************************************************************
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */
 7d8:	80 e0       	ldi	r24, 0x00	; 0
	if(LEDs[0].led.state == S_OFF)
	{
		state |= (1<<DDB1);
	}
	
	if(LEDs[1].led.state == S_OFF)
 7da:	90 91 22 01 	lds	r25, 0x0122
 7de:	93 fd       	sbrc	r25, 3
	{
		state |= (1<<DDB2);
 7e0:	84 60       	ori	r24, 0x04	; 4
	}

	PORTB &= ~((1<<DDB2) | (1<<DDB1));
 7e2:	98 b3       	in	r25, 0x18	; 24
 7e4:	99 7f       	andi	r25, 0xF9	; 249
 7e6:	98 bb       	out	0x18, r25	; 24
	PORTB |= state;
 7e8:	98 b3       	in	r25, 0x18	; 24
 7ea:	89 2b       	or	r24, r25
 7ec:	88 bb       	out	0x18, r24	; 24
 7ee:	08 95       	ret

000007f0 <LEDFlag1On>:
*
*********************************************************************************************************
*/
void LEDFlag1Set(LED_RATE rate)
{
	LEDs[0].led.LEDRate = rate;
 7f0:	e0 e2       	ldi	r30, 0x20	; 32
 7f2:	f1 e0       	ldi	r31, 0x01	; 1
 7f4:	80 81       	ld	r24, Z
 7f6:	88 7f       	andi	r24, 0xF8	; 248
 7f8:	80 83       	st	Z, r24
 7fa:	08 95       	ret

000007fc <LEDFlag1Flash1Hz>:
 7fc:	e0 e2       	ldi	r30, 0x20	; 32
 7fe:	f1 e0       	ldi	r31, 0x01	; 1
 800:	80 81       	ld	r24, Z
 802:	88 7f       	andi	r24, 0xF8	; 248
 804:	81 60       	ori	r24, 0x01	; 1
 806:	80 83       	st	Z, r24
 808:	08 95       	ret

0000080a <LEDFlag1Flash3Hz>:
 80a:	e0 e2       	ldi	r30, 0x20	; 32
 80c:	f1 e0       	ldi	r31, 0x01	; 1
 80e:	80 81       	ld	r24, Z
 810:	88 7f       	andi	r24, 0xF8	; 248
 812:	83 60       	ori	r24, 0x03	; 3
 814:	80 83       	st	Z, r24
 816:	08 95       	ret

00000818 <LEDFlag1Off>:
 818:	e0 e2       	ldi	r30, 0x20	; 32
 81a:	f1 e0       	ldi	r31, 0x01	; 1
 81c:	80 81       	ld	r24, Z
 81e:	88 7f       	andi	r24, 0xF8	; 248
 820:	84 60       	ori	r24, 0x04	; 4
 822:	80 83       	st	Z, r24
 824:	08 95       	ret

00000826 <LEDFlag2On>:
*
*********************************************************************************************************
*/
void LEDFlag2Set(LED_RATE rate)
{
	LEDs[1].led.LEDRate = rate;
 826:	e2 e2       	ldi	r30, 0x22	; 34
 828:	f1 e0       	ldi	r31, 0x01	; 1
 82a:	80 81       	ld	r24, Z
 82c:	88 7f       	andi	r24, 0xF8	; 248
 82e:	80 83       	st	Z, r24
 830:	08 95       	ret

00000832 <LEDFlag2Flash1Hz>:
 832:	e2 e2       	ldi	r30, 0x22	; 34
 834:	f1 e0       	ldi	r31, 0x01	; 1
 836:	80 81       	ld	r24, Z
 838:	88 7f       	andi	r24, 0xF8	; 248
 83a:	81 60       	ori	r24, 0x01	; 1
 83c:	80 83       	st	Z, r24
 83e:	08 95       	ret

00000840 <LEDFlag2Flash3Hz>:
 840:	e2 e2       	ldi	r30, 0x22	; 34
 842:	f1 e0       	ldi	r31, 0x01	; 1
 844:	80 81       	ld	r24, Z
 846:	88 7f       	andi	r24, 0xF8	; 248
 848:	83 60       	ori	r24, 0x03	; 3
 84a:	80 83       	st	Z, r24
 84c:	08 95       	ret

0000084e <LEDFlag2Off>:
 84e:	e2 e2       	ldi	r30, 0x22	; 34
 850:	f1 e0       	ldi	r31, 0x01	; 1
 852:	80 81       	ld	r24, Z
 854:	88 7f       	andi	r24, 0xF8	; 248
 856:	84 60       	ori	r24, 0x04	; 4
 858:	80 83       	st	Z, r24
 85a:	08 95       	ret

0000085c <main>:
int main(void)
{	
	/*
	Calll all initial function
	*/
	McuInit();
 85c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <McuInit>
	ApplInit();
 860:	0e 94 69 02 	call	0x4d2	; 0x4d2 <ApplInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	90 ef       	ldi	r25, 0xF0	; 240
 868:	01 97       	sbiw	r24, 0x01	; 1
 86a:	f1 f7       	brne	.-4      	; 0x868 <main+0xc>
	
	while(1)
	{
		_delay_us(16667);
		//_delay_ms(20);
		ButtonCycleUpdate();
 86c:	0e 94 37 05 	call	0xa6e	; 0xa6e <ButtonCycleUpdate>
		AppCycleUpdate();
 870:	0e 94 82 02 	call	0x504	; 0x504 <AppCycleUpdate>
		LEDCycleUpdate();
 874:	0e 94 bb 03 	call	0x776	; 0x776 <LEDCycleUpdate>
		SSDCycleUpdate();
 878:	0e 94 3f 04 	call	0x87e	; 0x87e <SSDCycleUpdate>
	}
 87c:	f3 cf       	rjmp	.-26     	; 0x864 <main+0x8>

0000087e <SSDCycleUpdate>:
*
*********************************************************************************************************
*/

void SSDCycleUpdate(void)
{
 87e:	0f 93       	push	r16
 880:	1f 93       	push	r17
*/
void SSDShitfOutData(void)
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
 882:	40 91 26 01 	lds	r20, 0x0126
 886:	50 91 27 01 	lds	r21, 0x0127
 88a:	60 91 28 01 	lds	r22, 0x0128
 88e:	70 91 29 01 	lds	r23, 0x0129
 892:	80 e2       	ldi	r24, 0x20	; 32
	
	for(i = 0; i < 32; i++)
	{
		bitVal = 0;
		if(DispValTemp & 0x80000000)
 894:	8a 01       	movw	r16, r20
 896:	9b 01       	movw	r18, r22
		{
			bitVal = 1;
		}
		DispValTemp <<= 1;
 898:	44 0f       	add	r20, r20
 89a:	55 1f       	adc	r21, r21
 89c:	66 1f       	adc	r22, r22
 89e:	77 1f       	adc	r23, r23

		SSD_CLK_CLR();
 8a0:	af 98       	cbi	0x15, 7	; 21
		SSD_DAT_CLR();
 8a2:	ae 98       	cbi	0x15, 6	; 21
		if(bitVal)
 8a4:	37 fd       	sbrc	r19, 7
		{
			SSD_DAT_SET();
 8a6:	ae 9a       	sbi	0x15, 6	; 21
		}
		SSD_CLK_SET();
 8a8:	af 9a       	sbi	0x15, 7	; 21
 8aa:	81 50       	subi	r24, 0x01	; 1
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
	
	for(i = 0; i < 32; i++)
 8ac:	99 f7       	brne	.-26     	; 0x894 <SSDCycleUpdate+0x16>
void SSDUpdateOnOff(void)
{
	SSD_RATE rate;
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
 8ae:	90 91 24 01 	lds	r25, 0x0124
 8b2:	97 70       	andi	r25, 0x07	; 7
	ft = SSD.flashTimer;
 8b4:	80 91 25 01 	lds	r24, 0x0125
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
 8b8:	94 30       	cpi	r25, 0x04	; 4
 8ba:	19 f0       	breq	.+6      	; 0x8c2 <SSDCycleUpdate+0x44>
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
	ft = SSD.flashTimer;
	
	ft += rate;
 8bc:	89 0f       	add	r24, r25
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
 8be:	8d 33       	cpi	r24, 0x3D	; 61
 8c0:	30 f0       	brcs	.+12     	; 0x8ce <SSDCycleUpdate+0x50>
	{
		ft = 0;
		SSD.ssd.state = SSD_OFF;
 8c2:	80 91 24 01 	lds	r24, 0x0124
 8c6:	8f 7d       	andi	r24, 0xDF	; 223
 8c8:	80 93 24 01 	sts	0x0124, r24
	ft = SSD.flashTimer;
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
	{
		ft = 0;
 8cc:	80 e0       	ldi	r24, 0x00	; 0
		SSD.ssd.state = SSD_OFF;
	}
	SSD.flashTimer = ft;
 8ce:	80 93 25 01 	sts	0x0125, r24
	
	if((rate == SSD_0HZ) || (ft > (SSD_ONE_SEC/2)))
 8d2:	99 23       	and	r25, r25
 8d4:	11 f0       	breq	.+4      	; 0x8da <SSDCycleUpdate+0x5c>
 8d6:	8f 31       	cpi	r24, 0x1F	; 31
 8d8:	28 f0       	brcs	.+10     	; 0x8e4 <SSDCycleUpdate+0x66>
	{
		SSD.ssd.state = SSD_ON;
 8da:	80 91 24 01 	lds	r24, 0x0124
 8de:	80 62       	ori	r24, 0x20	; 32
 8e0:	80 93 24 01 	sts	0x0124, r24
*
*********************************************************************************************************
*/
void SSDUpdateComPin(void)
{
	if(SSD.ssd.state == SSD_OFF)		/* if ssd is in off state, cut power to green and color */
 8e4:	80 91 24 01 	lds	r24, 0x0124
 8e8:	85 fd       	sbrc	r24, 5
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <SSDCycleUpdate+0x72>
	{
		SSD_RED_CLR();
 8ec:	ac 98       	cbi	0x15, 4	; 21
 8ee:	03 c0       	rjmp	.+6      	; 0x8f6 <SSDCycleUpdate+0x78>
		SSD_GRN_CLR();
	}
	else
	{
		if(SSD.ssd.color == SSD_RED)		/* dispay red color */
 8f0:	88 71       	andi	r24, 0x18	; 24
 8f2:	19 f4       	brne	.+6      	; 0x8fa <SSDCycleUpdate+0x7c>
		{
			SSD_RED_SET();	/* give power to red ssd common pin */
 8f4:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_CLR();	/* cut power to green ssd common pin */
 8f6:	ad 98       	cbi	0x15, 5	; 21
 8f8:	06 c0       	rjmp	.+12     	; 0x906 <SSDCycleUpdate+0x88>
		}
		else if(SSD.ssd.color == SSD_GREEN) /* dispay green color */
 8fa:	88 30       	cpi	r24, 0x08	; 8
 8fc:	11 f4       	brne	.+4      	; 0x902 <SSDCycleUpdate+0x84>
		{
			SSD_RED_CLR();
 8fe:	ac 98       	cbi	0x15, 4	; 21
 900:	01 c0       	rjmp	.+2      	; 0x904 <SSDCycleUpdate+0x86>
			SSD_GRN_SET();
		}
		else								/* dispay amber color */
		{
			SSD_RED_SET();
 902:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_SET();
 904:	ad 9a       	sbi	0x15, 5	; 21
void SSDCycleUpdate(void)
{
	SSDShitfOutData();
	SSDUpdateOnOff();
	SSDUpdateComPin();
}
 906:	1f 91       	pop	r17
 908:	0f 91       	pop	r16
 90a:	08 95       	ret

0000090c <SSDDisplayDec>:
* Notes      :none
*
*********************************************************************************************************
*/
void SSDDisplayDec(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
 90c:	0f 93       	push	r16
 90e:	1f 93       	push	r17
 910:	cf 93       	push	r28
 912:	df 93       	push	r29
 914:	8c 01       	movw	r16, r24
 916:	36 2f       	mov	r19, r22
uint32_t SSDHex2Dec(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = hexValue/1000;
 918:	68 ee       	ldi	r22, 0xE8	; 232
 91a:	73 e0       	ldi	r23, 0x03	; 3
 91c:	0e 94 84 05 	call	0xb08	; 0xb08 <__udivmodhi4>
 920:	c6 2f       	mov	r28, r22
	dataSTR.hundred   = hexValue%1000/100;
 922:	64 e6       	ldi	r22, 0x64	; 100
 924:	70 e0       	ldi	r23, 0x00	; 0
 926:	0e 94 84 05 	call	0xb08	; 0xb08 <__udivmodhi4>
 92a:	d6 2f       	mov	r29, r22
	dataSTR.tens      = hexValue%1000%100/10;
 92c:	6a e0       	ldi	r22, 0x0A	; 10
 92e:	70 e0       	ldi	r23, 0x00	; 0
 930:	0e 94 84 05 	call	0xb08	; 0xb08 <__udivmodhi4>
 934:	56 2f       	mov	r21, r22
{
	SSD_DISP_T ValueCopy;
	
	SSD.DispVal.value = SSDHex2Dec(DispData);
	ValueCopy.value = SSD.DispVal.value;
	SSD.ssd.rate = rate;
 936:	37 70       	andi	r19, 0x07	; 7
 938:	60 91 24 01 	lds	r22, 0x0124
 93c:	60 7e       	andi	r22, 0xE0	; 224
	SSD.ssd.color = color;
 93e:	43 70       	andi	r20, 0x03	; 3
 940:	94 2f       	mov	r25, r20
 942:	99 0f       	add	r25, r25
 944:	99 0f       	add	r25, r25
 946:	99 0f       	add	r25, r25
 948:	46 2f       	mov	r20, r22
 94a:	43 2b       	or	r20, r19
 94c:	49 2b       	or	r20, r25
 94e:	40 93 24 01 	sts	0x0124, r20
	
	/* Set display null for all 4 seven segment displays */
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
 952:	e8 ec       	ldi	r30, 0xC8	; 200
 954:	f0 e0       	ldi	r31, 0x00	; 0
 956:	94 91       	lpm	r25, Z
 958:	90 93 29 01 	sts	0x0129, r25
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
 95c:	94 91       	lpm	r25, Z
 95e:	90 93 28 01 	sts	0x0128, r25
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
 962:	94 91       	lpm	r25, Z
 964:	90 93 27 01 	sts	0x0127, r25
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
 968:	e4 91       	lpm	r30, Z
 96a:	28 2f       	mov	r18, r24
 96c:	30 e0       	ldi	r19, 0x00	; 0

	/* Set display remove zero before number */
	if(DispData > 1000)
 96e:	09 3e       	cpi	r16, 0xE9	; 233
 970:	83 e0       	ldi	r24, 0x03	; 3
 972:	18 07       	cpc	r17, r24
 974:	78 f0       	brcs	.+30     	; 0x994 <SSDDisplayDec+0x88>
	{
		SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[ValueCopy.thousands]);
 976:	ec 2f       	mov	r30, r28
 978:	f0 e0       	ldi	r31, 0x00	; 0
 97a:	e8 54       	subi	r30, 0x48	; 72
 97c:	ff 4f       	sbci	r31, 0xFF	; 255
 97e:	84 91       	lpm	r24, Z
 980:	80 93 29 01 	sts	0x0129, r24
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
 984:	ed 2f       	mov	r30, r29
 986:	f0 e0       	ldi	r31, 0x00	; 0
 988:	e8 54       	subi	r30, 0x48	; 72
 98a:	ff 4f       	sbci	r31, 0xFF	; 255
 98c:	e4 91       	lpm	r30, Z
 98e:	e0 93 28 01 	sts	0x0128, r30
 992:	0e c0       	rjmp	.+28     	; 0x9b0 <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 100)
 994:	05 36       	cpi	r16, 0x65	; 101
 996:	11 05       	cpc	r17, r1
 998:	40 f0       	brcs	.+16     	; 0x9aa <SSDDisplayDec+0x9e>
	{
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
 99a:	ed 2f       	mov	r30, r29
 99c:	f0 e0       	ldi	r31, 0x00	; 0
 99e:	e8 54       	subi	r30, 0x48	; 72
 9a0:	ff 4f       	sbci	r31, 0xFF	; 255
 9a2:	84 91       	lpm	r24, Z
 9a4:	80 93 28 01 	sts	0x0128, r24
 9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 10)
 9aa:	0b 30       	cpi	r16, 0x0B	; 11
 9ac:	11 05       	cpc	r17, r1
 9ae:	38 f0       	brcs	.+14     	; 0x9be <SSDDisplayDec+0xb2>
	{
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
 9b0:	e5 2f       	mov	r30, r21
 9b2:	f0 e0       	ldi	r31, 0x00	; 0
 9b4:	e8 54       	subi	r30, 0x48	; 72
 9b6:	ff 4f       	sbci	r31, 0xFF	; 255
 9b8:	e4 91       	lpm	r30, Z
 9ba:	e0 93 27 01 	sts	0x0127, r30
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else
	{
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
 9be:	f9 01       	movw	r30, r18
 9c0:	e8 54       	subi	r30, 0x48	; 72
 9c2:	ff 4f       	sbci	r31, 0xFF	; 255
 9c4:	e4 91       	lpm	r30, Z
 9c6:	e0 93 26 01 	sts	0x0126, r30
	}
}
 9ca:	df 91       	pop	r29
 9cc:	cf 91       	pop	r28
 9ce:	1f 91       	pop	r17
 9d0:	0f 91       	pop	r16
 9d2:	08 95       	ret

000009d4 <SSDDisplayHex>:
uint32_t SSDHex2Hex(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = (hexValue >> 12) & 0x000f;
 9d4:	39 2f       	mov	r19, r25
 9d6:	32 95       	swap	r19
 9d8:	3f 70       	andi	r19, 0x0F	; 15
	dataSTR.hundred   = (hexValue >> 8) & 0x000f;
 9da:	29 2f       	mov	r18, r25
 9dc:	2f 70       	andi	r18, 0x0F	; 15
	dataSTR.tens      = (hexValue >> 4) & 0x000f;
 9de:	fc 01       	movw	r30, r24
 9e0:	94 e0       	ldi	r25, 0x04	; 4
 9e2:	f6 95       	lsr	r31
 9e4:	e7 95       	ror	r30
 9e6:	9a 95       	dec	r25
 9e8:	e1 f7       	brne	.-8      	; 0x9e2 <SSDDisplayHex+0xe>
 9ea:	9e 2f       	mov	r25, r30
 9ec:	9f 70       	andi	r25, 0x0F	; 15
	dataSTR.units     = (hexValue >> 0) & 0x000f;
 9ee:	8f 70       	andi	r24, 0x0F	; 15
*
*********************************************************************************************************
*/
void SSDDisplayHex(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
	SSD.DispVal.value = SSDHex2Hex(DispData);
 9f0:	a4 e2       	ldi	r26, 0x24	; 36
 9f2:	b1 e0       	ldi	r27, 0x01	; 1
	SSD.ssd.rate = rate;
 9f4:	67 70       	andi	r22, 0x07	; 7
 9f6:	7c 91       	ld	r23, X
 9f8:	70 7e       	andi	r23, 0xE0	; 224
	SSD.ssd.color = color;
 9fa:	43 70       	andi	r20, 0x03	; 3
 9fc:	54 2f       	mov	r21, r20
 9fe:	55 0f       	add	r21, r21
 a00:	55 0f       	add	r21, r21
 a02:	55 0f       	add	r21, r21
 a04:	47 2f       	mov	r20, r23
 a06:	46 2b       	or	r20, r22
 a08:	45 2b       	or	r20, r21
 a0a:	4c 93       	st	X, r20
	
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD.DispVal.thousands]);
 a0c:	e3 2f       	mov	r30, r19
 a0e:	f0 e0       	ldi	r31, 0x00	; 0
 a10:	e8 54       	subi	r30, 0x48	; 72
 a12:	ff 4f       	sbci	r31, 0xFF	; 255
 a14:	34 91       	lpm	r19, Z
 a16:	15 96       	adiw	r26, 0x05	; 5
 a18:	3c 93       	st	X, r19
 a1a:	15 97       	sbiw	r26, 0x05	; 5
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD.DispVal.hundred]);
 a1c:	e2 2f       	mov	r30, r18
 a1e:	f0 e0       	ldi	r31, 0x00	; 0
 a20:	e8 54       	subi	r30, 0x48	; 72
 a22:	ff 4f       	sbci	r31, 0xFF	; 255
 a24:	24 91       	lpm	r18, Z
 a26:	14 96       	adiw	r26, 0x04	; 4
 a28:	2c 93       	st	X, r18
 a2a:	14 97       	sbiw	r26, 0x04	; 4
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD.DispVal.tens]);
 a2c:	e9 2f       	mov	r30, r25
 a2e:	f0 e0       	ldi	r31, 0x00	; 0
 a30:	e8 54       	subi	r30, 0x48	; 72
 a32:	ff 4f       	sbci	r31, 0xFF	; 255
 a34:	e4 91       	lpm	r30, Z
 a36:	13 96       	adiw	r26, 0x03	; 3
 a38:	ec 93       	st	X, r30
 a3a:	13 97       	sbiw	r26, 0x03	; 3
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD.DispVal.units]);
 a3c:	e8 2f       	mov	r30, r24
 a3e:	f0 e0       	ldi	r31, 0x00	; 0
 a40:	e8 54       	subi	r30, 0x48	; 72
 a42:	ff 4f       	sbci	r31, 0xFF	; 255
 a44:	e4 91       	lpm	r30, Z
 a46:	12 96       	adiw	r26, 0x02	; 2
 a48:	ec 93       	st	X, r30
 a4a:	08 95       	ret

00000a4c <SSDInit>:
void SSDInit(void)
{	
	/* 
	Set PB7-PB4 as output to drive seven segment display, default display turn off
	*/
	DDRC &= ~((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
 a4c:	84 b3       	in	r24, 0x14	; 20
 a4e:	8f 70       	andi	r24, 0x0F	; 15
 a50:	84 bb       	out	0x14, r24	; 20
	DDRC |= ((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
 a52:	84 b3       	in	r24, 0x14	; 20
 a54:	80 6f       	ori	r24, 0xF0	; 240
 a56:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~((1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4));
 a58:	85 b3       	in	r24, 0x15	; 21
 a5a:	8f 70       	andi	r24, 0x0F	; 15
 a5c:	85 bb       	out	0x15, r24	; 21

	SSDDisplayHex(0, SSD_R_OFF, SSD_RED);	/* Initial turn off all SSDs */
 a5e:	40 e0       	ldi	r20, 0x00	; 0
 a60:	64 e0       	ldi	r22, 0x04	; 4
 a62:	80 e0       	ldi	r24, 0x00	; 0
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <SSDDisplayHex>

00000a6a <ButtonInit>:
* Returns    : none
*********************************************************************************************************
*/
void ButtonInit(void)
{
	ButtonInitEx();
 a6a:	0c 94 86 03 	jmp	0x70c	; 0x70c <ButtonInitEx>

00000a6e <ButtonCycleUpdate>:
* Notes      : None
*
*/
ButtonDataType ButtonGetIO_State(void)
{
	return  ButtonGetIO_StateEx();
 a6e:	0e 94 8a 03 	call	0x714	; 0x714 <ButtonGetIO_StateEx>
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
 a72:	90 91 2a 01 	lds	r25, 0x012A
 a76:	89 2b       	or	r24, r25
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
 a78:	10 92 2a 01 	sts	0x012A, r1
	b = button.buttonsLastCycle.bVal;
 a7c:	90 91 2b 01 	lds	r25, 0x012B
	holdTime = button.buttonHoldTime;
 a80:	20 91 30 01 	lds	r18, 0x0130
 a84:	30 91 31 01 	lds	r19, 0x0131
	
	if (button.buttonsReleased.bVal != 0) {		
 a88:	40 91 2c 01 	lds	r20, 0x012C
 a8c:	44 23       	and	r20, r20
 a8e:	19 f0       	breq	.+6      	; 0xa96 <ButtonCycleUpdate+0x28>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
 a90:	40 93 2e 01 	sts	0x012E, r20
 a94:	05 c0       	rjmp	.+10     	; 0xaa0 <ButtonCycleUpdate+0x32>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
 a96:	2d 33       	cpi	r18, 0x3D	; 61
 a98:	31 05       	cpc	r19, r1
 a9a:	10 f0       	brcs	.+4      	; 0xaa0 <ButtonCycleUpdate+0x32>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
 a9c:	10 92 2e 01 	sts	0x012E, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
 aa0:	10 92 2c 01 	sts	0x012C, r1
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
 aa4:	10 92 2f 01 	sts	0x012F, r1
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
 aa8:	89 13       	cpse	r24, r25
 aaa:	0f c0       	rjmp	.+30     	; 0xaca <ButtonCycleUpdate+0x5c>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
 aac:	2f 5f       	subi	r18, 0xFF	; 255
 aae:	3f 4f       	sbci	r19, 0xFF	; 255
 ab0:	24 32       	cpi	r18, 0x24	; 36
 ab2:	31 05       	cpc	r19, r1
 ab4:	18 f4       	brcc	.+6      	; 0xabc <ButtonCycleUpdate+0x4e>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
 ab6:	10 92 2d 01 	sts	0x012D, r1
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <ButtonCycleUpdate+0x52>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
 abc:	80 93 2d 01 	sts	0x012D, r24
		}	
		button.buttonHoldTime = holdTime;
 ac0:	30 93 31 01 	sts	0x0131, r19
 ac4:	20 93 30 01 	sts	0x0130, r18
 ac8:	08 95       	ret
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
 aca:	80 93 2b 01 	sts	0x012B, r24
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
 ace:	80 95       	com	r24
 ad0:	89 23       	and	r24, r25
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
 ad2:	90 91 2d 01 	lds	r25, 0x012D
 ad6:	98 23       	and	r25, r24
 ad8:	81 f4       	brne	.+32     	; 0xafa <ButtonCycleUpdate+0x8c>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
 ada:	10 92 31 01 	sts	0x0131, r1
 ade:	10 92 30 01 	sts	0x0130, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
 ae2:	23 50       	subi	r18, 0x03	; 3
 ae4:	31 09       	sbc	r19, r1
 ae6:	20 32       	cpi	r18, 0x20	; 32
 ae8:	31 05       	cpc	r19, r1
 aea:	38 f4       	brcc	.+14     	; 0xafa <ButtonCycleUpdate+0x8c>
				button.buttonsReleased.bVal = buttons;	
 aec:	80 93 2c 01 	sts	0x012C, r24
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
 af0:	90 91 2e 01 	lds	r25, 0x012E
 af4:	89 23       	and	r24, r25
 af6:	80 93 2f 01 	sts	0x012F, r24
 afa:	08 95       	ret

00000afc <ButtonGetReleased>:
*/

ButtonDataType ButtonGetReleased(void)
{
	return button.buttonsReleased.bVal;
}
 afc:	80 91 2c 01 	lds	r24, 0x012C
 b00:	08 95       	ret

00000b02 <ButtonGetHeld>:
*/

ButtonDataType ButtonGetHeld (void)
{
	return button.buttonsHeld.bVal;
}
 b02:	80 91 2d 01 	lds	r24, 0x012D
 b06:	08 95       	ret

00000b08 <__udivmodhi4>:
 b08:	aa 1b       	sub	r26, r26
 b0a:	bb 1b       	sub	r27, r27
 b0c:	51 e1       	ldi	r21, 0x11	; 17
 b0e:	07 c0       	rjmp	.+14     	; 0xb1e <__udivmodhi4_ep>

00000b10 <__udivmodhi4_loop>:
 b10:	aa 1f       	adc	r26, r26
 b12:	bb 1f       	adc	r27, r27
 b14:	a6 17       	cp	r26, r22
 b16:	b7 07       	cpc	r27, r23
 b18:	10 f0       	brcs	.+4      	; 0xb1e <__udivmodhi4_ep>
 b1a:	a6 1b       	sub	r26, r22
 b1c:	b7 0b       	sbc	r27, r23

00000b1e <__udivmodhi4_ep>:
 b1e:	88 1f       	adc	r24, r24
 b20:	99 1f       	adc	r25, r25
 b22:	5a 95       	dec	r21
 b24:	a9 f7       	brne	.-22     	; 0xb10 <__udivmodhi4_loop>
 b26:	80 95       	com	r24
 b28:	90 95       	com	r25
 b2a:	bc 01       	movw	r22, r24
 b2c:	cd 01       	movw	r24, r26
 b2e:	08 95       	ret

00000b30 <__udivmodsi4>:
 b30:	a1 e2       	ldi	r26, 0x21	; 33
 b32:	1a 2e       	mov	r1, r26
 b34:	aa 1b       	sub	r26, r26
 b36:	bb 1b       	sub	r27, r27
 b38:	fd 01       	movw	r30, r26
 b3a:	0d c0       	rjmp	.+26     	; 0xb56 <__udivmodsi4_ep>

00000b3c <__udivmodsi4_loop>:
 b3c:	aa 1f       	adc	r26, r26
 b3e:	bb 1f       	adc	r27, r27
 b40:	ee 1f       	adc	r30, r30
 b42:	ff 1f       	adc	r31, r31
 b44:	a2 17       	cp	r26, r18
 b46:	b3 07       	cpc	r27, r19
 b48:	e4 07       	cpc	r30, r20
 b4a:	f5 07       	cpc	r31, r21
 b4c:	20 f0       	brcs	.+8      	; 0xb56 <__udivmodsi4_ep>
 b4e:	a2 1b       	sub	r26, r18
 b50:	b3 0b       	sbc	r27, r19
 b52:	e4 0b       	sbc	r30, r20
 b54:	f5 0b       	sbc	r31, r21

00000b56 <__udivmodsi4_ep>:
 b56:	66 1f       	adc	r22, r22
 b58:	77 1f       	adc	r23, r23
 b5a:	88 1f       	adc	r24, r24
 b5c:	99 1f       	adc	r25, r25
 b5e:	1a 94       	dec	r1
 b60:	69 f7       	brne	.-38     	; 0xb3c <__udivmodsi4_loop>
 b62:	60 95       	com	r22
 b64:	70 95       	com	r23
 b66:	80 95       	com	r24
 b68:	90 95       	com	r25
 b6a:	9b 01       	movw	r18, r22
 b6c:	ac 01       	movw	r20, r24
 b6e:	bd 01       	movw	r22, r26
 b70:	cf 01       	movw	r24, r30
 b72:	08 95       	ret

00000b74 <_exit>:
 b74:	f8 94       	cli

00000b76 <__stop_program>:
 b76:	ff cf       	rjmp	.-2      	; 0xb76 <__stop_program>
