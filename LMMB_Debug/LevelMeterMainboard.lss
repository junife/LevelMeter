
LevelMeterMainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000138e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f3  00800060  00800060  00001402  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000448  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003126  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001200  00000000  00000000  000049de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000125a  00000000  00000000  00005bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c88  00000000  00000000  00006e38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010f3  00000000  00000000  00007ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002295  00000000  00000000  00008bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  0000ae48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
       4:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
       8:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
       c:	0c 94 97 04 	jmp	0x92e	; 0x92e <__vector_3>
      10:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_4>
      14:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__vector_5>
      18:	0c 94 10 04 	jmp	0x820	; 0x820 <__vector_6>
      1c:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__vector_7>
      20:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__vector_8>
      24:	0c 94 23 03 	jmp	0x646	; 0x646 <__vector_9>
      28:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      2c:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__vector_11>
      30:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      34:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__vector_13>
      38:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      3c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      40:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      44:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      48:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      4c:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__vector_19>
      50:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      54:	97 05       	cpc	r25, r7
      56:	9a 05       	cpc	r25, r10
      58:	9d 05       	cpc	r25, r13
      5a:	a0 05       	cpc	r26, r0
      5c:	a3 05       	cpc	r26, r3
      5e:	a6 05       	cpc	r26, r6
      60:	a9 05       	cpc	r26, r9
      62:	ac 05       	cpc	r26, r12

00000064 <__trampolines_end>:
      64:	30 31       	cpi	r19, 0x10	; 16
      66:	32 33       	cpi	r19, 0x32	; 50
      68:	34 35       	cpi	r19, 0x54	; 84
      6a:	36 37       	cpi	r19, 0x76	; 118
      6c:	38 39       	cpi	r19, 0x98	; 152
      6e:	41 42       	sbci	r20, 0x21	; 33
      70:	43 44       	sbci	r20, 0x43	; 67
      72:	45 46       	sbci	r20, 0x65	; 101
	...

00000075 <TimerPrescaleFactor>:
      75:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

00000081 <__c.2232>:
      81:	54 75 72 6e 69 6e 67 20 6f 6e 20 63 68 61 6e 6e     Turning on chann
      91:	65 6c 20 42 20 74 6f 6f 2c 20 77 69 74 68 20 37     el B too, with 7
      a1:	35 25 25 20 64 75 74 79 0d 0a 00                    5%% duty...

000000ac <__c.2230>:
      ac:	53 65 74 74 69 6e 67 20 64 75 74 79 20 63 79 63     Setting duty cyc
      bc:	6c 65 20 74 6f 20 32 35 25 25 0d 0a 00              le to 25%%...

000000c9 <__c.2228>:
      c9:	54 75 72 6e 69 6e 67 20 6f 6e 20 74 69 6d 65 72     Turning on timer
      d9:	31 20 63 68 61 6e 6e 65 6c 20 41 20 50 57 4d 20     1 channel A PWM 
      e9:	6f 75 74 70 75 74 0d 0a 00                          output...

000000f2 <__c.2226>:
      f2:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 74 69 6d     Initializing tim
     102:	65 72 31 20 66 6f 72 20 50 57 4d 0d 0a 00           er1 for PWM...

00000110 <__c.2224>:
     110:	0d 0a 54 65 73 74 20 6f 66 20 74 69 6d 65 72 31     ..Test of timer1
     120:	20 50 57 4d 20 6f 75 74 70 75 74 0d 0a 00            PWM output...

0000012e <__c.2222>:
     12e:	44 6f 6e 65 21 0d 0a 00                             Done!...

00000136 <__c.2220>:
     136:	48 65 72 65 20 63 6f 6d 65 73 20 61 20 31 2f 32     Here comes a 1/2
     146:	2d 73 65 63 6f 6e 64 20 64 65 6c 61 79 2e 2e 2e     -second delay...
     156:	0d 0a 00                                            ...

00000159 <__c.2218>:
     159:	0d 0a 54 65 73 74 20 6f 66 20 74 69 6d 65 72 50     ..Test of timerP
     169:	61 75 73 65 28 29 20 66 75 6e 63 74 69 6f 6e 0d     ause() function.
     179:	0a 00                                               ..

0000017b <__c.2216>:
     17b:	0d 0a 0a 0a 57 65 6c 63 6f 6d 65 20 74 6f 20 74     ....Welcome to t
     18b:	68 65 20 74 69 6d 65 72 20 6c 69 62 72 61 72 79     he timer library
     19b:	20 74 65 73 74 20 70 72 6f 67 72 61 6d 21 0d 0a      test program!..
	...

000001ac <__c.2185>:
     1ac:	6c 45 3d 25 64 0a 0a 00                             lE=%d...

000001b4 <__c.2183>:
     1b4:	64 43 3d 25 64 0a 0a 00                             dC=%d...

000001bc <__c.2181>:
     1bc:	6d 54 3d 25 64 2c 30 78 25 78 0a 00                 mT=%d,0x%x..

000001c8 <__c.2179>:
     1c8:	77 4d 3d 25 64 0a 00                                wM=%d..

000001cf <__c.2164>:
     1cf:	4d 61 69 6e 20 62 6f 61 72 64 20 68 65 72 65 21     Main board here!
     1df:	0a 00                                               ..

000001e1 <ssdCharTble>:
     1e1:	c0 f9 a4 b0 99 92 82 f8 80 90 88 83 c6 a1 86 8e     ................
     1f1:	ff fe f7                                            ...

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf e5       	ldi	r28, 0x5F	; 95
     1fa:	d4 e0       	ldi	r29, 0x04	; 4
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	cd bf       	out	0x3d, r28	; 61

00000200 <__do_clear_bss>:
     200:	21 e0       	ldi	r18, 0x01	; 1
     202:	a0 e6       	ldi	r26, 0x60	; 96
     204:	b0 e0       	ldi	r27, 0x00	; 0
     206:	01 c0       	rjmp	.+2      	; 0x20a <.do_clear_bss_start>

00000208 <.do_clear_bss_loop>:
     208:	1d 92       	st	X+, r1

0000020a <.do_clear_bss_start>:
     20a:	a3 35       	cpi	r26, 0x53	; 83
     20c:	b2 07       	cpc	r27, r18
     20e:	e1 f7       	brne	.-8      	; 0x208 <.do_clear_bss_loop>
     210:	0e 94 04 08 	call	0x1008	; 0x1008 <main>
     214:	0c 94 c5 09 	jmp	0x138a	; 0x138a <_exit>

00000218 <__bad_interrupt>:
     218:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021c <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
     21c:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     21e:	8f b7       	in	r24, 0x3f	; 63
     220:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
     222:	71 83       	std	Z+1, r23	; 0x01
     224:	60 83       	st	Z, r22
	buffer->size = size;
     226:	53 83       	std	Z+3, r21	; 0x03
     228:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
     22a:	17 82       	std	Z+7, r1	; 0x07
     22c:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
     22e:	15 82       	std	Z+5, r1	; 0x05
     230:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
     232:	8f bf       	out	0x3f, r24	; 63
     234:	08 95       	ret

00000236 <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
     236:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
     238:	9f b7       	in	r25, 0x3f	; 63
     23a:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
     23c:	44 81       	ldd	r20, Z+4	; 0x04
     23e:	55 81       	ldd	r21, Z+5	; 0x05
     240:	41 15       	cp	r20, r1
     242:	51 05       	cpc	r21, r1
     244:	c9 f0       	breq	.+50     	; 0x278 <bufferGetFromFront+0x42>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
     246:	26 81       	ldd	r18, Z+6	; 0x06
     248:	37 81       	ldd	r19, Z+7	; 0x07
     24a:	a0 81       	ld	r26, Z
     24c:	b1 81       	ldd	r27, Z+1	; 0x01
     24e:	a2 0f       	add	r26, r18
     250:	b3 1f       	adc	r27, r19
     252:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
     254:	2f 5f       	subi	r18, 0xFF	; 255
     256:	3f 4f       	sbci	r19, 0xFF	; 255
     258:	37 83       	std	Z+7, r19	; 0x07
     25a:	26 83       	std	Z+6, r18	; 0x06
		if(buffer->dataindex >= buffer->size)
     25c:	62 81       	ldd	r22, Z+2	; 0x02
     25e:	73 81       	ldd	r23, Z+3	; 0x03
     260:	26 17       	cp	r18, r22
     262:	37 07       	cpc	r19, r23
     264:	20 f0       	brcs	.+8      	; 0x26e <bufferGetFromFront+0x38>
		{
			buffer->dataindex -= buffer->size;
     266:	26 1b       	sub	r18, r22
     268:	37 0b       	sbc	r19, r23
     26a:	37 83       	std	Z+7, r19	; 0x07
     26c:	26 83       	std	Z+6, r18	; 0x06
		}
		buffer->datalength--;
     26e:	41 50       	subi	r20, 0x01	; 1
     270:	51 09       	sbc	r21, r1
     272:	55 83       	std	Z+5, r21	; 0x05
     274:	44 83       	std	Z+4, r20	; 0x04
     276:	01 c0       	rjmp	.+2      	; 0x27a <bufferGetFromFront+0x44>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
     278:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
     27a:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
     27c:	08 95       	ret

0000027e <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     27e:	fc 01       	movw	r30, r24
     280:	36 2f       	mov	r19, r22
	// begin critical section
	CRITICAL_SECTION_START;
     282:	2f b7       	in	r18, 0x3f	; 63
     284:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     286:	a4 81       	ldd	r26, Z+4	; 0x04
     288:	b5 81       	ldd	r27, Z+5	; 0x05
     28a:	62 81       	ldd	r22, Z+2	; 0x02
     28c:	73 81       	ldd	r23, Z+3	; 0x03
     28e:	a6 17       	cp	r26, r22
     290:	b7 07       	cpc	r27, r23
     292:	98 f4       	brcc	.+38     	; 0x2ba <bufferAddToEnd+0x3c>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     294:	86 81       	ldd	r24, Z+6	; 0x06
     296:	97 81       	ldd	r25, Z+7	; 0x07
     298:	8a 0f       	add	r24, r26
     29a:	9b 1f       	adc	r25, r27
     29c:	0e 94 6f 09 	call	0x12de	; 0x12de <__udivmodhi4>
     2a0:	a0 81       	ld	r26, Z
     2a2:	b1 81       	ldd	r27, Z+1	; 0x01
     2a4:	a8 0f       	add	r26, r24
     2a6:	b9 1f       	adc	r27, r25
     2a8:	3c 93       	st	X, r19
		// increment the length
		buffer->datalength++;
     2aa:	84 81       	ldd	r24, Z+4	; 0x04
     2ac:	95 81       	ldd	r25, Z+5	; 0x05
     2ae:	01 96       	adiw	r24, 0x01	; 1
     2b0:	95 83       	std	Z+5, r25	; 0x05
     2b2:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     2b4:	2f bf       	out	0x3f, r18	; 63
		// return success
		return -1;
     2b6:	8f ef       	ldi	r24, 0xFF	; 255
     2b8:	08 95       	ret
	}
	// end critical section
	CRITICAL_SECTION_END;
     2ba:	2f bf       	out	0x3f, r18	; 63
	// return failure
	return 0;
     2bc:	80 e0       	ldi	r24, 0x00	; 0
}
     2be:	08 95       	ret

000002c0 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
     2c0:	90 93 61 00 	sts	0x0061, r25
     2c4:	80 93 60 00 	sts	0x0060, r24
     2c8:	08 95       	ret

000002ca <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
     2ca:	cf 93       	push	r28
     2cc:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
     2ce:	8a 30       	cpi	r24, 0x0A	; 10
     2d0:	31 f4       	brne	.+12     	; 0x2de <rprintfChar+0x14>
		rputchar('\r');
     2d2:	e0 91 60 00 	lds	r30, 0x0060
     2d6:	f0 91 61 00 	lds	r31, 0x0061
     2da:	8d e0       	ldi	r24, 0x0D	; 13
     2dc:	09 95       	icall
	// send character
	rputchar(c);
     2de:	e0 91 60 00 	lds	r30, 0x0060
     2e2:	f0 91 61 00 	lds	r31, 0x0061
     2e6:	8c 2f       	mov	r24, r28
}
     2e8:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     2ea:	09 94       	ijmp

000002ec <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
     2ec:	8f 70       	andi	r24, 0x0F	; 15
     2ee:	e8 2f       	mov	r30, r24
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	ec 59       	subi	r30, 0x9C	; 156
     2f4:	ff 4f       	sbci	r31, 0xFF	; 255
     2f6:	84 91       	lpm	r24, Z
     2f8:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <rprintfChar>

000002fc <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
     2fc:	5f 92       	push	r5
     2fe:	6f 92       	push	r6
     300:	7f 92       	push	r7
     302:	8f 92       	push	r8
     304:	9f 92       	push	r9
     306:	af 92       	push	r10
     308:	bf 92       	push	r11
     30a:	cf 92       	push	r12
     30c:	df 92       	push	r13
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	1f 92       	push	r1
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	ec 89       	ldd	r30, Y+20	; 0x14
     322:	fd 89       	ldd	r31, Y+21	; 0x15
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
     324:	3e 01       	movw	r6, r28
     326:	26 e1       	ldi	r18, 0x16	; 22
     328:	62 0e       	add	r6, r18
     32a:	71 1c       	adc	r7, r1
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
					rprintfChar('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     32c:	3a e0       	ldi	r19, 0x0A	; 10
     32e:	a3 2e       	mov	r10, r19
     330:	b1 2c       	mov	r11, r1
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     332:	3b 89       	ldd	r19, Y+19	; 0x13
     334:	33 23       	and	r19, r19
     336:	81 f0       	breq	.+32     	; 0x358 <rprintf1RamRom+0x5c>
     338:	8f 01       	movw	r16, r30
     33a:	0f 5f       	subi	r16, 0xFF	; 255
     33c:	1f 4f       	sbci	r17, 0xFF	; 255
     33e:	84 91       	lpm	r24, Z
     340:	85 32       	cpi	r24, 0x25	; 37
     342:	89 f0       	breq	.+34     	; 0x366 <rprintf1RamRom+0x6a>
		{	// Until '%' or '\0'
			if (!format_flag)
     344:	88 23       	and	r24, r24
     346:	09 f4       	brne	.+2      	; 0x34a <rprintf1RamRom+0x4e>
     348:	66 c0       	rjmp	.+204    	; 0x416 <rprintf1RamRom+0x11a>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
     34a:	0e 94 65 01 	call	0x2ca	; 0x2ca <rprintfChar>
     34e:	63 01       	movw	r12, r6
     350:	78 01       	movw	r14, r16
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
     352:	36 01       	movw	r6, r12
     354:	f7 01       	movw	r30, r14
     356:	ed cf       	rjmp	.-38     	; 0x332 <rprintf1RamRom+0x36>
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     358:	80 81       	ld	r24, Z
     35a:	85 32       	cpi	r24, 0x25	; 37
     35c:	59 f0       	breq	.+22     	; 0x374 <rprintf1RamRom+0x78>
     35e:	8f 01       	movw	r16, r30
     360:	0f 5f       	subi	r16, 0xFF	; 255
     362:	1f 4f       	sbci	r17, 0xFF	; 255
     364:	ef cf       	rjmp	.-34     	; 0x344 <rprintf1RamRom+0x48>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
     366:	7f 01       	movw	r14, r30
     368:	82 e0       	ldi	r24, 0x02	; 2
     36a:	e8 0e       	add	r14, r24
     36c:	f1 1c       	adc	r15, r1
     36e:	f8 01       	movw	r30, r16
     370:	84 91       	lpm	r24, Z
     372:	05 c0       	rjmp	.+10     	; 0x37e <rprintf1RamRom+0x82>
     374:	7f 01       	movw	r14, r30
     376:	22 e0       	ldi	r18, 0x02	; 2
     378:	e2 0e       	add	r14, r18
     37a:	f1 1c       	adc	r15, r1
     37c:	81 81       	ldd	r24, Z+1	; 0x01
     37e:	84 36       	cpi	r24, 0x64	; 100
     380:	a1 f0       	breq	.+40     	; 0x3aa <rprintf1RamRom+0xae>
     382:	88 37       	cpi	r24, 0x78	; 120
     384:	61 f0       	breq	.+24     	; 0x39e <rprintf1RamRom+0xa2>
     386:	83 36       	cpi	r24, 0x63	; 99
     388:	31 f4       	brne	.+12     	; 0x396 <rprintf1RamRom+0x9a>
		{
			case 'c': format_flag = va_arg(ap,int);
     38a:	f3 01       	movw	r30, r6
     38c:	80 81       	ld	r24, Z
     38e:	93 01       	movw	r18, r6
     390:	2e 5f       	subi	r18, 0xFE	; 254
     392:	3f 4f       	sbci	r19, 0xFF	; 255
     394:	39 01       	movw	r6, r18
			default:  rprintfChar(format_flag); continue;
     396:	0e 94 65 01 	call	0x2ca	; 0x2ca <rprintfChar>
     39a:	63 01       	movw	r12, r6
     39c:	da cf       	rjmp	.-76     	; 0x352 <rprintf1RamRom+0x56>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
     39e:	20 e1       	ldi	r18, 0x10	; 16
     3a0:	82 2e       	mov	r8, r18
     3a2:	91 2c       	mov	r9, r1
     3a4:	00 e0       	ldi	r16, 0x00	; 0
     3a6:	10 e1       	ldi	r17, 0x10	; 16
     3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <rprintf1RamRom+0xb8>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
     3aa:	9a e0       	ldi	r25, 0x0A	; 10
     3ac:	89 2e       	mov	r8, r25
     3ae:	91 2c       	mov	r9, r1
     3b0:	00 e1       	ldi	r16, 0x10	; 16
     3b2:	17 e2       	ldi	r17, 0x27	; 39
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
     3b4:	63 01       	movw	r12, r6
     3b6:	32 e0       	ldi	r19, 0x02	; 2
     3b8:	c3 0e       	add	r12, r19
     3ba:	d1 1c       	adc	r13, r1
     3bc:	f3 01       	movw	r30, r6
     3be:	60 80       	ld	r6, Z
     3c0:	71 80       	ldd	r7, Z+1	; 0x01
			if (format_flag == 'd')
     3c2:	84 36       	cpi	r24, 0x64	; 100
     3c4:	a1 f4       	brne	.+40     	; 0x3ee <rprintf1RamRom+0xf2>
			{
				if (((int)u_val) < 0)
     3c6:	77 fe       	sbrs	r7, 7
     3c8:	0f c0       	rjmp	.+30     	; 0x3e8 <rprintf1RamRom+0xec>
				{
					u_val = - u_val;
     3ca:	71 94       	neg	r7
     3cc:	61 94       	neg	r6
     3ce:	71 08       	sbc	r7, r1
					rprintfChar('-');
     3d0:	8d e2       	ldi	r24, 0x2D	; 45
     3d2:	0e 94 65 01 	call	0x2ca	; 0x2ca <rprintfChar>
     3d6:	08 c0       	rjmp	.+16     	; 0x3e8 <rprintf1RamRom+0xec>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     3d8:	c8 01       	movw	r24, r16
     3da:	b5 01       	movw	r22, r10
     3dc:	0e 94 6f 09 	call	0x12de	; 0x12de <__udivmodhi4>
     3e0:	8b 01       	movw	r16, r22
     3e2:	62 30       	cpi	r22, 0x02	; 2
     3e4:	71 05       	cpc	r23, r1
     3e6:	18 f0       	brcs	.+6      	; 0x3ee <rprintf1RamRom+0xf2>
     3e8:	60 16       	cp	r6, r16
     3ea:	71 06       	cpc	r7, r17
     3ec:	a8 f3       	brcs	.-22     	; 0x3d8 <rprintf1RamRom+0xdc>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
     3ee:	c3 01       	movw	r24, r6
     3f0:	b8 01       	movw	r22, r16
     3f2:	0e 94 6f 09 	call	0x12de	; 0x12de <__udivmodhi4>
     3f6:	58 2e       	mov	r5, r24
     3f8:	86 2f       	mov	r24, r22
     3fa:	99 83       	std	Y+1, r25	; 0x01
     3fc:	0e 94 76 01 	call	0x2ec	; 0x2ec <rprintfu04>
				u_val %= div_val;
     400:	65 2c       	mov	r6, r5
     402:	99 81       	ldd	r25, Y+1	; 0x01
     404:	79 2e       	mov	r7, r25
				div_val /= base;
     406:	c8 01       	movw	r24, r16
     408:	b4 01       	movw	r22, r8
     40a:	0e 94 6f 09 	call	0x12de	; 0x12de <__udivmodhi4>
     40e:	8b 01       	movw	r16, r22
			} while (div_val);
     410:	67 2b       	or	r22, r23
     412:	69 f7       	brne	.-38     	; 0x3ee <rprintf1RamRom+0xf2>
     414:	9e cf       	rjmp	.-196    	; 0x352 <rprintf1RamRom+0x56>
		}
	}
	va_end(ap);
}
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0f 90       	pop	r0
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	ff 90       	pop	r15
     426:	ef 90       	pop	r14
     428:	df 90       	pop	r13
     42a:	cf 90       	pop	r12
     42c:	bf 90       	pop	r11
     42e:	af 90       	pop	r10
     430:	9f 90       	pop	r9
     432:	8f 90       	pop	r8
     434:	7f 90       	pop	r7
     436:	6f 90       	pop	r6
     438:	5f 90       	pop	r5
     43a:	08 95       	ret

0000043c <timer0SetPrescaler>:
#endif

void timer0SetPrescaler(u08 prescale)
{
	// set prescaler on timer 0
	outb(TCCR0, (inb(TCCR0) & ~TIMER_PRESCALE_MASK) | prescale);
     43c:	93 b7       	in	r25, 0x33	; 51
     43e:	98 7f       	andi	r25, 0xF8	; 248
     440:	89 2b       	or	r24, r25
     442:	83 bf       	out	0x33, r24	; 51
     444:	08 95       	ret

00000446 <timer0Init>:
}

void timer0Init()
{
	// initialize timer 0
	timer0SetPrescaler( TIMER0PRESCALE );	// set prescaler
     446:	82 e0       	ldi	r24, 0x02	; 2
     448:	0e 94 1e 02 	call	0x43c	; 0x43c <timer0SetPrescaler>
	outb(TCNT0, 0);							// reset TCNT0
     44c:	12 be       	out	0x32, r1	; 50
	sbi(TIMSK, TOIE0);						// enable TCNT0 overflow interrupt
     44e:	89 b7       	in	r24, 0x39	; 57
     450:	81 60       	ori	r24, 0x01	; 1
     452:	89 bf       	out	0x39, r24	; 57
}

void timer0ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer0Reg0 = 0;	// initialize time registers
     454:	10 92 f6 00 	sts	0x00F6, r1
     458:	10 92 f7 00 	sts	0x00F7, r1
     45c:	10 92 f8 00 	sts	0x00F8, r1
     460:	10 92 f9 00 	sts	0x00F9, r1
     464:	08 95       	ret

00000466 <timer1SetPrescaler>:
}

void timer1SetPrescaler(u08 prescale)
{
	// set prescaler on timer 1
	outb(TCCR1B, (inb(TCCR1B) & ~TIMER_PRESCALE_MASK) | prescale);
     466:	9e b5       	in	r25, 0x2e	; 46
     468:	98 7f       	andi	r25, 0xF8	; 248
     46a:	89 2b       	or	r24, r25
     46c:	8e bd       	out	0x2e, r24	; 46
     46e:	08 95       	ret

00000470 <timer1Init>:
}

void timer1Init(void)
{
	// initialize timer 1
	timer1SetPrescaler( TIMER1PRESCALE );	// set prescaler
     470:	83 e0       	ldi	r24, 0x03	; 3
     472:	0e 94 33 02 	call	0x466	; 0x466 <timer1SetPrescaler>
	outb(TCNT1H, 0);						// reset TCNT1
     476:	1d bc       	out	0x2d, r1	; 45
	outb(TCNT1L, 0);
     478:	1c bc       	out	0x2c, r1	; 44
	sbi(TIMSK, TOIE1);						// enable TCNT1 overflow
     47a:	89 b7       	in	r24, 0x39	; 57
     47c:	84 60       	ori	r24, 0x04	; 4
     47e:	89 bf       	out	0x39, r24	; 57
     480:	08 95       	ret

00000482 <timer2SetPrescaler>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2SetPrescaler(u08 prescale)
{
	// set prescaler on timer 2
	outb(TCCR2, (inb(TCCR2) & ~TIMER_PRESCALE_MASK) | prescale);
     482:	95 b5       	in	r25, 0x25	; 37
     484:	98 7f       	andi	r25, 0xF8	; 248
     486:	89 2b       	or	r24, r25
     488:	85 bd       	out	0x25, r24	; 37
     48a:	08 95       	ret

0000048c <timer2Init>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2Init(void)
{
	// initialize timer 2
	timer2SetPrescaler( TIMER2PRESCALE );	// set prescaler
     48c:	84 e0       	ldi	r24, 0x04	; 4
     48e:	0e 94 41 02 	call	0x482	; 0x482 <timer2SetPrescaler>
	outb(TCNT2, 0);							// reset TCNT2
     492:	14 bc       	out	0x24, r1	; 36
	sbi(TIMSK, TOIE2);						// enable TCNT2 overflow
     494:	89 b7       	in	r24, 0x39	; 57
     496:	80 64       	ori	r24, 0x40	; 64
     498:	89 bf       	out	0x39, r24	; 57

#ifdef TCNT2	// support timer2 only if it exists
void timer2ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer2Reg0 = 0;	// initialize time registers
     49a:	10 92 fe 00 	sts	0x00FE, r1
     49e:	10 92 ff 00 	sts	0x00FF, r1
     4a2:	10 92 00 01 	sts	0x0100, r1
     4a6:	10 92 01 01 	sts	0x0101, r1
     4aa:	08 95       	ret

000004ac <timer0GetPrescaler>:
#endif

u16 timer0GetPrescaler(void)
{
	// get the current prescaler setting
	return (pgm_read_word(TimerPrescaleFactor+(inb(TCCR0) & TIMER_PRESCALE_MASK)));
     4ac:	e3 b7       	in	r30, 0x33	; 51
     4ae:	e7 70       	andi	r30, 0x07	; 7
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	ee 0f       	add	r30, r30
     4b4:	ff 1f       	adc	r31, r31
     4b6:	eb 58       	subi	r30, 0x8B	; 139
     4b8:	ff 4f       	sbci	r31, 0xFF	; 255
}
     4ba:	85 91       	lpm	r24, Z+
     4bc:	94 91       	lpm	r25, Z
     4be:	08 95       	ret

000004c0 <timerDetach>:
}

void timerDetach(u08 interruptNum)
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     4c0:	88 30       	cpi	r24, 0x08	; 8
     4c2:	40 f4       	brcc	.+16     	; 0x4d4 <timerDetach+0x14>
	{
		// set the interrupt function to run nothing
		TimerIntFunc[interruptNum] = 0;
     4c4:	e8 2f       	mov	r30, r24
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	ee 0f       	add	r30, r30
     4ca:	ff 1f       	adc	r31, r31
     4cc:	ee 59       	subi	r30, 0x9E	; 158
     4ce:	ff 4f       	sbci	r31, 0xFF	; 255
     4d0:	11 82       	std	Z+1, r1	; 0x01
     4d2:	10 82       	st	Z, r1
     4d4:	08 95       	ret

000004d6 <timerInit>:
                  :"r"(time_ms), "r"((unsigned short) (delay_count))
	);
}
*/
void timerInit(void)
{
     4d6:	cf 93       	push	r28
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
     4d8:	c0 e0       	ldi	r28, 0x00	; 0
		timerDetach(intNum);
     4da:	8c 2f       	mov	r24, r28
     4dc:	0e 94 60 02 	call	0x4c0	; 0x4c0 <timerDetach>
*/
void timerInit(void)
{
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
     4e0:	cf 5f       	subi	r28, 0xFF	; 255
     4e2:	c8 30       	cpi	r28, 0x08	; 8
     4e4:	d1 f7       	brne	.-12     	; 0x4da <timerInit+0x4>
		timerDetach(intNum);

	// initialize all timers
	timer0Init();
     4e6:	0e 94 23 02 	call	0x446	; 0x446 <timer0Init>
	timer1Init();
     4ea:	0e 94 38 02 	call	0x470	; 0x470 <timer1Init>
	#ifdef TCNT2	// support timer2 only if it exists
	timer2Init();
     4ee:	0e 94 46 02 	call	0x48c	; 0x48c <timer2Init>
	#endif
	// enable interrupts
	sei();
     4f2:	78 94       	sei
}
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <timerPause>:
	// calculate the number of milliseconds in x timer tics
	return (tics*1000*(prescaleDiv*256))/F_CPU;
}
*/
void timerPause(unsigned short pause_ms)
{
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	ec 01       	movw	r28, r24
	u08 timerThres;
	u32 ticRateHz;
	u32 pause;

	// capture current pause timer value
	timerThres = inb(TCNT0);
     50a:	12 b7       	in	r17, 0x32	; 50
	// reset pause timer overflow count
	TimerPauseReg = 0;
     50c:	10 92 fa 00 	sts	0x00FA, r1
     510:	10 92 fb 00 	sts	0x00FB, r1
     514:	10 92 fc 00 	sts	0x00FC, r1
     518:	10 92 fd 00 	sts	0x00FD, r1
	// calculate delay for [pause_ms] milliseconds
	// prescaler division = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)))
	ticRateHz = F_CPU/timer0GetPrescaler();
     51c:	0e 94 56 02 	call	0x4ac	; 0x4ac <timer0GetPrescaler>
     520:	9c 01       	movw	r18, r24
     522:	40 e0       	ldi	r20, 0x00	; 0
     524:	50 e0       	ldi	r21, 0x00	; 0
     526:	60 e0       	ldi	r22, 0x00	; 0
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	81 ee       	ldi	r24, 0xE1	; 225
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 83 09 	call	0x1306	; 0x1306 <__udivmodsi4>
     532:	6e 01       	movw	r12, r28
     534:	e1 2c       	mov	r14, r1
     536:	f1 2c       	mov	r15, r1
	// precision management
	// prevent overflow and precision underflow
	//	-could add more conditions to improve accuracy
	if( ((ticRateHz < 429497) && (pause_ms <= 10000)) )
     538:	29 3b       	cpi	r18, 0xB9	; 185
     53a:	8d e8       	ldi	r24, 0x8D	; 141
     53c:	38 07       	cpc	r19, r24
     53e:	86 e0       	ldi	r24, 0x06	; 6
     540:	48 07       	cpc	r20, r24
     542:	51 05       	cpc	r21, r1
     544:	b0 f4       	brcc	.+44     	; 0x572 <timerPause+0x7a>
     546:	c1 31       	cpi	r28, 0x11	; 17
     548:	d7 42       	sbci	r29, 0x27	; 39
     54a:	98 f4       	brcc	.+38     	; 0x572 <timerPause+0x7a>
		pause = (pause_ms*ticRateHz)/1000;
     54c:	c7 01       	movw	r24, r14
     54e:	b6 01       	movw	r22, r12
     550:	0e 94 5f 09 	call	0x12be	; 0x12be <__mulsi3>
     554:	28 ee       	ldi	r18, 0xE8	; 232
     556:	33 e0       	ldi	r19, 0x03	; 3
     558:	40 e0       	ldi	r20, 0x00	; 0
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	0e 94 83 09 	call	0x1306	; 0x1306 <__udivmodsi4>
	else
		pause = pause_ms*(ticRateHz/1000);

	// loop until time expires
	while( ((TimerPauseReg<<8) | inb(TCNT0)) < (pause+timerThres) )
     560:	da 01       	movw	r26, r20
     562:	c9 01       	movw	r24, r18
     564:	81 0f       	add	r24, r17
     566:	91 1d       	adc	r25, r1
     568:	a1 1d       	adc	r26, r1
     56a:	b1 1d       	adc	r27, r1
     56c:	8c 01       	movw	r16, r24
     56e:	9d 01       	movw	r18, r26
     570:	0f c0       	rjmp	.+30     	; 0x590 <timerPause+0x98>
	// prevent overflow and precision underflow
	//	-could add more conditions to improve accuracy
	if( ((ticRateHz < 429497) && (pause_ms <= 10000)) )
		pause = (pause_ms*ticRateHz)/1000;
	else
		pause = pause_ms*(ticRateHz/1000);
     572:	ca 01       	movw	r24, r20
     574:	b9 01       	movw	r22, r18
     576:	28 ee       	ldi	r18, 0xE8	; 232
     578:	33 e0       	ldi	r19, 0x03	; 3
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	0e 94 83 09 	call	0x1306	; 0x1306 <__udivmodsi4>
     582:	c7 01       	movw	r24, r14
     584:	b6 01       	movw	r22, r12
     586:	0e 94 5f 09 	call	0x12be	; 0x12be <__mulsi3>
     58a:	9b 01       	movw	r18, r22
     58c:	ac 01       	movw	r20, r24
     58e:	e8 cf       	rjmp	.-48     	; 0x560 <timerPause+0x68>

	// loop until time expires
	while( ((TimerPauseReg<<8) | inb(TCNT0)) < (pause+timerThres) )
     590:	80 91 fa 00 	lds	r24, 0x00FA
     594:	90 91 fb 00 	lds	r25, 0x00FB
     598:	a0 91 fc 00 	lds	r26, 0x00FC
     59c:	b0 91 fd 00 	lds	r27, 0x00FD
     5a0:	62 b7       	in	r22, 0x32	; 50
     5a2:	ba 2f       	mov	r27, r26
     5a4:	a9 2f       	mov	r26, r25
     5a6:	98 2f       	mov	r25, r24
     5a8:	88 27       	eor	r24, r24
     5aa:	86 2b       	or	r24, r22
     5ac:	80 17       	cp	r24, r16
     5ae:	91 07       	cpc	r25, r17
     5b0:	a2 07       	cpc	r26, r18
     5b2:	b3 07       	cpc	r27, r19
     5b4:	98 f4       	brcc	.+38     	; 0x5dc <timerPause+0xe4>
	{
		if( TimerPauseReg < (pause>>8));
     5b6:	80 91 fa 00 	lds	r24, 0x00FA
     5ba:	90 91 fb 00 	lds	r25, 0x00FB
     5be:	a0 91 fc 00 	lds	r26, 0x00FC
     5c2:	b0 91 fd 00 	lds	r27, 0x00FD
		{
			// save power by idling the processor
			set_sleep_mode(SLEEP_MODE_IDLE);
     5c6:	85 b7       	in	r24, 0x35	; 53
     5c8:	8f 74       	andi	r24, 0x4F	; 79
     5ca:	85 bf       	out	0x35, r24	; 53
			sleep_mode();
     5cc:	85 b7       	in	r24, 0x35	; 53
     5ce:	80 64       	ori	r24, 0x40	; 64
     5d0:	85 bf       	out	0x35, r24	; 53
     5d2:	88 95       	sleep
     5d4:	85 b7       	in	r24, 0x35	; 53
     5d6:	8f 7b       	andi	r24, 0xBF	; 191
     5d8:	85 bf       	out	0x35, r24	; 53
     5da:	da cf       	rjmp	.-76     	; 0x590 <timerPause+0x98>
	
	TimerPauseReg = 0;
	while(TimerPauseReg < pause);

	*/
}
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	df 90       	pop	r13
     5ea:	cf 90       	pop	r12
     5ec:	08 95       	ret

000005ee <timer1PWMInit>:
{
	// configures timer1 for use with PWM output
	// on OC1A and OC1B pins

	// enable timer1 as 8,9,10bit PWM
	if(bitRes == 9)
     5ee:	89 30       	cpi	r24, 0x09	; 9
     5f0:	31 f4       	brne	.+12     	; 0x5fe <timer1PWMInit+0x10>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     5f2:	8f b5       	in	r24, 0x2f	; 47
     5f4:	82 60       	ori	r24, 0x02	; 2
     5f6:	8f bd       	out	0x2f, r24	; 47
		cbi(TCCR1A,PWM10);
     5f8:	8f b5       	in	r24, 0x2f	; 47
     5fa:	8e 7f       	andi	r24, 0xFE	; 254
     5fc:	0a c0       	rjmp	.+20     	; 0x612 <timer1PWMInit+0x24>
	}
	else if( bitRes == 10 )
     5fe:	8a 30       	cpi	r24, 0x0A	; 10
     600:	19 f4       	brne	.+6      	; 0x608 <timer1PWMInit+0x1a>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     602:	8f b5       	in	r24, 0x2f	; 47
     604:	82 60       	ori	r24, 0x02	; 2
     606:	02 c0       	rjmp	.+4      	; 0x60c <timer1PWMInit+0x1e>
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     608:	8f b5       	in	r24, 0x2f	; 47
     60a:	8d 7f       	andi	r24, 0xFD	; 253
     60c:	8f bd       	out	0x2f, r24	; 47
		sbi(TCCR1A,PWM10);
     60e:	8f b5       	in	r24, 0x2f	; 47
     610:	81 60       	ori	r24, 0x01	; 1
     612:	8f bd       	out	0x2f, r24	; 47
	}

	// clear output compare value A
	outb(OCR1AH, 0);
     614:	1b bc       	out	0x2b, r1	; 43
	outb(OCR1AL, 0);
     616:	1a bc       	out	0x2a, r1	; 42
	// clear output compare value B
	outb(OCR1BH, 0);
     618:	19 bc       	out	0x29, r1	; 41
	outb(OCR1BL, 0);
     61a:	18 bc       	out	0x28, r1	; 40
     61c:	08 95       	ret

0000061e <timer1PWMAOn>:

void timer1PWMAOn(void)
{
	// turn on channel A (OC1A) PWM output
	// set OC1A as non-inverted PWM
	sbi(TCCR1A,COM1A1);
     61e:	8f b5       	in	r24, 0x2f	; 47
     620:	80 68       	ori	r24, 0x80	; 128
     622:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1A0);
     624:	8f b5       	in	r24, 0x2f	; 47
     626:	8f 7b       	andi	r24, 0xBF	; 191
     628:	8f bd       	out	0x2f, r24	; 47
     62a:	08 95       	ret

0000062c <timer1PWMBOn>:

void timer1PWMBOn(void)
{
	// turn on channel B (OC1B) PWM output
	// set OC1B as non-inverted PWM
	sbi(TCCR1A,COM1B1);
     62c:	8f b5       	in	r24, 0x2f	; 47
     62e:	80 62       	ori	r24, 0x20	; 32
     630:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1B0);
     632:	8f b5       	in	r24, 0x2f	; 47
     634:	8f 7e       	andi	r24, 0xEF	; 239
     636:	8f bd       	out	0x2f, r24	; 47
     638:	08 95       	ret

0000063a <timer1PWMASet>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1AH);		// set the high 8bits of OCR1A
	//outp( (pwmDuty&0x00FF), OCR1AL);	// set the low 8bits of OCR1A
	OCR1A = pwmDuty;
     63a:	9b bd       	out	0x2b, r25	; 43
     63c:	8a bd       	out	0x2a, r24	; 42
     63e:	08 95       	ret

00000640 <timer1PWMBSet>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
     640:	99 bd       	out	0x29, r25	; 41
     642:	88 bd       	out	0x28, r24	; 40
     644:	08 95       	ret

00000646 <__vector_9>:
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
     646:	1f 92       	push	r1
     648:	0f 92       	push	r0
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	0f 92       	push	r0
     64e:	11 24       	eor	r1, r1
     650:	2f 93       	push	r18
     652:	3f 93       	push	r19
     654:	4f 93       	push	r20
     656:	5f 93       	push	r21
     658:	6f 93       	push	r22
     65a:	7f 93       	push	r23
     65c:	8f 93       	push	r24
     65e:	9f 93       	push	r25
     660:	af 93       	push	r26
     662:	bf 93       	push	r27
     664:	ef 93       	push	r30
     666:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
     668:	80 91 f6 00 	lds	r24, 0x00F6
     66c:	90 91 f7 00 	lds	r25, 0x00F7
     670:	a0 91 f8 00 	lds	r26, 0x00F8
     674:	b0 91 f9 00 	lds	r27, 0x00F9
     678:	01 96       	adiw	r24, 0x01	; 1
     67a:	a1 1d       	adc	r26, r1
     67c:	b1 1d       	adc	r27, r1
     67e:	80 93 f6 00 	sts	0x00F6, r24
     682:	90 93 f7 00 	sts	0x00F7, r25
     686:	a0 93 f8 00 	sts	0x00F8, r26
     68a:	b0 93 f9 00 	sts	0x00F9, r27

	// increment pause counter
	TimerPauseReg++;
     68e:	80 91 fa 00 	lds	r24, 0x00FA
     692:	90 91 fb 00 	lds	r25, 0x00FB
     696:	a0 91 fc 00 	lds	r26, 0x00FC
     69a:	b0 91 fd 00 	lds	r27, 0x00FD
     69e:	01 96       	adiw	r24, 0x01	; 1
     6a0:	a1 1d       	adc	r26, r1
     6a2:	b1 1d       	adc	r27, r1
     6a4:	80 93 fa 00 	sts	0x00FA, r24
     6a8:	90 93 fb 00 	sts	0x00FB, r25
     6ac:	a0 93 fc 00 	sts	0x00FC, r26
     6b0:	b0 93 fd 00 	sts	0x00FD, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
     6b4:	80 91 62 00 	lds	r24, 0x0062
     6b8:	90 91 63 00 	lds	r25, 0x0063
     6bc:	89 2b       	or	r24, r25
     6be:	29 f0       	breq	.+10     	; 0x6ca <__vector_9+0x84>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
     6c0:	e0 91 62 00 	lds	r30, 0x0062
     6c4:	f0 91 63 00 	lds	r31, 0x0063
     6c8:	09 95       	icall
}
     6ca:	ff 91       	pop	r31
     6cc:	ef 91       	pop	r30
     6ce:	bf 91       	pop	r27
     6d0:	af 91       	pop	r26
     6d2:	9f 91       	pop	r25
     6d4:	8f 91       	pop	r24
     6d6:	7f 91       	pop	r23
     6d8:	6f 91       	pop	r22
     6da:	5f 91       	pop	r21
     6dc:	4f 91       	pop	r20
     6de:	3f 91       	pop	r19
     6e0:	2f 91       	pop	r18
     6e2:	0f 90       	pop	r0
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	0f 90       	pop	r0
     6e8:	1f 90       	pop	r1
     6ea:	18 95       	reti

000006ec <__vector_8>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
     6ec:	1f 92       	push	r1
     6ee:	0f 92       	push	r0
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	0f 92       	push	r0
     6f4:	11 24       	eor	r1, r1
     6f6:	2f 93       	push	r18
     6f8:	3f 93       	push	r19
     6fa:	4f 93       	push	r20
     6fc:	5f 93       	push	r21
     6fe:	6f 93       	push	r22
     700:	7f 93       	push	r23
     702:	8f 93       	push	r24
     704:	9f 93       	push	r25
     706:	af 93       	push	r26
     708:	bf 93       	push	r27
     70a:	ef 93       	push	r30
     70c:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
     70e:	80 91 64 00 	lds	r24, 0x0064
     712:	90 91 65 00 	lds	r25, 0x0065
     716:	89 2b       	or	r24, r25
     718:	29 f0       	breq	.+10     	; 0x724 <__vector_8+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
     71a:	e0 91 64 00 	lds	r30, 0x0064
     71e:	f0 91 65 00 	lds	r31, 0x0065
     722:	09 95       	icall
}
     724:	ff 91       	pop	r31
     726:	ef 91       	pop	r30
     728:	bf 91       	pop	r27
     72a:	af 91       	pop	r26
     72c:	9f 91       	pop	r25
     72e:	8f 91       	pop	r24
     730:	7f 91       	pop	r23
     732:	6f 91       	pop	r22
     734:	5f 91       	pop	r21
     736:	4f 91       	pop	r20
     738:	3f 91       	pop	r19
     73a:	2f 91       	pop	r18
     73c:	0f 90       	pop	r0
     73e:	0f be       	out	0x3f, r0	; 63
     740:	0f 90       	pop	r0
     742:	1f 90       	pop	r1
     744:	18 95       	reti

00000746 <__vector_4>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	2f 93       	push	r18
     752:	3f 93       	push	r19
     754:	4f 93       	push	r20
     756:	5f 93       	push	r21
     758:	6f 93       	push	r22
     75a:	7f 93       	push	r23
     75c:	8f 93       	push	r24
     75e:	9f 93       	push	r25
     760:	af 93       	push	r26
     762:	bf 93       	push	r27
     764:	ef 93       	push	r30
     766:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
     768:	80 91 fe 00 	lds	r24, 0x00FE
     76c:	90 91 ff 00 	lds	r25, 0x00FF
     770:	a0 91 00 01 	lds	r26, 0x0100
     774:	b0 91 01 01 	lds	r27, 0x0101
     778:	01 96       	adiw	r24, 0x01	; 1
     77a:	a1 1d       	adc	r26, r1
     77c:	b1 1d       	adc	r27, r1
     77e:	80 93 fe 00 	sts	0x00FE, r24
     782:	90 93 ff 00 	sts	0x00FF, r25
     786:	a0 93 00 01 	sts	0x0100, r26
     78a:	b0 93 01 01 	sts	0x0101, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
     78e:	80 91 6c 00 	lds	r24, 0x006C
     792:	90 91 6d 00 	lds	r25, 0x006D
     796:	89 2b       	or	r24, r25
     798:	29 f0       	breq	.+10     	; 0x7a4 <__vector_4+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
     79a:	e0 91 6c 00 	lds	r30, 0x006C
     79e:	f0 91 6d 00 	lds	r31, 0x006D
     7a2:	09 95       	icall
}
     7a4:	ff 91       	pop	r31
     7a6:	ef 91       	pop	r30
     7a8:	bf 91       	pop	r27
     7aa:	af 91       	pop	r26
     7ac:	9f 91       	pop	r25
     7ae:	8f 91       	pop	r24
     7b0:	7f 91       	pop	r23
     7b2:	6f 91       	pop	r22
     7b4:	5f 91       	pop	r21
     7b6:	4f 91       	pop	r20
     7b8:	3f 91       	pop	r19
     7ba:	2f 91       	pop	r18
     7bc:	0f 90       	pop	r0
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	0f 90       	pop	r0
     7c2:	1f 90       	pop	r1
     7c4:	18 95       	reti

000007c6 <__vector_19>:

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_COMP_vect)
{
     7c6:	1f 92       	push	r1
     7c8:	0f 92       	push	r0
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	0f 92       	push	r0
     7ce:	11 24       	eor	r1, r1
     7d0:	2f 93       	push	r18
     7d2:	3f 93       	push	r19
     7d4:	4f 93       	push	r20
     7d6:	5f 93       	push	r21
     7d8:	6f 93       	push	r22
     7da:	7f 93       	push	r23
     7dc:	8f 93       	push	r24
     7de:	9f 93       	push	r25
     7e0:	af 93       	push	r26
     7e2:	bf 93       	push	r27
     7e4:	ef 93       	push	r30
     7e6:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
     7e8:	80 91 70 00 	lds	r24, 0x0070
     7ec:	90 91 71 00 	lds	r25, 0x0071
     7f0:	89 2b       	or	r24, r25
     7f2:	29 f0       	breq	.+10     	; 0x7fe <__vector_19+0x38>
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
     7f4:	e0 91 70 00 	lds	r30, 0x0070
     7f8:	f0 91 71 00 	lds	r31, 0x0071
     7fc:	09 95       	icall
}
     7fe:	ff 91       	pop	r31
     800:	ef 91       	pop	r30
     802:	bf 91       	pop	r27
     804:	af 91       	pop	r26
     806:	9f 91       	pop	r25
     808:	8f 91       	pop	r24
     80a:	7f 91       	pop	r23
     80c:	6f 91       	pop	r22
     80e:	5f 91       	pop	r21
     810:	4f 91       	pop	r20
     812:	3f 91       	pop	r19
     814:	2f 91       	pop	r18
     816:	0f 90       	pop	r0
     818:	0f be       	out	0x3f, r0	; 63
     81a:	0f 90       	pop	r0
     81c:	1f 90       	pop	r1
     81e:	18 95       	reti

00000820 <__vector_6>:
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
     820:	1f 92       	push	r1
     822:	0f 92       	push	r0
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	0f 92       	push	r0
     828:	11 24       	eor	r1, r1
     82a:	2f 93       	push	r18
     82c:	3f 93       	push	r19
     82e:	4f 93       	push	r20
     830:	5f 93       	push	r21
     832:	6f 93       	push	r22
     834:	7f 93       	push	r23
     836:	8f 93       	push	r24
     838:	9f 93       	push	r25
     83a:	af 93       	push	r26
     83c:	bf 93       	push	r27
     83e:	ef 93       	push	r30
     840:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
     842:	80 91 66 00 	lds	r24, 0x0066
     846:	90 91 67 00 	lds	r25, 0x0067
     84a:	89 2b       	or	r24, r25
     84c:	29 f0       	breq	.+10     	; 0x858 <__vector_6+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
     84e:	e0 91 66 00 	lds	r30, 0x0066
     852:	f0 91 67 00 	lds	r31, 0x0067
     856:	09 95       	icall
}
     858:	ff 91       	pop	r31
     85a:	ef 91       	pop	r30
     85c:	bf 91       	pop	r27
     85e:	af 91       	pop	r26
     860:	9f 91       	pop	r25
     862:	8f 91       	pop	r24
     864:	7f 91       	pop	r23
     866:	6f 91       	pop	r22
     868:	5f 91       	pop	r21
     86a:	4f 91       	pop	r20
     86c:	3f 91       	pop	r19
     86e:	2f 91       	pop	r18
     870:	0f 90       	pop	r0
     872:	0f be       	out	0x3f, r0	; 63
     874:	0f 90       	pop	r0
     876:	1f 90       	pop	r1
     878:	18 95       	reti

0000087a <__vector_7>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
     87a:	1f 92       	push	r1
     87c:	0f 92       	push	r0
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	0f 92       	push	r0
     882:	11 24       	eor	r1, r1
     884:	2f 93       	push	r18
     886:	3f 93       	push	r19
     888:	4f 93       	push	r20
     88a:	5f 93       	push	r21
     88c:	6f 93       	push	r22
     88e:	7f 93       	push	r23
     890:	8f 93       	push	r24
     892:	9f 93       	push	r25
     894:	af 93       	push	r26
     896:	bf 93       	push	r27
     898:	ef 93       	push	r30
     89a:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
     89c:	80 91 68 00 	lds	r24, 0x0068
     8a0:	90 91 69 00 	lds	r25, 0x0069
     8a4:	89 2b       	or	r24, r25
     8a6:	29 f0       	breq	.+10     	; 0x8b2 <__vector_7+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
     8a8:	e0 91 68 00 	lds	r30, 0x0068
     8ac:	f0 91 69 00 	lds	r31, 0x0069
     8b0:	09 95       	icall
}
     8b2:	ff 91       	pop	r31
     8b4:	ef 91       	pop	r30
     8b6:	bf 91       	pop	r27
     8b8:	af 91       	pop	r26
     8ba:	9f 91       	pop	r25
     8bc:	8f 91       	pop	r24
     8be:	7f 91       	pop	r23
     8c0:	6f 91       	pop	r22
     8c2:	5f 91       	pop	r21
     8c4:	4f 91       	pop	r20
     8c6:	3f 91       	pop	r19
     8c8:	2f 91       	pop	r18
     8ca:	0f 90       	pop	r0
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	0f 90       	pop	r0
     8d0:	1f 90       	pop	r1
     8d2:	18 95       	reti

000008d4 <__vector_5>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
     8d4:	1f 92       	push	r1
     8d6:	0f 92       	push	r0
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	0f 92       	push	r0
     8dc:	11 24       	eor	r1, r1
     8de:	2f 93       	push	r18
     8e0:	3f 93       	push	r19
     8e2:	4f 93       	push	r20
     8e4:	5f 93       	push	r21
     8e6:	6f 93       	push	r22
     8e8:	7f 93       	push	r23
     8ea:	8f 93       	push	r24
     8ec:	9f 93       	push	r25
     8ee:	af 93       	push	r26
     8f0:	bf 93       	push	r27
     8f2:	ef 93       	push	r30
     8f4:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
     8f6:	80 91 6a 00 	lds	r24, 0x006A
     8fa:	90 91 6b 00 	lds	r25, 0x006B
     8fe:	89 2b       	or	r24, r25
     900:	29 f0       	breq	.+10     	; 0x90c <__vector_5+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
     902:	e0 91 6a 00 	lds	r30, 0x006A
     906:	f0 91 6b 00 	lds	r31, 0x006B
     90a:	09 95       	icall
}
     90c:	ff 91       	pop	r31
     90e:	ef 91       	pop	r30
     910:	bf 91       	pop	r27
     912:	af 91       	pop	r26
     914:	9f 91       	pop	r25
     916:	8f 91       	pop	r24
     918:	7f 91       	pop	r23
     91a:	6f 91       	pop	r22
     91c:	5f 91       	pop	r21
     91e:	4f 91       	pop	r20
     920:	3f 91       	pop	r19
     922:	2f 91       	pop	r18
     924:	0f 90       	pop	r0
     926:	0f be       	out	0x3f, r0	; 63
     928:	0f 90       	pop	r0
     92a:	1f 90       	pop	r1
     92c:	18 95       	reti

0000092e <__vector_3>:

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMP_vect)
{
     92e:	1f 92       	push	r1
     930:	0f 92       	push	r0
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	0f 92       	push	r0
     936:	11 24       	eor	r1, r1
     938:	2f 93       	push	r18
     93a:	3f 93       	push	r19
     93c:	4f 93       	push	r20
     93e:	5f 93       	push	r21
     940:	6f 93       	push	r22
     942:	7f 93       	push	r23
     944:	8f 93       	push	r24
     946:	9f 93       	push	r25
     948:	af 93       	push	r26
     94a:	bf 93       	push	r27
     94c:	ef 93       	push	r30
     94e:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     950:	80 91 6e 00 	lds	r24, 0x006E
     954:	90 91 6f 00 	lds	r25, 0x006F
     958:	89 2b       	or	r24, r25
     95a:	29 f0       	breq	.+10     	; 0x966 <__vector_3+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     95c:	e0 91 6e 00 	lds	r30, 0x006E
     960:	f0 91 6f 00 	lds	r31, 0x006F
     964:	09 95       	icall
}
     966:	ff 91       	pop	r31
     968:	ef 91       	pop	r30
     96a:	bf 91       	pop	r27
     96c:	af 91       	pop	r26
     96e:	9f 91       	pop	r25
     970:	8f 91       	pop	r24
     972:	7f 91       	pop	r23
     974:	6f 91       	pop	r22
     976:	5f 91       	pop	r21
     978:	4f 91       	pop	r20
     97a:	3f 91       	pop	r19
     97c:	2f 91       	pop	r18
     97e:	0f 90       	pop	r0
     980:	0f be       	out	0x3f, r0	; 63
     982:	0f 90       	pop	r0
     984:	1f 90       	pop	r1
     986:	18 95       	reti

00000988 <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (unsigned char *)uartRxData, UART_RX_BUFFER_SIZE);
     988:	40 e4       	ldi	r20, 0x40	; 64
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	64 eb       	ldi	r22, 0xB4	; 180
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	83 e0       	ldi	r24, 0x03	; 3
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 0e 01 	call	0x21c	; 0x21c <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (unsigned char *)uartTxData, UART_TX_BUFFER_SIZE);
     998:	40 e4       	ldi	r20, 0x40	; 64
     99a:	50 e0       	ldi	r21, 0x00	; 0
     99c:	64 e7       	ldi	r22, 0x74	; 116
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	8c e0       	ldi	r24, 0x0C	; 12
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <bufferInit>

000009a8 <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
     9a8:	0e 94 c4 04 	call	0x988	; 0x988 <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
     9ac:	10 92 73 00 	sts	0x0073, r1
     9b0:	10 92 72 00 	sts	0x0072, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     9b4:	88 ed       	ldi	r24, 0xD8	; 216
     9b6:	8a b9       	out	0x0a, r24	; 10
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
     9b8:	8f e5       	ldi	r24, 0x5F	; 95
     9ba:	89 b9       	out	0x09, r24	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
     9bc:	10 bc       	out	0x20, r1	; 32
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
     9be:	8f ef       	ldi	r24, 0xFF	; 255
     9c0:	80 93 02 01 	sts	0x0102, r24
	uartBufferedTx = FALSE;
     9c4:	10 92 0b 01 	sts	0x010B, r1
	// clear overflow count
	uartRxOverflow = 0;
     9c8:	10 92 15 01 	sts	0x0115, r1
     9cc:	10 92 14 01 	sts	0x0114, r1
	// enable interrupts
	sei();
     9d0:	78 94       	sei
     9d2:	08 95       	ret

000009d4 <uartSetBaudRate>:
	UartRxFunc = rx_func;
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	8b 01       	movw	r16, r22
     9da:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
     9dc:	dc 01       	movw	r26, r24
     9de:	cb 01       	movw	r24, r22
     9e0:	90 5e       	subi	r25, 0xE0	; 224
     9e2:	a3 4e       	sbci	r26, 0xE3	; 227
     9e4:	bf 4f       	sbci	r27, 0xFF	; 255
     9e6:	bc 01       	movw	r22, r24
     9e8:	cd 01       	movw	r24, r26
     9ea:	43 e0       	ldi	r20, 0x03	; 3
     9ec:	66 0f       	add	r22, r22
     9ee:	77 1f       	adc	r23, r23
     9f0:	88 1f       	adc	r24, r24
     9f2:	99 1f       	adc	r25, r25
     9f4:	4a 95       	dec	r20
     9f6:	d1 f7       	brne	.-12     	; 0x9ec <uartSetBaudRate+0x18>
     9f8:	a9 01       	movw	r20, r18
     9fa:	98 01       	movw	r18, r16
     9fc:	e4 e0       	ldi	r30, 0x04	; 4
     9fe:	22 0f       	add	r18, r18
     a00:	33 1f       	adc	r19, r19
     a02:	44 1f       	adc	r20, r20
     a04:	55 1f       	adc	r21, r21
     a06:	ea 95       	dec	r30
     a08:	d1 f7       	brne	.-12     	; 0x9fe <uartSetBaudRate+0x2a>
     a0a:	0e 94 83 09 	call	0x1306	; 0x1306 <__udivmodsi4>
     a0e:	21 50       	subi	r18, 0x01	; 1
     a10:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
     a12:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
     a14:	30 bd       	out	0x20, r19	; 32
	#endif
}
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	08 95       	ret

00000a1c <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
     a1c:	90 91 02 01 	lds	r25, 0x0102
     a20:	99 23       	and	r25, r25
     a22:	e1 f3       	breq	.-8      	; 0xa1c <uartSendByte>
	// send byte
	outb(UDR, txData);
     a24:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
     a26:	10 92 02 01 	sts	0x0102, r1
     a2a:	08 95       	ret

00000a2c <__vector_13>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_TRANS)
{
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	2f 93       	push	r18
     a38:	3f 93       	push	r19
     a3a:	4f 93       	push	r20
     a3c:	5f 93       	push	r21
     a3e:	6f 93       	push	r22
     a40:	7f 93       	push	r23
     a42:	8f 93       	push	r24
     a44:	9f 93       	push	r25
     a46:	af 93       	push	r26
     a48:	bf 93       	push	r27
     a4a:	ef 93       	push	r30
     a4c:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
     a4e:	80 91 0b 01 	lds	r24, 0x010B
     a52:	88 23       	and	r24, r24
     a54:	71 f0       	breq	.+28     	; 0xa72 <__vector_13+0x46>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
     a56:	80 91 10 01 	lds	r24, 0x0110
     a5a:	90 91 11 01 	lds	r25, 0x0111
     a5e:	89 2b       	or	r24, r25
     a60:	31 f0       	breq	.+12     	; 0xa6e <__vector_13+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
     a62:	8c e0       	ldi	r24, 0x0C	; 12
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	0e 94 1b 01 	call	0x236	; 0x236 <bufferGetFromFront>
     a6a:	8c b9       	out	0x0c, r24	; 12
     a6c:	05 c0       	rjmp	.+10     	; 0xa78 <__vector_13+0x4c>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
     a6e:	10 92 0b 01 	sts	0x010B, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
     a72:	8f ef       	ldi	r24, 0xFF	; 255
     a74:	80 93 02 01 	sts	0x0102, r24
	}
}
     a78:	ff 91       	pop	r31
     a7a:	ef 91       	pop	r30
     a7c:	bf 91       	pop	r27
     a7e:	af 91       	pop	r26
     a80:	9f 91       	pop	r25
     a82:	8f 91       	pop	r24
     a84:	7f 91       	pop	r23
     a86:	6f 91       	pop	r22
     a88:	5f 91       	pop	r21
     a8a:	4f 91       	pop	r20
     a8c:	3f 91       	pop	r19
     a8e:	2f 91       	pop	r18
     a90:	0f 90       	pop	r0
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	0f 90       	pop	r0
     a96:	1f 90       	pop	r1
     a98:	18 95       	reti

00000a9a <__vector_11>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_RECV)
{
     a9a:	1f 92       	push	r1
     a9c:	0f 92       	push	r0
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	0f 92       	push	r0
     aa2:	11 24       	eor	r1, r1
     aa4:	2f 93       	push	r18
     aa6:	3f 93       	push	r19
     aa8:	4f 93       	push	r20
     aaa:	5f 93       	push	r21
     aac:	6f 93       	push	r22
     aae:	7f 93       	push	r23
     ab0:	8f 93       	push	r24
     ab2:	9f 93       	push	r25
     ab4:	af 93       	push	r26
     ab6:	bf 93       	push	r27
     ab8:	ef 93       	push	r30
     aba:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
     abc:	8c b1       	in	r24, 0x0c	; 12

	// if there's a user function to handle this receive event
	if(UartRxFunc)
     abe:	20 91 72 00 	lds	r18, 0x0072
     ac2:	30 91 73 00 	lds	r19, 0x0073
     ac6:	23 2b       	or	r18, r19
     ac8:	31 f0       	breq	.+12     	; 0xad6 <__vector_11+0x3c>
	{
		// call it and pass the received data
		UartRxFunc(c);
     aca:	e0 91 72 00 	lds	r30, 0x0072
     ace:	f0 91 73 00 	lds	r31, 0x0073
     ad2:	09 95       	icall
     ad4:	10 c0       	rjmp	.+32     	; 0xaf6 <__vector_11+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
     ad6:	68 2f       	mov	r22, r24
     ad8:	83 e0       	ldi	r24, 0x03	; 3
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	0e 94 3f 01 	call	0x27e	; 0x27e <bufferAddToEnd>
     ae0:	81 11       	cpse	r24, r1
     ae2:	09 c0       	rjmp	.+18     	; 0xaf6 <__vector_11+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
     ae4:	80 91 14 01 	lds	r24, 0x0114
     ae8:	90 91 15 01 	lds	r25, 0x0115
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	90 93 15 01 	sts	0x0115, r25
     af2:	80 93 14 01 	sts	0x0114, r24
		}
	}
}
     af6:	ff 91       	pop	r31
     af8:	ef 91       	pop	r30
     afa:	bf 91       	pop	r27
     afc:	af 91       	pop	r26
     afe:	9f 91       	pop	r25
     b00:	8f 91       	pop	r24
     b02:	7f 91       	pop	r23
     b04:	6f 91       	pop	r22
     b06:	5f 91       	pop	r21
     b08:	4f 91       	pop	r20
     b0a:	3f 91       	pop	r19
     b0c:	2f 91       	pop	r18
     b0e:	0f 90       	pop	r0
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	0f 90       	pop	r0
     b14:	1f 90       	pop	r1
     b16:	18 95       	reti

00000b18 <AppDisplay.isra.0>:
* Returns    : true, power on control has finised. false, is processing
*********************************************************************************************************
*/
void AppDisplay(DISP_CODE DispCode, WORK_MODE mode)
{
	switch(DispCode)
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	88 30       	cpi	r24, 0x08	; 8
     b1c:	91 05       	cpc	r25, r1
     b1e:	00 f5       	brcc	.+64     	; 0xb60 <AppDisplay.isra.0+0x48>
     b20:	fc 01       	movw	r30, r24
     b22:	e6 5d       	subi	r30, 0xD6	; 214
     b24:	ff 4f       	sbci	r31, 0xFF	; 255
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(REMOTE_ADDR, SSD_0HZ, SSD_RED);
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	60 e0       	ldi	r22, 0x00	; 0
* Returns    : true, power on control has finised. false, is processing
*********************************************************************************************************
*/
void AppDisplay(DISP_CODE DispCode, WORK_MODE mode)
{
	switch(DispCode)
     b2a:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__tablejump2__>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(START_CHAR, SSD_0HZ, SSD_RED);
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	14 c0       	rjmp	.+40     	; 0xb5c <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(CURRENT_VALUE, SSD_0HZ, SSD_RED);
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	11 c0       	rjmp	.+34     	; 0xb5c <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(FULL_WAREHOUSE, SSD_0HZ, SSD_RED);
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e c0       	rjmp	.+28     	; 0xb5c <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(EMPTY_WAREHOUSE, SSD_0HZ, SSD_RED);
     b40:	83 e0       	ldi	r24, 0x03	; 3
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0b c0       	rjmp	.+22     	; 0xb5c <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(ALARM_H_PERCENT, SSD_0HZ, SSD_RED);
     b46:	84 e0       	ldi	r24, 0x04	; 4
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	08 c0       	rjmp	.+16     	; 0xb5c <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(ALARM_L_PERCENT, SSD_0HZ, SSD_RED);
     b4c:	85 e0       	ldi	r24, 0x05	; 5
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	05 c0       	rjmp	.+10     	; 0xb5c <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(RESPONSE_TIME, SSD_0HZ, SSD_RED);
     b52:	86 e0       	ldi	r24, 0x06	; 6
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <AppDisplay.isra.0+0x44>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(REMOTE_ADDR, SSD_0HZ, SSD_RED);
     b58:	87 e0       	ldi	r24, 0x07	; 7
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <SSDDisplayDec>
     b60:	08 95       	ret

00000b62 <ApplInit>:
*********************************************************************************************************
*/

void ApplInit(void)
{
	ButtonInit();
     b62:	0e 94 0b 09 	call	0x1216	; 0x1216 <ButtonInit>
	LEDInit();
     b66:	0e 94 ac 07 	call	0xf58	; 0xf58 <LEDInit>
	SSDInit();
     b6a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <SSDInit>
*/

void ApplDataInit(void)
{
	/* Following for initial power on display steps */
	appl.workMode = PWR_ON;
     b6e:	e6 e1       	ldi	r30, 0x16	; 22
     b70:	f1 e0       	ldi	r31, 0x01	; 1
     b72:	14 86       	std	Z+12, r1	; 0x0c
	appl.CurEvent = NULL_EVENT;
     b74:	15 86       	std	Z+13, r1	; 0x0d
	appl.LastEvent = NULL_EVENT;
     b76:	16 86       	std	Z+14, r1	; 0x0e
	appl.second = 0;
     b78:	17 86       	std	Z+15, r1	; 0x0f
	appl.ModeTimer = TIME_SWITCH_TOTAL;
     b7a:	80 ee       	ldi	r24, 0xE0	; 224
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	93 8b       	std	Z+19, r25	; 0x13
     b80:	82 8b       	std	Z+18, r24	; 0x12
	appl.DispCode= START_CHAR;
     b82:	14 8a       	std	Z+20, r1	; 0x14
	appl.PwrOnSteps = DISP_START;
     b84:	15 8a       	std	Z+21, r1	; 0x15
	ButtonInit();
	LEDInit();
	SSDInit();
	ApplDataInit();
	
	rprintf("Main board here!\n" );	
     b86:	8f ec       	ldi	r24, 0xCF	; 207
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	9f 93       	push	r25
     b8c:	8f 93       	push	r24
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	8f 93       	push	r24
     b92:	0e 94 7e 01 	call	0x2fc	; 0x2fc <rprintf1RamRom>
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	08 95       	ret

00000b9e <AppCycleUpdate>:
*
* Returns    : none
*********************************************************************************************************
*/
void AppCycleUpdate(void)
{	
     b9e:	cf 93       	push	r28
	char tempChar;
	static uint16_t cnt;
	cnt++;
     ba0:	80 91 f4 00 	lds	r24, 0x00F4
     ba4:	90 91 f5 00 	lds	r25, 0x00F5
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	90 93 f5 00 	sts	0x00F5, r25
     bae:	80 93 f4 00 	sts	0x00F4, r24
* Returns    : none
*********************************************************************************************************
*/
void AppUpdateTimers(void)
{
	if(++appl.second > TIMER_1_SEC_60HZ) 
     bb2:	80 91 25 01 	lds	r24, 0x0125
     bb6:	8f 5f       	subi	r24, 0xFF	; 255
     bb8:	8d 33       	cpi	r24, 0x3D	; 61
     bba:	18 f4       	brcc	.+6      	; 0xbc2 <AppCycleUpdate+0x24>
     bbc:	80 93 25 01 	sts	0x0125, r24
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <AppCycleUpdate+0x28>
	{
		appl.second = 0;
     bc2:	10 92 25 01 	sts	0x0125, r1
#endif
#endif
		
	}
	
	if(appl.ModeTimer != TIMER_TIMEOUT && appl.ModeTimer != TIMER_INT_DISABLED) appl.ModeTimer--;
     bc6:	80 91 28 01 	lds	r24, 0x0128
     bca:	90 91 29 01 	lds	r25, 0x0129
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	8e 3f       	cpi	r24, 0xFE	; 254
     bd2:	2f ef       	ldi	r18, 0xFF	; 255
     bd4:	92 07       	cpc	r25, r18
     bd6:	20 f4       	brcc	.+8      	; 0xbe0 <AppCycleUpdate+0x42>
     bd8:	90 93 29 01 	sts	0x0129, r25
     bdc:	80 93 28 01 	sts	0x0128, r24
	cnt++;
	
	AppUpdateTimers();

	/* work mode convert according to ModeTimer and push button events */
	switch(appl.workMode)
     be0:	c0 91 22 01 	lds	r28, 0x0122
     be4:	c1 30       	cpi	r28, 0x01	; 1
     be6:	09 f4       	brne	.+2      	; 0xbea <AppCycleUpdate+0x4c>
     be8:	4e c0       	rjmp	.+156    	; 0xc86 <AppCycleUpdate+0xe8>
     bea:	18 f0       	brcs	.+6      	; 0xbf2 <AppCycleUpdate+0x54>
     bec:	c2 30       	cpi	r28, 0x02	; 2
     bee:	81 f1       	breq	.+96     	; 0xc50 <AppCycleUpdate+0xb2>
     bf0:	ef c0       	rjmp	.+478    	; 0xdd0 <AppCycleUpdate+0x232>
	{
		case PWR_ON:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
     bf2:	80 91 28 01 	lds	r24, 0x0128
     bf6:	90 91 29 01 	lds	r25, 0x0129
     bfa:	9c 01       	movw	r18, r24
     bfc:	21 50       	subi	r18, 0x01	; 1
     bfe:	31 09       	sbc	r19, r1
     c00:	2e 3f       	cpi	r18, 0xFE	; 254
     c02:	3f 4f       	sbci	r19, 0xFF	; 255
     c04:	78 f5       	brcc	.+94     	; 0xc64 <AppCycleUpdate+0xc6>
			{
				if(appl.ModeTimer % (TIME_CONTENT_SWITCH - 1) == 0)
     c06:	6b e3       	ldi	r22, 0x3B	; 59
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	0e 94 6f 09 	call	0x12de	; 0x12de <__udivmodhi4>
     c0e:	89 2b       	or	r24, r25
     c10:	39 f4       	brne	.+14     	; 0xc20 <AppCycleUpdate+0x82>
				{
					AppDisplay(++appl.DispCode,PWR_ON);
     c12:	80 91 2a 01 	lds	r24, 0x012A
     c16:	8f 5f       	subi	r24, 0xFF	; 255
     c18:	80 93 2a 01 	sts	0x012A, r24
     c1c:	0e 94 8c 05 	call	0xb18	; 0xb18 <AppDisplay.isra.0>
				}
				
				if(ButtonJMP1HeldEvent() && (ButtonGetHoldTime() == TIME_B_HELD_RST))	/* Press/Held JMP1 after power on will set to factory default */
     c20:	0e 94 9e 07 	call	0xf3c	; 0xf3c <ButtonJMP1HeldEvent>
     c24:	88 23       	and	r24, r24
     c26:	09 f4       	brne	.+2      	; 0xc2a <AppCycleUpdate+0x8c>
     c28:	d3 c0       	rjmp	.+422    	; 0xdd0 <AppCycleUpdate+0x232>
     c2a:	0e 94 54 09 	call	0x12a8	; 0x12a8 <ButtonGetHoldTime>
     c2e:	cc 97       	sbiw	r24, 0x3c	; 60
     c30:	09 f0       	breq	.+2      	; 0xc34 <AppCycleUpdate+0x96>
     c32:	ce c0       	rjmp	.+412    	; 0xdd0 <AppCycleUpdate+0x232>
				{
					/* Following for initial power on display steps */
					appl.ModeTimer = TIME_SWITCH_TOTAL;
     c34:	80 ee       	ldi	r24, 0xE0	; 224
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	90 93 29 01 	sts	0x0129, r25
     c3c:	80 93 28 01 	sts	0x0128, r24
					appl.workMode = PWR_ON;
     c40:	10 92 22 01 	sts	0x0122, r1
					appl.LastEvent = JP1_HELD;
     c44:	84 e0       	ldi	r24, 0x04	; 4
     c46:	80 93 24 01 	sts	0x0124, r24
					appl.DispCode= START_CHAR;
     c4a:	10 92 2a 01 	sts	0x012A, r1
     c4e:	c0 c0       	rjmp	.+384    	; 0xdd0 <AppCycleUpdate+0x232>
				AppDisplay(appl.DispCode,NORMAL);
			}
			break;
			
		case SETTING:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
     c50:	80 91 28 01 	lds	r24, 0x0128
     c54:	90 91 29 01 	lds	r25, 0x0129
     c58:	9c 01       	movw	r18, r24
     c5a:	21 50       	subi	r18, 0x01	; 1
     c5c:	31 09       	sbc	r19, r1
     c5e:	2e 3f       	cpi	r18, 0xFE	; 254
     c60:	3f 4f       	sbci	r19, 0xFF	; 255
     c62:	c0 f1       	brcs	.+112    	; 0xcd4 <AppCycleUpdate+0x136>
					appl.workMode = PWR_ON;
					appl.LastEvent = JP1_HELD;
					appl.DispCode= START_CHAR;
				}
			}
			else if(appl.ModeTimer == TIMER_TIMEOUT)
     c64:	89 2b       	or	r24, r25
     c66:	09 f0       	breq	.+2      	; 0xc6a <AppCycleUpdate+0xcc>
     c68:	b3 c0       	rjmp	.+358    	; 0xdd0 <AppCycleUpdate+0x232>
			{
				appl.ModeTimer = TIMER_INT_DISABLED;	/* Disable count */
     c6a:	8f ef       	ldi	r24, 0xFF	; 255
     c6c:	9f ef       	ldi	r25, 0xFF	; 255
     c6e:	90 93 29 01 	sts	0x0129, r25
     c72:	80 93 28 01 	sts	0x0128, r24
				appl.workMode = NORMAL;					/* convert to NORMAL */
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	80 93 22 01 	sts	0x0122, r24
				appl.LastEvent = NULL_EVENT;			/* update  LastEvent */
     c7c:	10 92 24 01 	sts	0x0124, r1
				appl.DispCode = CURRENT_VALUE;			/* Initial to display material value in setting mode */
     c80:	80 93 2a 01 	sts	0x012A, r24
     c84:	a5 c0       	rjmp	.+330    	; 0xdd0 <AppCycleUpdate+0x232>
			}
			break;
			
		case NORMAL:			
			if(ButtonGetReleased())
     c86:	0e 94 59 09 	call	0x12b2	; 0x12b2 <ButtonGetReleased>
     c8a:	88 23       	and	r24, r24
     c8c:	99 f0       	breq	.+38     	; 0xcb4 <AppCycleUpdate+0x116>
			{
				if(ButtonJMP2ReleasedEvent())
     c8e:	0e 94 a2 07 	call	0xf44	; 0xf44 <ButtonJMP2ReleasedEvent>
     c92:	88 23       	and	r24, r24
     c94:	61 f0       	breq	.+24     	; 0xcae <AppCycleUpdate+0x110>
				{
					appl.ModeTimer = TIME_D_CODE_HELD;	/* Disable count */
     c96:	84 eb       	ldi	r24, 0xB4	; 180
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	90 93 29 01 	sts	0x0129, r25
     c9e:	80 93 28 01 	sts	0x0128, r24
					appl.workMode = SETTING; 			/* convert to SETTING */
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	80 93 22 01 	sts	0x0122, r24
					appl.LastEvent = JP2_PRESS;			/* update  LastEvent */
     ca8:	c0 93 24 01 	sts	0x0124, r28
     cac:	91 c0       	rjmp	.+290    	; 0xdd0 <AppCycleUpdate+0x232>
				}
				else if(ButtonJMP1ReleasedEvent())
     cae:	0e 94 9a 07 	call	0xf34	; 0xf34 <ButtonJMP1ReleasedEvent>
     cb2:	8e c0       	rjmp	.+284    	; 0xdd0 <AppCycleUpdate+0x232>
				{
				}
			}
			else if(ButtonGetHeld())
     cb4:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <ButtonGetHeld>
     cb8:	88 23       	and	r24, r24
     cba:	39 f0       	breq	.+14     	; 0xcca <AppCycleUpdate+0x12c>
			{
				if(ButtonJMP2HeldEvent())//(ButtonJMP2HeldEvent() && (ButtonGetHoldTime()%(TIMER_1_SEC_60HZ/2) == 0))
     cbc:	0e 94 a7 07 	call	0xf4e	; 0xf4e <ButtonJMP2HeldEvent>
     cc0:	81 11       	cpse	r24, r1
     cc2:	5f c0       	rjmp	.+190    	; 0xd82 <AppCycleUpdate+0x1e4>
				{
					appl.ModeTimer = TIME_D_CODE_HELD;	/* Disable count */
					appl.workMode = SETTING; 			/* convert to SETTING */
					appl.LastEvent = JP2_HELD;			/* update  LastEvent */
				}
				else if(ButtonJMP1HeldEvent())
     cc4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <ButtonJMP1HeldEvent>
     cc8:	83 c0       	rjmp	.+262    	; 0xdd0 <AppCycleUpdate+0x232>
				}
			}
			else
			{
				/* Display current material, and display color change according to value compare with user setting */
				AppDisplay(appl.DispCode,NORMAL);
     cca:	80 91 2a 01 	lds	r24, 0x012A
     cce:	0e 94 8c 05 	call	0xb18	; 0xb18 <AppDisplay.isra.0>
     cd2:	7e c0       	rjmp	.+252    	; 0xdd0 <AppCycleUpdate+0x232>
			break;
			
		case SETTING:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
			{
				if(ButtonGetReleased())
     cd4:	0e 94 59 09 	call	0x12b2	; 0x12b2 <ButtonGetReleased>
     cd8:	88 23       	and	r24, r24
     cda:	b1 f1       	breq	.+108    	; 0xd48 <AppCycleUpdate+0x1aa>
				{
					if(ButtonJMP2ReleasedEvent())
     cdc:	0e 94 a2 07 	call	0xf44	; 0xf44 <ButtonJMP2ReleasedEvent>
     ce0:	88 23       	and	r24, r24
     ce2:	b1 f0       	breq	.+44     	; 0xd10 <AppCycleUpdate+0x172>
					{
						if(--appl.DispCode < CURRENT_VALUE)
     ce4:	80 91 2a 01 	lds	r24, 0x012A
     ce8:	81 50       	subi	r24, 0x01	; 1
     cea:	09 f4       	brne	.+2      	; 0xcee <AppCycleUpdate+0x150>
						{
							appl.DispCode = REMOTE_ADDR;
     cec:	87 e0       	ldi	r24, 0x07	; 7
     cee:	80 93 2a 01 	sts	0x012A, r24
						}
						AppDisplay(appl.DispCode,SETTING);
     cf2:	80 91 2a 01 	lds	r24, 0x012A
     cf6:	0e 94 8c 05 	call	0xb18	; 0xb18 <AppDisplay.isra.0>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     cfa:	84 eb       	ldi	r24, 0xB4	; 180
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	90 93 29 01 	sts	0x0129, r25
     d02:	80 93 28 01 	sts	0x0128, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	80 93 22 01 	sts	0x0122, r24
						appl.LastEvent = JP2_PRESS; 		/* update  LastEvent */
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	5e c0       	rjmp	.+188    	; 0xdcc <AppCycleUpdate+0x22e>
					}
					else if(ButtonJMP1ReleasedEvent())
     d10:	0e 94 9a 07 	call	0xf34	; 0xf34 <ButtonJMP1ReleasedEvent>
     d14:	88 23       	and	r24, r24
     d16:	09 f4       	brne	.+2      	; 0xd1a <AppCycleUpdate+0x17c>
     d18:	5b c0       	rjmp	.+182    	; 0xdd0 <AppCycleUpdate+0x232>
					{
						SSDDisplayDec(--appl.FullWarehouse, SSD_0HZ, SSD_GREEN);
     d1a:	80 91 18 01 	lds	r24, 0x0118
     d1e:	90 91 19 01 	lds	r25, 0x0119
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	90 93 19 01 	sts	0x0119, r25
     d28:	80 93 18 01 	sts	0x0118, r24
     d2c:	41 e0       	ldi	r20, 0x01	; 1
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <SSDDisplayDec>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     d34:	84 eb       	ldi	r24, 0xB4	; 180
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	90 93 29 01 	sts	0x0129, r25
     d3c:	80 93 28 01 	sts	0x0128, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     d40:	c0 93 22 01 	sts	0x0122, r28
						appl.LastEvent = JP1_PRESS;			/* update  LastEvent */
     d44:	83 e0       	ldi	r24, 0x03	; 3
     d46:	42 c0       	rjmp	.+132    	; 0xdcc <AppCycleUpdate+0x22e>
					}
				}
				else if(ButtonGetHeld())
     d48:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <ButtonGetHeld>
     d4c:	88 23       	and	r24, r24
     d4e:	09 f4       	brne	.+2      	; 0xd52 <AppCycleUpdate+0x1b4>
     d50:	3f c0       	rjmp	.+126    	; 0xdd0 <AppCycleUpdate+0x232>
				{
					if(ButtonJMP2HeldEvent() && (ButtonGetHoldTime()%(TIMER_1_SEC_60HZ/6) == 0))	/* fast increase */
     d52:	0e 94 a7 07 	call	0xf4e	; 0xf4e <ButtonJMP2HeldEvent>
     d56:	88 23       	and	r24, r24
     d58:	f1 f0       	breq	.+60     	; 0xd96 <AppCycleUpdate+0x1f8>
     d5a:	0e 94 54 09 	call	0x12a8	; 0x12a8 <ButtonGetHoldTime>
     d5e:	6a e0       	ldi	r22, 0x0A	; 10
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	0e 94 6f 09 	call	0x12de	; 0x12de <__udivmodhi4>
     d66:	89 2b       	or	r24, r25
     d68:	b1 f4       	brne	.+44     	; 0xd96 <AppCycleUpdate+0x1f8>
					{
						if(++appl.DispCode > REMOTE_ADDR)
     d6a:	80 91 2a 01 	lds	r24, 0x012A
     d6e:	8f 5f       	subi	r24, 0xFF	; 255
     d70:	88 30       	cpi	r24, 0x08	; 8
     d72:	08 f0       	brcs	.+2      	; 0xd76 <AppCycleUpdate+0x1d8>
						{
							appl.DispCode = CURRENT_VALUE;
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	80 93 2a 01 	sts	0x012A, r24
						}
						AppDisplay(appl.DispCode,SETTING);
     d7a:	80 91 2a 01 	lds	r24, 0x012A
     d7e:	0e 94 8c 05 	call	0xb18	; 0xb18 <AppDisplay.isra.0>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     d82:	84 eb       	ldi	r24, 0xB4	; 180
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	90 93 29 01 	sts	0x0129, r25
     d8a:	80 93 28 01 	sts	0x0128, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	80 93 22 01 	sts	0x0122, r24
     d94:	1b c0       	rjmp	.+54     	; 0xdcc <AppCycleUpdate+0x22e>
						appl.LastEvent = JP2_HELD;			/* update  LastEvent */
					}
					else if(ButtonJMP1HeldEvent())
     d96:	0e 94 9e 07 	call	0xf3c	; 0xf3c <ButtonJMP1HeldEvent>
     d9a:	88 23       	and	r24, r24
     d9c:	c9 f0       	breq	.+50     	; 0xdd0 <AppCycleUpdate+0x232>
					{
						SSDDisplayDec(++appl.FullWarehouse, SSD_0HZ, SSD_AMBER);
     d9e:	80 91 18 01 	lds	r24, 0x0118
     da2:	90 91 19 01 	lds	r25, 0x0119
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	90 93 19 01 	sts	0x0119, r25
     dac:	80 93 18 01 	sts	0x0118, r24
     db0:	42 e0       	ldi	r20, 0x02	; 2
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <SSDDisplayDec>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     db8:	84 eb       	ldi	r24, 0xB4	; 180
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	90 93 29 01 	sts	0x0129, r25
     dc0:	80 93 28 01 	sts	0x0128, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	80 93 22 01 	sts	0x0122, r24
						appl.LastEvent = JP1_HELD;			/* update  LastEvent */
     dca:	84 e0       	ldi	r24, 0x04	; 4
     dcc:	80 93 24 01 	sts	0x0124, r24
			break;						
	}

#if 1		
#if (FOR_DEBUG==1)
	rprintf("wM=%d\n",appl.workMode);
     dd0:	80 91 22 01 	lds	r24, 0x0122
     dd4:	1f 92       	push	r1
     dd6:	8f 93       	push	r24
     dd8:	88 ec       	ldi	r24, 0xC8	; 200
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	9f 93       	push	r25
     dde:	8f 93       	push	r24
     de0:	c1 e0       	ldi	r28, 0x01	; 1
     de2:	cf 93       	push	r28
     de4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <rprintf1RamRom>
	rprintf("mT=%d,0x%x\n",appl.ModeTimer,appl.ModeTimer);
     de8:	80 91 28 01 	lds	r24, 0x0128
     dec:	90 91 29 01 	lds	r25, 0x0129
     df0:	9f 93       	push	r25
     df2:	8f 93       	push	r24
     df4:	9f 93       	push	r25
     df6:	8f 93       	push	r24
     df8:	8c eb       	ldi	r24, 0xBC	; 188
     dfa:	91 e0       	ldi	r25, 0x01	; 1
     dfc:	9f 93       	push	r25
     dfe:	8f 93       	push	r24
     e00:	cf 93       	push	r28
     e02:	0e 94 7e 01 	call	0x2fc	; 0x2fc <rprintf1RamRom>
	rprintf("dC=%d\n\n",appl.DispCode);
     e06:	80 91 2a 01 	lds	r24, 0x012A
     e0a:	1f 92       	push	r1
     e0c:	8f 93       	push	r24
     e0e:	84 eb       	ldi	r24, 0xB4	; 180
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	9f 93       	push	r25
     e14:	8f 93       	push	r24
     e16:	cf 93       	push	r28
     e18:	0e 94 7e 01 	call	0x2fc	; 0x2fc <rprintf1RamRom>
	rprintf("lE=%d\n\n",appl.LastEvent);
     e1c:	80 91 24 01 	lds	r24, 0x0124
     e20:	1f 92       	push	r1
     e22:	8f 93       	push	r24
     e24:	8c ea       	ldi	r24, 0xAC	; 172
     e26:	91 e0       	ldi	r25, 0x01	; 1
     e28:	9f 93       	push	r25
     e2a:	8f 93       	push	r24
     e2c:	cf 93       	push	r28
     e2e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <rprintf1RamRom>
     e32:	8d b7       	in	r24, 0x3d	; 61
     e34:	9e b7       	in	r25, 0x3e	; 62
     e36:	46 96       	adiw	r24, 0x16	; 22
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	9e bf       	out	0x3e, r25	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	8d bf       	out	0x3d, r24	; 61
			appl.PwrOnSteps = DISP_START;
			appl.ModeTimer = TIME_SWITCH_TOTAL;
		}
	}
#endif	
}
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <timerTest>:
	}
	return false;
}

void timerTest(void)
{
     e46:	cf 93       	push	r28
	// print a little intro message so we know things are working
	rprintf("\r\n\n\nWelcome to the timer library test program!\r\n");
     e48:	8b e7       	ldi	r24, 0x7B	; 123
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	9f 93       	push	r25
     e4e:	8f 93       	push	r24
     e50:	c1 e0       	ldi	r28, 0x01	; 1
     e52:	cf 93       	push	r28
     e54:	0e 94 7e 01 	call	0x2fc	; 0x2fc <rprintf1RamRom>

	// initialize the timer system
	timerInit();
     e58:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timerInit>
	// to use the internal timers to produce a calibrated delay,
	// use the timerPause() function.  timerPause takes a 16-bit
	// integer argument in milliseconds

	// example: wait for 1/2 of a second, or 500ms
	rprintf("\r\nTest of timerPause() function\r\n");
     e5c:	89 e5       	ldi	r24, 0x59	; 89
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	9f 93       	push	r25
     e62:	8f 93       	push	r24
     e64:	cf 93       	push	r28
     e66:	0e 94 7e 01 	call	0x2fc	; 0x2fc <rprintf1RamRom>
	rprintf("Here comes a 1/2-second delay...\r\n");
     e6a:	86 e3       	ldi	r24, 0x36	; 54
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	9f 93       	push	r25
     e70:	8f 93       	push	r24
     e72:	cf 93       	push	r28
     e74:	0e 94 7e 01 	call	0x2fc	; 0x2fc <rprintf1RamRom>
	timerPause(500);
     e78:	84 ef       	ldi	r24, 0xF4	; 244
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <timerPause>
	rprintf("Done!\r\n");
     e80:	8e e2       	ldi	r24, 0x2E	; 46
     e82:	91 e0       	ldi	r25, 0x01	; 1
     e84:	9f 93       	push	r25
     e86:	8f 93       	push	r24
     e88:	cf 93       	push	r28
     e8a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <rprintf1RamRom>
	// here's an example of using the timer library to do
	// pulse-width modulation or PWM.  PWM signals can be created on
	// any output compare (OCx) pin.  See your processor's data sheet
	// for more information on which I/O pins have output compare
	// capability.
	rprintf("\r\nTest of timer1 PWM output\r\n");
     e8e:	80 e1       	ldi	r24, 0x10	; 16
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	9f 93       	push	r25
     e94:	8f 93       	push	r24
     e96:	cf 93       	push	r28
     e98:	0e 94 7e 01 	call	0x2fc	; 0x2fc <rprintf1RamRom>

	// set the OC1x port pins to output
	// We need to do this so we can see and use the PWM signal
	// ** these settings are correct for most processors, but not for all
	sbi(DDRD, PD4);
     e9c:	8c 9a       	sbi	0x11, 4	; 17
	sbi(DDRD, PD5);
     e9e:	8d 9a       	sbi	0x11, 5	; 17

	// initialize timer1 for PWM output
	// - you may use 8,9, or 10 bit PWM resolution
	rprintf("Initializing timer1 for PWM\r\n");
     ea0:	82 ef       	ldi	r24, 0xF2	; 242
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	9f 93       	push	r25
     ea6:	8f 93       	push	r24
     ea8:	cf 93       	push	r28
     eaa:	0e 94 7e 01 	call	0x2fc	; 0x2fc <rprintf1RamRom>
	timer1PWMInit(8);
     eae:	88 e0       	ldi	r24, 0x08	; 8
     eb0:	0e 94 f7 02 	call	0x5ee	; 0x5ee <timer1PWMInit>

	// turn on the channel A PWM output of timer1
	// - this signal will come out on the OC1A I/O pin
	rprintf("Turning on timer1 channel A PWM output\r\n");
     eb4:	89 ec       	ldi	r24, 0xC9	; 201
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	9f 93       	push	r25
     eba:	8f 93       	push	r24
     ebc:	cf 93       	push	r28
     ebe:	0e 94 7e 01 	call	0x2fc	; 0x2fc <rprintf1RamRom>
	timer1PWMAOn();
     ec2:	0e 94 0f 03 	call	0x61e	; 0x61e <timer1PWMAOn>

	// set the duty cycle of the channel A output
	// - let's try 25% duty, or 256*25% = 64
	rprintf("Setting duty cycle to 25%%\r\n");
     ec6:	8c ea       	ldi	r24, 0xAC	; 172
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	9f 93       	push	r25
     ecc:	8f 93       	push	r24
     ece:	cf 93       	push	r28
     ed0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <rprintf1RamRom>
	timer1PWMASet(254);
     ed4:	8e ef       	ldi	r24, 0xFE	; 254
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 1d 03 	call	0x63a	; 0x63a <timer1PWMASet>

	// turn on channel B and set it to 75% duty cycle
	rprintf("Turning on channel B too, with 75%% duty\r\n");
     edc:	81 e8       	ldi	r24, 0x81	; 129
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	9f 93       	push	r25
     ee2:	8f 93       	push	r24
     ee4:	cf 93       	push	r28
     ee6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <rprintf1RamRom>
	timer1PWMBOn();
     eea:	0e 94 16 03 	call	0x62c	; 0x62c <timer1PWMBOn>
	timer1PWMBSet(1);
     eee:	8d b7       	in	r24, 0x3d	; 61
     ef0:	9e b7       	in	r25, 0x3e	; 62
     ef2:	4b 96       	adiw	r24, 0x1b	; 27
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	9e bf       	out	0x3e, r25	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	8d bf       	out	0x3d, r24	; 61
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0

	// now turn off all PWM on timer1
	rprintf("Turning off all PWM on timer1\r\n");
	timer1PWMOff();
#endif	
}
     f02:	cf 91       	pop	r28
	timer1PWMASet(254);

	// turn on channel B and set it to 75% duty cycle
	rprintf("Turning on channel B too, with 75%% duty\r\n");
	timer1PWMBOn();
	timer1PWMBSet(1);
     f04:	0c 94 20 03 	jmp	0x640	; 0x640 <timer1PWMBSet>

00000f08 <McuInit>:

void McuInit(void)
{
	// initialize our libraries
	// initialize the UART (serial port)
	uartInit();		/* sei() call in the function */
     f08:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <uartInit>
	// set the baud rate of the UART for our debug/reporting output
	uartSetBaudRate(9600);
     f0c:	60 e8       	ldi	r22, 0x80	; 128
     f0e:	75 e2       	ldi	r23, 0x25	; 37
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <uartSetBaudRate>
	// initialize rprintf system
	rprintfInit(uartSendByte);
     f18:	8e e0       	ldi	r24, 0x0E	; 14
     f1a:	95 e0       	ldi	r25, 0x05	; 5
     f1c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <rprintfInit>
	
	// run the test
	timerTest();
     f20:	0c 94 23 07 	jmp	0xe46	; 0xe46 <timerTest>

00000f24 <ButtonInitEx>:
void ButtonInitEx(void)
{	
	/* 
	Set PC1-PC0 as input, the tow IO with external pull up 10K resistor.
	*/
	DDRC &= ((1<<DDC1) | (1<<DDC0));
     f24:	84 b3       	in	r24, 0x14	; 20
     f26:	83 70       	andi	r24, 0x03	; 3
     f28:	84 bb       	out	0x14, r24	; 20
     f2a:	08 95       	ret

00000f2c <ButtonGetIO_StateEx>:
*/
ButtonDataType ButtonGetIO_StateEx(void)
{
	ButtonDataType io_state;
	
	io_state = (~PINC) & ((1<<PINC1) | (1<<PINC0));	/* Get PC1-PC0 IO state */
     f2c:	83 b3       	in	r24, 0x13	; 19
     f2e:	80 95       	com	r24
	
	return  io_state;
}
     f30:	83 70       	andi	r24, 0x03	; 3
     f32:	08 95       	ret

00000f34 <ButtonJMP1ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP1) 
     f34:	80 91 4d 01 	lds	r24, 0x014D
	{
		return true;
	}
    
    return false;
}
     f38:	81 70       	andi	r24, 0x01	; 1
     f3a:	08 95       	ret

00000f3c <ButtonJMP1HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1HeldEvent(void)
{
	if (button.buttonsHeld.JMP1) 
     f3c:	80 91 4e 01 	lds	r24, 0x014E
	{
		return true;
	}
    
    return false;
}
     f40:	81 70       	andi	r24, 0x01	; 1
     f42:	08 95       	ret

00000f44 <ButtonJMP2ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP2) 
     f44:	80 91 4d 01 	lds	r24, 0x014D
	{
		return true;
	}
    
    return false;
}
     f48:	86 95       	lsr	r24
     f4a:	81 70       	andi	r24, 0x01	; 1
     f4c:	08 95       	ret

00000f4e <ButtonJMP2HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2HeldEvent(void)
{
	if (button.buttonsHeld.JMP2) 
     f4e:	80 91 4e 01 	lds	r24, 0x014E
	{
		return true;
	}
    
    return false;
}
     f52:	86 95       	lsr	r24
     f54:	81 70       	andi	r24, 0x01	; 1
     f56:	08 95       	ret

00000f58 <LEDInit>:
	uint8_t i;
	
	/* 
	Set PB2-PB1 as output to drive to LEDs, default turn off all LEDs
	*/
	DDRB &= ~((1<<DDB2) | (1<<DDB1));
     f58:	87 b3       	in	r24, 0x17	; 23
     f5a:	89 7f       	andi	r24, 0xF9	; 249
     f5c:	87 bb       	out	0x17, r24	; 23
	DDRB |= ((1<<DDB2) | (1<<DDB1));
     f5e:	87 b3       	in	r24, 0x17	; 23
     f60:	86 60       	ori	r24, 0x06	; 6
     f62:	87 bb       	out	0x17, r24	; 23
	PORTB |= ((1<<DDB2) | (1<<DDB1));
     f64:	88 b3       	in	r24, 0x18	; 24
     f66:	86 60       	ori	r24, 0x06	; 6
     f68:	88 bb       	out	0x18, r24	; 24
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
     f6a:	e1 e4       	ldi	r30, 0x41	; 65
     f6c:	f1 e0       	ldi	r31, 0x01	; 1
     f6e:	80 81       	ld	r24, Z
     f70:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
     f72:	84 60       	ori	r24, 0x04	; 4
     f74:	88 60       	ori	r24, 0x08	; 8
     f76:	80 83       	st	Z, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
     f78:	9c e3       	ldi	r25, 0x3C	; 60
     f7a:	91 83       	std	Z+1, r25	; 0x01
	DDRB |= ((1<<DDB2) | (1<<DDB1));
	PORTB |= ((1<<DDB2) | (1<<DDB1));
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
     f7c:	a3 e4       	ldi	r26, 0x43	; 67
     f7e:	b1 e0       	ldi	r27, 0x01	; 1
     f80:	8c 91       	ld	r24, X
     f82:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
     f84:	84 60       	ori	r24, 0x04	; 4
     f86:	88 60       	ori	r24, 0x08	; 8
     f88:	8c 93       	st	X, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
     f8a:	93 83       	std	Z+3, r25	; 0x03
     f8c:	08 95       	ret

00000f8e <LEDCycleUpdate>:
*
*********************************************************************************************************
*/

void LEDCycleUpdate(void)
{
     f8e:	a2 e4       	ldi	r26, 0x42	; 66
     f90:	b1 e0       	ldi	r27, 0x01	; 1
     f92:	40 e0       	ldi	r20, 0x00	; 0
     f94:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
     f96:	ca 01       	movw	r24, r20
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	fc 01       	movw	r30, r24
     f9e:	ef 5b       	subi	r30, 0xBF	; 191
     fa0:	fe 4f       	sbci	r31, 0xFE	; 254
     fa2:	30 81       	ld	r19, Z
     fa4:	37 70       	andi	r19, 0x07	; 7
		ft = LEDs[i].flashTimer;
     fa6:	2c 91       	ld	r18, X
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
     fa8:	34 30       	cpi	r19, 0x04	; 4
     faa:	19 f0       	breq	.+6      	; 0xfb2 <LEDCycleUpdate+0x24>
	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
		ft = LEDs[i].flashTimer;
		
		ft += rate;
     fac:	23 0f       	add	r18, r19
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
     fae:	2d 33       	cpi	r18, 0x3D	; 61
     fb0:	38 f0       	brcs	.+14     	; 0xfc0 <LEDCycleUpdate+0x32>
		{
			ft = 0;
			LEDs[i].led.state = S_OFF;
     fb2:	fc 01       	movw	r30, r24
     fb4:	ef 5b       	subi	r30, 0xBF	; 191
     fb6:	fe 4f       	sbci	r31, 0xFE	; 254
     fb8:	20 81       	ld	r18, Z
     fba:	28 60       	ori	r18, 0x08	; 8
     fbc:	20 83       	st	Z, r18
		ft = LEDs[i].flashTimer;
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
		{
			ft = 0;
     fbe:	20 e0       	ldi	r18, 0x00	; 0
			LEDs[i].led.state = S_OFF;
		}
		LEDs[i].flashTimer = ft;
     fc0:	2c 93       	st	X, r18
		
		if((rate == LED_0HZ) || (ft > (LED_ONE_SEC/2)))
     fc2:	33 23       	and	r19, r19
     fc4:	11 f0       	breq	.+4      	; 0xfca <LEDCycleUpdate+0x3c>
     fc6:	2f 31       	cpi	r18, 0x1F	; 31
     fc8:	30 f0       	brcs	.+12     	; 0xfd6 <LEDCycleUpdate+0x48>
		{
			LEDs[i].led.state = S_ON;
     fca:	fc 01       	movw	r30, r24
     fcc:	ef 5b       	subi	r30, 0xBF	; 191
     fce:	fe 4f       	sbci	r31, 0xFE	; 254
     fd0:	80 81       	ld	r24, Z
     fd2:	87 7f       	andi	r24, 0xF7	; 247
     fd4:	80 83       	st	Z, r24
     fd6:	12 96       	adiw	r26, 0x02	; 2
{
	LED_RATE rate;
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
     fd8:	41 30       	cpi	r20, 0x01	; 1
     fda:	51 05       	cpc	r21, r1
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <LEDCycleUpdate+0x56>
     fde:	41 e0       	ldi	r20, 0x01	; 1
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	d9 cf       	rjmp	.-78     	; 0xf96 <LEDCycleUpdate+0x8>
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */

	if(LEDs[0].led.state == S_OFF)
     fe4:	80 91 41 01 	lds	r24, 0x0141
     fe8:	83 ff       	sbrs	r24, 3
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <LEDCycleUpdate+0x62>
	{
		state |= (1<<DDB1);
     fec:	82 e0       	ldi	r24, 0x02	; 2
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <LEDCycleUpdate+0x64>
*
*********************************************************************************************************
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */
     ff0:	80 e0       	ldi	r24, 0x00	; 0
	if(LEDs[0].led.state == S_OFF)
	{
		state |= (1<<DDB1);
	}
	
	if(LEDs[1].led.state == S_OFF)
     ff2:	90 91 43 01 	lds	r25, 0x0143
     ff6:	93 fd       	sbrc	r25, 3
	{
		state |= (1<<DDB2);
     ff8:	84 60       	ori	r24, 0x04	; 4
	}

	PORTB &= ~((1<<DDB2) | (1<<DDB1));
     ffa:	98 b3       	in	r25, 0x18	; 24
     ffc:	99 7f       	andi	r25, 0xF9	; 249
     ffe:	98 bb       	out	0x18, r25	; 24
	PORTB |= state;
    1000:	98 b3       	in	r25, 0x18	; 24
    1002:	89 2b       	or	r24, r25
    1004:	88 bb       	out	0x18, r24	; 24
    1006:	08 95       	ret

00001008 <main>:
int main(void)
{	
	/*
	Calll all initial function
	*/
	McuInit();
    1008:	0e 94 84 07 	call	0xf08	; 0xf08 <McuInit>
	ApplInit();
    100c:	0e 94 b1 05 	call	0xb62	; 0xb62 <ApplInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 ef       	ldi	r25, 0xF0	; 240
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	f1 f7       	brne	.-4      	; 0x1014 <main+0xc>
	
	while(1)
	{
		_delay_us(16667);
		//_delay_ms(20);
		ButtonCycleUpdate();
    1018:	0e 94 0d 09 	call	0x121a	; 0x121a <ButtonCycleUpdate>
		AppCycleUpdate();
    101c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <AppCycleUpdate>
		LEDCycleUpdate();
    1020:	0e 94 c7 07 	call	0xf8e	; 0xf8e <LEDCycleUpdate>
		SSDCycleUpdate();
    1024:	0e 94 15 08 	call	0x102a	; 0x102a <SSDCycleUpdate>
	}
    1028:	f3 cf       	rjmp	.-26     	; 0x1010 <main+0x8>

0000102a <SSDCycleUpdate>:
*
*********************************************************************************************************
*/

void SSDCycleUpdate(void)
{
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
*/
void SSDShitfOutData(void)
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
    102e:	40 91 47 01 	lds	r20, 0x0147
    1032:	50 91 48 01 	lds	r21, 0x0148
    1036:	60 91 49 01 	lds	r22, 0x0149
    103a:	70 91 4a 01 	lds	r23, 0x014A
    103e:	80 e2       	ldi	r24, 0x20	; 32
	
	for(i = 0; i < 32; i++)
	{
		bitVal = 0;
		if(DispValTemp & 0x80000000)
    1040:	8a 01       	movw	r16, r20
    1042:	9b 01       	movw	r18, r22
		{
			bitVal = 1;
		}
		DispValTemp <<= 1;
    1044:	44 0f       	add	r20, r20
    1046:	55 1f       	adc	r21, r21
    1048:	66 1f       	adc	r22, r22
    104a:	77 1f       	adc	r23, r23

		SSD_CLK_CLR();
    104c:	af 98       	cbi	0x15, 7	; 21
		SSD_DAT_CLR();
    104e:	ae 98       	cbi	0x15, 6	; 21
		if(bitVal)
    1050:	37 fd       	sbrc	r19, 7
		{
			SSD_DAT_SET();
    1052:	ae 9a       	sbi	0x15, 6	; 21
		}
		SSD_CLK_SET();
    1054:	af 9a       	sbi	0x15, 7	; 21
    1056:	81 50       	subi	r24, 0x01	; 1
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
	
	for(i = 0; i < 32; i++)
    1058:	99 f7       	brne	.-26     	; 0x1040 <SSDCycleUpdate+0x16>
void SSDUpdateOnOff(void)
{
	SSD_RATE rate;
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
    105a:	90 91 45 01 	lds	r25, 0x0145
    105e:	97 70       	andi	r25, 0x07	; 7
	ft = SSD.flashTimer;
    1060:	80 91 46 01 	lds	r24, 0x0146
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
    1064:	94 30       	cpi	r25, 0x04	; 4
    1066:	19 f0       	breq	.+6      	; 0x106e <SSDCycleUpdate+0x44>
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
	ft = SSD.flashTimer;
	
	ft += rate;
    1068:	89 0f       	add	r24, r25
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
    106a:	8d 33       	cpi	r24, 0x3D	; 61
    106c:	30 f0       	brcs	.+12     	; 0x107a <SSDCycleUpdate+0x50>
	{
		ft = 0;
		SSD.ssd.state = SSD_OFF;
    106e:	80 91 45 01 	lds	r24, 0x0145
    1072:	8f 7d       	andi	r24, 0xDF	; 223
    1074:	80 93 45 01 	sts	0x0145, r24
	ft = SSD.flashTimer;
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
	{
		ft = 0;
    1078:	80 e0       	ldi	r24, 0x00	; 0
		SSD.ssd.state = SSD_OFF;
	}
	SSD.flashTimer = ft;
    107a:	80 93 46 01 	sts	0x0146, r24
	
	if((rate == SSD_0HZ) || (ft > (SSD_ONE_SEC/2)))
    107e:	99 23       	and	r25, r25
    1080:	11 f0       	breq	.+4      	; 0x1086 <SSDCycleUpdate+0x5c>
    1082:	8f 31       	cpi	r24, 0x1F	; 31
    1084:	28 f0       	brcs	.+10     	; 0x1090 <SSDCycleUpdate+0x66>
	{
		SSD.ssd.state = SSD_ON;
    1086:	80 91 45 01 	lds	r24, 0x0145
    108a:	80 62       	ori	r24, 0x20	; 32
    108c:	80 93 45 01 	sts	0x0145, r24
*
*********************************************************************************************************
*/
void SSDUpdateComPin(void)
{
	if(SSD.ssd.state == SSD_OFF)		/* if ssd is in off state, cut power to green and color */
    1090:	80 91 45 01 	lds	r24, 0x0145
    1094:	85 fd       	sbrc	r24, 5
    1096:	02 c0       	rjmp	.+4      	; 0x109c <SSDCycleUpdate+0x72>
	{
		SSD_RED_CLR();
    1098:	ac 98       	cbi	0x15, 4	; 21
    109a:	03 c0       	rjmp	.+6      	; 0x10a2 <SSDCycleUpdate+0x78>
		SSD_GRN_CLR();
	}
	else
	{
		if(SSD.ssd.color == SSD_RED)		/* dispay red color */
    109c:	88 71       	andi	r24, 0x18	; 24
    109e:	19 f4       	brne	.+6      	; 0x10a6 <SSDCycleUpdate+0x7c>
		{
			SSD_RED_SET();	/* give power to red ssd common pin */
    10a0:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_CLR();	/* cut power to green ssd common pin */
    10a2:	ad 98       	cbi	0x15, 5	; 21
    10a4:	06 c0       	rjmp	.+12     	; 0x10b2 <SSDCycleUpdate+0x88>
		}
		else if(SSD.ssd.color == SSD_GREEN) /* dispay green color */
    10a6:	88 30       	cpi	r24, 0x08	; 8
    10a8:	11 f4       	brne	.+4      	; 0x10ae <SSDCycleUpdate+0x84>
		{
			SSD_RED_CLR();
    10aa:	ac 98       	cbi	0x15, 4	; 21
    10ac:	01 c0       	rjmp	.+2      	; 0x10b0 <SSDCycleUpdate+0x86>
			SSD_GRN_SET();
		}
		else								/* dispay amber color */
		{
			SSD_RED_SET();
    10ae:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_SET();
    10b0:	ad 9a       	sbi	0x15, 5	; 21
void SSDCycleUpdate(void)
{
	SSDShitfOutData();
	SSDUpdateOnOff();
	SSDUpdateComPin();
}
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	08 95       	ret

000010b8 <SSDDisplayDec>:
* Notes      :none
*
*********************************************************************************************************
*/
void SSDDisplayDec(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
    10b8:	0f 93       	push	r16
    10ba:	1f 93       	push	r17
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	8c 01       	movw	r16, r24
    10c2:	36 2f       	mov	r19, r22
uint32_t SSDHex2Dec(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = hexValue/1000;
    10c4:	68 ee       	ldi	r22, 0xE8	; 232
    10c6:	73 e0       	ldi	r23, 0x03	; 3
    10c8:	0e 94 6f 09 	call	0x12de	; 0x12de <__udivmodhi4>
    10cc:	c6 2f       	mov	r28, r22
	dataSTR.hundred   = hexValue%1000/100;
    10ce:	64 e6       	ldi	r22, 0x64	; 100
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	0e 94 6f 09 	call	0x12de	; 0x12de <__udivmodhi4>
    10d6:	d6 2f       	mov	r29, r22
	dataSTR.tens      = hexValue%1000%100/10;
    10d8:	6a e0       	ldi	r22, 0x0A	; 10
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	0e 94 6f 09 	call	0x12de	; 0x12de <__udivmodhi4>
    10e0:	56 2f       	mov	r21, r22
{
	SSD_DISP_T ValueCopy;
	
	SSD.DispVal.value = SSDHex2Dec(DispData);
	ValueCopy.value = SSD.DispVal.value;
	SSD.ssd.rate = rate;
    10e2:	37 70       	andi	r19, 0x07	; 7
    10e4:	60 91 45 01 	lds	r22, 0x0145
    10e8:	60 7e       	andi	r22, 0xE0	; 224
	SSD.ssd.color = color;
    10ea:	43 70       	andi	r20, 0x03	; 3
    10ec:	94 2f       	mov	r25, r20
    10ee:	99 0f       	add	r25, r25
    10f0:	99 0f       	add	r25, r25
    10f2:	99 0f       	add	r25, r25
    10f4:	46 2f       	mov	r20, r22
    10f6:	43 2b       	or	r20, r19
    10f8:	49 2b       	or	r20, r25
    10fa:	40 93 45 01 	sts	0x0145, r20
	
	/* Set display null for all 4 seven segment displays */
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
    10fe:	e1 ef       	ldi	r30, 0xF1	; 241
    1100:	f1 e0       	ldi	r31, 0x01	; 1
    1102:	94 91       	lpm	r25, Z
    1104:	90 93 4a 01 	sts	0x014A, r25
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
    1108:	94 91       	lpm	r25, Z
    110a:	90 93 49 01 	sts	0x0149, r25
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
    110e:	94 91       	lpm	r25, Z
    1110:	90 93 48 01 	sts	0x0148, r25
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
    1114:	e4 91       	lpm	r30, Z
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0

	/* Set display remove zero before number */
	if(DispData > 1000)
    111a:	09 3e       	cpi	r16, 0xE9	; 233
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	18 07       	cpc	r17, r24
    1120:	78 f0       	brcs	.+30     	; 0x1140 <SSDDisplayDec+0x88>
	{
		SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[ValueCopy.thousands]);
    1122:	ec 2f       	mov	r30, r28
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	ef 51       	subi	r30, 0x1F	; 31
    1128:	fe 4f       	sbci	r31, 0xFE	; 254
    112a:	84 91       	lpm	r24, Z
    112c:	80 93 4a 01 	sts	0x014A, r24
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
    1130:	ed 2f       	mov	r30, r29
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	ef 51       	subi	r30, 0x1F	; 31
    1136:	fe 4f       	sbci	r31, 0xFE	; 254
    1138:	e4 91       	lpm	r30, Z
    113a:	e0 93 49 01 	sts	0x0149, r30
    113e:	0e c0       	rjmp	.+28     	; 0x115c <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 100)
    1140:	05 36       	cpi	r16, 0x65	; 101
    1142:	11 05       	cpc	r17, r1
    1144:	40 f0       	brcs	.+16     	; 0x1156 <SSDDisplayDec+0x9e>
	{
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
    1146:	ed 2f       	mov	r30, r29
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	ef 51       	subi	r30, 0x1F	; 31
    114c:	fe 4f       	sbci	r31, 0xFE	; 254
    114e:	84 91       	lpm	r24, Z
    1150:	80 93 49 01 	sts	0x0149, r24
    1154:	03 c0       	rjmp	.+6      	; 0x115c <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 10)
    1156:	0b 30       	cpi	r16, 0x0B	; 11
    1158:	11 05       	cpc	r17, r1
    115a:	38 f0       	brcs	.+14     	; 0x116a <SSDDisplayDec+0xb2>
	{
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
    115c:	e5 2f       	mov	r30, r21
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	ef 51       	subi	r30, 0x1F	; 31
    1162:	fe 4f       	sbci	r31, 0xFE	; 254
    1164:	e4 91       	lpm	r30, Z
    1166:	e0 93 48 01 	sts	0x0148, r30
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else
	{
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
    116a:	f9 01       	movw	r30, r18
    116c:	ef 51       	subi	r30, 0x1F	; 31
    116e:	fe 4f       	sbci	r31, 0xFE	; 254
    1170:	e4 91       	lpm	r30, Z
    1172:	e0 93 47 01 	sts	0x0147, r30
	}
}
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	1f 91       	pop	r17
    117c:	0f 91       	pop	r16
    117e:	08 95       	ret

00001180 <SSDDisplayHex>:
uint32_t SSDHex2Hex(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = (hexValue >> 12) & 0x000f;
    1180:	39 2f       	mov	r19, r25
    1182:	32 95       	swap	r19
    1184:	3f 70       	andi	r19, 0x0F	; 15
	dataSTR.hundred   = (hexValue >> 8) & 0x000f;
    1186:	29 2f       	mov	r18, r25
    1188:	2f 70       	andi	r18, 0x0F	; 15
	dataSTR.tens      = (hexValue >> 4) & 0x000f;
    118a:	fc 01       	movw	r30, r24
    118c:	94 e0       	ldi	r25, 0x04	; 4
    118e:	f6 95       	lsr	r31
    1190:	e7 95       	ror	r30
    1192:	9a 95       	dec	r25
    1194:	e1 f7       	brne	.-8      	; 0x118e <SSDDisplayHex+0xe>
    1196:	9e 2f       	mov	r25, r30
    1198:	9f 70       	andi	r25, 0x0F	; 15
	dataSTR.units     = (hexValue >> 0) & 0x000f;
    119a:	8f 70       	andi	r24, 0x0F	; 15
*
*********************************************************************************************************
*/
void SSDDisplayHex(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
	SSD.DispVal.value = SSDHex2Hex(DispData);
    119c:	a5 e4       	ldi	r26, 0x45	; 69
    119e:	b1 e0       	ldi	r27, 0x01	; 1
	SSD.ssd.rate = rate;
    11a0:	67 70       	andi	r22, 0x07	; 7
    11a2:	7c 91       	ld	r23, X
    11a4:	70 7e       	andi	r23, 0xE0	; 224
	SSD.ssd.color = color;
    11a6:	43 70       	andi	r20, 0x03	; 3
    11a8:	54 2f       	mov	r21, r20
    11aa:	55 0f       	add	r21, r21
    11ac:	55 0f       	add	r21, r21
    11ae:	55 0f       	add	r21, r21
    11b0:	47 2f       	mov	r20, r23
    11b2:	46 2b       	or	r20, r22
    11b4:	45 2b       	or	r20, r21
    11b6:	4c 93       	st	X, r20
	
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD.DispVal.thousands]);
    11b8:	e3 2f       	mov	r30, r19
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	ef 51       	subi	r30, 0x1F	; 31
    11be:	fe 4f       	sbci	r31, 0xFE	; 254
    11c0:	34 91       	lpm	r19, Z
    11c2:	15 96       	adiw	r26, 0x05	; 5
    11c4:	3c 93       	st	X, r19
    11c6:	15 97       	sbiw	r26, 0x05	; 5
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD.DispVal.hundred]);
    11c8:	e2 2f       	mov	r30, r18
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	ef 51       	subi	r30, 0x1F	; 31
    11ce:	fe 4f       	sbci	r31, 0xFE	; 254
    11d0:	24 91       	lpm	r18, Z
    11d2:	14 96       	adiw	r26, 0x04	; 4
    11d4:	2c 93       	st	X, r18
    11d6:	14 97       	sbiw	r26, 0x04	; 4
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD.DispVal.tens]);
    11d8:	e9 2f       	mov	r30, r25
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	ef 51       	subi	r30, 0x1F	; 31
    11de:	fe 4f       	sbci	r31, 0xFE	; 254
    11e0:	e4 91       	lpm	r30, Z
    11e2:	13 96       	adiw	r26, 0x03	; 3
    11e4:	ec 93       	st	X, r30
    11e6:	13 97       	sbiw	r26, 0x03	; 3
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD.DispVal.units]);
    11e8:	e8 2f       	mov	r30, r24
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	ef 51       	subi	r30, 0x1F	; 31
    11ee:	fe 4f       	sbci	r31, 0xFE	; 254
    11f0:	e4 91       	lpm	r30, Z
    11f2:	12 96       	adiw	r26, 0x02	; 2
    11f4:	ec 93       	st	X, r30
    11f6:	08 95       	ret

000011f8 <SSDInit>:
void SSDInit(void)
{	
	/* 
	Set PB7-PB4 as output to drive seven segment display, default display turn off
	*/
	DDRC &= ~((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
    11f8:	84 b3       	in	r24, 0x14	; 20
    11fa:	8f 70       	andi	r24, 0x0F	; 15
    11fc:	84 bb       	out	0x14, r24	; 20
	DDRC |= ((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
    11fe:	84 b3       	in	r24, 0x14	; 20
    1200:	80 6f       	ori	r24, 0xF0	; 240
    1202:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~((1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4));
    1204:	85 b3       	in	r24, 0x15	; 21
    1206:	8f 70       	andi	r24, 0x0F	; 15
    1208:	85 bb       	out	0x15, r24	; 21

	SSDDisplayHex(0, SSD_R_OFF, SSD_RED);	/* Initial turn off all SSDs */
    120a:	40 e0       	ldi	r20, 0x00	; 0
    120c:	64 e0       	ldi	r22, 0x04	; 4
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <SSDDisplayHex>

00001216 <ButtonInit>:
* Returns    : none
*********************************************************************************************************
*/
void ButtonInit(void)
{
	ButtonInitEx();
    1216:	0c 94 92 07 	jmp	0xf24	; 0xf24 <ButtonInitEx>

0000121a <ButtonCycleUpdate>:
* Notes      : None
*
*/
ButtonDataType ButtonGetIO_State(void)
{
	return  ButtonGetIO_StateEx();
    121a:	0e 94 96 07 	call	0xf2c	; 0xf2c <ButtonGetIO_StateEx>
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
    121e:	90 91 4b 01 	lds	r25, 0x014B
    1222:	89 2b       	or	r24, r25
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
    1224:	10 92 4b 01 	sts	0x014B, r1
	b = button.buttonsLastCycle.bVal;
    1228:	90 91 4c 01 	lds	r25, 0x014C
	holdTime = button.buttonHoldTime;
    122c:	20 91 51 01 	lds	r18, 0x0151
    1230:	30 91 52 01 	lds	r19, 0x0152
	
	if (button.buttonsReleased.bVal != 0) {		
    1234:	40 91 4d 01 	lds	r20, 0x014D
    1238:	44 23       	and	r20, r20
    123a:	19 f0       	breq	.+6      	; 0x1242 <ButtonCycleUpdate+0x28>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
    123c:	40 93 4f 01 	sts	0x014F, r20
    1240:	05 c0       	rjmp	.+10     	; 0x124c <ButtonCycleUpdate+0x32>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
    1242:	2d 33       	cpi	r18, 0x3D	; 61
    1244:	31 05       	cpc	r19, r1
    1246:	10 f0       	brcs	.+4      	; 0x124c <ButtonCycleUpdate+0x32>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
    1248:	10 92 4f 01 	sts	0x014F, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
    124c:	10 92 4d 01 	sts	0x014D, r1
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
    1250:	10 92 50 01 	sts	0x0150, r1
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
    1254:	89 13       	cpse	r24, r25
    1256:	0f c0       	rjmp	.+30     	; 0x1276 <ButtonCycleUpdate+0x5c>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
    1258:	2f 5f       	subi	r18, 0xFF	; 255
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
    125c:	24 32       	cpi	r18, 0x24	; 36
    125e:	31 05       	cpc	r19, r1
    1260:	18 f4       	brcc	.+6      	; 0x1268 <ButtonCycleUpdate+0x4e>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
    1262:	10 92 4e 01 	sts	0x014E, r1
    1266:	02 c0       	rjmp	.+4      	; 0x126c <ButtonCycleUpdate+0x52>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
    1268:	80 93 4e 01 	sts	0x014E, r24
		}	
		button.buttonHoldTime = holdTime;
    126c:	30 93 52 01 	sts	0x0152, r19
    1270:	20 93 51 01 	sts	0x0151, r18
    1274:	08 95       	ret
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
    1276:	80 93 4c 01 	sts	0x014C, r24
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
    127a:	80 95       	com	r24
    127c:	89 23       	and	r24, r25
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
    127e:	90 91 4e 01 	lds	r25, 0x014E
    1282:	98 23       	and	r25, r24
    1284:	81 f4       	brne	.+32     	; 0x12a6 <ButtonCycleUpdate+0x8c>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
    1286:	10 92 52 01 	sts	0x0152, r1
    128a:	10 92 51 01 	sts	0x0151, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
    128e:	23 50       	subi	r18, 0x03	; 3
    1290:	31 09       	sbc	r19, r1
    1292:	20 32       	cpi	r18, 0x20	; 32
    1294:	31 05       	cpc	r19, r1
    1296:	38 f4       	brcc	.+14     	; 0x12a6 <ButtonCycleUpdate+0x8c>
				button.buttonsReleased.bVal = buttons;	
    1298:	80 93 4d 01 	sts	0x014D, r24
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
    129c:	90 91 4f 01 	lds	r25, 0x014F
    12a0:	89 23       	and	r24, r25
    12a2:	80 93 50 01 	sts	0x0150, r24
    12a6:	08 95       	ret

000012a8 <ButtonGetHoldTime>:
*/

uint16_t ButtonGetHoldTime(void)
{
	return button.buttonHoldTime;
}
    12a8:	80 91 51 01 	lds	r24, 0x0151
    12ac:	90 91 52 01 	lds	r25, 0x0152
    12b0:	08 95       	ret

000012b2 <ButtonGetReleased>:
*/

ButtonDataType ButtonGetReleased(void)
{
	return button.buttonsReleased.bVal;
}
    12b2:	80 91 4d 01 	lds	r24, 0x014D
    12b6:	08 95       	ret

000012b8 <ButtonGetHeld>:
*/

ButtonDataType ButtonGetHeld (void)
{
	return button.buttonsHeld.bVal;
}
    12b8:	80 91 4e 01 	lds	r24, 0x014E
    12bc:	08 95       	ret

000012be <__mulsi3>:
    12be:	db 01       	movw	r26, r22
    12c0:	8f 93       	push	r24
    12c2:	9f 93       	push	r25
    12c4:	0e 94 ab 09 	call	0x1356	; 0x1356 <__muluhisi3>
    12c8:	bf 91       	pop	r27
    12ca:	af 91       	pop	r26
    12cc:	a2 9f       	mul	r26, r18
    12ce:	80 0d       	add	r24, r0
    12d0:	91 1d       	adc	r25, r1
    12d2:	a3 9f       	mul	r26, r19
    12d4:	90 0d       	add	r25, r0
    12d6:	b2 9f       	mul	r27, r18
    12d8:	90 0d       	add	r25, r0
    12da:	11 24       	eor	r1, r1
    12dc:	08 95       	ret

000012de <__udivmodhi4>:
    12de:	aa 1b       	sub	r26, r26
    12e0:	bb 1b       	sub	r27, r27
    12e2:	51 e1       	ldi	r21, 0x11	; 17
    12e4:	07 c0       	rjmp	.+14     	; 0x12f4 <__udivmodhi4_ep>

000012e6 <__udivmodhi4_loop>:
    12e6:	aa 1f       	adc	r26, r26
    12e8:	bb 1f       	adc	r27, r27
    12ea:	a6 17       	cp	r26, r22
    12ec:	b7 07       	cpc	r27, r23
    12ee:	10 f0       	brcs	.+4      	; 0x12f4 <__udivmodhi4_ep>
    12f0:	a6 1b       	sub	r26, r22
    12f2:	b7 0b       	sbc	r27, r23

000012f4 <__udivmodhi4_ep>:
    12f4:	88 1f       	adc	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	5a 95       	dec	r21
    12fa:	a9 f7       	brne	.-22     	; 0x12e6 <__udivmodhi4_loop>
    12fc:	80 95       	com	r24
    12fe:	90 95       	com	r25
    1300:	bc 01       	movw	r22, r24
    1302:	cd 01       	movw	r24, r26
    1304:	08 95       	ret

00001306 <__udivmodsi4>:
    1306:	a1 e2       	ldi	r26, 0x21	; 33
    1308:	1a 2e       	mov	r1, r26
    130a:	aa 1b       	sub	r26, r26
    130c:	bb 1b       	sub	r27, r27
    130e:	fd 01       	movw	r30, r26
    1310:	0d c0       	rjmp	.+26     	; 0x132c <__udivmodsi4_ep>

00001312 <__udivmodsi4_loop>:
    1312:	aa 1f       	adc	r26, r26
    1314:	bb 1f       	adc	r27, r27
    1316:	ee 1f       	adc	r30, r30
    1318:	ff 1f       	adc	r31, r31
    131a:	a2 17       	cp	r26, r18
    131c:	b3 07       	cpc	r27, r19
    131e:	e4 07       	cpc	r30, r20
    1320:	f5 07       	cpc	r31, r21
    1322:	20 f0       	brcs	.+8      	; 0x132c <__udivmodsi4_ep>
    1324:	a2 1b       	sub	r26, r18
    1326:	b3 0b       	sbc	r27, r19
    1328:	e4 0b       	sbc	r30, r20
    132a:	f5 0b       	sbc	r31, r21

0000132c <__udivmodsi4_ep>:
    132c:	66 1f       	adc	r22, r22
    132e:	77 1f       	adc	r23, r23
    1330:	88 1f       	adc	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	1a 94       	dec	r1
    1336:	69 f7       	brne	.-38     	; 0x1312 <__udivmodsi4_loop>
    1338:	60 95       	com	r22
    133a:	70 95       	com	r23
    133c:	80 95       	com	r24
    133e:	90 95       	com	r25
    1340:	9b 01       	movw	r18, r22
    1342:	ac 01       	movw	r20, r24
    1344:	bd 01       	movw	r22, r26
    1346:	cf 01       	movw	r24, r30
    1348:	08 95       	ret

0000134a <__tablejump2__>:
    134a:	ee 0f       	add	r30, r30
    134c:	ff 1f       	adc	r31, r31
    134e:	05 90       	lpm	r0, Z+
    1350:	f4 91       	lpm	r31, Z
    1352:	e0 2d       	mov	r30, r0
    1354:	09 94       	ijmp

00001356 <__muluhisi3>:
    1356:	0e 94 b6 09 	call	0x136c	; 0x136c <__umulhisi3>
    135a:	a5 9f       	mul	r26, r21
    135c:	90 0d       	add	r25, r0
    135e:	b4 9f       	mul	r27, r20
    1360:	90 0d       	add	r25, r0
    1362:	a4 9f       	mul	r26, r20
    1364:	80 0d       	add	r24, r0
    1366:	91 1d       	adc	r25, r1
    1368:	11 24       	eor	r1, r1
    136a:	08 95       	ret

0000136c <__umulhisi3>:
    136c:	a2 9f       	mul	r26, r18
    136e:	b0 01       	movw	r22, r0
    1370:	b3 9f       	mul	r27, r19
    1372:	c0 01       	movw	r24, r0
    1374:	a3 9f       	mul	r26, r19
    1376:	70 0d       	add	r23, r0
    1378:	81 1d       	adc	r24, r1
    137a:	11 24       	eor	r1, r1
    137c:	91 1d       	adc	r25, r1
    137e:	b2 9f       	mul	r27, r18
    1380:	70 0d       	add	r23, r0
    1382:	81 1d       	adc	r24, r1
    1384:	11 24       	eor	r1, r1
    1386:	91 1d       	adc	r25, r1
    1388:	08 95       	ret

0000138a <_exit>:
    138a:	f8 94       	cli

0000138c <__stop_program>:
    138c:	ff cf       	rjmp	.-2      	; 0x138c <__stop_program>
