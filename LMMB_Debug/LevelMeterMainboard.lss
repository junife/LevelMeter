
LevelMeterMainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000966  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a4  00800060  00800060  00000966  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000966  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000998  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d95  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c05  00000000  00000000  00002a29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ceb  00000000  00000000  0000362e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006ec  00000000  00000000  0000431c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000978  00000000  00000000  00004a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000165c  00000000  00000000  00005380  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  000069dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 43 02 	jmp	0x486	; 0x486 <__vector_11>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 08 02 	jmp	0x410	; 0x410 <__vector_13>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	30 31       	cpi	r19, 0x10	; 16
  56:	32 33       	cpi	r19, 0x32	; 50
  58:	34 35       	cpi	r19, 0x54	; 84
  5a:	36 37       	cpi	r19, 0x76	; 118
  5c:	38 39       	cpi	r19, 0x98	; 152
  5e:	41 42       	sbci	r20, 0x21	; 33
  60:	43 44       	sbci	r20, 0x43	; 67
  62:	45 46       	sbci	r20, 0x65	; 101
	...

00000065 <__c.2045>:
  65:	54 79 70 65 3d 25 63 0a 00                          Type=%c..

0000006e <__c.2043>:
  6e:	48 2d 4a 4d 50 31 0a 00                             H-JMP1..

00000076 <__c.2041>:
  76:	48 2d 4a 4d 50 32 0a 00                             H-JMP2..

0000007e <__c.2039>:
  7e:	4a 4d 50 31 0a 00                                   JMP1..

00000084 <__c.2037>:
  84:	4a 4d 50 32 0a 00                                   JMP2..

0000008a <__c.2031>:
  8a:	52 46 20 72 65 6d 6f 74 65 20 73 74 61 72 74 21     RF remote start!
  9a:	0a 00                                               ..

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf e5       	ldi	r28, 0x5F	; 95
  a2:	d4 e0       	ldi	r29, 0x04	; 4
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_clear_bss>:
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	a0 e6       	ldi	r26, 0x60	; 96
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a4 30       	cpi	r26, 0x04	; 4
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 d7 03 	call	0x7ae	; 0x7ae <main>
  bc:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
  c4:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
  c6:	8f b7       	in	r24, 0x3f	; 63
  c8:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
  ca:	71 83       	std	Z+1, r23	; 0x01
  cc:	60 83       	st	Z, r22
	buffer->size = size;
  ce:	53 83       	std	Z+3, r21	; 0x03
  d0:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
  d2:	17 82       	std	Z+7, r1	; 0x07
  d4:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
  d6:	15 82       	std	Z+5, r1	; 0x05
  d8:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
  da:	8f bf       	out	0x3f, r24	; 63
  dc:	08 95       	ret

000000de <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
  de:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
  e0:	9f b7       	in	r25, 0x3f	; 63
  e2:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
  e4:	44 81       	ldd	r20, Z+4	; 0x04
  e6:	55 81       	ldd	r21, Z+5	; 0x05
  e8:	41 15       	cp	r20, r1
  ea:	51 05       	cpc	r21, r1
  ec:	c9 f0       	breq	.+50     	; 0x120 <bufferGetFromFront+0x42>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
  ee:	26 81       	ldd	r18, Z+6	; 0x06
  f0:	37 81       	ldd	r19, Z+7	; 0x07
  f2:	a0 81       	ld	r26, Z
  f4:	b1 81       	ldd	r27, Z+1	; 0x01
  f6:	a2 0f       	add	r26, r18
  f8:	b3 1f       	adc	r27, r19
  fa:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
 100:	37 83       	std	Z+7, r19	; 0x07
 102:	26 83       	std	Z+6, r18	; 0x06
		if(buffer->dataindex >= buffer->size)
 104:	62 81       	ldd	r22, Z+2	; 0x02
 106:	73 81       	ldd	r23, Z+3	; 0x03
 108:	26 17       	cp	r18, r22
 10a:	37 07       	cpc	r19, r23
 10c:	20 f0       	brcs	.+8      	; 0x116 <bufferGetFromFront+0x38>
		{
			buffer->dataindex -= buffer->size;
 10e:	26 1b       	sub	r18, r22
 110:	37 0b       	sbc	r19, r23
 112:	37 83       	std	Z+7, r19	; 0x07
 114:	26 83       	std	Z+6, r18	; 0x06
		}
		buffer->datalength--;
 116:	41 50       	subi	r20, 0x01	; 1
 118:	51 09       	sbc	r21, r1
 11a:	55 83       	std	Z+5, r21	; 0x05
 11c:	44 83       	std	Z+4, r20	; 0x04
 11e:	01 c0       	rjmp	.+2      	; 0x122 <bufferGetFromFront+0x44>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
 120:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
 122:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
 124:	08 95       	ret

00000126 <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	fc 01       	movw	r30, r24
 12c:	d6 2f       	mov	r29, r22
	// begin critical section
	CRITICAL_SECTION_START;
 12e:	cf b7       	in	r28, 0x3f	; 63
 130:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
 132:	44 81       	ldd	r20, Z+4	; 0x04
 134:	55 81       	ldd	r21, Z+5	; 0x05
 136:	62 81       	ldd	r22, Z+2	; 0x02
 138:	73 81       	ldd	r23, Z+3	; 0x03
 13a:	46 17       	cp	r20, r22
 13c:	57 07       	cpc	r21, r23
 13e:	98 f4       	brcc	.+38     	; 0x166 <bufferAddToEnd+0x40>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
 140:	86 81       	ldd	r24, Z+6	; 0x06
 142:	97 81       	ldd	r25, Z+7	; 0x07
 144:	84 0f       	add	r24, r20
 146:	95 1f       	adc	r25, r21
 148:	0e 94 32 04 	call	0x864	; 0x864 <__udivmodhi4>
 14c:	a0 81       	ld	r26, Z
 14e:	b1 81       	ldd	r27, Z+1	; 0x01
 150:	a8 0f       	add	r26, r24
 152:	b9 1f       	adc	r27, r25
 154:	dc 93       	st	X, r29
		// increment the length
		buffer->datalength++;
 156:	84 81       	ldd	r24, Z+4	; 0x04
 158:	95 81       	ldd	r25, Z+5	; 0x05
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	95 83       	std	Z+5, r25	; 0x05
 15e:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
 160:	cf bf       	out	0x3f, r28	; 63
		// return success
		return -1;
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	02 c0       	rjmp	.+4      	; 0x16a <bufferAddToEnd+0x44>
	}
	// end critical section
	CRITICAL_SECTION_END;
 166:	cf bf       	out	0x3f, r28	; 63
	// return failure
	return 0;
 168:	80 e0       	ldi	r24, 0x00	; 0
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
 170:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
 172:	4f b7       	in	r20, 0x3f	; 63
 174:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
 176:	82 81       	ldd	r24, Z+2	; 0x02
 178:	93 81       	ldd	r25, Z+3	; 0x03
 17a:	24 81       	ldd	r18, Z+4	; 0x04
 17c:	35 81       	ldd	r19, Z+5	; 0x05
	// end critical section
	CRITICAL_SECTION_END;
 17e:	4f bf       	out	0x3f, r20	; 63
	return bytesleft;
}
 180:	82 1b       	sub	r24, r18
 182:	93 0b       	sbc	r25, r19
 184:	08 95       	ret

00000186 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
 186:	90 93 61 00 	sts	0x0061, r25
 18a:	80 93 60 00 	sts	0x0060, r24
 18e:	08 95       	ret

00000190 <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
 190:	cf 93       	push	r28
 192:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
 194:	8a 30       	cpi	r24, 0x0A	; 10
 196:	31 f4       	brne	.+12     	; 0x1a4 <rprintfChar+0x14>
		rputchar('\r');
 198:	e0 91 60 00 	lds	r30, 0x0060
 19c:	f0 91 61 00 	lds	r31, 0x0061
 1a0:	8d e0       	ldi	r24, 0x0D	; 13
 1a2:	09 95       	icall
	// send character
	rputchar(c);
 1a4:	e0 91 60 00 	lds	r30, 0x0060
 1a8:	f0 91 61 00 	lds	r31, 0x0061
 1ac:	8c 2f       	mov	r24, r28
 1ae:	09 95       	icall
}
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
 1b4:	8f 70       	andi	r24, 0x0F	; 15
 1b6:	e8 2f       	mov	r30, r24
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	ec 5a       	subi	r30, 0xAC	; 172
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	84 91       	lpm	r24, Z
 1c0:	0e 94 c8 00 	call	0x190	; 0x190 <rprintfChar>
 1c4:	08 95       	ret

000001c6 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
 1c6:	2f 92       	push	r2
 1c8:	3f 92       	push	r3
 1ca:	4f 92       	push	r4
 1cc:	5f 92       	push	r5
 1ce:	6f 92       	push	r6
 1d0:	7f 92       	push	r7
 1d2:	8f 92       	push	r8
 1d4:	9f 92       	push	r9
 1d6:	af 92       	push	r10
 1d8:	bf 92       	push	r11
 1da:	cf 92       	push	r12
 1dc:	df 92       	push	r13
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	7d 88       	ldd	r7, Y+21	; 0x15
 1f0:	ce 88       	ldd	r12, Y+22	; 0x16
 1f2:	df 88       	ldd	r13, Y+23	; 0x17
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
 1f4:	4e 01       	movw	r8, r28
 1f6:	28 e1       	ldi	r18, 0x18	; 24
 1f8:	82 0e       	add	r8, r18
 1fa:	91 1c       	adc	r9, r1

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 1fc:	51 2c       	mov	r5, r1
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 1fe:	61 2c       	mov	r6, r1
 200:	41 2c       	mov	r4, r1
 202:	06 c0       	rjmp	.+12     	; 0x210 <rprintf1RamRom+0x4a>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
 204:	88 23       	and	r24, r24
 206:	09 f4       	brne	.+2      	; 0x20a <rprintf1RamRom+0x44>
 208:	8d c0       	rjmp	.+282    	; 0x324 <rprintf1RamRom+0x15e>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
 20a:	0e 94 c8 00 	call	0x190	; 0x190 <rprintfChar>
 20e:	68 01       	movw	r12, r16
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 210:	77 20       	and	r7, r7
 212:	41 f0       	breq	.+16     	; 0x224 <rprintf1RamRom+0x5e>
 214:	86 01       	movw	r16, r12
 216:	0f 5f       	subi	r16, 0xFF	; 255
 218:	1f 4f       	sbci	r17, 0xFF	; 255
 21a:	f6 01       	movw	r30, r12
 21c:	84 91       	lpm	r24, Z
 21e:	85 32       	cpi	r24, 0x25	; 37
 220:	89 f7       	brne	.-30     	; 0x204 <rprintf1RamRom+0x3e>
 222:	08 c0       	rjmp	.+16     	; 0x234 <rprintf1RamRom+0x6e>
 224:	f6 01       	movw	r30, r12
 226:	80 81       	ld	r24, Z
 228:	85 32       	cpi	r24, 0x25	; 37
 22a:	51 f0       	breq	.+20     	; 0x240 <rprintf1RamRom+0x7a>
 22c:	86 01       	movw	r16, r12
 22e:	0f 5f       	subi	r16, 0xFF	; 255
 230:	1f 4f       	sbci	r17, 0xFF	; 255
 232:	e8 cf       	rjmp	.-48     	; 0x204 <rprintf1RamRom+0x3e>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
 234:	f2 e0       	ldi	r31, 0x02	; 2
 236:	cf 0e       	add	r12, r31
 238:	d1 1c       	adc	r13, r1
 23a:	f8 01       	movw	r30, r16
 23c:	84 91       	lpm	r24, Z
 23e:	06 c0       	rjmp	.+12     	; 0x24c <rprintf1RamRom+0x86>
 240:	f6 01       	movw	r30, r12
 242:	81 81       	ldd	r24, Z+1	; 0x01
 244:	96 01       	movw	r18, r12
 246:	2e 5f       	subi	r18, 0xFE	; 254
 248:	3f 4f       	sbci	r19, 0xFF	; 255
 24a:	69 01       	movw	r12, r18
 24c:	84 36       	cpi	r24, 0x64	; 100
 24e:	71 f0       	breq	.+28     	; 0x26c <rprintf1RamRom+0xa6>
 250:	88 37       	cpi	r24, 0x78	; 120
 252:	09 f4       	brne	.+2      	; 0x256 <rprintf1RamRom+0x90>
 254:	59 c0       	rjmp	.+178    	; 0x308 <rprintf1RamRom+0x142>
 256:	83 36       	cpi	r24, 0x63	; 99
 258:	31 f4       	brne	.+12     	; 0x266 <rprintf1RamRom+0xa0>
		{
			case 'c': format_flag = va_arg(ap,int);
 25a:	f4 01       	movw	r30, r8
 25c:	80 81       	ld	r24, Z
 25e:	94 01       	movw	r18, r8
 260:	2e 5f       	subi	r18, 0xFE	; 254
 262:	3f 4f       	sbci	r19, 0xFF	; 255
 264:	49 01       	movw	r8, r18
			default:  rprintfChar(format_flag); continue;
 266:	0e 94 c8 00 	call	0x190	; 0x190 <rprintfChar>
 26a:	d2 cf       	rjmp	.-92     	; 0x210 <rprintf1RamRom+0x4a>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 26c:	f4 01       	movw	r30, r8
 26e:	e0 80       	ld	r14, Z
 270:	f1 80       	ldd	r15, Z+1	; 0x01
 272:	32 e0       	ldi	r19, 0x02	; 2
 274:	83 0e       	add	r8, r19
 276:	91 1c       	adc	r9, r1
			if (format_flag == 'd')
			{
				if (((int)u_val) < 0)
 278:	ff 20       	and	r15, r15
 27a:	34 f4       	brge	.+12     	; 0x288 <rprintf1RamRom+0xc2>
				{
					u_val = - u_val;
 27c:	f1 94       	neg	r15
 27e:	e1 94       	neg	r14
 280:	f1 08       	sbc	r15, r1
					rprintfChar('-');
 282:	8d e2       	ldi	r24, 0x2D	; 45
 284:	0e 94 c8 00 	call	0x190	; 0x190 <rprintfChar>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 288:	80 e1       	ldi	r24, 0x10	; 16
 28a:	e8 16       	cp	r14, r24
 28c:	87 e2       	ldi	r24, 0x27	; 39
 28e:	f8 06       	cpc	r15, r24
 290:	d0 f4       	brcc	.+52     	; 0x2c6 <rprintf1RamRom+0x100>
 292:	00 e1       	ldi	r16, 0x10	; 16
 294:	17 e2       	ldi	r17, 0x27	; 39
 296:	98 01       	movw	r18, r16
 298:	ad ec       	ldi	r26, 0xCD	; 205
 29a:	bc ec       	ldi	r27, 0xCC	; 204
 29c:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__umulhisi3>
 2a0:	8c 01       	movw	r16, r24
 2a2:	16 95       	lsr	r17
 2a4:	07 95       	ror	r16
 2a6:	16 95       	lsr	r17
 2a8:	07 95       	ror	r16
 2aa:	16 95       	lsr	r17
 2ac:	07 95       	ror	r16
 2ae:	02 30       	cpi	r16, 0x02	; 2
 2b0:	11 05       	cpc	r17, r1
 2b2:	88 f0       	brcs	.+34     	; 0x2d6 <rprintf1RamRom+0x110>
 2b4:	e0 16       	cp	r14, r16
 2b6:	f1 06       	cpc	r15, r17
 2b8:	70 f3       	brcs	.-36     	; 0x296 <rprintf1RamRom+0xd0>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 2ba:	0f 2e       	mov	r0, r31
 2bc:	fa e0       	ldi	r31, 0x0A	; 10
 2be:	2f 2e       	mov	r2, r31
 2c0:	f0 2d       	mov	r31, r0
 2c2:	35 2c       	mov	r3, r5
 2c4:	0d c0       	rjmp	.+26     	; 0x2e0 <rprintf1RamRom+0x11a>
 2c6:	0f 2e       	mov	r0, r31
 2c8:	fa e0       	ldi	r31, 0x0A	; 10
 2ca:	2f 2e       	mov	r2, r31
 2cc:	f0 2d       	mov	r31, r0
 2ce:	35 2c       	mov	r3, r5
 2d0:	00 e1       	ldi	r16, 0x10	; 16
 2d2:	17 e2       	ldi	r17, 0x27	; 39
 2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <rprintf1RamRom+0x11a>
 2d6:	0f 2e       	mov	r0, r31
 2d8:	fa e0       	ldi	r31, 0x0A	; 10
 2da:	2f 2e       	mov	r2, r31
 2dc:	f0 2d       	mov	r31, r0
 2de:	35 2c       	mov	r3, r5
				while (div_val > 1 && div_val > u_val) div_val /= 10;
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
 2e0:	c7 01       	movw	r24, r14
 2e2:	b8 01       	movw	r22, r16
 2e4:	0e 94 32 04 	call	0x864	; 0x864 <__udivmodhi4>
 2e8:	a8 2e       	mov	r10, r24
 2ea:	b9 2e       	mov	r11, r25
 2ec:	86 2f       	mov	r24, r22
 2ee:	0e 94 da 00 	call	0x1b4	; 0x1b4 <rprintfu04>
				u_val %= div_val;
 2f2:	ea 2c       	mov	r14, r10
 2f4:	fb 2c       	mov	r15, r11
				div_val /= base;
 2f6:	c8 01       	movw	r24, r16
 2f8:	62 2d       	mov	r22, r2
 2fa:	73 2d       	mov	r23, r3
 2fc:	0e 94 32 04 	call	0x864	; 0x864 <__udivmodhi4>
 300:	8b 01       	movw	r16, r22
			} while (div_val);
 302:	67 2b       	or	r22, r23
 304:	69 f7       	brne	.-38     	; 0x2e0 <rprintf1RamRom+0x11a>
 306:	84 cf       	rjmp	.-248    	; 0x210 <rprintf1RamRom+0x4a>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 308:	f4 01       	movw	r30, r8
 30a:	e0 80       	ld	r14, Z
 30c:	f1 80       	ldd	r15, Z+1	; 0x01
 30e:	94 01       	movw	r18, r8
 310:	2e 5f       	subi	r18, 0xFE	; 254
 312:	3f 4f       	sbci	r19, 0xFF	; 255
 314:	49 01       	movw	r8, r18
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 316:	68 94       	set
 318:	22 24       	eor	r2, r2
 31a:	24 f8       	bld	r2, 4
 31c:	36 2c       	mov	r3, r6
 31e:	04 2d       	mov	r16, r4
 320:	10 e1       	ldi	r17, 0x10	; 16
 322:	de cf       	rjmp	.-68     	; 0x2e0 <rprintf1RamRom+0x11a>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	ff 90       	pop	r15
 332:	ef 90       	pop	r14
 334:	df 90       	pop	r13
 336:	cf 90       	pop	r12
 338:	bf 90       	pop	r11
 33a:	af 90       	pop	r10
 33c:	9f 90       	pop	r9
 33e:	8f 90       	pop	r8
 340:	7f 90       	pop	r7
 342:	6f 90       	pop	r6
 344:	5f 90       	pop	r5
 346:	4f 90       	pop	r4
 348:	3f 90       	pop	r3
 34a:	2f 90       	pop	r2
 34c:	08 95       	ret

0000034e <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (unsigned char *)uartRxData, UART_RX_BUFFER_SIZE);
 34e:	40 e4       	ldi	r20, 0x40	; 64
 350:	50 e0       	ldi	r21, 0x00	; 0
 352:	64 ea       	ldi	r22, 0xA4	; 164
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	85 ee       	ldi	r24, 0xE5	; 229
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 62 00 	call	0xc4	; 0xc4 <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (unsigned char *)uartTxData, UART_TX_BUFFER_SIZE);
 35e:	40 e4       	ldi	r20, 0x40	; 64
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	64 e6       	ldi	r22, 0x64	; 100
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	8e ee       	ldi	r24, 0xEE	; 238
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 62 00 	call	0xc4	; 0xc4 <bufferInit>
 36e:	08 95       	ret

00000370 <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
 370:	0e 94 a7 01 	call	0x34e	; 0x34e <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
 374:	10 92 63 00 	sts	0x0063, r1
 378:	10 92 62 00 	sts	0x0062, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
 37c:	88 ed       	ldi	r24, 0xD8	; 216
 37e:	8a b9       	out	0x0a, r24	; 10
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
 380:	8f e5       	ldi	r24, 0x5F	; 95
 382:	89 b9       	out	0x09, r24	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 384:	10 bc       	out	0x20, r1	; 32
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
 386:	8f ef       	ldi	r24, 0xFF	; 255
 388:	80 93 e4 00 	sts	0x00E4, r24
	uartBufferedTx = FALSE;
 38c:	10 92 ed 00 	sts	0x00ED, r1
	// clear overflow count
	uartRxOverflow = 0;
 390:	10 92 f7 00 	sts	0x00F7, r1
 394:	10 92 f6 00 	sts	0x00F6, r1
	// enable interrupts
	sei();
 398:	78 94       	sei
 39a:	08 95       	ret

0000039c <uartSetBaudRate>:
	UartRxFunc = rx_func;
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
 3a0:	8b 01       	movw	r16, r22
 3a2:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
 3a4:	dc 01       	movw	r26, r24
 3a6:	cb 01       	movw	r24, r22
 3a8:	90 5e       	subi	r25, 0xE0	; 224
 3aa:	a3 4e       	sbci	r26, 0xE3	; 227
 3ac:	bf 4f       	sbci	r27, 0xFF	; 255
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	aa 1f       	adc	r26, r26
 3b4:	bb 1f       	adc	r27, r27
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	aa 1f       	adc	r26, r26
 3bc:	bb 1f       	adc	r27, r27
 3be:	bc 01       	movw	r22, r24
 3c0:	cd 01       	movw	r24, r26
 3c2:	66 0f       	add	r22, r22
 3c4:	77 1f       	adc	r23, r23
 3c6:	88 1f       	adc	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	00 0f       	add	r16, r16
 3cc:	11 1f       	adc	r17, r17
 3ce:	22 1f       	adc	r18, r18
 3d0:	33 1f       	adc	r19, r19
 3d2:	00 0f       	add	r16, r16
 3d4:	11 1f       	adc	r17, r17
 3d6:	22 1f       	adc	r18, r18
 3d8:	33 1f       	adc	r19, r19
 3da:	a9 01       	movw	r20, r18
 3dc:	98 01       	movw	r18, r16
 3de:	22 0f       	add	r18, r18
 3e0:	33 1f       	adc	r19, r19
 3e2:	44 1f       	adc	r20, r20
 3e4:	55 1f       	adc	r21, r21
 3e6:	22 0f       	add	r18, r18
 3e8:	33 1f       	adc	r19, r19
 3ea:	44 1f       	adc	r20, r20
 3ec:	55 1f       	adc	r21, r21
 3ee:	0e 94 46 04 	call	0x88c	; 0x88c <__udivmodsi4>
 3f2:	21 50       	subi	r18, 0x01	; 1
 3f4:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
 3f6:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 3f8:	30 bd       	out	0x20, r19	; 32
	#endif
}
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	08 95       	ret

00000400 <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
 400:	90 91 e4 00 	lds	r25, 0x00E4
 404:	99 23       	and	r25, r25
 406:	e1 f3       	breq	.-8      	; 0x400 <uartSendByte>
	// send byte
	outb(UDR, txData);
 408:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
 40a:	10 92 e4 00 	sts	0x00E4, r1
 40e:	08 95       	ret

00000410 <__vector_13>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_TRANS)
{
 410:	1f 92       	push	r1
 412:	0f 92       	push	r0
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	0f 92       	push	r0
 418:	11 24       	eor	r1, r1
 41a:	2f 93       	push	r18
 41c:	3f 93       	push	r19
 41e:	4f 93       	push	r20
 420:	5f 93       	push	r21
 422:	6f 93       	push	r22
 424:	7f 93       	push	r23
 426:	8f 93       	push	r24
 428:	9f 93       	push	r25
 42a:	af 93       	push	r26
 42c:	bf 93       	push	r27
 42e:	ef 93       	push	r30
 430:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
 432:	80 91 ed 00 	lds	r24, 0x00ED
 436:	88 23       	and	r24, r24
 438:	91 f0       	breq	.+36     	; 0x45e <__vector_13+0x4e>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
 43a:	80 91 f2 00 	lds	r24, 0x00F2
 43e:	90 91 f3 00 	lds	r25, 0x00F3
 442:	89 2b       	or	r24, r25
 444:	31 f0       	breq	.+12     	; 0x452 <__vector_13+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
 446:	8e ee       	ldi	r24, 0xEE	; 238
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 6f 00 	call	0xde	; 0xde <bufferGetFromFront>
 44e:	8c b9       	out	0x0c, r24	; 12
 450:	09 c0       	rjmp	.+18     	; 0x464 <__stack+0x5>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
 452:	10 92 ed 00 	sts	0x00ED, r1
			// return to ready state
			uartReadyTx = TRUE;
 456:	8f ef       	ldi	r24, 0xFF	; 255
 458:	80 93 e4 00 	sts	0x00E4, r24
 45c:	03 c0       	rjmp	.+6      	; 0x464 <__stack+0x5>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
 45e:	8f ef       	ldi	r24, 0xFF	; 255
 460:	80 93 e4 00 	sts	0x00E4, r24
	}
}
 464:	ff 91       	pop	r31
 466:	ef 91       	pop	r30
 468:	bf 91       	pop	r27
 46a:	af 91       	pop	r26
 46c:	9f 91       	pop	r25
 46e:	8f 91       	pop	r24
 470:	7f 91       	pop	r23
 472:	6f 91       	pop	r22
 474:	5f 91       	pop	r21
 476:	4f 91       	pop	r20
 478:	3f 91       	pop	r19
 47a:	2f 91       	pop	r18
 47c:	0f 90       	pop	r0
 47e:	0f be       	out	0x3f, r0	; 63
 480:	0f 90       	pop	r0
 482:	1f 90       	pop	r1
 484:	18 95       	reti

00000486 <__vector_11>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_RECV)
{
 486:	1f 92       	push	r1
 488:	0f 92       	push	r0
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	0f 92       	push	r0
 48e:	11 24       	eor	r1, r1
 490:	2f 93       	push	r18
 492:	3f 93       	push	r19
 494:	4f 93       	push	r20
 496:	5f 93       	push	r21
 498:	6f 93       	push	r22
 49a:	7f 93       	push	r23
 49c:	8f 93       	push	r24
 49e:	9f 93       	push	r25
 4a0:	af 93       	push	r26
 4a2:	bf 93       	push	r27
 4a4:	ef 93       	push	r30
 4a6:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
 4a8:	8c b1       	in	r24, 0x0c	; 12

	// if there's a user function to handle this receive event
	if(UartRxFunc)
 4aa:	20 91 62 00 	lds	r18, 0x0062
 4ae:	30 91 63 00 	lds	r19, 0x0063
 4b2:	23 2b       	or	r18, r19
 4b4:	31 f0       	breq	.+12     	; 0x4c2 <__vector_11+0x3c>
	{
		// call it and pass the received data
		UartRxFunc(c);
 4b6:	e0 91 62 00 	lds	r30, 0x0062
 4ba:	f0 91 63 00 	lds	r31, 0x0063
 4be:	09 95       	icall
 4c0:	10 c0       	rjmp	.+32     	; 0x4e2 <__vector_11+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
 4c2:	68 2f       	mov	r22, r24
 4c4:	85 ee       	ldi	r24, 0xE5	; 229
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 93 00 	call	0x126	; 0x126 <bufferAddToEnd>
 4cc:	81 11       	cpse	r24, r1
 4ce:	09 c0       	rjmp	.+18     	; 0x4e2 <__vector_11+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
 4d0:	80 91 f6 00 	lds	r24, 0x00F6
 4d4:	90 91 f7 00 	lds	r25, 0x00F7
 4d8:	01 96       	adiw	r24, 0x01	; 1
 4da:	90 93 f7 00 	sts	0x00F7, r25
 4de:	80 93 f6 00 	sts	0x00F6, r24
		}
	}
}
 4e2:	ff 91       	pop	r31
 4e4:	ef 91       	pop	r30
 4e6:	bf 91       	pop	r27
 4e8:	af 91       	pop	r26
 4ea:	9f 91       	pop	r25
 4ec:	8f 91       	pop	r24
 4ee:	7f 91       	pop	r23
 4f0:	6f 91       	pop	r22
 4f2:	5f 91       	pop	r21
 4f4:	4f 91       	pop	r20
 4f6:	3f 91       	pop	r19
 4f8:	2f 91       	pop	r18
 4fa:	0f 90       	pop	r0
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	0f 90       	pop	r0
 500:	1f 90       	pop	r1
 502:	18 95       	reti

00000504 <McuInit>:

void McuInit(void)
{
	// initialize our libraries
	// initialize the UART (serial port)
	uartInit();		/* sei() call in the function */
 504:	0e 94 b8 01 	call	0x370	; 0x370 <uartInit>
	// set the baud rate of the UART for our debug/reporting output
	uartSetBaudRate(9600);
 508:	60 e8       	ldi	r22, 0x80	; 128
 50a:	75 e2       	ldi	r23, 0x25	; 37
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 ce 01 	call	0x39c	; 0x39c <uartSetBaudRate>
	// initialize rprintf system
	rprintfInit(uartSendByte);
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	92 e0       	ldi	r25, 0x02	; 2
 518:	0e 94 c3 00 	call	0x186	; 0x186 <rprintfInit>
 51c:	08 95       	ret

0000051e <ApplInit>:
*********************************************************************************************************
*/

void ApplInit(void)
{
	ButtonInit();
 51e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <ButtonInit>
	LEDInit();
 522:	0e 94 32 03 	call	0x664	; 0x664 <LEDInit>
	
	//glcdInit();	/* Need connect to LCD device because MCU will check lcd busy or not will cause waiting */
	
	//glcdPutStr(&greeting[0]);
	// Just print message for debug.
	rprintf("RF remote start!\n" );	
 526:	8a e8       	ldi	r24, 0x8A	; 138
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	9f 93       	push	r25
 52c:	8f 93       	push	r24
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	8f 93       	push	r24
 532:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rprintf1RamRom>
 536:	0f 90       	pop	r0
 538:	0f 90       	pop	r0
 53a:	0f 90       	pop	r0
 53c:	08 95       	ret

0000053e <AppCycleUpdate>:
*
* Returns    : none
*********************************************************************************************************
*/
void AppCycleUpdate(void)
{	
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29
	char tempChar;
	
	if(ButtonGetReleased())
 542:	0e 94 2c 04 	call	0x858	; 0x858 <ButtonGetReleased>
 546:	88 23       	and	r24, r24
 548:	39 f1       	breq	.+78     	; 0x598 <AppCycleUpdate+0x5a>
	{
		if(ButtonJMP2ReleasedEvent())
 54a:	0e 94 28 03 	call	0x650	; 0x650 <ButtonJMP2ReleasedEvent>
 54e:	88 23       	and	r24, r24
 550:	81 f0       	breq	.+32     	; 0x572 <AppCycleUpdate+0x34>
		{
			rprintf("JMP2\n");
 552:	84 e8       	ldi	r24, 0x84	; 132
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	9f 93       	push	r25
 558:	8f 93       	push	r24
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	8f 93       	push	r24
 55e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rprintf1RamRom>
			LEDFlag1On();
 562:	0e 94 a1 03 	call	0x742	; 0x742 <LEDFlag1On>
			LEDFlag2On();
 566:	0e 94 bc 03 	call	0x778	; 0x778 <LEDFlag2On>
 56a:	0f 90       	pop	r0
 56c:	0f 90       	pop	r0
 56e:	0f 90       	pop	r0
 570:	13 c0       	rjmp	.+38     	; 0x598 <AppCycleUpdate+0x5a>
		}
		else if(ButtonJMP1ReleasedEvent())
 572:	0e 94 20 03 	call	0x640	; 0x640 <ButtonJMP1ReleasedEvent>
 576:	88 23       	and	r24, r24
 578:	79 f0       	breq	.+30     	; 0x598 <AppCycleUpdate+0x5a>
		{
			rprintf("JMP1\n");
 57a:	8e e7       	ldi	r24, 0x7E	; 126
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	9f 93       	push	r25
 580:	8f 93       	push	r24
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	8f 93       	push	r24
 586:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rprintf1RamRom>
			LEDFlag1Off();
 58a:	0e 94 b5 03 	call	0x76a	; 0x76a <LEDFlag1Off>
			LEDFlag2Off();
 58e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <LEDFlag2Off>
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	0f 90       	pop	r0
		}
	}

	if(ButtonGetHeld())
 598:	0e 94 2f 04 	call	0x85e	; 0x85e <ButtonGetHeld>
 59c:	88 23       	and	r24, r24
 59e:	39 f1       	breq	.+78     	; 0x5ee <AppCycleUpdate+0xb0>
	{
		if(ButtonJMP2HeldEvent())
 5a0:	0e 94 2d 03 	call	0x65a	; 0x65a <ButtonJMP2HeldEvent>
 5a4:	88 23       	and	r24, r24
 5a6:	81 f0       	breq	.+32     	; 0x5c8 <AppCycleUpdate+0x8a>
		{
			rprintf("H-JMP2\n");
 5a8:	86 e7       	ldi	r24, 0x76	; 118
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	9f 93       	push	r25
 5ae:	8f 93       	push	r24
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	8f 93       	push	r24
 5b4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rprintf1RamRom>
			LEDFlag1Flash1Hz();
 5b8:	0e 94 a7 03 	call	0x74e	; 0x74e <LEDFlag1Flash1Hz>
			LEDFlag2Flash1Hz();
 5bc:	0e 94 c2 03 	call	0x784	; 0x784 <LEDFlag2Flash1Hz>
 5c0:	0f 90       	pop	r0
 5c2:	0f 90       	pop	r0
 5c4:	0f 90       	pop	r0
 5c6:	13 c0       	rjmp	.+38     	; 0x5ee <AppCycleUpdate+0xb0>
		}
		
		else if(ButtonJMP1HeldEvent())
 5c8:	0e 94 24 03 	call	0x648	; 0x648 <ButtonJMP1HeldEvent>
 5cc:	88 23       	and	r24, r24
 5ce:	79 f0       	breq	.+30     	; 0x5ee <AppCycleUpdate+0xb0>
		{
			rprintf("H-JMP1\n");
 5d0:	8e e6       	ldi	r24, 0x6E	; 110
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	9f 93       	push	r25
 5d6:	8f 93       	push	r24
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	8f 93       	push	r24
 5dc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rprintf1RamRom>
			LEDFlag1Flash3Hz();
 5e0:	0e 94 ae 03 	call	0x75c	; 0x75c <LEDFlag1Flash3Hz>
			LEDFlag2Flash3Hz();
 5e4:	0e 94 c9 03 	call	0x792	; 0x792 <LEDFlag2Flash3Hz>
 5e8:	0f 90       	pop	r0
 5ea:	0f 90       	pop	r0
 5ec:	0f 90       	pop	r0
		}
	}
	
	if(uartRxBuffer.size - bufferIsNotFull(&uartRxBuffer) != 0)
 5ee:	c0 91 e7 00 	lds	r28, 0x00E7
 5f2:	d0 91 e8 00 	lds	r29, 0x00E8
 5f6:	85 ee       	ldi	r24, 0xE5	; 229
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 b8 00 	call	0x170	; 0x170 <bufferIsNotFull>
 5fe:	c8 17       	cp	r28, r24
 600:	d9 07       	cpc	r29, r25
 602:	99 f0       	breq	.+38     	; 0x62a <AppCycleUpdate+0xec>
	{
		tempChar = bufferGetFromFront(&uartRxBuffer);
 604:	85 ee       	ldi	r24, 0xE5	; 229
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 6f 00 	call	0xde	; 0xde <bufferGetFromFront>
		//rprintf("char=%c\n",tempChar);
		rprintf("Type=%c\n",tempChar);
 60c:	1f 92       	push	r1
 60e:	8f 93       	push	r24
 610:	85 e6       	ldi	r24, 0x65	; 101
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	9f 93       	push	r25
 616:	8f 93       	push	r24
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	8f 93       	push	r24
 61c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rprintf1RamRom>
 620:	0f 90       	pop	r0
 622:	0f 90       	pop	r0
 624:	0f 90       	pop	r0
 626:	0f 90       	pop	r0
 628:	0f 90       	pop	r0
	}
}
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	08 95       	ret

00000630 <ButtonInitEx>:
void ButtonInitEx(void)
{	
	/* 
	Set PC1-PC0 as input, the tow IO with external pull up 10K resistor.
	*/
	DDRC &= ((1<<DDC1) | (1<<DDC0));
 630:	84 b3       	in	r24, 0x14	; 20
 632:	83 70       	andi	r24, 0x03	; 3
 634:	84 bb       	out	0x14, r24	; 20
 636:	08 95       	ret

00000638 <ButtonGetIO_StateEx>:
*/
ButtonDataType ButtonGetIO_StateEx(void)
{
	ButtonDataType io_state;
	
	io_state = (~PINC) & ((1<<PINC1) | (1<<PINC0));	/* Get PC1-PC0 IO state */
 638:	83 b3       	in	r24, 0x13	; 19
 63a:	80 95       	com	r24
	
	return  io_state;
}
 63c:	83 70       	andi	r24, 0x03	; 3
 63e:	08 95       	ret

00000640 <ButtonJMP1ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP1) 
 640:	80 91 fe 00 	lds	r24, 0x00FE
	{
		return true;
	}
    
    return false;
}
 644:	81 70       	andi	r24, 0x01	; 1
 646:	08 95       	ret

00000648 <ButtonJMP1HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1HeldEvent(void)
{
	if (button.buttonsHeld.JMP1) 
 648:	80 91 ff 00 	lds	r24, 0x00FF
	{
		return true;
	}
    
    return false;
}
 64c:	81 70       	andi	r24, 0x01	; 1
 64e:	08 95       	ret

00000650 <ButtonJMP2ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP2) 
 650:	80 91 fe 00 	lds	r24, 0x00FE
	{
		return true;
	}
    
    return false;
}
 654:	86 95       	lsr	r24
 656:	81 70       	andi	r24, 0x01	; 1
 658:	08 95       	ret

0000065a <ButtonJMP2HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2HeldEvent(void)
{
	if (button.buttonsHeld.JMP2) 
 65a:	80 91 ff 00 	lds	r24, 0x00FF
	{
		return true;
	}
    
    return false;
}
 65e:	86 95       	lsr	r24
 660:	81 70       	andi	r24, 0x01	; 1
 662:	08 95       	ret

00000664 <LEDInit>:
	uint8_t i;
	
	/* 
	Set PB2-PB1 as output to drive to LEDs, default turn off all LEDs
	*/
	DDRB &= ~((1<<DDB2) | (1<<DDB1));
 664:	87 b3       	in	r24, 0x17	; 23
 666:	89 7f       	andi	r24, 0xF9	; 249
 668:	87 bb       	out	0x17, r24	; 23
	DDRB |= ((1<<DDB2) | (1<<DDB1));
 66a:	87 b3       	in	r24, 0x17	; 23
 66c:	86 60       	ori	r24, 0x06	; 6
 66e:	87 bb       	out	0x17, r24	; 23
	PORTB |= ((1<<DDB2) | (1<<DDB1));
 670:	88 b3       	in	r24, 0x18	; 24
 672:	86 60       	ori	r24, 0x06	; 6
 674:	88 bb       	out	0x18, r24	; 24
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
 676:	e8 ef       	ldi	r30, 0xF8	; 248
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	80 81       	ld	r24, Z
 67c:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
 67e:	84 60       	ori	r24, 0x04	; 4
 680:	88 60       	ori	r24, 0x08	; 8
 682:	80 83       	st	Z, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
 684:	9c e3       	ldi	r25, 0x3C	; 60
 686:	91 83       	std	Z+1, r25	; 0x01
	DDRB |= ((1<<DDB2) | (1<<DDB1));
	PORTB |= ((1<<DDB2) | (1<<DDB1));
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
 688:	aa ef       	ldi	r26, 0xFA	; 250
 68a:	b0 e0       	ldi	r27, 0x00	; 0
 68c:	8c 91       	ld	r24, X
 68e:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
 690:	84 60       	ori	r24, 0x04	; 4
 692:	88 60       	ori	r24, 0x08	; 8
 694:	8c 93       	st	X, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
 696:	93 83       	std	Z+3, r25	; 0x03
 698:	08 95       	ret

0000069a <LEDCycleUpdate>:
*
*********************************************************************************************************
*/

void LEDCycleUpdate(void)
{
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	a9 ef       	ldi	r26, 0xF9	; 249
 6a0:	b0 e0       	ldi	r27, 0x00	; 0
 6a2:	20 e0       	ldi	r18, 0x00	; 0
 6a4:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
 6a6:	b9 01       	movw	r22, r18
 6a8:	e9 01       	movw	r28, r18
 6aa:	cc 0f       	add	r28, r28
 6ac:	dd 1f       	adc	r29, r29
 6ae:	c8 50       	subi	r28, 0x08	; 8
 6b0:	df 4f       	sbci	r29, 0xFF	; 255
 6b2:	88 81       	ld	r24, Y
 6b4:	87 70       	andi	r24, 0x07	; 7
 6b6:	ed 01       	movw	r28, r26
		ft = LEDs[i].flashTimer;
 6b8:	9c 91       	ld	r25, X
		
		ft += rate;
		if((rate == 4) || (ft >= LED_ONE_SEC))
 6ba:	84 30       	cpi	r24, 0x04	; 4
 6bc:	a9 f1       	breq	.+106    	; 0x728 <LEDCycleUpdate+0x8e>
	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
		ft = LEDs[i].flashTimer;
		
		ft += rate;
 6be:	98 0f       	add	r25, r24
		if((rate == 4) || (ft >= LED_ONE_SEC))
 6c0:	9c 33       	cpi	r25, 0x3C	; 60
 6c2:	68 f0       	brcs	.+26     	; 0x6de <LEDCycleUpdate+0x44>
		{
			ft = 0;
			LEDs[i].led.state = S_OFF;
 6c4:	a9 01       	movw	r20, r18
 6c6:	44 0f       	add	r20, r20
 6c8:	55 1f       	adc	r21, r21
 6ca:	48 50       	subi	r20, 0x08	; 8
 6cc:	5f 4f       	sbci	r21, 0xFF	; 255
 6ce:	fa 01       	movw	r30, r20
 6d0:	90 81       	ld	r25, Z
 6d2:	98 60       	ori	r25, 0x08	; 8
 6d4:	90 83       	st	Z, r25
		}
		LEDs[i].flashTimer = ft;
 6d6:	18 82       	st	Y, r1
		
		if((rate == 0) || (ft >= (LED_ONE_SEC/2)))
 6d8:	88 23       	and	r24, r24
 6da:	31 f0       	breq	.+12     	; 0x6e8 <LEDCycleUpdate+0x4e>
 6dc:	0d c0       	rjmp	.+26     	; 0x6f8 <LEDCycleUpdate+0x5e>
		if((rate == 4) || (ft >= LED_ONE_SEC))
		{
			ft = 0;
			LEDs[i].led.state = S_OFF;
		}
		LEDs[i].flashTimer = ft;
 6de:	98 83       	st	Y, r25
		
		if((rate == 0) || (ft >= (LED_ONE_SEC/2)))
 6e0:	88 23       	and	r24, r24
 6e2:	11 f0       	breq	.+4      	; 0x6e8 <LEDCycleUpdate+0x4e>
 6e4:	9e 31       	cpi	r25, 0x1E	; 30
 6e6:	40 f0       	brcs	.+16     	; 0x6f8 <LEDCycleUpdate+0x5e>
		{
			LEDs[i].led.state = S_ON;
 6e8:	fb 01       	movw	r30, r22
 6ea:	ee 0f       	add	r30, r30
 6ec:	ff 1f       	adc	r31, r31
 6ee:	e8 50       	subi	r30, 0x08	; 8
 6f0:	ff 4f       	sbci	r31, 0xFF	; 255
 6f2:	80 81       	ld	r24, Z
 6f4:	87 7f       	andi	r24, 0xF7	; 247
 6f6:	80 83       	st	Z, r24
 6f8:	2f 5f       	subi	r18, 0xFF	; 255
 6fa:	3f 4f       	sbci	r19, 0xFF	; 255
 6fc:	12 96       	adiw	r26, 0x02	; 2
{
	uint8_t rate;
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
 6fe:	22 30       	cpi	r18, 0x02	; 2
 700:	31 05       	cpc	r19, r1
 702:	89 f6       	brne	.-94     	; 0x6a6 <LEDCycleUpdate+0xc>
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */

	if(LEDs[0].led.state == S_OFF)
 704:	80 91 f8 00 	lds	r24, 0x00F8
 708:	83 ff       	sbrs	r24, 3
 70a:	02 c0       	rjmp	.+4      	; 0x710 <LEDCycleUpdate+0x76>
	{
		state |= (1<<DDB1);
 70c:	22 e0       	ldi	r18, 0x02	; 2
 70e:	01 c0       	rjmp	.+2      	; 0x712 <LEDCycleUpdate+0x78>
*
*********************************************************************************************************
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */
 710:	20 e0       	ldi	r18, 0x00	; 0
	if(LEDs[0].led.state == S_OFF)
	{
		state |= (1<<DDB1);
	}
	
	if(LEDs[1].led.state == S_OFF)
 712:	80 91 fa 00 	lds	r24, 0x00FA
 716:	83 fd       	sbrc	r24, 3
	{
		state |= (1<<DDB2);
 718:	24 60       	ori	r18, 0x04	; 4
	}

	PORTB &= ~((1<<DDB2) | (1<<DDB1));
 71a:	98 b3       	in	r25, 0x18	; 24
 71c:	99 7f       	andi	r25, 0xF9	; 249
 71e:	98 bb       	out	0x18, r25	; 24
	PORTB |= state;
 720:	88 b3       	in	r24, 0x18	; 24
 722:	82 2b       	or	r24, r18
 724:	88 bb       	out	0x18, r24	; 24
 726:	0a c0       	rjmp	.+20     	; 0x73c <LEDCycleUpdate+0xa2>
		
		ft += rate;
		if((rate == 4) || (ft >= LED_ONE_SEC))
		{
			ft = 0;
			LEDs[i].led.state = S_OFF;
 728:	f9 01       	movw	r30, r18
 72a:	ee 0f       	add	r30, r30
 72c:	ff 1f       	adc	r31, r31
 72e:	e8 50       	subi	r30, 0x08	; 8
 730:	ff 4f       	sbci	r31, 0xFF	; 255
 732:	80 81       	ld	r24, Z
 734:	88 60       	ori	r24, 0x08	; 8
 736:	80 83       	st	Z, r24
		}
		LEDs[i].flashTimer = ft;
 738:	1c 92       	st	X, r1
 73a:	de cf       	rjmp	.-68     	; 0x6f8 <LEDCycleUpdate+0x5e>
			LEDs[i].led.state = S_ON;
		}
	}
	
	LEDUpdateState();
}
 73c:	df 91       	pop	r29
 73e:	cf 91       	pop	r28
 740:	08 95       	ret

00000742 <LEDFlag1On>:
*
*********************************************************************************************************
*/
void LEDFlag1Set(LED_RATE rate)
{
	LEDs[0].led.LEDRate = rate;
 742:	e8 ef       	ldi	r30, 0xF8	; 248
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	80 81       	ld	r24, Z
 748:	88 7f       	andi	r24, 0xF8	; 248
 74a:	80 83       	st	Z, r24
 74c:	08 95       	ret

0000074e <LEDFlag1Flash1Hz>:
 74e:	e8 ef       	ldi	r30, 0xF8	; 248
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	88 7f       	andi	r24, 0xF8	; 248
 756:	81 60       	ori	r24, 0x01	; 1
 758:	80 83       	st	Z, r24
 75a:	08 95       	ret

0000075c <LEDFlag1Flash3Hz>:
 75c:	e8 ef       	ldi	r30, 0xF8	; 248
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	80 81       	ld	r24, Z
 762:	88 7f       	andi	r24, 0xF8	; 248
 764:	83 60       	ori	r24, 0x03	; 3
 766:	80 83       	st	Z, r24
 768:	08 95       	ret

0000076a <LEDFlag1Off>:
 76a:	e8 ef       	ldi	r30, 0xF8	; 248
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	80 81       	ld	r24, Z
 770:	88 7f       	andi	r24, 0xF8	; 248
 772:	84 60       	ori	r24, 0x04	; 4
 774:	80 83       	st	Z, r24
 776:	08 95       	ret

00000778 <LEDFlag2On>:
*
*********************************************************************************************************
*/
void LEDFlag2Set(LED_RATE rate)
{
	LEDs[1].led.LEDRate = rate;
 778:	ea ef       	ldi	r30, 0xFA	; 250
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	80 81       	ld	r24, Z
 77e:	88 7f       	andi	r24, 0xF8	; 248
 780:	80 83       	st	Z, r24
 782:	08 95       	ret

00000784 <LEDFlag2Flash1Hz>:
 784:	ea ef       	ldi	r30, 0xFA	; 250
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	80 81       	ld	r24, Z
 78a:	88 7f       	andi	r24, 0xF8	; 248
 78c:	81 60       	ori	r24, 0x01	; 1
 78e:	80 83       	st	Z, r24
 790:	08 95       	ret

00000792 <LEDFlag2Flash3Hz>:
 792:	ea ef       	ldi	r30, 0xFA	; 250
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	80 81       	ld	r24, Z
 798:	88 7f       	andi	r24, 0xF8	; 248
 79a:	83 60       	ori	r24, 0x03	; 3
 79c:	80 83       	st	Z, r24
 79e:	08 95       	ret

000007a0 <LEDFlag2Off>:
 7a0:	ea ef       	ldi	r30, 0xFA	; 250
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	80 81       	ld	r24, Z
 7a6:	88 7f       	andi	r24, 0xF8	; 248
 7a8:	84 60       	ori	r24, 0x04	; 4
 7aa:	80 83       	st	Z, r24
 7ac:	08 95       	ret

000007ae <main>:
int main(void)
{	
	/*
	Calll all initial function
	*/
	McuInit();
 7ae:	0e 94 82 02 	call	0x504	; 0x504 <McuInit>
	ApplInit();
 7b2:	0e 94 8f 02 	call	0x51e	; 0x51e <ApplInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7b6:	26 e6       	ldi	r18, 0x66	; 102
 7b8:	86 ee       	ldi	r24, 0xE6	; 230
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	21 50       	subi	r18, 0x01	; 1
 7be:	80 40       	sbci	r24, 0x00	; 0
 7c0:	90 40       	sbci	r25, 0x00	; 0
 7c2:	e1 f7       	brne	.-8      	; 0x7bc <main+0xe>
	
	while(1)
	{
		_delay_ms(20);
		ButtonCycleUpdate();
 7c4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <ButtonCycleUpdate>
		AppCycleUpdate();
 7c8:	0e 94 9f 02 	call	0x53e	; 0x53e <AppCycleUpdate>
		LEDCycleUpdate();
 7cc:	0e 94 4d 03 	call	0x69a	; 0x69a <LEDCycleUpdate>
	}
 7d0:	f2 cf       	rjmp	.-28     	; 0x7b6 <main+0x8>

000007d2 <ButtonInit>:
* Returns    : none
*********************************************************************************************************
*/
void ButtonInit(void)
{
	ButtonInitEx();
 7d2:	0e 94 18 03 	call	0x630	; 0x630 <ButtonInitEx>
 7d6:	08 95       	ret

000007d8 <ButtonCycleUpdate>:
* Notes      : None
*
*/
ButtonDataType ButtonGetIO_State(void)
{
	return  ButtonGetIO_StateEx();
 7d8:	0e 94 1c 03 	call	0x638	; 0x638 <ButtonGetIO_StateEx>
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
 7dc:	ec ef       	ldi	r30, 0xFC	; 252
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	90 81       	ld	r25, Z
 7e2:	89 2b       	or	r24, r25
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
 7e4:	10 82       	st	Z, r1
	b = button.buttonsLastCycle.bVal;
 7e6:	91 81       	ldd	r25, Z+1	; 0x01
	holdTime = button.buttonHoldTime;
 7e8:	26 81       	ldd	r18, Z+6	; 0x06
 7ea:	37 81       	ldd	r19, Z+7	; 0x07
	
	if (button.buttonsReleased.bVal != 0) {		
 7ec:	42 81       	ldd	r20, Z+2	; 0x02
 7ee:	44 23       	and	r20, r20
 7f0:	19 f0       	breq	.+6      	; 0x7f8 <ButtonCycleUpdate+0x20>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
 7f2:	40 93 00 01 	sts	0x0100, r20
 7f6:	05 c0       	rjmp	.+10     	; 0x802 <ButtonCycleUpdate+0x2a>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
 7f8:	2d 33       	cpi	r18, 0x3D	; 61
 7fa:	31 05       	cpc	r19, r1
 7fc:	10 f0       	brcs	.+4      	; 0x802 <ButtonCycleUpdate+0x2a>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
 7fe:	10 92 00 01 	sts	0x0100, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
 802:	ec ef       	ldi	r30, 0xFC	; 252
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	12 82       	std	Z+2, r1	; 0x02
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
 808:	15 82       	std	Z+5, r1	; 0x05
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
 80a:	89 13       	cpse	r24, r25
 80c:	0f c0       	rjmp	.+30     	; 0x82c <ButtonCycleUpdate+0x54>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
 80e:	2f 5f       	subi	r18, 0xFF	; 255
 810:	3f 4f       	sbci	r19, 0xFF	; 255
 812:	24 32       	cpi	r18, 0x24	; 36
 814:	31 05       	cpc	r19, r1
 816:	18 f4       	brcc	.+6      	; 0x81e <ButtonCycleUpdate+0x46>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
 818:	10 92 ff 00 	sts	0x00FF, r1
 81c:	02 c0       	rjmp	.+4      	; 0x822 <ButtonCycleUpdate+0x4a>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
 81e:	80 93 ff 00 	sts	0x00FF, r24
		}	
		button.buttonHoldTime = holdTime;
 822:	30 93 03 01 	sts	0x0103, r19
 826:	20 93 02 01 	sts	0x0102, r18
 82a:	08 95       	ret
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
 82c:	ec ef       	ldi	r30, 0xFC	; 252
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	81 83       	std	Z+1, r24	; 0x01
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
 832:	80 95       	com	r24
 834:	89 23       	and	r24, r25
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
 836:	93 81       	ldd	r25, Z+3	; 0x03
 838:	98 23       	and	r25, r24
 83a:	69 f4       	brne	.+26     	; 0x856 <ButtonCycleUpdate+0x7e>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
 83c:	10 92 03 01 	sts	0x0103, r1
 840:	10 92 02 01 	sts	0x0102, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
 844:	23 50       	subi	r18, 0x03	; 3
 846:	31 09       	sbc	r19, r1
 848:	20 32       	cpi	r18, 0x20	; 32
 84a:	31 05       	cpc	r19, r1
 84c:	20 f4       	brcc	.+8      	; 0x856 <ButtonCycleUpdate+0x7e>
				button.buttonsReleased.bVal = buttons;	
 84e:	82 83       	std	Z+2, r24	; 0x02
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
 850:	94 81       	ldd	r25, Z+4	; 0x04
 852:	89 23       	and	r24, r25
 854:	85 83       	std	Z+5, r24	; 0x05
 856:	08 95       	ret

00000858 <ButtonGetReleased>:
*/

ButtonDataType ButtonGetReleased(void)
{
	return button.buttonsReleased.bVal;
}
 858:	80 91 fe 00 	lds	r24, 0x00FE
 85c:	08 95       	ret

0000085e <ButtonGetHeld>:
*/

ButtonDataType ButtonGetHeld (void)
{
	return button.buttonsHeld.bVal;
}
 85e:	80 91 ff 00 	lds	r24, 0x00FF
 862:	08 95       	ret

00000864 <__udivmodhi4>:
 864:	aa 1b       	sub	r26, r26
 866:	bb 1b       	sub	r27, r27
 868:	51 e1       	ldi	r21, 0x11	; 17
 86a:	07 c0       	rjmp	.+14     	; 0x87a <__udivmodhi4_ep>

0000086c <__udivmodhi4_loop>:
 86c:	aa 1f       	adc	r26, r26
 86e:	bb 1f       	adc	r27, r27
 870:	a6 17       	cp	r26, r22
 872:	b7 07       	cpc	r27, r23
 874:	10 f0       	brcs	.+4      	; 0x87a <__udivmodhi4_ep>
 876:	a6 1b       	sub	r26, r22
 878:	b7 0b       	sbc	r27, r23

0000087a <__udivmodhi4_ep>:
 87a:	88 1f       	adc	r24, r24
 87c:	99 1f       	adc	r25, r25
 87e:	5a 95       	dec	r21
 880:	a9 f7       	brne	.-22     	; 0x86c <__udivmodhi4_loop>
 882:	80 95       	com	r24
 884:	90 95       	com	r25
 886:	bc 01       	movw	r22, r24
 888:	cd 01       	movw	r24, r26
 88a:	08 95       	ret

0000088c <__udivmodsi4>:
 88c:	a1 e2       	ldi	r26, 0x21	; 33
 88e:	1a 2e       	mov	r1, r26
 890:	aa 1b       	sub	r26, r26
 892:	bb 1b       	sub	r27, r27
 894:	fd 01       	movw	r30, r26
 896:	0d c0       	rjmp	.+26     	; 0x8b2 <__udivmodsi4_ep>

00000898 <__udivmodsi4_loop>:
 898:	aa 1f       	adc	r26, r26
 89a:	bb 1f       	adc	r27, r27
 89c:	ee 1f       	adc	r30, r30
 89e:	ff 1f       	adc	r31, r31
 8a0:	a2 17       	cp	r26, r18
 8a2:	b3 07       	cpc	r27, r19
 8a4:	e4 07       	cpc	r30, r20
 8a6:	f5 07       	cpc	r31, r21
 8a8:	20 f0       	brcs	.+8      	; 0x8b2 <__udivmodsi4_ep>
 8aa:	a2 1b       	sub	r26, r18
 8ac:	b3 0b       	sbc	r27, r19
 8ae:	e4 0b       	sbc	r30, r20
 8b0:	f5 0b       	sbc	r31, r21

000008b2 <__udivmodsi4_ep>:
 8b2:	66 1f       	adc	r22, r22
 8b4:	77 1f       	adc	r23, r23
 8b6:	88 1f       	adc	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	1a 94       	dec	r1
 8bc:	69 f7       	brne	.-38     	; 0x898 <__udivmodsi4_loop>
 8be:	60 95       	com	r22
 8c0:	70 95       	com	r23
 8c2:	80 95       	com	r24
 8c4:	90 95       	com	r25
 8c6:	9b 01       	movw	r18, r22
 8c8:	ac 01       	movw	r20, r24
 8ca:	bd 01       	movw	r22, r26
 8cc:	cf 01       	movw	r24, r30
 8ce:	08 95       	ret

000008d0 <__umulhisi3>:
 8d0:	a2 9f       	mul	r26, r18
 8d2:	b0 01       	movw	r22, r0
 8d4:	b3 9f       	mul	r27, r19
 8d6:	c0 01       	movw	r24, r0
 8d8:	a3 9f       	mul	r26, r19
 8da:	70 0d       	add	r23, r0
 8dc:	81 1d       	adc	r24, r1
 8de:	11 24       	eor	r1, r1
 8e0:	91 1d       	adc	r25, r1
 8e2:	b2 9f       	mul	r27, r18
 8e4:	70 0d       	add	r23, r0
 8e6:	81 1d       	adc	r24, r1
 8e8:	11 24       	eor	r1, r1
 8ea:	91 1d       	adc	r25, r1
 8ec:	08 95       	ret

000008ee <_exit>:
 8ee:	f8 94       	cli

000008f0 <__stop_program>:
 8f0:	ff cf       	rjmp	.-2      	; 0x8f0 <__stop_program>
