
LevelMeterMainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000030d  00800060  00800060  00001348  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c0  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003935  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000146d  00000000  00000000  000051a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001426  00000000  00000000  00006616  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d20  00000000  00000000  00007a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000126e  00000000  00000000  0000875c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024fd  00000000  00000000  000099ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000400  00000000  00000000  0000bec7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 95 03 	jmp	0x72a	; 0x72a <__vector_3>
      10:	0c 94 a1 02 	jmp	0x542	; 0x542 <__vector_4>
      14:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <__vector_5>
      18:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__vector_6>
      1c:	0c 94 3b 03 	jmp	0x676	; 0x676 <__vector_7>
      20:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__vector_8>
      24:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_9>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 4b 04 	jmp	0x896	; 0x896 <__vector_11>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 14 04 	jmp	0x828	; 0x828 <__vector_13>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_19>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	9c 04       	cpc	r9, r12
      56:	a1 04       	cpc	r10, r1
      58:	ad 04       	cpc	r10, r13
      5a:	b2 04       	cpc	r11, r2
      5c:	b7 04       	cpc	r11, r7
      5e:	bc 04       	cpc	r11, r12
      60:	c1 04       	cpc	r12, r1
      62:	c6 04       	cpc	r12, r6

00000064 <__trampolines_end>:
      64:	30 31       	cpi	r19, 0x10	; 16
      66:	32 33       	cpi	r19, 0x32	; 50
      68:	34 35       	cpi	r19, 0x54	; 84
      6a:	36 37       	cpi	r19, 0x76	; 118
      6c:	38 39       	cpi	r19, 0x98	; 152
      6e:	41 42       	sbci	r20, 0x21	; 33
      70:	43 44       	sbci	r20, 0x43	; 67
      72:	45 46       	sbci	r20, 0x65	; 101
	...

00000075 <__c.2099>:
      75:	64 43 3d 25 64 0a 0a 00                             dC=%d...

0000007d <__c.2095>:
      7d:	54 79 70 65 3d 25 63 0a 00                          Type=%c..

00000086 <__c.2082>:
      86:	4d 61 69 6e 20 62 6f 61 72 64 20 68 65 72 65 21     Main board here!
      96:	0a 00                                               ..

00000098 <__c.1863>:
      98:	61 25 64 0a 00                                      a%d..

0000009d <__c.1861>:
      9d:	73 61 25 64 0a 00                                   sa%d..

000000a3 <__c.1859>:
      a3:	61 25 64 0a 00                                      a%d..

000000a8 <__c.1857>:
      a8:	73 61 25 64 0a 00                                   sa%d..

000000ae <ssdCharTble>:
      ae:	c0 f9 a4 b0 99 92 82 f8 80 90 88 83 c6 a1 86 8e     ................
      be:	ff fe f7 00                                         ....

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf e5       	ldi	r28, 0x5F	; 95
      c8:	d4 e0       	ldi	r29, 0x04	; 4
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_clear_bss>:
      ce:	23 e0       	ldi	r18, 0x03	; 3
      d0:	a0 e6       	ldi	r26, 0x60	; 96
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	ad 36       	cpi	r26, 0x6D	; 109
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 da 06 	call	0xdb4	; 0xdb4 <main>
      e2:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
      ea:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
      ec:	8f b7       	in	r24, 0x3f	; 63
      ee:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
      f0:	71 83       	std	Z+1, r23	; 0x01
      f2:	60 83       	st	Z, r22
	buffer->size = size;
      f4:	53 83       	std	Z+3, r21	; 0x03
      f6:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
      f8:	17 82       	std	Z+7, r1	; 0x07
      fa:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
      fc:	15 82       	std	Z+5, r1	; 0x05
      fe:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
     100:	8f bf       	out	0x3f, r24	; 63
     102:	08 95       	ret

00000104 <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
     104:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
     106:	9f b7       	in	r25, 0x3f	; 63
     108:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
     10a:	44 81       	ldd	r20, Z+4	; 0x04
     10c:	55 81       	ldd	r21, Z+5	; 0x05
     10e:	41 15       	cp	r20, r1
     110:	51 05       	cpc	r21, r1
     112:	c9 f0       	breq	.+50     	; 0x146 <bufferGetFromFront+0x42>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
     114:	26 81       	ldd	r18, Z+6	; 0x06
     116:	37 81       	ldd	r19, Z+7	; 0x07
     118:	a0 81       	ld	r26, Z
     11a:	b1 81       	ldd	r27, Z+1	; 0x01
     11c:	a2 0f       	add	r26, r18
     11e:	b3 1f       	adc	r27, r19
     120:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
     122:	2f 5f       	subi	r18, 0xFF	; 255
     124:	3f 4f       	sbci	r19, 0xFF	; 255
     126:	37 83       	std	Z+7, r19	; 0x07
     128:	26 83       	std	Z+6, r18	; 0x06
		if(buffer->dataindex >= buffer->size)
     12a:	62 81       	ldd	r22, Z+2	; 0x02
     12c:	73 81       	ldd	r23, Z+3	; 0x03
     12e:	26 17       	cp	r18, r22
     130:	37 07       	cpc	r19, r23
     132:	20 f0       	brcs	.+8      	; 0x13c <bufferGetFromFront+0x38>
		{
			buffer->dataindex -= buffer->size;
     134:	26 1b       	sub	r18, r22
     136:	37 0b       	sbc	r19, r23
     138:	37 83       	std	Z+7, r19	; 0x07
     13a:	26 83       	std	Z+6, r18	; 0x06
		}
		buffer->datalength--;
     13c:	41 50       	subi	r20, 0x01	; 1
     13e:	51 09       	sbc	r21, r1
     140:	55 83       	std	Z+5, r21	; 0x05
     142:	44 83       	std	Z+4, r20	; 0x04
     144:	01 c0       	rjmp	.+2      	; 0x148 <bufferGetFromFront+0x44>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
     146:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
     148:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
     14a:	08 95       	ret

0000014c <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     14c:	fc 01       	movw	r30, r24
     14e:	36 2f       	mov	r19, r22
	// begin critical section
	CRITICAL_SECTION_START;
     150:	2f b7       	in	r18, 0x3f	; 63
     152:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     154:	a4 81       	ldd	r26, Z+4	; 0x04
     156:	b5 81       	ldd	r27, Z+5	; 0x05
     158:	62 81       	ldd	r22, Z+2	; 0x02
     15a:	73 81       	ldd	r23, Z+3	; 0x03
     15c:	a6 17       	cp	r26, r22
     15e:	b7 07       	cpc	r27, r23
     160:	98 f4       	brcc	.+38     	; 0x188 <bufferAddToEnd+0x3c>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     162:	86 81       	ldd	r24, Z+6	; 0x06
     164:	97 81       	ldd	r25, Z+7	; 0x07
     166:	8a 0f       	add	r24, r26
     168:	9b 1f       	adc	r25, r27
     16a:	0e 94 2c 09 	call	0x1258	; 0x1258 <__udivmodhi4>
     16e:	a0 81       	ld	r26, Z
     170:	b1 81       	ldd	r27, Z+1	; 0x01
     172:	a8 0f       	add	r26, r24
     174:	b9 1f       	adc	r27, r25
     176:	3c 93       	st	X, r19
		// increment the length
		buffer->datalength++;
     178:	84 81       	ldd	r24, Z+4	; 0x04
     17a:	95 81       	ldd	r25, Z+5	; 0x05
     17c:	01 96       	adiw	r24, 0x01	; 1
     17e:	95 83       	std	Z+5, r25	; 0x05
     180:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     182:	2f bf       	out	0x3f, r18	; 63
		// return success
		return -1;
     184:	8f ef       	ldi	r24, 0xFF	; 255
     186:	08 95       	ret
	}
	// end critical section
	CRITICAL_SECTION_END;
     188:	2f bf       	out	0x3f, r18	; 63
	// return failure
	return 0;
     18a:	80 e0       	ldi	r24, 0x00	; 0
}
     18c:	08 95       	ret

0000018e <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
     18e:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     190:	4f b7       	in	r20, 0x3f	; 63
     192:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
     194:	82 81       	ldd	r24, Z+2	; 0x02
     196:	93 81       	ldd	r25, Z+3	; 0x03
     198:	24 81       	ldd	r18, Z+4	; 0x04
     19a:	35 81       	ldd	r19, Z+5	; 0x05
	// end critical section
	CRITICAL_SECTION_END;
     19c:	4f bf       	out	0x3f, r20	; 63
	return bytesleft;
}
     19e:	82 1b       	sub	r24, r18
     1a0:	93 0b       	sbc	r25, r19
     1a2:	08 95       	ret

000001a4 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
     1a4:	90 93 61 00 	sts	0x0061, r25
     1a8:	80 93 60 00 	sts	0x0060, r24
     1ac:	08 95       	ret

000001ae <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
     1ae:	cf 93       	push	r28
     1b0:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
     1b2:	8a 30       	cpi	r24, 0x0A	; 10
     1b4:	31 f4       	brne	.+12     	; 0x1c2 <rprintfChar+0x14>
		rputchar('\r');
     1b6:	e0 91 60 00 	lds	r30, 0x0060
     1ba:	f0 91 61 00 	lds	r31, 0x0061
     1be:	8d e0       	ldi	r24, 0x0D	; 13
     1c0:	09 95       	icall
	// send character
	rputchar(c);
     1c2:	e0 91 60 00 	lds	r30, 0x0060
     1c6:	f0 91 61 00 	lds	r31, 0x0061
     1ca:	8c 2f       	mov	r24, r28
}
     1cc:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     1ce:	09 94       	ijmp

000001d0 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
     1d0:	8f 70       	andi	r24, 0x0F	; 15
     1d2:	e8 2f       	mov	r30, r24
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	ec 59       	subi	r30, 0x9C	; 156
     1d8:	ff 4f       	sbci	r31, 0xFF	; 255
     1da:	84 91       	lpm	r24, Z
     1dc:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <rprintfChar>

000001e0 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
     1e0:	5f 92       	push	r5
     1e2:	6f 92       	push	r6
     1e4:	7f 92       	push	r7
     1e6:	8f 92       	push	r8
     1e8:	9f 92       	push	r9
     1ea:	af 92       	push	r10
     1ec:	bf 92       	push	r11
     1ee:	cf 92       	push	r12
     1f0:	df 92       	push	r13
     1f2:	ef 92       	push	r14
     1f4:	ff 92       	push	r15
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	1f 92       	push	r1
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
     204:	ec 89       	ldd	r30, Y+20	; 0x14
     206:	fd 89       	ldd	r31, Y+21	; 0x15
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
     208:	3e 01       	movw	r6, r28
     20a:	26 e1       	ldi	r18, 0x16	; 22
     20c:	62 0e       	add	r6, r18
     20e:	71 1c       	adc	r7, r1
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
					rprintfChar('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     210:	3a e0       	ldi	r19, 0x0A	; 10
     212:	a3 2e       	mov	r10, r19
     214:	b1 2c       	mov	r11, r1
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     216:	3b 89       	ldd	r19, Y+19	; 0x13
     218:	33 23       	and	r19, r19
     21a:	81 f0       	breq	.+32     	; 0x23c <rprintf1RamRom+0x5c>
     21c:	8f 01       	movw	r16, r30
     21e:	0f 5f       	subi	r16, 0xFF	; 255
     220:	1f 4f       	sbci	r17, 0xFF	; 255
     222:	84 91       	lpm	r24, Z
     224:	85 32       	cpi	r24, 0x25	; 37
     226:	89 f0       	breq	.+34     	; 0x24a <rprintf1RamRom+0x6a>
		{	// Until '%' or '\0'
			if (!format_flag)
     228:	88 23       	and	r24, r24
     22a:	09 f4       	brne	.+2      	; 0x22e <rprintf1RamRom+0x4e>
     22c:	66 c0       	rjmp	.+204    	; 0x2fa <rprintf1RamRom+0x11a>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
     22e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <rprintfChar>
     232:	63 01       	movw	r12, r6
     234:	78 01       	movw	r14, r16
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
     236:	36 01       	movw	r6, r12
     238:	f7 01       	movw	r30, r14
     23a:	ed cf       	rjmp	.-38     	; 0x216 <rprintf1RamRom+0x36>
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     23c:	80 81       	ld	r24, Z
     23e:	85 32       	cpi	r24, 0x25	; 37
     240:	59 f0       	breq	.+22     	; 0x258 <rprintf1RamRom+0x78>
     242:	8f 01       	movw	r16, r30
     244:	0f 5f       	subi	r16, 0xFF	; 255
     246:	1f 4f       	sbci	r17, 0xFF	; 255
     248:	ef cf       	rjmp	.-34     	; 0x228 <rprintf1RamRom+0x48>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
     24a:	7f 01       	movw	r14, r30
     24c:	82 e0       	ldi	r24, 0x02	; 2
     24e:	e8 0e       	add	r14, r24
     250:	f1 1c       	adc	r15, r1
     252:	f8 01       	movw	r30, r16
     254:	84 91       	lpm	r24, Z
     256:	05 c0       	rjmp	.+10     	; 0x262 <rprintf1RamRom+0x82>
     258:	7f 01       	movw	r14, r30
     25a:	22 e0       	ldi	r18, 0x02	; 2
     25c:	e2 0e       	add	r14, r18
     25e:	f1 1c       	adc	r15, r1
     260:	81 81       	ldd	r24, Z+1	; 0x01
     262:	84 36       	cpi	r24, 0x64	; 100
     264:	a1 f0       	breq	.+40     	; 0x28e <rprintf1RamRom+0xae>
     266:	88 37       	cpi	r24, 0x78	; 120
     268:	61 f0       	breq	.+24     	; 0x282 <rprintf1RamRom+0xa2>
     26a:	83 36       	cpi	r24, 0x63	; 99
     26c:	31 f4       	brne	.+12     	; 0x27a <rprintf1RamRom+0x9a>
		{
			case 'c': format_flag = va_arg(ap,int);
     26e:	f3 01       	movw	r30, r6
     270:	80 81       	ld	r24, Z
     272:	93 01       	movw	r18, r6
     274:	2e 5f       	subi	r18, 0xFE	; 254
     276:	3f 4f       	sbci	r19, 0xFF	; 255
     278:	39 01       	movw	r6, r18
			default:  rprintfChar(format_flag); continue;
     27a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <rprintfChar>
     27e:	63 01       	movw	r12, r6
     280:	da cf       	rjmp	.-76     	; 0x236 <rprintf1RamRom+0x56>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
     282:	20 e1       	ldi	r18, 0x10	; 16
     284:	82 2e       	mov	r8, r18
     286:	91 2c       	mov	r9, r1
     288:	00 e0       	ldi	r16, 0x00	; 0
     28a:	10 e1       	ldi	r17, 0x10	; 16
     28c:	05 c0       	rjmp	.+10     	; 0x298 <rprintf1RamRom+0xb8>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
     28e:	9a e0       	ldi	r25, 0x0A	; 10
     290:	89 2e       	mov	r8, r25
     292:	91 2c       	mov	r9, r1
     294:	00 e1       	ldi	r16, 0x10	; 16
     296:	17 e2       	ldi	r17, 0x27	; 39
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
     298:	63 01       	movw	r12, r6
     29a:	32 e0       	ldi	r19, 0x02	; 2
     29c:	c3 0e       	add	r12, r19
     29e:	d1 1c       	adc	r13, r1
     2a0:	f3 01       	movw	r30, r6
     2a2:	60 80       	ld	r6, Z
     2a4:	71 80       	ldd	r7, Z+1	; 0x01
			if (format_flag == 'd')
     2a6:	84 36       	cpi	r24, 0x64	; 100
     2a8:	a1 f4       	brne	.+40     	; 0x2d2 <rprintf1RamRom+0xf2>
			{
				if (((int)u_val) < 0)
     2aa:	77 fe       	sbrs	r7, 7
     2ac:	0f c0       	rjmp	.+30     	; 0x2cc <rprintf1RamRom+0xec>
				{
					u_val = - u_val;
     2ae:	71 94       	neg	r7
     2b0:	61 94       	neg	r6
     2b2:	71 08       	sbc	r7, r1
					rprintfChar('-');
     2b4:	8d e2       	ldi	r24, 0x2D	; 45
     2b6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <rprintfChar>
     2ba:	08 c0       	rjmp	.+16     	; 0x2cc <rprintf1RamRom+0xec>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     2bc:	c8 01       	movw	r24, r16
     2be:	b5 01       	movw	r22, r10
     2c0:	0e 94 2c 09 	call	0x1258	; 0x1258 <__udivmodhi4>
     2c4:	8b 01       	movw	r16, r22
     2c6:	62 30       	cpi	r22, 0x02	; 2
     2c8:	71 05       	cpc	r23, r1
     2ca:	18 f0       	brcs	.+6      	; 0x2d2 <rprintf1RamRom+0xf2>
     2cc:	60 16       	cp	r6, r16
     2ce:	71 06       	cpc	r7, r17
     2d0:	a8 f3       	brcs	.-22     	; 0x2bc <rprintf1RamRom+0xdc>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
     2d2:	c3 01       	movw	r24, r6
     2d4:	b8 01       	movw	r22, r16
     2d6:	0e 94 2c 09 	call	0x1258	; 0x1258 <__udivmodhi4>
     2da:	58 2e       	mov	r5, r24
     2dc:	86 2f       	mov	r24, r22
     2de:	99 83       	std	Y+1, r25	; 0x01
     2e0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <rprintfu04>
				u_val %= div_val;
     2e4:	65 2c       	mov	r6, r5
     2e6:	99 81       	ldd	r25, Y+1	; 0x01
     2e8:	79 2e       	mov	r7, r25
				div_val /= base;
     2ea:	c8 01       	movw	r24, r16
     2ec:	b4 01       	movw	r22, r8
     2ee:	0e 94 2c 09 	call	0x1258	; 0x1258 <__udivmodhi4>
     2f2:	8b 01       	movw	r16, r22
			} while (div_val);
     2f4:	67 2b       	or	r22, r23
     2f6:	69 f7       	brne	.-38     	; 0x2d2 <rprintf1RamRom+0xf2>
     2f8:	9e cf       	rjmp	.-196    	; 0x236 <rprintf1RamRom+0x56>
		}
	}
	va_end(ap);
}
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	0f 90       	pop	r0
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	ff 90       	pop	r15
     30a:	ef 90       	pop	r14
     30c:	df 90       	pop	r13
     30e:	cf 90       	pop	r12
     310:	bf 90       	pop	r11
     312:	af 90       	pop	r10
     314:	9f 90       	pop	r9
     316:	8f 90       	pop	r8
     318:	7f 90       	pop	r7
     31a:	6f 90       	pop	r6
     31c:	5f 90       	pop	r5
     31e:	08 95       	ret

00000320 <timer0SetPrescaler>:
#endif

void timer0SetPrescaler(u08 prescale)
{
	// set prescaler on timer 0
	outb(TCCR0, (inb(TCCR0) & ~TIMER_PRESCALE_MASK) | prescale);
     320:	93 b7       	in	r25, 0x33	; 51
     322:	98 7f       	andi	r25, 0xF8	; 248
     324:	89 2b       	or	r24, r25
     326:	83 bf       	out	0x33, r24	; 51
     328:	08 95       	ret

0000032a <timer0Init>:
}

void timer0Init()
{
	// initialize timer 0
	timer0SetPrescaler( TIMER0PRESCALE );	// set prescaler
     32a:	85 e0       	ldi	r24, 0x05	; 5
     32c:	0e 94 90 01 	call	0x320	; 0x320 <timer0SetPrescaler>
	outb(TCNT0, 0);							// reset TCNT0
     330:	12 be       	out	0x32, r1	; 50
	sbi(TIMSK, TOIE0);						// enable TCNT0 overflow interrupt
     332:	89 b7       	in	r24, 0x39	; 57
     334:	81 60       	ori	r24, 0x01	; 1
     336:	89 bf       	out	0x39, r24	; 57
	sbi(TIMSK, OCIE0);						// enable OCR0 Output Compare Match Interrupt
     338:	89 b7       	in	r24, 0x39	; 57
     33a:	82 60       	ori	r24, 0x02	; 2
     33c:	89 bf       	out	0x39, r24	; 57
}

void timer0ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer0Reg0 = 0;	// initialize time registers
     33e:	10 92 f4 02 	sts	0x02F4, r1
     342:	10 92 f5 02 	sts	0x02F5, r1
     346:	10 92 f6 02 	sts	0x02F6, r1
     34a:	10 92 f7 02 	sts	0x02F7, r1
     34e:	08 95       	ret

00000350 <timer1SetPrescaler>:
}

void timer1SetPrescaler(u08 prescale)
{
	// set prescaler on timer 1
	outb(TCCR1B, (inb(TCCR1B) & ~TIMER_PRESCALE_MASK) | prescale);
     350:	9e b5       	in	r25, 0x2e	; 46
     352:	98 7f       	andi	r25, 0xF8	; 248
     354:	89 2b       	or	r24, r25
     356:	8e bd       	out	0x2e, r24	; 46
     358:	08 95       	ret

0000035a <timer1Init>:
}

void timer1Init(void)
{
	// initialize timer 1
	timer1SetPrescaler( TIMER1PRESCALE );	// set prescaler
     35a:	82 e0       	ldi	r24, 0x02	; 2
     35c:	0e 94 a8 01 	call	0x350	; 0x350 <timer1SetPrescaler>
	outb(TCNT1H, 0);						// reset TCNT1
     360:	1d bc       	out	0x2d, r1	; 45
	outb(TCNT1L, 0);
     362:	1c bc       	out	0x2c, r1	; 44
	sbi(TIMSK, TOIE1);						// enable TCNT1 overflow
     364:	89 b7       	in	r24, 0x39	; 57
     366:	84 60       	ori	r24, 0x04	; 4
     368:	89 bf       	out	0x39, r24	; 57
     36a:	08 95       	ret

0000036c <timer2SetPrescaler>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2SetPrescaler(u08 prescale)
{
	// set prescaler on timer 2
	outb(TCCR2, (inb(TCCR2) & ~TIMER_PRESCALE_MASK) | prescale);
     36c:	95 b5       	in	r25, 0x25	; 37
     36e:	98 7f       	andi	r25, 0xF8	; 248
     370:	89 2b       	or	r24, r25
     372:	85 bd       	out	0x25, r24	; 37
     374:	08 95       	ret

00000376 <timer2Init>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2Init(void)
{
	// initialize timer 2
	timer2SetPrescaler( TIMER2PRESCALE );	// set prescaler
     376:	86 e0       	ldi	r24, 0x06	; 6
     378:	0e 94 b6 01 	call	0x36c	; 0x36c <timer2SetPrescaler>
	outb(TCNT2, 0);							// reset TCNT2
     37c:	14 bc       	out	0x24, r1	; 36
	sbi(TIMSK, TOIE2);						// enable TCNT2 overflow
     37e:	89 b7       	in	r24, 0x39	; 57
     380:	80 64       	ori	r24, 0x40	; 64
     382:	89 bf       	out	0x39, r24	; 57
	sbi(TIMSK, OCIE2);						// enable OCR2 Output Compare Match Interrupt
     384:	89 b7       	in	r24, 0x39	; 57
     386:	80 68       	ori	r24, 0x80	; 128
     388:	89 bf       	out	0x39, r24	; 57

#ifdef TCNT2	// support timer2 only if it exists
void timer2ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer2Reg0 = 0;	// initialize time registers
     38a:	10 92 fc 02 	sts	0x02FC, r1
     38e:	10 92 fd 02 	sts	0x02FD, r1
     392:	10 92 fe 02 	sts	0x02FE, r1
     396:	10 92 ff 02 	sts	0x02FF, r1
     39a:	08 95       	ret

0000039c <timerAttach>:
#endif

void timerAttach(u08 interruptNum, void (*userFunc)(void) )
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     39c:	88 30       	cpi	r24, 0x08	; 8
     39e:	40 f4       	brcc	.+16     	; 0x3b0 <timerAttach+0x14>
	{
		// set the interrupt function to run
		// the supplied user's function
		TimerIntFunc[interruptNum] = userFunc;
     3a0:	e8 2f       	mov	r30, r24
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	ee 0f       	add	r30, r30
     3a6:	ff 1f       	adc	r31, r31
     3a8:	ee 59       	subi	r30, 0x9E	; 158
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	71 83       	std	Z+1, r23	; 0x01
     3ae:	60 83       	st	Z, r22
     3b0:	08 95       	ret

000003b2 <timerDetach>:
}

void timerDetach(u08 interruptNum)
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     3b2:	88 30       	cpi	r24, 0x08	; 8
     3b4:	40 f4       	brcc	.+16     	; 0x3c6 <timerDetach+0x14>
	{
		// set the interrupt function to run nothing
		TimerIntFunc[interruptNum] = 0;
     3b6:	e8 2f       	mov	r30, r24
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	ee 0f       	add	r30, r30
     3bc:	ff 1f       	adc	r31, r31
     3be:	ee 59       	subi	r30, 0x9E	; 158
     3c0:	ff 4f       	sbci	r31, 0xFF	; 255
     3c2:	11 82       	std	Z+1, r1	; 0x01
     3c4:	10 82       	st	Z, r1
     3c6:	08 95       	ret

000003c8 <timerInit>:
                  :"r"(time_ms), "r"((unsigned short) (delay_count))
	);
}
*/
void timerInit(void)
{
     3c8:	cf 93       	push	r28
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
     3ca:	c0 e0       	ldi	r28, 0x00	; 0
		timerDetach(intNum);
     3cc:	8c 2f       	mov	r24, r28
     3ce:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <timerDetach>
*/
void timerInit(void)
{
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
     3d2:	cf 5f       	subi	r28, 0xFF	; 255
     3d4:	c8 30       	cpi	r28, 0x08	; 8
     3d6:	d1 f7       	brne	.-12     	; 0x3cc <timerInit+0x4>
		timerDetach(intNum);

	// initialize all timers
	timer0Init();
     3d8:	0e 94 95 01 	call	0x32a	; 0x32a <timer0Init>
	timer1Init();
     3dc:	0e 94 ad 01 	call	0x35a	; 0x35a <timer1Init>
	#ifdef TCNT2	// support timer2 only if it exists
	timer2Init();
     3e0:	0e 94 bb 01 	call	0x376	; 0x376 <timer2Init>
	#endif
	// enable interrupts
	sei();
     3e4:	78 94       	sei
}
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <timer1PWMInit>:
	// configures timer1 for use with PWM output
	// on OC1A and OC1B pins
	// phase correct PWM mode, FREQpwm=F_CPU/(2*N*TOP)

	// enable timer1 as 8,9,10bit PWM
	if(bitRes == 9)
     3ea:	89 30       	cpi	r24, 0x09	; 9
     3ec:	31 f4       	brne	.+12     	; 0x3fa <timer1PWMInit+0x10>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     3ee:	8f b5       	in	r24, 0x2f	; 47
     3f0:	82 60       	ori	r24, 0x02	; 2
     3f2:	8f bd       	out	0x2f, r24	; 47
		cbi(TCCR1A,PWM10);
     3f4:	8f b5       	in	r24, 0x2f	; 47
     3f6:	8e 7f       	andi	r24, 0xFE	; 254
     3f8:	0a c0       	rjmp	.+20     	; 0x40e <timer1PWMInit+0x24>
	}
	else if( bitRes == 10 )
     3fa:	8a 30       	cpi	r24, 0x0A	; 10
     3fc:	19 f4       	brne	.+6      	; 0x404 <timer1PWMInit+0x1a>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     3fe:	8f b5       	in	r24, 0x2f	; 47
     400:	82 60       	ori	r24, 0x02	; 2
     402:	02 c0       	rjmp	.+4      	; 0x408 <timer1PWMInit+0x1e>
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     404:	8f b5       	in	r24, 0x2f	; 47
     406:	8d 7f       	andi	r24, 0xFD	; 253
     408:	8f bd       	out	0x2f, r24	; 47
		sbi(TCCR1A,PWM10);
     40a:	8f b5       	in	r24, 0x2f	; 47
     40c:	81 60       	ori	r24, 0x01	; 1
     40e:	8f bd       	out	0x2f, r24	; 47
	}

	// clear output compare value A
	outb(OCR1AH, 0);
     410:	1b bc       	out	0x2b, r1	; 43
	outb(OCR1AL, 0);
     412:	1a bc       	out	0x2a, r1	; 42
	// clear output compare value B
	outb(OCR1BH, 0);
     414:	19 bc       	out	0x29, r1	; 41
	outb(OCR1BL, 0);
     416:	18 bc       	out	0x28, r1	; 40
     418:	08 95       	ret

0000041a <timer1PWMAOn>:

void timer1PWMAOn(void)
{
	// turn on channel A (OC1A) PWM output
	// set OC1A as non-inverted PWM
	sbi(TCCR1A,COM1A1);
     41a:	8f b5       	in	r24, 0x2f	; 47
     41c:	80 68       	ori	r24, 0x80	; 128
     41e:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1A0);
     420:	8f b5       	in	r24, 0x2f	; 47
     422:	8f 7b       	andi	r24, 0xBF	; 191
     424:	8f bd       	out	0x2f, r24	; 47
     426:	08 95       	ret

00000428 <timer1PWMBOn>:

void timer1PWMBOn(void)
{
	// turn on channel B (OC1B) PWM output
	// set OC1B as non-inverted PWM
	sbi(TCCR1A,COM1B1);
     428:	8f b5       	in	r24, 0x2f	; 47
     42a:	80 62       	ori	r24, 0x20	; 32
     42c:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1B0);
     42e:	8f b5       	in	r24, 0x2f	; 47
     430:	8f 7e       	andi	r24, 0xEF	; 239
     432:	8f bd       	out	0x2f, r24	; 47
     434:	08 95       	ret

00000436 <timer1PWMASet>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1AH);		// set the high 8bits of OCR1A
	//outp( (pwmDuty&0x00FF), OCR1AL);	// set the low 8bits of OCR1A
	OCR1A = pwmDuty;
     436:	9b bd       	out	0x2b, r25	; 43
     438:	8a bd       	out	0x2a, r24	; 42
     43a:	08 95       	ret

0000043c <timer1PWMBSet>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
     43c:	99 bd       	out	0x29, r25	; 41
     43e:	88 bd       	out	0x28, r24	; 40
     440:	08 95       	ret

00000442 <__vector_9>:
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
     442:	1f 92       	push	r1
     444:	0f 92       	push	r0
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	0f 92       	push	r0
     44a:	11 24       	eor	r1, r1
     44c:	2f 93       	push	r18
     44e:	3f 93       	push	r19
     450:	4f 93       	push	r20
     452:	5f 93       	push	r21
     454:	6f 93       	push	r22
     456:	7f 93       	push	r23
     458:	8f 93       	push	r24
     45a:	9f 93       	push	r25
     45c:	af 93       	push	r26
     45e:	bf 93       	push	r27
     460:	ef 93       	push	r30
     462:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
     464:	80 91 f4 02 	lds	r24, 0x02F4
     468:	90 91 f5 02 	lds	r25, 0x02F5
     46c:	a0 91 f6 02 	lds	r26, 0x02F6
     470:	b0 91 f7 02 	lds	r27, 0x02F7
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	a1 1d       	adc	r26, r1
     478:	b1 1d       	adc	r27, r1
     47a:	80 93 f4 02 	sts	0x02F4, r24
     47e:	90 93 f5 02 	sts	0x02F5, r25
     482:	a0 93 f6 02 	sts	0x02F6, r26
     486:	b0 93 f7 02 	sts	0x02F7, r27

	// increment pause counter
	TimerPauseReg++;
     48a:	80 91 f8 02 	lds	r24, 0x02F8
     48e:	90 91 f9 02 	lds	r25, 0x02F9
     492:	a0 91 fa 02 	lds	r26, 0x02FA
     496:	b0 91 fb 02 	lds	r27, 0x02FB
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	a1 1d       	adc	r26, r1
     49e:	b1 1d       	adc	r27, r1
     4a0:	80 93 f8 02 	sts	0x02F8, r24
     4a4:	90 93 f9 02 	sts	0x02F9, r25
     4a8:	a0 93 fa 02 	sts	0x02FA, r26
     4ac:	b0 93 fb 02 	sts	0x02FB, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
     4b0:	80 91 62 00 	lds	r24, 0x0062
     4b4:	90 91 63 00 	lds	r25, 0x0063
     4b8:	89 2b       	or	r24, r25
     4ba:	29 f0       	breq	.+10     	; 0x4c6 <__stack+0x67>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
     4bc:	e0 91 62 00 	lds	r30, 0x0062
     4c0:	f0 91 63 00 	lds	r31, 0x0063
     4c4:	09 95       	icall
}
     4c6:	ff 91       	pop	r31
     4c8:	ef 91       	pop	r30
     4ca:	bf 91       	pop	r27
     4cc:	af 91       	pop	r26
     4ce:	9f 91       	pop	r25
     4d0:	8f 91       	pop	r24
     4d2:	7f 91       	pop	r23
     4d4:	6f 91       	pop	r22
     4d6:	5f 91       	pop	r21
     4d8:	4f 91       	pop	r20
     4da:	3f 91       	pop	r19
     4dc:	2f 91       	pop	r18
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <__vector_8>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
     4e8:	1f 92       	push	r1
     4ea:	0f 92       	push	r0
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	0f 92       	push	r0
     4f0:	11 24       	eor	r1, r1
     4f2:	2f 93       	push	r18
     4f4:	3f 93       	push	r19
     4f6:	4f 93       	push	r20
     4f8:	5f 93       	push	r21
     4fa:	6f 93       	push	r22
     4fc:	7f 93       	push	r23
     4fe:	8f 93       	push	r24
     500:	9f 93       	push	r25
     502:	af 93       	push	r26
     504:	bf 93       	push	r27
     506:	ef 93       	push	r30
     508:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
     50a:	80 91 64 00 	lds	r24, 0x0064
     50e:	90 91 65 00 	lds	r25, 0x0065
     512:	89 2b       	or	r24, r25
     514:	29 f0       	breq	.+10     	; 0x520 <__vector_8+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
     516:	e0 91 64 00 	lds	r30, 0x0064
     51a:	f0 91 65 00 	lds	r31, 0x0065
     51e:	09 95       	icall
}
     520:	ff 91       	pop	r31
     522:	ef 91       	pop	r30
     524:	bf 91       	pop	r27
     526:	af 91       	pop	r26
     528:	9f 91       	pop	r25
     52a:	8f 91       	pop	r24
     52c:	7f 91       	pop	r23
     52e:	6f 91       	pop	r22
     530:	5f 91       	pop	r21
     532:	4f 91       	pop	r20
     534:	3f 91       	pop	r19
     536:	2f 91       	pop	r18
     538:	0f 90       	pop	r0
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	0f 90       	pop	r0
     53e:	1f 90       	pop	r1
     540:	18 95       	reti

00000542 <__vector_4>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
     542:	1f 92       	push	r1
     544:	0f 92       	push	r0
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	0f 92       	push	r0
     54a:	11 24       	eor	r1, r1
     54c:	2f 93       	push	r18
     54e:	3f 93       	push	r19
     550:	4f 93       	push	r20
     552:	5f 93       	push	r21
     554:	6f 93       	push	r22
     556:	7f 93       	push	r23
     558:	8f 93       	push	r24
     55a:	9f 93       	push	r25
     55c:	af 93       	push	r26
     55e:	bf 93       	push	r27
     560:	ef 93       	push	r30
     562:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
     564:	80 91 fc 02 	lds	r24, 0x02FC
     568:	90 91 fd 02 	lds	r25, 0x02FD
     56c:	a0 91 fe 02 	lds	r26, 0x02FE
     570:	b0 91 ff 02 	lds	r27, 0x02FF
     574:	01 96       	adiw	r24, 0x01	; 1
     576:	a1 1d       	adc	r26, r1
     578:	b1 1d       	adc	r27, r1
     57a:	80 93 fc 02 	sts	0x02FC, r24
     57e:	90 93 fd 02 	sts	0x02FD, r25
     582:	a0 93 fe 02 	sts	0x02FE, r26
     586:	b0 93 ff 02 	sts	0x02FF, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
     58a:	80 91 6c 00 	lds	r24, 0x006C
     58e:	90 91 6d 00 	lds	r25, 0x006D
     592:	89 2b       	or	r24, r25
     594:	29 f0       	breq	.+10     	; 0x5a0 <__vector_4+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
     596:	e0 91 6c 00 	lds	r30, 0x006C
     59a:	f0 91 6d 00 	lds	r31, 0x006D
     59e:	09 95       	icall
}
     5a0:	ff 91       	pop	r31
     5a2:	ef 91       	pop	r30
     5a4:	bf 91       	pop	r27
     5a6:	af 91       	pop	r26
     5a8:	9f 91       	pop	r25
     5aa:	8f 91       	pop	r24
     5ac:	7f 91       	pop	r23
     5ae:	6f 91       	pop	r22
     5b0:	5f 91       	pop	r21
     5b2:	4f 91       	pop	r20
     5b4:	3f 91       	pop	r19
     5b6:	2f 91       	pop	r18
     5b8:	0f 90       	pop	r0
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	0f 90       	pop	r0
     5be:	1f 90       	pop	r1
     5c0:	18 95       	reti

000005c2 <__vector_19>:

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_COMP_vect)
{
     5c2:	1f 92       	push	r1
     5c4:	0f 92       	push	r0
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	0f 92       	push	r0
     5ca:	11 24       	eor	r1, r1
     5cc:	2f 93       	push	r18
     5ce:	3f 93       	push	r19
     5d0:	4f 93       	push	r20
     5d2:	5f 93       	push	r21
     5d4:	6f 93       	push	r22
     5d6:	7f 93       	push	r23
     5d8:	8f 93       	push	r24
     5da:	9f 93       	push	r25
     5dc:	af 93       	push	r26
     5de:	bf 93       	push	r27
     5e0:	ef 93       	push	r30
     5e2:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
     5e4:	80 91 70 00 	lds	r24, 0x0070
     5e8:	90 91 71 00 	lds	r25, 0x0071
     5ec:	89 2b       	or	r24, r25
     5ee:	29 f0       	breq	.+10     	; 0x5fa <__vector_19+0x38>
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
     5f0:	e0 91 70 00 	lds	r30, 0x0070
     5f4:	f0 91 71 00 	lds	r31, 0x0071
     5f8:	09 95       	icall
}
     5fa:	ff 91       	pop	r31
     5fc:	ef 91       	pop	r30
     5fe:	bf 91       	pop	r27
     600:	af 91       	pop	r26
     602:	9f 91       	pop	r25
     604:	8f 91       	pop	r24
     606:	7f 91       	pop	r23
     608:	6f 91       	pop	r22
     60a:	5f 91       	pop	r21
     60c:	4f 91       	pop	r20
     60e:	3f 91       	pop	r19
     610:	2f 91       	pop	r18
     612:	0f 90       	pop	r0
     614:	0f be       	out	0x3f, r0	; 63
     616:	0f 90       	pop	r0
     618:	1f 90       	pop	r1
     61a:	18 95       	reti

0000061c <__vector_6>:
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
     61c:	1f 92       	push	r1
     61e:	0f 92       	push	r0
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	0f 92       	push	r0
     624:	11 24       	eor	r1, r1
     626:	2f 93       	push	r18
     628:	3f 93       	push	r19
     62a:	4f 93       	push	r20
     62c:	5f 93       	push	r21
     62e:	6f 93       	push	r22
     630:	7f 93       	push	r23
     632:	8f 93       	push	r24
     634:	9f 93       	push	r25
     636:	af 93       	push	r26
     638:	bf 93       	push	r27
     63a:	ef 93       	push	r30
     63c:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
     63e:	80 91 66 00 	lds	r24, 0x0066
     642:	90 91 67 00 	lds	r25, 0x0067
     646:	89 2b       	or	r24, r25
     648:	29 f0       	breq	.+10     	; 0x654 <__vector_6+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
     64a:	e0 91 66 00 	lds	r30, 0x0066
     64e:	f0 91 67 00 	lds	r31, 0x0067
     652:	09 95       	icall
}
     654:	ff 91       	pop	r31
     656:	ef 91       	pop	r30
     658:	bf 91       	pop	r27
     65a:	af 91       	pop	r26
     65c:	9f 91       	pop	r25
     65e:	8f 91       	pop	r24
     660:	7f 91       	pop	r23
     662:	6f 91       	pop	r22
     664:	5f 91       	pop	r21
     666:	4f 91       	pop	r20
     668:	3f 91       	pop	r19
     66a:	2f 91       	pop	r18
     66c:	0f 90       	pop	r0
     66e:	0f be       	out	0x3f, r0	; 63
     670:	0f 90       	pop	r0
     672:	1f 90       	pop	r1
     674:	18 95       	reti

00000676 <__vector_7>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
     676:	1f 92       	push	r1
     678:	0f 92       	push	r0
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	0f 92       	push	r0
     67e:	11 24       	eor	r1, r1
     680:	2f 93       	push	r18
     682:	3f 93       	push	r19
     684:	4f 93       	push	r20
     686:	5f 93       	push	r21
     688:	6f 93       	push	r22
     68a:	7f 93       	push	r23
     68c:	8f 93       	push	r24
     68e:	9f 93       	push	r25
     690:	af 93       	push	r26
     692:	bf 93       	push	r27
     694:	ef 93       	push	r30
     696:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
     698:	80 91 68 00 	lds	r24, 0x0068
     69c:	90 91 69 00 	lds	r25, 0x0069
     6a0:	89 2b       	or	r24, r25
     6a2:	29 f0       	breq	.+10     	; 0x6ae <__vector_7+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
     6a4:	e0 91 68 00 	lds	r30, 0x0068
     6a8:	f0 91 69 00 	lds	r31, 0x0069
     6ac:	09 95       	icall
}
     6ae:	ff 91       	pop	r31
     6b0:	ef 91       	pop	r30
     6b2:	bf 91       	pop	r27
     6b4:	af 91       	pop	r26
     6b6:	9f 91       	pop	r25
     6b8:	8f 91       	pop	r24
     6ba:	7f 91       	pop	r23
     6bc:	6f 91       	pop	r22
     6be:	5f 91       	pop	r21
     6c0:	4f 91       	pop	r20
     6c2:	3f 91       	pop	r19
     6c4:	2f 91       	pop	r18
     6c6:	0f 90       	pop	r0
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	0f 90       	pop	r0
     6cc:	1f 90       	pop	r1
     6ce:	18 95       	reti

000006d0 <__vector_5>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
     6d0:	1f 92       	push	r1
     6d2:	0f 92       	push	r0
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	0f 92       	push	r0
     6d8:	11 24       	eor	r1, r1
     6da:	2f 93       	push	r18
     6dc:	3f 93       	push	r19
     6de:	4f 93       	push	r20
     6e0:	5f 93       	push	r21
     6e2:	6f 93       	push	r22
     6e4:	7f 93       	push	r23
     6e6:	8f 93       	push	r24
     6e8:	9f 93       	push	r25
     6ea:	af 93       	push	r26
     6ec:	bf 93       	push	r27
     6ee:	ef 93       	push	r30
     6f0:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
     6f2:	80 91 6a 00 	lds	r24, 0x006A
     6f6:	90 91 6b 00 	lds	r25, 0x006B
     6fa:	89 2b       	or	r24, r25
     6fc:	29 f0       	breq	.+10     	; 0x708 <__vector_5+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
     6fe:	e0 91 6a 00 	lds	r30, 0x006A
     702:	f0 91 6b 00 	lds	r31, 0x006B
     706:	09 95       	icall
}
     708:	ff 91       	pop	r31
     70a:	ef 91       	pop	r30
     70c:	bf 91       	pop	r27
     70e:	af 91       	pop	r26
     710:	9f 91       	pop	r25
     712:	8f 91       	pop	r24
     714:	7f 91       	pop	r23
     716:	6f 91       	pop	r22
     718:	5f 91       	pop	r21
     71a:	4f 91       	pop	r20
     71c:	3f 91       	pop	r19
     71e:	2f 91       	pop	r18
     720:	0f 90       	pop	r0
     722:	0f be       	out	0x3f, r0	; 63
     724:	0f 90       	pop	r0
     726:	1f 90       	pop	r1
     728:	18 95       	reti

0000072a <__vector_3>:

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMP_vect)
{
     72a:	1f 92       	push	r1
     72c:	0f 92       	push	r0
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	0f 92       	push	r0
     732:	11 24       	eor	r1, r1
     734:	2f 93       	push	r18
     736:	3f 93       	push	r19
     738:	4f 93       	push	r20
     73a:	5f 93       	push	r21
     73c:	6f 93       	push	r22
     73e:	7f 93       	push	r23
     740:	8f 93       	push	r24
     742:	9f 93       	push	r25
     744:	af 93       	push	r26
     746:	bf 93       	push	r27
     748:	ef 93       	push	r30
     74a:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     74c:	80 91 6e 00 	lds	r24, 0x006E
     750:	90 91 6f 00 	lds	r25, 0x006F
     754:	89 2b       	or	r24, r25
     756:	29 f0       	breq	.+10     	; 0x762 <__vector_3+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     758:	e0 91 6e 00 	lds	r30, 0x006E
     75c:	f0 91 6f 00 	lds	r31, 0x006F
     760:	09 95       	icall
}
     762:	ff 91       	pop	r31
     764:	ef 91       	pop	r30
     766:	bf 91       	pop	r27
     768:	af 91       	pop	r26
     76a:	9f 91       	pop	r25
     76c:	8f 91       	pop	r24
     76e:	7f 91       	pop	r23
     770:	6f 91       	pop	r22
     772:	5f 91       	pop	r21
     774:	4f 91       	pop	r20
     776:	3f 91       	pop	r19
     778:	2f 91       	pop	r18
     77a:	0f 90       	pop	r0
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	0f 90       	pop	r0
     780:	1f 90       	pop	r1
     782:	18 95       	reti

00000784 <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (unsigned char *)uartRxData, UART_RX_BUFFER_SIZE);
     784:	40 e4       	ldi	r20, 0x40	; 64
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	64 eb       	ldi	r22, 0xB4	; 180
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	93 e0       	ldi	r25, 0x03	; 3
     790:	0e 94 75 00 	call	0xea	; 0xea <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (unsigned char *)uartTxData, UART_TX_BUFFER_SIZE);
     794:	40 e4       	ldi	r20, 0x40	; 64
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	64 e7       	ldi	r22, 0x74	; 116
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	8a e0       	ldi	r24, 0x0A	; 10
     79e:	93 e0       	ldi	r25, 0x03	; 3
     7a0:	0c 94 75 00 	jmp	0xea	; 0xea <bufferInit>

000007a4 <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
     7a4:	0e 94 c2 03 	call	0x784	; 0x784 <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
     7a8:	10 92 73 00 	sts	0x0073, r1
     7ac:	10 92 72 00 	sts	0x0072, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     7b0:	88 ed       	ldi	r24, 0xD8	; 216
     7b2:	8a b9       	out	0x0a, r24	; 10
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
     7b4:	8f e5       	ldi	r24, 0x5F	; 95
     7b6:	89 b9       	out	0x09, r24	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
     7b8:	10 bc       	out	0x20, r1	; 32
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
     7ba:	8f ef       	ldi	r24, 0xFF	; 255
     7bc:	80 93 00 03 	sts	0x0300, r24
	uartBufferedTx = FALSE;
     7c0:	10 92 09 03 	sts	0x0309, r1
	// clear overflow count
	uartRxOverflow = 0;
     7c4:	10 92 13 03 	sts	0x0313, r1
     7c8:	10 92 12 03 	sts	0x0312, r1
	// enable interrupts
	sei();
     7cc:	78 94       	sei
     7ce:	08 95       	ret

000007d0 <uartSetBaudRate>:
	UartRxFunc = rx_func;
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	8b 01       	movw	r16, r22
     7d6:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
     7d8:	dc 01       	movw	r26, r24
     7da:	cb 01       	movw	r24, r22
     7dc:	90 5e       	subi	r25, 0xE0	; 224
     7de:	a3 4e       	sbci	r26, 0xE3	; 227
     7e0:	bf 4f       	sbci	r27, 0xFF	; 255
     7e2:	bc 01       	movw	r22, r24
     7e4:	cd 01       	movw	r24, r26
     7e6:	43 e0       	ldi	r20, 0x03	; 3
     7e8:	66 0f       	add	r22, r22
     7ea:	77 1f       	adc	r23, r23
     7ec:	88 1f       	adc	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	4a 95       	dec	r20
     7f2:	d1 f7       	brne	.-12     	; 0x7e8 <uartSetBaudRate+0x18>
     7f4:	a9 01       	movw	r20, r18
     7f6:	98 01       	movw	r18, r16
     7f8:	e4 e0       	ldi	r30, 0x04	; 4
     7fa:	22 0f       	add	r18, r18
     7fc:	33 1f       	adc	r19, r19
     7fe:	44 1f       	adc	r20, r20
     800:	55 1f       	adc	r21, r21
     802:	ea 95       	dec	r30
     804:	d1 f7       	brne	.-12     	; 0x7fa <uartSetBaudRate+0x2a>
     806:	0e 94 40 09 	call	0x1280	; 0x1280 <__udivmodsi4>
     80a:	21 50       	subi	r18, 0x01	; 1
     80c:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
     80e:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
     810:	30 bd       	out	0x20, r19	; 32
	#endif
}
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	08 95       	ret

00000818 <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
     818:	90 91 00 03 	lds	r25, 0x0300
     81c:	99 23       	and	r25, r25
     81e:	e1 f3       	breq	.-8      	; 0x818 <uartSendByte>
	// send byte
	outb(UDR, txData);
     820:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
     822:	10 92 00 03 	sts	0x0300, r1
     826:	08 95       	ret

00000828 <__vector_13>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_TRANS)
{
     828:	1f 92       	push	r1
     82a:	0f 92       	push	r0
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	0f 92       	push	r0
     830:	11 24       	eor	r1, r1
     832:	2f 93       	push	r18
     834:	3f 93       	push	r19
     836:	4f 93       	push	r20
     838:	5f 93       	push	r21
     83a:	6f 93       	push	r22
     83c:	7f 93       	push	r23
     83e:	8f 93       	push	r24
     840:	9f 93       	push	r25
     842:	af 93       	push	r26
     844:	bf 93       	push	r27
     846:	ef 93       	push	r30
     848:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
     84a:	80 91 09 03 	lds	r24, 0x0309
     84e:	88 23       	and	r24, r24
     850:	71 f0       	breq	.+28     	; 0x86e <__vector_13+0x46>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
     852:	80 91 0e 03 	lds	r24, 0x030E
     856:	90 91 0f 03 	lds	r25, 0x030F
     85a:	89 2b       	or	r24, r25
     85c:	31 f0       	breq	.+12     	; 0x86a <__vector_13+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
     85e:	8a e0       	ldi	r24, 0x0A	; 10
     860:	93 e0       	ldi	r25, 0x03	; 3
     862:	0e 94 82 00 	call	0x104	; 0x104 <bufferGetFromFront>
     866:	8c b9       	out	0x0c, r24	; 12
     868:	05 c0       	rjmp	.+10     	; 0x874 <__vector_13+0x4c>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
     86a:	10 92 09 03 	sts	0x0309, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
     86e:	8f ef       	ldi	r24, 0xFF	; 255
     870:	80 93 00 03 	sts	0x0300, r24
	}
}
     874:	ff 91       	pop	r31
     876:	ef 91       	pop	r30
     878:	bf 91       	pop	r27
     87a:	af 91       	pop	r26
     87c:	9f 91       	pop	r25
     87e:	8f 91       	pop	r24
     880:	7f 91       	pop	r23
     882:	6f 91       	pop	r22
     884:	5f 91       	pop	r21
     886:	4f 91       	pop	r20
     888:	3f 91       	pop	r19
     88a:	2f 91       	pop	r18
     88c:	0f 90       	pop	r0
     88e:	0f be       	out	0x3f, r0	; 63
     890:	0f 90       	pop	r0
     892:	1f 90       	pop	r1
     894:	18 95       	reti

00000896 <__vector_11>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_RECV)
{
     896:	1f 92       	push	r1
     898:	0f 92       	push	r0
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	0f 92       	push	r0
     89e:	11 24       	eor	r1, r1
     8a0:	2f 93       	push	r18
     8a2:	3f 93       	push	r19
     8a4:	4f 93       	push	r20
     8a6:	5f 93       	push	r21
     8a8:	6f 93       	push	r22
     8aa:	7f 93       	push	r23
     8ac:	8f 93       	push	r24
     8ae:	9f 93       	push	r25
     8b0:	af 93       	push	r26
     8b2:	bf 93       	push	r27
     8b4:	ef 93       	push	r30
     8b6:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
     8b8:	8c b1       	in	r24, 0x0c	; 12

	// if there's a user function to handle this receive event
	if(UartRxFunc)
     8ba:	20 91 72 00 	lds	r18, 0x0072
     8be:	30 91 73 00 	lds	r19, 0x0073
     8c2:	23 2b       	or	r18, r19
     8c4:	31 f0       	breq	.+12     	; 0x8d2 <__vector_11+0x3c>
	{
		// call it and pass the received data
		UartRxFunc(c);
     8c6:	e0 91 72 00 	lds	r30, 0x0072
     8ca:	f0 91 73 00 	lds	r31, 0x0073
     8ce:	09 95       	icall
     8d0:	10 c0       	rjmp	.+32     	; 0x8f2 <__vector_11+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
     8d2:	68 2f       	mov	r22, r24
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	93 e0       	ldi	r25, 0x03	; 3
     8d8:	0e 94 a6 00 	call	0x14c	; 0x14c <bufferAddToEnd>
     8dc:	81 11       	cpse	r24, r1
     8de:	09 c0       	rjmp	.+18     	; 0x8f2 <__vector_11+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
     8e0:	80 91 12 03 	lds	r24, 0x0312
     8e4:	90 91 13 03 	lds	r25, 0x0313
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	90 93 13 03 	sts	0x0313, r25
     8ee:	80 93 12 03 	sts	0x0312, r24
		}
	}
}
     8f2:	ff 91       	pop	r31
     8f4:	ef 91       	pop	r30
     8f6:	bf 91       	pop	r27
     8f8:	af 91       	pop	r26
     8fa:	9f 91       	pop	r25
     8fc:	8f 91       	pop	r24
     8fe:	7f 91       	pop	r23
     900:	6f 91       	pop	r22
     902:	5f 91       	pop	r21
     904:	4f 91       	pop	r20
     906:	3f 91       	pop	r19
     908:	2f 91       	pop	r18
     90a:	0f 90       	pop	r0
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	0f 90       	pop	r0
     910:	1f 90       	pop	r1
     912:	18 95       	reti

00000914 <AppOutputCompare0>:
* Returns    : none
*********************************************************************************************************
*/
void AppOutputCompare0(void)
{
	OCR0 = TCNT0 + CYCLEN_60HZ;
     914:	82 b7       	in	r24, 0x32	; 50
     916:	80 51       	subi	r24, 0x10	; 16
     918:	8c bf       	out	0x3c, r24	; 60
	appl.fSysPwrZC = 1;
     91a:	e4 e1       	ldi	r30, 0x14	; 20
     91c:	f3 e0       	ldi	r31, 0x03	; 3
     91e:	80 81       	ld	r24, Z
     920:	81 60       	ori	r24, 0x01	; 1
     922:	80 83       	st	Z, r24
     924:	08 95       	ret

00000926 <AppDisplay>:
* Returns    : true, power on control has finised. false, is processing
*********************************************************************************************************
*/
void AppDisplay(DISP_CODE DispCode, WORK_MODE mode)
{
	switch(DispCode)
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	88 30       	cpi	r24, 0x08	; 8
     92a:	91 05       	cpc	r25, r1
     92c:	a8 f5       	brcc	.+106    	; 0x998 <AppDisplay+0x72>
     92e:	fc 01       	movw	r30, r24
     930:	e6 5d       	subi	r30, 0xD6	; 214
     932:	ff 4f       	sbci	r31, 0xFF	; 255
     934:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__tablejump2__>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(START_CHAR, SSD_0HZ, SSD_RED);
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	29 c0       	rjmp	.+82     	; 0x994 <AppDisplay+0x6e>
			break;
			
		case CURRENT_VALUE:
			if(mode == PWR_ON)
     942:	61 30       	cpi	r22, 0x01	; 1
     944:	29 f0       	breq	.+10     	; 0x950 <AppDisplay+0x2a>
			{
				SSDDisplayDec(CURRENT_VALUE, SSD_0HZ, SSD_RED);
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	22 c0       	rjmp	.+68     	; 0x994 <AppDisplay+0x6e>
			}
			else if(mode == NORMAL)
			{
				SSDDisplayDec(MeasureGetResult0(), SSD_0HZ, SSD_RED);
     950:	0e 94 c2 07 	call	0xf84	; 0xf84 <MeasureGetResult0>
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	1d c0       	rjmp	.+58     	; 0x994 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(FULL_WAREHOUSE, SSD_0HZ, SSD_RED);
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	82 e0       	ldi	r24, 0x02	; 2
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	18 c0       	rjmp	.+48     	; 0x994 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(EMPTY_WAREHOUSE, SSD_0HZ, SSD_RED);
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	83 e0       	ldi	r24, 0x03	; 3
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	13 c0       	rjmp	.+38     	; 0x994 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(ALARM_H_PERCENT, SSD_0HZ, SSD_RED);
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	84 e0       	ldi	r24, 0x04	; 4
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e c0       	rjmp	.+28     	; 0x994 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(ALARM_L_PERCENT, SSD_0HZ, SSD_RED);
     978:	40 e0       	ldi	r20, 0x00	; 0
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	85 e0       	ldi	r24, 0x05	; 5
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	09 c0       	rjmp	.+18     	; 0x994 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(RESPONSE_TIME, SSD_0HZ, SSD_RED);
     982:	40 e0       	ldi	r20, 0x00	; 0
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	86 e0       	ldi	r24, 0x06	; 6
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	04 c0       	rjmp	.+8      	; 0x994 <AppDisplay+0x6e>
			}
			else	/* setting mode */
			{

			}
			SSDDisplayDec(REMOTE_ADDR, SSD_0HZ, SSD_RED);
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	87 e0       	ldi	r24, 0x07	; 7
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0c 94 0d 08 	jmp	0x101a	; 0x101a <SSDDisplayDec>
     998:	08 95       	ret

0000099a <McuInit>:
*/

void McuInit(void)
{
	/* Initial uart */
	uartInit();	
     99a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <uartInit>
	uartSetBaudRate(9600);
     99e:	60 e8       	ldi	r22, 0x80	; 128
     9a0:	75 e2       	ldi	r23, 0x25	; 37
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <uartSetBaudRate>
	rprintfInit(uartSendByte);
     9aa:	8c e0       	ldi	r24, 0x0C	; 12
     9ac:	94 e0       	ldi	r25, 0x04	; 4
     9ae:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <rprintfInit>

	/* Initial ADC */
	ADCInit();
     9b2:	0e 94 bc 08 	call	0x1178	; 0x1178 <ADCInit>
	
	/* Initial T0, T1 and T2 */
	timerInit();
     9b6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <timerInit>
	sbi(DDRD, PD4);		/* set PD4(OC1B) as output */
     9ba:	8c 9a       	sbi	0x11, 4	; 17
	sbi(DDRD, PD5);		/* set PD5(OC1A) as output */
     9bc:	8d 9a       	sbi	0x11, 5	; 17
	timer1PWMInit(8);	/* 8 bit PWM resolution, phase correct PWM mode, FREQpwm=F_CPU/(2*N*TOP) */
     9be:	88 e0       	ldi	r24, 0x08	; 8
     9c0:	0e 94 f5 01 	call	0x3ea	; 0x3ea <timer1PWMInit>
	timer1PWMAOn();		/* turn on the channel A PWM output of timer1 */
     9c4:	0e 94 0d 02 	call	0x41a	; 0x41a <timer1PWMAOn>
	timer1PWMBOn();		/* turn on the channel B PWM output of timer1 */
     9c8:	0c 94 14 02 	jmp	0x428	; 0x428 <timer1PWMBOn>

000009cc <ApplInit>:
*********************************************************************************************************
*/

void ApplInit(void)
{
	ButtonInit();
     9cc:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <ButtonInit>
	LEDInit();
     9d0:	0e 94 82 06 	call	0xd04	; 0xd04 <LEDInit>
	SSDInit();
     9d4:	0e 94 ad 08 	call	0x115a	; 0x115a <SSDInit>
*/

void ApplDataInit(void)
{
	/* Following for initial power on display steps */
	appl.workMode = PWR_ON;
     9d8:	e4 e1       	ldi	r30, 0x14	; 20
     9da:	f3 e0       	ldi	r31, 0x03	; 3
     9dc:	15 86       	std	Z+13, r1	; 0x0d
	appl.CurEvent = NULL_EVENT;
     9de:	16 86       	std	Z+14, r1	; 0x0e
	appl.LastEvent = NULL_EVENT;
     9e0:	17 86       	std	Z+15, r1	; 0x0f
	appl.second = 0;
     9e2:	10 8a       	std	Z+16, r1	; 0x10
	appl.ModeTimer = TIME_SWITCH_TOTAL;
     9e4:	80 ee       	ldi	r24, 0xE0	; 224
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	94 8b       	std	Z+20, r25	; 0x14
     9ea:	83 8b       	std	Z+19, r24	; 0x13
	appl.DispCode= START_CHAR;
     9ec:	15 8a       	std	Z+21, r1	; 0x15
	appl.PwrOnSteps = DISP_START;
     9ee:	16 8a       	std	Z+22, r1	; 0x16
{
	ButtonInit();
	LEDInit();
	SSDInit();
	ApplDataInit();
	MeasureInit();
     9f0:	0e 94 16 07 	call	0xe2c	; 0xe2c <MeasureInit>
	
	timerAttach(TIMER0OUTCOMPARE_INT, AppOutputCompare0);
     9f4:	6a e8       	ldi	r22, 0x8A	; 138
     9f6:	74 e0       	ldi	r23, 0x04	; 4
     9f8:	87 e0       	ldi	r24, 0x07	; 7
     9fa:	0e 94 ce 01 	call	0x39c	; 0x39c <timerAttach>
	
	rprintf("Main board here!\n" );	
     9fe:	86 e8       	ldi	r24, 0x86	; 134
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	9f 93       	push	r25
     a04:	8f 93       	push	r24
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	8f 93       	push	r24
     a0a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <rprintf1RamRom>
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	08 95       	ret

00000a16 <AppCycleUpdate>:
*
* Returns    : none
*********************************************************************************************************
*/
void AppCycleUpdate(void)
{	
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
	char tempChar;
	static uint16_t cnt;
	cnt++;
     a1c:	80 91 f4 00 	lds	r24, 0x00F4
     a20:	90 91 f5 00 	lds	r25, 0x00F5
     a24:	01 96       	adiw	r24, 0x01	; 1
     a26:	90 93 f5 00 	sts	0x00F5, r25
     a2a:	80 93 f4 00 	sts	0x00F4, r24
* Returns    : none
*********************************************************************************************************
*/
void AppUpdateTimers(void)
{
	if(++appl.second > TIMER_1_SEC_60HZ) 
     a2e:	80 91 24 03 	lds	r24, 0x0324
     a32:	8f 5f       	subi	r24, 0xFF	; 255
     a34:	8d 33       	cpi	r24, 0x3D	; 61
     a36:	18 f4       	brcc	.+6      	; 0xa3e <AppCycleUpdate+0x28>
     a38:	80 93 24 03 	sts	0x0324, r24
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <AppCycleUpdate+0x2c>
	{
		appl.second = 0;
     a3e:	10 92 24 03 	sts	0x0324, r1
#endif
#endif
		
	}
	
	if(appl.ModeTimer != TIMER_TIMEOUT && appl.ModeTimer != TIMER_INT_DISABLED) appl.ModeTimer--;
     a42:	80 91 27 03 	lds	r24, 0x0327
     a46:	90 91 28 03 	lds	r25, 0x0328
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	8e 3f       	cpi	r24, 0xFE	; 254
     a4e:	2f ef       	ldi	r18, 0xFF	; 255
     a50:	92 07       	cpc	r25, r18
     a52:	20 f4       	brcc	.+8      	; 0xa5c <AppCycleUpdate+0x46>
     a54:	90 93 28 03 	sts	0x0328, r25
     a58:	80 93 27 03 	sts	0x0327, r24
	cnt++;
	
	AppUpdateTimers();

	/* work mode convert according to ModeTimer and push button events */
	switch(appl.workMode)
     a5c:	c0 91 21 03 	lds	r28, 0x0321
     a60:	c1 30       	cpi	r28, 0x01	; 1
     a62:	09 f4       	brne	.+2      	; 0xa66 <AppCycleUpdate+0x50>
     a64:	50 c0       	rjmp	.+160    	; 0xb06 <AppCycleUpdate+0xf0>
     a66:	18 f0       	brcs	.+6      	; 0xa6e <AppCycleUpdate+0x58>
     a68:	c2 30       	cpi	r28, 0x02	; 2
     a6a:	89 f1       	breq	.+98     	; 0xace <AppCycleUpdate+0xb8>
     a6c:	12 c1       	rjmp	.+548    	; 0xc92 <AppCycleUpdate+0x27c>
	{
		case PWR_ON:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
     a6e:	80 91 27 03 	lds	r24, 0x0327
     a72:	90 91 28 03 	lds	r25, 0x0328
     a76:	9c 01       	movw	r18, r24
     a78:	21 50       	subi	r18, 0x01	; 1
     a7a:	31 09       	sbc	r19, r1
     a7c:	2e 3f       	cpi	r18, 0xFE	; 254
     a7e:	3f 4f       	sbci	r19, 0xFF	; 255
     a80:	88 f5       	brcc	.+98     	; 0xae4 <AppCycleUpdate+0xce>
			{
				if(appl.ModeTimer % (TIME_CONTENT_SWITCH - 1) == 0)
     a82:	6b e3       	ldi	r22, 0x3B	; 59
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	0e 94 2c 09 	call	0x1258	; 0x1258 <__udivmodhi4>
     a8a:	89 2b       	or	r24, r25
     a8c:	41 f4       	brne	.+16     	; 0xa9e <AppCycleUpdate+0x88>
				{
					AppDisplay(++appl.DispCode,PWR_ON);
     a8e:	80 91 29 03 	lds	r24, 0x0329
     a92:	8f 5f       	subi	r24, 0xFF	; 255
     a94:	80 93 29 03 	sts	0x0329, r24
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	0e 94 93 04 	call	0x926	; 0x926 <AppDisplay>
				}
				
				if(ButtonJMP1HeldEvent() && (ButtonGetHoldTime() == TIME_B_HELD_RST))	/* Press/Held JMP1 after power on will set to factory default */
     a9e:	0e 94 74 06 	call	0xce8	; 0xce8 <ButtonJMP1HeldEvent>
     aa2:	88 23       	and	r24, r24
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <AppCycleUpdate+0x92>
     aa6:	f5 c0       	rjmp	.+490    	; 0xc92 <AppCycleUpdate+0x27c>
     aa8:	0e 94 21 09 	call	0x1242	; 0x1242 <ButtonGetHoldTime>
     aac:	cc 97       	sbiw	r24, 0x3c	; 60
     aae:	09 f0       	breq	.+2      	; 0xab2 <AppCycleUpdate+0x9c>
     ab0:	f0 c0       	rjmp	.+480    	; 0xc92 <AppCycleUpdate+0x27c>
				{
					/* Following for initial power on display steps */
					appl.ModeTimer = TIME_SWITCH_TOTAL;
     ab2:	80 ee       	ldi	r24, 0xE0	; 224
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	90 93 28 03 	sts	0x0328, r25
     aba:	80 93 27 03 	sts	0x0327, r24
					appl.workMode = PWR_ON;
     abe:	10 92 21 03 	sts	0x0321, r1
					appl.LastEvent = JP1_HELD;
     ac2:	84 e0       	ldi	r24, 0x04	; 4
     ac4:	80 93 23 03 	sts	0x0323, r24
					appl.DispCode= START_CHAR;
     ac8:	10 92 29 03 	sts	0x0329, r1
     acc:	e2 c0       	rjmp	.+452    	; 0xc92 <AppCycleUpdate+0x27c>
				}
			}
			break;
			
		case SETTING:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
     ace:	80 91 27 03 	lds	r24, 0x0327
     ad2:	90 91 28 03 	lds	r25, 0x0328
     ad6:	9c 01       	movw	r18, r24
     ad8:	21 50       	subi	r18, 0x01	; 1
     ada:	31 09       	sbc	r19, r1
     adc:	2e 3f       	cpi	r18, 0xFE	; 254
     ade:	3f 4f       	sbci	r19, 0xFF	; 255
     ae0:	08 f4       	brcc	.+2      	; 0xae4 <AppCycleUpdate+0xce>
     ae2:	57 c0       	rjmp	.+174    	; 0xb92 <AppCycleUpdate+0x17c>
					appl.workMode = PWR_ON;
					appl.LastEvent = JP1_HELD;
					appl.DispCode= START_CHAR;
				}
			}
			else if(appl.ModeTimer == TIMER_TIMEOUT)
     ae4:	89 2b       	or	r24, r25
     ae6:	09 f0       	breq	.+2      	; 0xaea <AppCycleUpdate+0xd4>
     ae8:	d4 c0       	rjmp	.+424    	; 0xc92 <AppCycleUpdate+0x27c>
			{
				appl.ModeTimer = TIMER_INT_DISABLED;	/* Disable count */
     aea:	8f ef       	ldi	r24, 0xFF	; 255
     aec:	9f ef       	ldi	r25, 0xFF	; 255
     aee:	90 93 28 03 	sts	0x0328, r25
     af2:	80 93 27 03 	sts	0x0327, r24
				appl.workMode = NORMAL;					/* convert to NORMAL */
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	80 93 21 03 	sts	0x0321, r24
				appl.LastEvent = NULL_EVENT;			/* update  LastEvent */
     afc:	10 92 23 03 	sts	0x0323, r1
				appl.DispCode = CURRENT_VALUE;			/* Initial to display material value in setting mode */
     b00:	80 93 29 03 	sts	0x0329, r24
     b04:	c6 c0       	rjmp	.+396    	; 0xc92 <AppCycleUpdate+0x27c>
			}
			break;
			
		case NORMAL:			
			if(ButtonGetReleased())
     b06:	0e 94 26 09 	call	0x124c	; 0x124c <ButtonGetReleased>
     b0a:	88 23       	and	r24, r24
     b0c:	99 f0       	breq	.+38     	; 0xb34 <AppCycleUpdate+0x11e>
			{
				if(ButtonJMP2ReleasedEvent())
     b0e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <ButtonJMP2ReleasedEvent>
     b12:	88 23       	and	r24, r24
     b14:	61 f0       	breq	.+24     	; 0xb2e <AppCycleUpdate+0x118>
				{
					appl.ModeTimer = TIME_D_CODE_HELD;	/* Disable count */
     b16:	84 eb       	ldi	r24, 0xB4	; 180
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	90 93 28 03 	sts	0x0328, r25
     b1e:	80 93 27 03 	sts	0x0327, r24
					appl.workMode = SETTING; 			/* convert to SETTING */
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	80 93 21 03 	sts	0x0321, r24
					appl.LastEvent = JP2_PRESS;			/* update  LastEvent */
     b28:	c0 93 23 03 	sts	0x0323, r28
     b2c:	b2 c0       	rjmp	.+356    	; 0xc92 <AppCycleUpdate+0x27c>
				}
				else if(ButtonJMP1ReleasedEvent())
     b2e:	0e 94 70 06 	call	0xce0	; 0xce0 <ButtonJMP1ReleasedEvent>
     b32:	af c0       	rjmp	.+350    	; 0xc92 <AppCycleUpdate+0x27c>
				{
				}
			}
			else if(ButtonGetHeld())
     b34:	0e 94 29 09 	call	0x1252	; 0x1252 <ButtonGetHeld>
     b38:	88 23       	and	r24, r24
     b3a:	39 f0       	breq	.+14     	; 0xb4a <AppCycleUpdate+0x134>
			{
				if(ButtonJMP2HeldEvent())//(ButtonJMP2HeldEvent() && (ButtonGetHoldTime()%(TIMER_1_SEC_60HZ/2) == 0))
     b3c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ButtonJMP2HeldEvent>
     b40:	81 11       	cpse	r24, r1
     b42:	80 c0       	rjmp	.+256    	; 0xc44 <AppCycleUpdate+0x22e>
				{
					appl.ModeTimer = TIME_D_CODE_HELD;	/* Disable count */
					appl.workMode = SETTING; 			/* convert to SETTING */
					appl.LastEvent = JP2_HELD;			/* update  LastEvent */
				}
				else if(ButtonJMP1HeldEvent())
     b44:	0e 94 74 06 	call	0xce8	; 0xce8 <ButtonJMP1HeldEvent>
     b48:	a4 c0       	rjmp	.+328    	; 0xc92 <AppCycleUpdate+0x27c>
				}
			}
			else
			{
				/* Display current material, and display color change according to value compare with user setting */
				AppDisplay(appl.DispCode,NORMAL);
     b4a:	61 e0       	ldi	r22, 0x01	; 1
     b4c:	80 91 29 03 	lds	r24, 0x0329
     b50:	0e 94 93 04 	call	0x926	; 0x926 <AppDisplay>
				
				if(uartRxBuffer.size - bufferIsNotFull(&uartRxBuffer) != 0)
     b54:	00 91 03 03 	lds	r16, 0x0303
     b58:	10 91 04 03 	lds	r17, 0x0304
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	93 e0       	ldi	r25, 0x03	; 3
     b60:	0e 94 c7 00 	call	0x18e	; 0x18e <bufferIsNotFull>
     b64:	08 17       	cp	r16, r24
     b66:	19 07       	cpc	r17, r25
     b68:	09 f4       	brne	.+2      	; 0xb6c <AppCycleUpdate+0x156>
     b6a:	93 c0       	rjmp	.+294    	; 0xc92 <AppCycleUpdate+0x27c>
				{
					tempChar = bufferGetFromFront(&uartRxBuffer);
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	93 e0       	ldi	r25, 0x03	; 3
     b70:	0e 94 82 00 	call	0x104	; 0x104 <bufferGetFromFront>
					//rprintf("char=%c\n",tempChar);
					rprintf("Type=%c\n",tempChar);
     b74:	1f 92       	push	r1
     b76:	8f 93       	push	r24
     b78:	8d e7       	ldi	r24, 0x7D	; 125
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	9f 93       	push	r25
     b7e:	8f 93       	push	r24
     b80:	cf 93       	push	r28
     b82:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <rprintf1RamRom>
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	80 c0       	rjmp	.+256    	; 0xc92 <AppCycleUpdate+0x27c>
			break;
			
		case SETTING:
			if((appl.ModeTimer != TIMER_INT_DISABLED && appl.ModeTimer != TIMER_TIMEOUT))
			{
				if(ButtonGetReleased())
     b92:	0e 94 26 09 	call	0x124c	; 0x124c <ButtonGetReleased>
     b96:	88 23       	and	r24, r24
     b98:	b9 f1       	breq	.+110    	; 0xc08 <AppCycleUpdate+0x1f2>
				{
					if(ButtonJMP2ReleasedEvent())
     b9a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <ButtonJMP2ReleasedEvent>
     b9e:	88 23       	and	r24, r24
     ba0:	b9 f0       	breq	.+46     	; 0xbd0 <AppCycleUpdate+0x1ba>
					{
						if(--appl.DispCode < CURRENT_VALUE)
     ba2:	80 91 29 03 	lds	r24, 0x0329
     ba6:	81 50       	subi	r24, 0x01	; 1
     ba8:	09 f4       	brne	.+2      	; 0xbac <AppCycleUpdate+0x196>
						{
							appl.DispCode = REMOTE_ADDR;
     baa:	87 e0       	ldi	r24, 0x07	; 7
     bac:	80 93 29 03 	sts	0x0329, r24
						}
						AppDisplay(appl.DispCode,SETTING);
     bb0:	62 e0       	ldi	r22, 0x02	; 2
     bb2:	80 91 29 03 	lds	r24, 0x0329
     bb6:	0e 94 93 04 	call	0x926	; 0x926 <AppDisplay>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     bba:	84 eb       	ldi	r24, 0xB4	; 180
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	90 93 28 03 	sts	0x0328, r25
     bc2:	80 93 27 03 	sts	0x0327, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	80 93 21 03 	sts	0x0321, r24
						appl.LastEvent = JP2_PRESS; 		/* update  LastEvent */
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	5f c0       	rjmp	.+190    	; 0xc8e <AppCycleUpdate+0x278>
					}
					else if(ButtonJMP1ReleasedEvent())
     bd0:	0e 94 70 06 	call	0xce0	; 0xce0 <ButtonJMP1ReleasedEvent>
     bd4:	88 23       	and	r24, r24
     bd6:	09 f4       	brne	.+2      	; 0xbda <AppCycleUpdate+0x1c4>
     bd8:	5c c0       	rjmp	.+184    	; 0xc92 <AppCycleUpdate+0x27c>
					{
						SSDDisplayDec(--appl.FullWarehouse, SSD_0HZ, SSD_GREEN);
     bda:	80 91 17 03 	lds	r24, 0x0317
     bde:	90 91 18 03 	lds	r25, 0x0318
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	90 93 18 03 	sts	0x0318, r25
     be8:	80 93 17 03 	sts	0x0317, r24
     bec:	41 e0       	ldi	r20, 0x01	; 1
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	0e 94 0d 08 	call	0x101a	; 0x101a <SSDDisplayDec>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     bf4:	84 eb       	ldi	r24, 0xB4	; 180
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	90 93 28 03 	sts	0x0328, r25
     bfc:	80 93 27 03 	sts	0x0327, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     c00:	c0 93 21 03 	sts	0x0321, r28
						appl.LastEvent = JP1_PRESS;			/* update  LastEvent */
     c04:	83 e0       	ldi	r24, 0x03	; 3
     c06:	43 c0       	rjmp	.+134    	; 0xc8e <AppCycleUpdate+0x278>
					}
				}
				else if(ButtonGetHeld())
     c08:	0e 94 29 09 	call	0x1252	; 0x1252 <ButtonGetHeld>
     c0c:	88 23       	and	r24, r24
     c0e:	09 f4       	brne	.+2      	; 0xc12 <AppCycleUpdate+0x1fc>
     c10:	40 c0       	rjmp	.+128    	; 0xc92 <AppCycleUpdate+0x27c>
				{
					if(ButtonJMP2HeldEvent() && (ButtonGetHoldTime()%(TIMER_1_SEC_60HZ/6) == 0))	/* fast increase */
     c12:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ButtonJMP2HeldEvent>
     c16:	88 23       	and	r24, r24
     c18:	f9 f0       	breq	.+62     	; 0xc58 <AppCycleUpdate+0x242>
     c1a:	0e 94 21 09 	call	0x1242	; 0x1242 <ButtonGetHoldTime>
     c1e:	6a e0       	ldi	r22, 0x0A	; 10
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	0e 94 2c 09 	call	0x1258	; 0x1258 <__udivmodhi4>
     c26:	89 2b       	or	r24, r25
     c28:	b9 f4       	brne	.+46     	; 0xc58 <AppCycleUpdate+0x242>
					{
						if(++appl.DispCode > REMOTE_ADDR)
     c2a:	80 91 29 03 	lds	r24, 0x0329
     c2e:	8f 5f       	subi	r24, 0xFF	; 255
     c30:	88 30       	cpi	r24, 0x08	; 8
     c32:	08 f0       	brcs	.+2      	; 0xc36 <AppCycleUpdate+0x220>
						{
							appl.DispCode = CURRENT_VALUE;
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	80 93 29 03 	sts	0x0329, r24
						}
						AppDisplay(appl.DispCode,SETTING);
     c3a:	62 e0       	ldi	r22, 0x02	; 2
     c3c:	80 91 29 03 	lds	r24, 0x0329
     c40:	0e 94 93 04 	call	0x926	; 0x926 <AppDisplay>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     c44:	84 eb       	ldi	r24, 0xB4	; 180
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	90 93 28 03 	sts	0x0328, r25
     c4c:	80 93 27 03 	sts	0x0327, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     c50:	82 e0       	ldi	r24, 0x02	; 2
     c52:	80 93 21 03 	sts	0x0321, r24
     c56:	1b c0       	rjmp	.+54     	; 0xc8e <AppCycleUpdate+0x278>
						appl.LastEvent = JP2_HELD;			/* update  LastEvent */
					}
					else if(ButtonJMP1HeldEvent())
     c58:	0e 94 74 06 	call	0xce8	; 0xce8 <ButtonJMP1HeldEvent>
     c5c:	88 23       	and	r24, r24
     c5e:	c9 f0       	breq	.+50     	; 0xc92 <AppCycleUpdate+0x27c>
					{
						SSDDisplayDec(++appl.FullWarehouse, SSD_0HZ, SSD_AMBER);
     c60:	80 91 17 03 	lds	r24, 0x0317
     c64:	90 91 18 03 	lds	r25, 0x0318
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	90 93 18 03 	sts	0x0318, r25
     c6e:	80 93 17 03 	sts	0x0317, r24
     c72:	42 e0       	ldi	r20, 0x02	; 2
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	0e 94 0d 08 	call	0x101a	; 0x101a <SSDDisplayDec>
						
						appl.ModeTimer = TIME_D_CODE_HELD;	/* set the time of mantain code display */
     c7a:	84 eb       	ldi	r24, 0xB4	; 180
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	90 93 28 03 	sts	0x0328, r25
     c82:	80 93 27 03 	sts	0x0327, r24
						appl.workMode = SETTING;			/* convert to SETTING */
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	80 93 21 03 	sts	0x0321, r24
						appl.LastEvent = JP1_HELD;			/* update  LastEvent */
     c8c:	84 e0       	ldi	r24, 0x04	; 4
     c8e:	80 93 23 03 	sts	0x0323, r24

#if 1		
#if (FOR_DEBUG==1)
	//rprintf("wM=%d\n",appl.workMode);
	//rprintf("mT=%d,0x%x\n",appl.ModeTimer,appl.ModeTimer);
	rprintf("dC=%d\n\n",appl.DispCode);
     c92:	80 91 29 03 	lds	r24, 0x0329
     c96:	1f 92       	push	r1
     c98:	8f 93       	push	r24
     c9a:	85 e7       	ldi	r24, 0x75	; 117
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	9f 93       	push	r25
     ca0:	8f 93       	push	r24
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	8f 93       	push	r24
     ca6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <rprintf1RamRom>
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
	//rprintf("lE=%d\n\n",appl.LastEvent);
#endif
#endif
}
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	08 95       	ret

00000cbc <AppWaitZeroCrossing>:
* Returns    : true/false means failed or pass
*********************************************************************************************************
*/
void AppWaitZeroCrossing(void)
{
	while(appl.fSysPwrZC == 0);
     cbc:	80 91 14 03 	lds	r24, 0x0314
     cc0:	80 ff       	sbrs	r24, 0
     cc2:	fc cf       	rjmp	.-8      	; 0xcbc <AppWaitZeroCrossing>
	appl.fSysPwrZC = 0;
     cc4:	80 91 14 03 	lds	r24, 0x0314
     cc8:	8e 7f       	andi	r24, 0xFE	; 254
     cca:	80 93 14 03 	sts	0x0314, r24
     cce:	08 95       	ret

00000cd0 <ButtonInitEx>:
void ButtonInitEx(void)
{	
	/* 
	Set PC1-PC0 as input, the tow IO with external pull up 10K resistor.
	*/
	DDRC &= ((1<<DDC1) | (1<<DDC0));
     cd0:	84 b3       	in	r24, 0x14	; 20
     cd2:	83 70       	andi	r24, 0x03	; 3
     cd4:	84 bb       	out	0x14, r24	; 20
     cd6:	08 95       	ret

00000cd8 <ButtonGetIO_StateEx>:
*/
ButtonDataType ButtonGetIO_StateEx(void)
{
	ButtonDataType io_state;
	
	io_state = (~PINC) & ((1<<PINC1) | (1<<PINC0));	/* Get PC1-PC0 IO state */
     cd8:	83 b3       	in	r24, 0x13	; 19
     cda:	80 95       	com	r24
	
	return  io_state;
}
     cdc:	83 70       	andi	r24, 0x03	; 3
     cde:	08 95       	ret

00000ce0 <ButtonJMP1ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP1) 
     ce0:	80 91 67 03 	lds	r24, 0x0367
	{
		return true;
	}
    
    return false;
}
     ce4:	81 70       	andi	r24, 0x01	; 1
     ce6:	08 95       	ret

00000ce8 <ButtonJMP1HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1HeldEvent(void)
{
	if (button.buttonsHeld.JMP1) 
     ce8:	80 91 68 03 	lds	r24, 0x0368
	{
		return true;
	}
    
    return false;
}
     cec:	81 70       	andi	r24, 0x01	; 1
     cee:	08 95       	ret

00000cf0 <ButtonJMP2ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP2) 
     cf0:	80 91 67 03 	lds	r24, 0x0367
	{
		return true;
	}
    
    return false;
}
     cf4:	86 95       	lsr	r24
     cf6:	81 70       	andi	r24, 0x01	; 1
     cf8:	08 95       	ret

00000cfa <ButtonJMP2HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2HeldEvent(void)
{
	if (button.buttonsHeld.JMP2) 
     cfa:	80 91 68 03 	lds	r24, 0x0368
	{
		return true;
	}
    
    return false;
}
     cfe:	86 95       	lsr	r24
     d00:	81 70       	andi	r24, 0x01	; 1
     d02:	08 95       	ret

00000d04 <LEDInit>:
	uint8_t i;
	
	/* 
	Set PB2-PB1 as output to drive to LEDs, default turn off all LEDs
	*/
	DDRB &= ~((1<<DDB2) | (1<<DDB1));
     d04:	87 b3       	in	r24, 0x17	; 23
     d06:	89 7f       	andi	r24, 0xF9	; 249
     d08:	87 bb       	out	0x17, r24	; 23
	DDRB |= ((1<<DDB2) | (1<<DDB1));
     d0a:	87 b3       	in	r24, 0x17	; 23
     d0c:	86 60       	ori	r24, 0x06	; 6
     d0e:	87 bb       	out	0x17, r24	; 23
	PORTB |= ((1<<DDB2) | (1<<DDB1));
     d10:	88 b3       	in	r24, 0x18	; 24
     d12:	86 60       	ori	r24, 0x06	; 6
     d14:	88 bb       	out	0x18, r24	; 24
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
     d16:	e1 e4       	ldi	r30, 0x41	; 65
     d18:	f3 e0       	ldi	r31, 0x03	; 3
     d1a:	80 81       	ld	r24, Z
     d1c:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
     d1e:	84 60       	ori	r24, 0x04	; 4
     d20:	88 60       	ori	r24, 0x08	; 8
     d22:	80 83       	st	Z, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
     d24:	9c e3       	ldi	r25, 0x3C	; 60
     d26:	91 83       	std	Z+1, r25	; 0x01
	DDRB |= ((1<<DDB2) | (1<<DDB1));
	PORTB |= ((1<<DDB2) | (1<<DDB1));
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
     d28:	a3 e4       	ldi	r26, 0x43	; 67
     d2a:	b3 e0       	ldi	r27, 0x03	; 3
     d2c:	8c 91       	ld	r24, X
     d2e:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
     d30:	84 60       	ori	r24, 0x04	; 4
     d32:	88 60       	ori	r24, 0x08	; 8
     d34:	8c 93       	st	X, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
     d36:	93 83       	std	Z+3, r25	; 0x03
     d38:	08 95       	ret

00000d3a <LEDCycleUpdate>:
*
*********************************************************************************************************
*/

void LEDCycleUpdate(void)
{
     d3a:	a2 e4       	ldi	r26, 0x42	; 66
     d3c:	b3 e0       	ldi	r27, 0x03	; 3
     d3e:	40 e0       	ldi	r20, 0x00	; 0
     d40:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
     d42:	ca 01       	movw	r24, r20
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	fc 01       	movw	r30, r24
     d4a:	ef 5b       	subi	r30, 0xBF	; 191
     d4c:	fc 4f       	sbci	r31, 0xFC	; 252
     d4e:	30 81       	ld	r19, Z
     d50:	37 70       	andi	r19, 0x07	; 7
		ft = LEDs[i].flashTimer;
     d52:	2c 91       	ld	r18, X
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
     d54:	34 30       	cpi	r19, 0x04	; 4
     d56:	19 f0       	breq	.+6      	; 0xd5e <LEDCycleUpdate+0x24>
	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
		ft = LEDs[i].flashTimer;
		
		ft += rate;
     d58:	23 0f       	add	r18, r19
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
     d5a:	2d 33       	cpi	r18, 0x3D	; 61
     d5c:	38 f0       	brcs	.+14     	; 0xd6c <LEDCycleUpdate+0x32>
		{
			ft = 0;
			LEDs[i].led.state = S_OFF;
     d5e:	fc 01       	movw	r30, r24
     d60:	ef 5b       	subi	r30, 0xBF	; 191
     d62:	fc 4f       	sbci	r31, 0xFC	; 252
     d64:	20 81       	ld	r18, Z
     d66:	28 60       	ori	r18, 0x08	; 8
     d68:	20 83       	st	Z, r18
		ft = LEDs[i].flashTimer;
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
		{
			ft = 0;
     d6a:	20 e0       	ldi	r18, 0x00	; 0
			LEDs[i].led.state = S_OFF;
		}
		LEDs[i].flashTimer = ft;
     d6c:	2c 93       	st	X, r18
		
		if((rate == LED_0HZ) || (ft > (LED_ONE_SEC/2)))
     d6e:	33 23       	and	r19, r19
     d70:	11 f0       	breq	.+4      	; 0xd76 <LEDCycleUpdate+0x3c>
     d72:	2f 31       	cpi	r18, 0x1F	; 31
     d74:	30 f0       	brcs	.+12     	; 0xd82 <LEDCycleUpdate+0x48>
		{
			LEDs[i].led.state = S_ON;
     d76:	fc 01       	movw	r30, r24
     d78:	ef 5b       	subi	r30, 0xBF	; 191
     d7a:	fc 4f       	sbci	r31, 0xFC	; 252
     d7c:	80 81       	ld	r24, Z
     d7e:	87 7f       	andi	r24, 0xF7	; 247
     d80:	80 83       	st	Z, r24
     d82:	12 96       	adiw	r26, 0x02	; 2
{
	LED_RATE rate;
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
     d84:	41 30       	cpi	r20, 0x01	; 1
     d86:	51 05       	cpc	r21, r1
     d88:	19 f0       	breq	.+6      	; 0xd90 <LEDCycleUpdate+0x56>
     d8a:	41 e0       	ldi	r20, 0x01	; 1
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	d9 cf       	rjmp	.-78     	; 0xd42 <LEDCycleUpdate+0x8>
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */

	if(LEDs[0].led.state == S_OFF)
     d90:	80 91 41 03 	lds	r24, 0x0341
     d94:	83 ff       	sbrs	r24, 3
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <LEDCycleUpdate+0x62>
	{
		state |= (1<<DDB1);
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	01 c0       	rjmp	.+2      	; 0xd9e <LEDCycleUpdate+0x64>
*
*********************************************************************************************************
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */
     d9c:	80 e0       	ldi	r24, 0x00	; 0
	if(LEDs[0].led.state == S_OFF)
	{
		state |= (1<<DDB1);
	}
	
	if(LEDs[1].led.state == S_OFF)
     d9e:	90 91 43 03 	lds	r25, 0x0343
     da2:	93 fd       	sbrc	r25, 3
	{
		state |= (1<<DDB2);
     da4:	84 60       	ori	r24, 0x04	; 4
	}

	PORTB &= ~((1<<DDB2) | (1<<DDB1));
     da6:	98 b3       	in	r25, 0x18	; 24
     da8:	99 7f       	andi	r25, 0xF9	; 249
     daa:	98 bb       	out	0x18, r25	; 24
	PORTB |= state;
     dac:	98 b3       	in	r25, 0x18	; 24
     dae:	89 2b       	or	r24, r25
     db0:	88 bb       	out	0x18, r24	; 24
     db2:	08 95       	ret

00000db4 <main>:
int main(void)
{	
	/*
	Calll all initial function
	*/
	McuInit();
     db4:	0e 94 cd 04 	call	0x99a	; 0x99a <McuInit>
	ApplInit();
     db8:	0e 94 e6 04 	call	0x9cc	; 0x9cc <ApplInit>

	while(1)
	{
		AppWaitZeroCrossing();
     dbc:	0e 94 5e 06 	call	0xcbc	; 0xcbc <AppWaitZeroCrossing>
		ButtonCycleUpdate();
     dc0:	0e 94 da 08 	call	0x11b4	; 0x11b4 <ButtonCycleUpdate>
		AppCycleUpdate();
     dc4:	0e 94 0b 05 	call	0xa16	; 0xa16 <AppCycleUpdate>
		LEDCycleUpdate();
     dc8:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LEDCycleUpdate>
		SSDCycleUpdate();
     dcc:	0e 94 c6 07 	call	0xf8c	; 0xf8c <SSDCycleUpdate>
		MeasureCycleUpdate();
     dd0:	0e 94 36 07 	call	0xe6c	; 0xe6c <MeasureCycleUpdate>
	}
     dd4:	f3 cf       	rjmp	.-26     	; 0xdbc <main+0x8>

00000dd6 <MeasureOutputCompare2>:
* Notes      : none
*
*********************************************************************************************************
*/
void MeasureOutputCompare2(void)
{
     dd6:	cf 93       	push	r28
	uint8_t SampleValue;
	
	OCR2 = TCNT2 + MEASURE_OCR2;
     dd8:	84 b5       	in	r24, 0x24	; 36
     dda:	87 5c       	subi	r24, 0xC7	; 199
     ddc:	83 bd       	out	0x23, r24	; 35

	//if((ioLOW == 1) && (ioHIGHT == 1))
	{
		SampleValue = ReadADC8Bit(MEASURE_ADC0);
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <ReadADC8Bit>
     de4:	c8 2f       	mov	r28, r24
		if(bufferIsNotFull(&Adc0Buffer) == 0)			/* if buffer is full */
     de6:	87 e5       	ldi	r24, 0x57	; 87
     de8:	93 e0       	ldi	r25, 0x03	; 3
     dea:	0e 94 c7 00 	call	0x18e	; 0x18e <bufferIsNotFull>
     dee:	89 2b       	or	r24, r25
     df0:	21 f4       	brne	.+8      	; 0xdfa <MeasureOutputCompare2+0x24>
		{
			bufferGetFromFront(&Adc0Buffer);			/* pop oldest data from arrary */
     df2:	87 e5       	ldi	r24, 0x57	; 87
     df4:	93 e0       	ldi	r25, 0x03	; 3
     df6:	0e 94 82 00 	call	0x104	; 0x104 <bufferGetFromFront>
		}
		bufferAddToEnd(&Adc0Buffer, SampleValue);		/* push newest data to arrary */
     dfa:	6c 2f       	mov	r22, r28
     dfc:	87 e5       	ldi	r24, 0x57	; 87
     dfe:	93 e0       	ldi	r25, 0x03	; 3
     e00:	0e 94 a6 00 	call	0x14c	; 0x14c <bufferAddToEnd>
		
		SampleValue = ReadADC8Bit(MEASURE_ADC1);
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <ReadADC8Bit>
     e0a:	c8 2f       	mov	r28, r24
		if(bufferIsNotFull(&Adc1Buffer) == 0)			/* if buffer is full */
     e0c:	8f e4       	ldi	r24, 0x4F	; 79
     e0e:	93 e0       	ldi	r25, 0x03	; 3
     e10:	0e 94 c7 00 	call	0x18e	; 0x18e <bufferIsNotFull>
     e14:	89 2b       	or	r24, r25
     e16:	21 f4       	brne	.+8      	; 0xe20 <MeasureOutputCompare2+0x4a>
		{
			bufferGetFromFront(&Adc1Buffer);			/* pop oldest data from arrary */
     e18:	8f e4       	ldi	r24, 0x4F	; 79
     e1a:	93 e0       	ldi	r25, 0x03	; 3
     e1c:	0e 94 82 00 	call	0x104	; 0x104 <bufferGetFromFront>
		}
		bufferAddToEnd(&Adc1Buffer, SampleValue);		/* push newest data to arrary */
     e20:	6c 2f       	mov	r22, r28
     e22:	8f e4       	ldi	r24, 0x4F	; 79
     e24:	93 e0       	ldi	r25, 0x03	; 3
	}
}
     e26:	cf 91       	pop	r28
		SampleValue = ReadADC8Bit(MEASURE_ADC1);
		if(bufferIsNotFull(&Adc1Buffer) == 0)			/* if buffer is full */
		{
			bufferGetFromFront(&Adc1Buffer);			/* pop oldest data from arrary */
		}
		bufferAddToEnd(&Adc1Buffer, SampleValue);		/* push newest data to arrary */
     e28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <bufferAddToEnd>

00000e2c <MeasureInit>:
* Returns    : none
*********************************************************************************************************
*/
void MeasureInit(void)
{
	DDRD &= ~((1<<DDD3) | (1<<DDD2));	/* Set PD3(ioHIGHT) and PD2(ioLOW) as input */
     e2c:	81 b3       	in	r24, 0x11	; 17
     e2e:	83 7f       	andi	r24, 0xF3	; 243
     e30:	81 bb       	out	0x11, r24	; 17
*
*********************************************************************************************************
*/
void MeasureKZ1PWM(uint16_t dutyCycle)
{
	timer1PWMBSet(dutyCycle);
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 1e 02 	call	0x43c	; 0x43c <timer1PWMBSet>
*
*********************************************************************************************************
*/
void MeasureKZ2PWM(uint16_t dutyCycle)
{
	timer1PWMASet(dutyCycle);
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 94 1b 02 	call	0x436	; 0x436 <timer1PWMASet>
	DDRD &= ~((1<<DDD3) | (1<<DDD2));	/* Set PD3(ioHIGHT) and PD2(ioLOW) as input */
	
	MeasureKZ1PWM(0);
	MeasureKZ2PWM(255);

	timerAttach(TIMER2OUTCOMPARE_INT, MeasureOutputCompare2);
     e42:	6b ee       	ldi	r22, 0xEB	; 235
     e44:	76 e0       	ldi	r23, 0x06	; 6
     e46:	86 e0       	ldi	r24, 0x06	; 6
     e48:	0e 94 ce 01 	call	0x39c	; 0x39c <timerAttach>
	
	bufferInit(&Adc0Buffer, (uint8_t *)Adc0DataArray, ADC0_BUF_SIZE);
     e4c:	4f ef       	ldi	r20, 0xFF	; 255
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	65 ef       	ldi	r22, 0xF5	; 245
     e52:	71 e0       	ldi	r23, 0x01	; 1
     e54:	87 e5       	ldi	r24, 0x57	; 87
     e56:	93 e0       	ldi	r25, 0x03	; 3
     e58:	0e 94 75 00 	call	0xea	; 0xea <bufferInit>
	bufferInit(&Adc1Buffer, (uint8_t *)Adc1DataArray, ADC1_BUF_SIZE);
     e5c:	4f ef       	ldi	r20, 0xFF	; 255
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	66 ef       	ldi	r22, 0xF6	; 246
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	8f e4       	ldi	r24, 0x4F	; 79
     e66:	93 e0       	ldi	r25, 0x03	; 3
     e68:	0c 94 75 00 	jmp	0xea	; 0xea <bufferInit>

00000e6c <MeasureCycleUpdate>:
* Notes      : none
*
*********************************************************************************************************
*/
void MeasureCycleUpdate(void)
{
     e6c:	cf 93       	push	r28
	if(bufferIsNotFull(&Adc0Buffer) == 0)			/* if buffer is full */
     e6e:	87 e5       	ldi	r24, 0x57	; 87
     e70:	93 e0       	ldi	r25, 0x03	; 3
     e72:	0e 94 c7 00 	call	0x18e	; 0x18e <bufferIsNotFull>
     e76:	89 2b       	or	r24, r25
     e78:	19 f5       	brne	.+70     	; 0xec0 <MeasureCycleUpdate+0x54>
     e7a:	4f ef       	ldi	r20, 0xFF	; 255
     e7c:	c0 e0       	ldi	r28, 0x00	; 0
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	e5 ef       	ldi	r30, 0xF5	; 245
     e84:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t min = 0xff;
	uint16_t i;

	for(i=0, sum=0; i< size; i++, arrayPtr++)
	{
		sum += *arrayPtr;
     e86:	90 81       	ld	r25, Z
     e88:	29 0f       	add	r18, r25
     e8a:	31 1d       	adc	r19, r1
     e8c:	c9 17       	cp	r28, r25
     e8e:	08 f4       	brcc	.+2      	; 0xe92 <MeasureCycleUpdate+0x26>
     e90:	c9 2f       	mov	r28, r25
     e92:	94 17       	cp	r25, r20
     e94:	08 f4       	brcc	.+2      	; 0xe98 <MeasureCycleUpdate+0x2c>
     e96:	49 2f       	mov	r20, r25
	uint8_t avg;
	uint8_t max = 0;
	uint8_t min = 0xff;
	uint16_t i;

	for(i=0, sum=0; i< size; i++, arrayPtr++)
     e98:	31 96       	adiw	r30, 0x01	; 1
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	e4 3f       	cpi	r30, 0xF4	; 244
     e9e:	f8 07       	cpc	r31, r24
     ea0:	91 f7       	brne	.-28     	; 0xe86 <MeasureCycleUpdate+0x1a>
			min = *arrayPtr;
		}
	}
	avg = sum/size;
	
	calcPtr->sum = sum;
     ea2:	30 93 46 03 	sts	0x0346, r19
     ea6:	20 93 45 03 	sts	0x0345, r18
		if(*arrayPtr < min)
		{
			min = *arrayPtr;
		}
	}
	avg = sum/size;
     eaa:	c9 01       	movw	r24, r18
     eac:	6f ef       	ldi	r22, 0xFF	; 255
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	0e 94 2c 09 	call	0x1258	; 0x1258 <__udivmodhi4>
     eb4:	60 93 47 03 	sts	0x0347, r22
	
	calcPtr->sum = sum;
	calcPtr->avg = avg;
	calcPtr->max = max;
     eb8:	c0 93 48 03 	sts	0x0348, r28
	calcPtr->min = min;
     ebc:	40 93 49 03 	sts	0x0349, r20
	if(bufferIsNotFull(&Adc0Buffer) == 0)			/* if buffer is full */
	{
		MeasureBufferCalc(&mData.calcResult[MEASURE_ADC0], (uint8_t *)Adc0DataArray, ADC0_BUF_SIZE);
	}

	if(bufferIsNotFull(&Adc1Buffer) == 0)			/* if buffer is full */
     ec0:	8f e4       	ldi	r24, 0x4F	; 79
     ec2:	93 e0       	ldi	r25, 0x03	; 3
     ec4:	0e 94 c7 00 	call	0x18e	; 0x18e <bufferIsNotFull>
     ec8:	89 2b       	or	r24, r25
     eca:	19 f5       	brne	.+70     	; 0xf12 <MeasureCycleUpdate+0xa6>
     ecc:	4f ef       	ldi	r20, 0xFF	; 255
     ece:	c0 e0       	ldi	r28, 0x00	; 0
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	e6 ef       	ldi	r30, 0xF6	; 246
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t min = 0xff;
	uint16_t i;

	for(i=0, sum=0; i< size; i++, arrayPtr++)
	{
		sum += *arrayPtr;
     ed8:	90 81       	ld	r25, Z
     eda:	29 0f       	add	r18, r25
     edc:	31 1d       	adc	r19, r1
     ede:	c9 17       	cp	r28, r25
     ee0:	08 f4       	brcc	.+2      	; 0xee4 <MeasureCycleUpdate+0x78>
     ee2:	c9 2f       	mov	r28, r25
     ee4:	94 17       	cp	r25, r20
     ee6:	08 f4       	brcc	.+2      	; 0xeea <MeasureCycleUpdate+0x7e>
     ee8:	49 2f       	mov	r20, r25
	uint8_t avg;
	uint8_t max = 0;
	uint8_t min = 0xff;
	uint16_t i;

	for(i=0, sum=0; i< size; i++, arrayPtr++)
     eea:	31 96       	adiw	r30, 0x01	; 1
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	e5 3f       	cpi	r30, 0xF5	; 245
     ef0:	f9 07       	cpc	r31, r25
     ef2:	91 f7       	brne	.-28     	; 0xed8 <MeasureCycleUpdate+0x6c>
			min = *arrayPtr;
		}
	}
	avg = sum/size;
	
	calcPtr->sum = sum;
     ef4:	30 93 4b 03 	sts	0x034B, r19
     ef8:	20 93 4a 03 	sts	0x034A, r18
		if(*arrayPtr < min)
		{
			min = *arrayPtr;
		}
	}
	avg = sum/size;
     efc:	c9 01       	movw	r24, r18
     efe:	6f ef       	ldi	r22, 0xFF	; 255
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	0e 94 2c 09 	call	0x1258	; 0x1258 <__udivmodhi4>
     f06:	60 93 4c 03 	sts	0x034C, r22
	
	calcPtr->sum = sum;
	calcPtr->avg = avg;
	calcPtr->max = max;
     f0a:	c0 93 4d 03 	sts	0x034D, r28
	calcPtr->min = min;
     f0e:	40 93 4e 03 	sts	0x034E, r20
	{
		MeasureBufferCalc(&mData.calcResult[MEASURE_ADC1], (uint8_t *)Adc1DataArray, ADC1_BUF_SIZE);
	}
	
#if 1
	rprintf("sa%d\n",ReadADC8Bit(MEASURE_ADC0));
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <ReadADC8Bit>
     f18:	1f 92       	push	r1
     f1a:	8f 93       	push	r24
     f1c:	88 ea       	ldi	r24, 0xA8	; 168
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	9f 93       	push	r25
     f22:	8f 93       	push	r24
     f24:	c1 e0       	ldi	r28, 0x01	; 1
     f26:	cf 93       	push	r28
     f28:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <rprintf1RamRom>
	//rprintf("s%d\n",mData.calcResult[MEASURE_ADC0].sum);
	rprintf("a%d\n",mData.calcResult[MEASURE_ADC0].avg);
     f2c:	80 91 47 03 	lds	r24, 0x0347
     f30:	1f 92       	push	r1
     f32:	8f 93       	push	r24
     f34:	83 ea       	ldi	r24, 0xA3	; 163
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	9f 93       	push	r25
     f3a:	8f 93       	push	r24
     f3c:	cf 93       	push	r28
     f3e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <rprintf1RamRom>
	//rprintf("ma%d\n",mData.calcResult[MEASURE_ADC0].max);
	//rprintf("mi%d\r\n",mData.calcResult[MEASURE_ADC0].min);
	
	rprintf("sa%d\n",ReadADC8Bit(MEASURE_ADC1));
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <ReadADC8Bit>
     f48:	1f 92       	push	r1
     f4a:	8f 93       	push	r24
     f4c:	8d e9       	ldi	r24, 0x9D	; 157
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9f 93       	push	r25
     f52:	8f 93       	push	r24
     f54:	cf 93       	push	r28
     f56:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <rprintf1RamRom>
	//rprintf("s%d\n",mData.calcResult[MEASURE_ADC1].sum);
	rprintf("a%d\n",mData.calcResult[MEASURE_ADC1].avg);
     f5a:	80 91 4c 03 	lds	r24, 0x034C
     f5e:	1f 92       	push	r1
     f60:	8f 93       	push	r24
     f62:	88 e9       	ldi	r24, 0x98	; 152
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	9f 93       	push	r25
     f68:	8f 93       	push	r24
     f6a:	cf 93       	push	r28
     f6c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <rprintf1RamRom>
     f70:	8d b7       	in	r24, 0x3d	; 61
     f72:	9e b7       	in	r25, 0x3e	; 62
     f74:	44 96       	adiw	r24, 0x14	; 20
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	9e bf       	out	0x3e, r25	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	8d bf       	out	0x3d, r24	; 61
	//rprintf("ma%d\n",mData.calcResult[MEASURE_ADC1].max);
	//rprintf("mi%d\r\n",mData.calcResult[MEASURE_ADC1].min);
#endif
}
     f80:	cf 91       	pop	r28
     f82:	08 95       	ret

00000f84 <MeasureGetResult0>:
*
*********************************************************************************************************
*/
uint16_t MeasureGetResult0(void)
{
	return mData.calcResult[MEASURE_ADC0].avg;
     f84:	80 91 47 03 	lds	r24, 0x0347
}
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	08 95       	ret

00000f8c <SSDCycleUpdate>:
*
*********************************************************************************************************
*/

void SSDCycleUpdate(void)
{
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
*/
void SSDShitfOutData(void)
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
     f90:	40 91 61 03 	lds	r20, 0x0361
     f94:	50 91 62 03 	lds	r21, 0x0362
     f98:	60 91 63 03 	lds	r22, 0x0363
     f9c:	70 91 64 03 	lds	r23, 0x0364
     fa0:	80 e2       	ldi	r24, 0x20	; 32
	
	for(i = 0; i < 32; i++)
	{
		bitVal = 0;
		if(DispValTemp & 0x80000000)
     fa2:	8a 01       	movw	r16, r20
     fa4:	9b 01       	movw	r18, r22
		{
			bitVal = 1;
		}
		DispValTemp <<= 1;
     fa6:	44 0f       	add	r20, r20
     fa8:	55 1f       	adc	r21, r21
     faa:	66 1f       	adc	r22, r22
     fac:	77 1f       	adc	r23, r23

		SSD_CLK_CLR();
     fae:	af 98       	cbi	0x15, 7	; 21
		SSD_DAT_CLR();
     fb0:	ae 98       	cbi	0x15, 6	; 21
		if(bitVal)
     fb2:	37 fd       	sbrc	r19, 7
		{
			SSD_DAT_SET();
     fb4:	ae 9a       	sbi	0x15, 6	; 21
		}
		SSD_CLK_SET();
     fb6:	af 9a       	sbi	0x15, 7	; 21
     fb8:	81 50       	subi	r24, 0x01	; 1
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
	
	for(i = 0; i < 32; i++)
     fba:	99 f7       	brne	.-26     	; 0xfa2 <SSDCycleUpdate+0x16>
void SSDUpdateOnOff(void)
{
	SSD_RATE rate;
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
     fbc:	90 91 5f 03 	lds	r25, 0x035F
     fc0:	97 70       	andi	r25, 0x07	; 7
	ft = SSD.flashTimer;
     fc2:	80 91 60 03 	lds	r24, 0x0360
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
     fc6:	94 30       	cpi	r25, 0x04	; 4
     fc8:	19 f0       	breq	.+6      	; 0xfd0 <SSDCycleUpdate+0x44>
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
	ft = SSD.flashTimer;
	
	ft += rate;
     fca:	89 0f       	add	r24, r25
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
     fcc:	8d 33       	cpi	r24, 0x3D	; 61
     fce:	30 f0       	brcs	.+12     	; 0xfdc <SSDCycleUpdate+0x50>
	{
		ft = 0;
		SSD.ssd.state = SSD_OFF;
     fd0:	80 91 5f 03 	lds	r24, 0x035F
     fd4:	8f 7d       	andi	r24, 0xDF	; 223
     fd6:	80 93 5f 03 	sts	0x035F, r24
	ft = SSD.flashTimer;
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
	{
		ft = 0;
     fda:	80 e0       	ldi	r24, 0x00	; 0
		SSD.ssd.state = SSD_OFF;
	}
	SSD.flashTimer = ft;
     fdc:	80 93 60 03 	sts	0x0360, r24
	
	if((rate == SSD_0HZ) || (ft > (SSD_ONE_SEC/2)))
     fe0:	99 23       	and	r25, r25
     fe2:	11 f0       	breq	.+4      	; 0xfe8 <SSDCycleUpdate+0x5c>
     fe4:	8f 31       	cpi	r24, 0x1F	; 31
     fe6:	28 f0       	brcs	.+10     	; 0xff2 <SSDCycleUpdate+0x66>
	{
		SSD.ssd.state = SSD_ON;
     fe8:	80 91 5f 03 	lds	r24, 0x035F
     fec:	80 62       	ori	r24, 0x20	; 32
     fee:	80 93 5f 03 	sts	0x035F, r24
*
*********************************************************************************************************
*/
void SSDUpdateComPin(void)
{
	if(SSD.ssd.state == SSD_OFF)		/* if ssd is in off state, cut power to green and color */
     ff2:	80 91 5f 03 	lds	r24, 0x035F
     ff6:	85 fd       	sbrc	r24, 5
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <SSDCycleUpdate+0x72>
	{
		SSD_RED_CLR();
     ffa:	ac 98       	cbi	0x15, 4	; 21
     ffc:	03 c0       	rjmp	.+6      	; 0x1004 <SSDCycleUpdate+0x78>
		SSD_GRN_CLR();
	}
	else
	{
		if(SSD.ssd.color == SSD_RED)		/* dispay red color */
     ffe:	88 71       	andi	r24, 0x18	; 24
    1000:	19 f4       	brne	.+6      	; 0x1008 <SSDCycleUpdate+0x7c>
		{
			SSD_RED_SET();	/* give power to red ssd common pin */
    1002:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_CLR();	/* cut power to green ssd common pin */
    1004:	ad 98       	cbi	0x15, 5	; 21
    1006:	06 c0       	rjmp	.+12     	; 0x1014 <SSDCycleUpdate+0x88>
		}
		else if(SSD.ssd.color == SSD_GREEN) /* dispay green color */
    1008:	88 30       	cpi	r24, 0x08	; 8
    100a:	11 f4       	brne	.+4      	; 0x1010 <SSDCycleUpdate+0x84>
		{
			SSD_RED_CLR();
    100c:	ac 98       	cbi	0x15, 4	; 21
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <SSDCycleUpdate+0x86>
			SSD_GRN_SET();
		}
		else								/* dispay amber color */
		{
			SSD_RED_SET();
    1010:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_SET();
    1012:	ad 9a       	sbi	0x15, 5	; 21
void SSDCycleUpdate(void)
{
	SSDShitfOutData();
	SSDUpdateOnOff();
	SSDUpdateComPin();
}
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	08 95       	ret

0000101a <SSDDisplayDec>:
* Notes      :none
*
*********************************************************************************************************
*/
void SSDDisplayDec(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
    101a:	0f 93       	push	r16
    101c:	1f 93       	push	r17
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	8c 01       	movw	r16, r24
    1024:	36 2f       	mov	r19, r22
uint32_t SSDHex2Dec(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = hexValue/1000;
    1026:	68 ee       	ldi	r22, 0xE8	; 232
    1028:	73 e0       	ldi	r23, 0x03	; 3
    102a:	0e 94 2c 09 	call	0x1258	; 0x1258 <__udivmodhi4>
    102e:	c6 2f       	mov	r28, r22
	dataSTR.hundred   = hexValue%1000/100;
    1030:	64 e6       	ldi	r22, 0x64	; 100
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	0e 94 2c 09 	call	0x1258	; 0x1258 <__udivmodhi4>
    1038:	d6 2f       	mov	r29, r22
	dataSTR.tens      = hexValue%1000%100/10;
    103a:	6a e0       	ldi	r22, 0x0A	; 10
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	0e 94 2c 09 	call	0x1258	; 0x1258 <__udivmodhi4>
    1042:	56 2f       	mov	r21, r22
{
	SSD_DISP_T ValueCopy;
	
	SSD.DispVal.value = SSDHex2Dec(DispData);
	ValueCopy.value = SSD.DispVal.value;
	SSD.ssd.rate = rate;
    1044:	37 70       	andi	r19, 0x07	; 7
    1046:	60 91 5f 03 	lds	r22, 0x035F
    104a:	60 7e       	andi	r22, 0xE0	; 224
	SSD.ssd.color = color;
    104c:	43 70       	andi	r20, 0x03	; 3
    104e:	94 2f       	mov	r25, r20
    1050:	99 0f       	add	r25, r25
    1052:	99 0f       	add	r25, r25
    1054:	99 0f       	add	r25, r25
    1056:	46 2f       	mov	r20, r22
    1058:	43 2b       	or	r20, r19
    105a:	49 2b       	or	r20, r25
    105c:	40 93 5f 03 	sts	0x035F, r20
	
	/* Set display null for all 4 seven segment displays */
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
    1060:	ee eb       	ldi	r30, 0xBE	; 190
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	94 91       	lpm	r25, Z
    1066:	90 93 64 03 	sts	0x0364, r25
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
    106a:	94 91       	lpm	r25, Z
    106c:	90 93 63 03 	sts	0x0363, r25
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
    1070:	94 91       	lpm	r25, Z
    1072:	90 93 62 03 	sts	0x0362, r25
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
    1076:	e4 91       	lpm	r30, Z
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0

	/* Set display remove zero before number */
	if(DispData > 1000)
    107c:	09 3e       	cpi	r16, 0xE9	; 233
    107e:	83 e0       	ldi	r24, 0x03	; 3
    1080:	18 07       	cpc	r17, r24
    1082:	78 f0       	brcs	.+30     	; 0x10a2 <SSDDisplayDec+0x88>
	{
		SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[ValueCopy.thousands]);
    1084:	ec 2f       	mov	r30, r28
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	e2 55       	subi	r30, 0x52	; 82
    108a:	ff 4f       	sbci	r31, 0xFF	; 255
    108c:	84 91       	lpm	r24, Z
    108e:	80 93 64 03 	sts	0x0364, r24
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
    1092:	ed 2f       	mov	r30, r29
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	e2 55       	subi	r30, 0x52	; 82
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	e4 91       	lpm	r30, Z
    109c:	e0 93 63 03 	sts	0x0363, r30
    10a0:	0e c0       	rjmp	.+28     	; 0x10be <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 100)
    10a2:	05 36       	cpi	r16, 0x65	; 101
    10a4:	11 05       	cpc	r17, r1
    10a6:	40 f0       	brcs	.+16     	; 0x10b8 <SSDDisplayDec+0x9e>
	{
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
    10a8:	ed 2f       	mov	r30, r29
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	e2 55       	subi	r30, 0x52	; 82
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	84 91       	lpm	r24, Z
    10b2:	80 93 63 03 	sts	0x0363, r24
    10b6:	03 c0       	rjmp	.+6      	; 0x10be <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 10)
    10b8:	0b 30       	cpi	r16, 0x0B	; 11
    10ba:	11 05       	cpc	r17, r1
    10bc:	38 f0       	brcs	.+14     	; 0x10cc <SSDDisplayDec+0xb2>
	{
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
    10be:	e5 2f       	mov	r30, r21
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	e2 55       	subi	r30, 0x52	; 82
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	e4 91       	lpm	r30, Z
    10c8:	e0 93 62 03 	sts	0x0362, r30
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else
	{
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
    10cc:	f9 01       	movw	r30, r18
    10ce:	e2 55       	subi	r30, 0x52	; 82
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	e4 91       	lpm	r30, Z
    10d4:	e0 93 61 03 	sts	0x0361, r30
	}
}
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	1f 91       	pop	r17
    10de:	0f 91       	pop	r16
    10e0:	08 95       	ret

000010e2 <SSDDisplayHex>:
uint32_t SSDHex2Hex(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = (hexValue >> 12) & 0x000f;
    10e2:	39 2f       	mov	r19, r25
    10e4:	32 95       	swap	r19
    10e6:	3f 70       	andi	r19, 0x0F	; 15
	dataSTR.hundred   = (hexValue >> 8) & 0x000f;
    10e8:	29 2f       	mov	r18, r25
    10ea:	2f 70       	andi	r18, 0x0F	; 15
	dataSTR.tens      = (hexValue >> 4) & 0x000f;
    10ec:	fc 01       	movw	r30, r24
    10ee:	94 e0       	ldi	r25, 0x04	; 4
    10f0:	f6 95       	lsr	r31
    10f2:	e7 95       	ror	r30
    10f4:	9a 95       	dec	r25
    10f6:	e1 f7       	brne	.-8      	; 0x10f0 <SSDDisplayHex+0xe>
    10f8:	9e 2f       	mov	r25, r30
    10fa:	9f 70       	andi	r25, 0x0F	; 15
	dataSTR.units     = (hexValue >> 0) & 0x000f;
    10fc:	8f 70       	andi	r24, 0x0F	; 15
*
*********************************************************************************************************
*/
void SSDDisplayHex(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
	SSD.DispVal.value = SSDHex2Hex(DispData);
    10fe:	af e5       	ldi	r26, 0x5F	; 95
    1100:	b3 e0       	ldi	r27, 0x03	; 3
	SSD.ssd.rate = rate;
    1102:	67 70       	andi	r22, 0x07	; 7
    1104:	7c 91       	ld	r23, X
    1106:	70 7e       	andi	r23, 0xE0	; 224
	SSD.ssd.color = color;
    1108:	43 70       	andi	r20, 0x03	; 3
    110a:	54 2f       	mov	r21, r20
    110c:	55 0f       	add	r21, r21
    110e:	55 0f       	add	r21, r21
    1110:	55 0f       	add	r21, r21
    1112:	47 2f       	mov	r20, r23
    1114:	46 2b       	or	r20, r22
    1116:	45 2b       	or	r20, r21
    1118:	4c 93       	st	X, r20
	
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD.DispVal.thousands]);
    111a:	e3 2f       	mov	r30, r19
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	e2 55       	subi	r30, 0x52	; 82
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	34 91       	lpm	r19, Z
    1124:	15 96       	adiw	r26, 0x05	; 5
    1126:	3c 93       	st	X, r19
    1128:	15 97       	sbiw	r26, 0x05	; 5
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD.DispVal.hundred]);
    112a:	e2 2f       	mov	r30, r18
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	e2 55       	subi	r30, 0x52	; 82
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	24 91       	lpm	r18, Z
    1134:	14 96       	adiw	r26, 0x04	; 4
    1136:	2c 93       	st	X, r18
    1138:	14 97       	sbiw	r26, 0x04	; 4
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD.DispVal.tens]);
    113a:	e9 2f       	mov	r30, r25
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	e2 55       	subi	r30, 0x52	; 82
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	e4 91       	lpm	r30, Z
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	ec 93       	st	X, r30
    1148:	13 97       	sbiw	r26, 0x03	; 3
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD.DispVal.units]);
    114a:	e8 2f       	mov	r30, r24
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	e2 55       	subi	r30, 0x52	; 82
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	e4 91       	lpm	r30, Z
    1154:	12 96       	adiw	r26, 0x02	; 2
    1156:	ec 93       	st	X, r30
    1158:	08 95       	ret

0000115a <SSDInit>:
void SSDInit(void)
{	
	/* 
	Set PB7-PB4 as output to drive seven segment display, default display turn off
	*/
	DDRC &= ~((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
    115a:	84 b3       	in	r24, 0x14	; 20
    115c:	8f 70       	andi	r24, 0x0F	; 15
    115e:	84 bb       	out	0x14, r24	; 20
	DDRC |= ((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
    1160:	84 b3       	in	r24, 0x14	; 20
    1162:	80 6f       	ori	r24, 0xF0	; 240
    1164:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~((1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4));
    1166:	85 b3       	in	r24, 0x15	; 21
    1168:	8f 70       	andi	r24, 0x0F	; 15
    116a:	85 bb       	out	0x15, r24	; 21

	SSDDisplayHex(0, SSD_R_OFF, SSD_RED);	/* Initial turn off all SSDs */
    116c:	40 e0       	ldi	r20, 0x00	; 0
    116e:	64 e0       	ldi	r22, 0x04	; 4
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <SSDDisplayHex>

00001178 <ADCInit>:
*********************************************************************************************************
*/

void ADCInit (void)
{
	ADMUX  = (1 << REFS0);	/* use external AVCC as AREF,the result is right adjusted,10bits format */	
    1178:	80 e4       	ldi	r24, 0x40	; 64
    117a:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN) | (0 << ADIE) | (1 << ADIF) | ADPS2_0;	/* ADC Enable, Clear interrupt flag,set ADC Prescaler Selections */
    117c:	84 e9       	ldi	r24, 0x94	; 148
    117e:	86 b9       	out	0x06, r24	; 6
    1180:	08 95       	ret

00001182 <ReadADC10Bit>:
uint16_t ReadADC10Bit(uint8_t channel)
{
	uint16_t result;
	uint8_t  sreg_save;  
	
    sreg_save = SREG;						/* Save AVR Status Register */
    1182:	2f b7       	in	r18, 0x3f	; 63
	cli();									/* Global interrupt disable */
    1184:	f8 94       	cli
	
    ADMUX  &= 0xf0; 						/* Clear MUX3:0 */
    1186:	97 b1       	in	r25, 0x07	; 7
    1188:	90 7f       	andi	r25, 0xF0	; 240
    118a:	97 b9       	out	0x07, r25	; 7
	ADMUX  |= (channel&0x07);				/* Choose ADC channel */
    118c:	97 b1       	in	r25, 0x07	; 7
    118e:	87 70       	andi	r24, 0x07	; 7
    1190:	89 2b       	or	r24, r25
    1192:	87 b9       	out	0x07, r24	; 7
    ADCSRA |= (1 << ADSC);					/* ADC start conversion */	
    1194:	36 9a       	sbi	0x06, 6	; 6
    while ((ADCSRA & (1 << ADIF)) == 0);	/* wait conversion finish */			
    1196:	34 9b       	sbis	0x06, 4	; 6
    1198:	fe cf       	rjmp	.-4      	; 0x1196 <ReadADC10Bit+0x14>
    result  = ADC;							/* Read ADC value */
    119a:	84 b1       	in	r24, 0x04	; 4
    119c:	95 b1       	in	r25, 0x05	; 5
	
    SREG = sreg_save;						/* Recover AVR Status Register */	
    119e:	2f bf       	out	0x3f, r18	; 63
    return (result);
}
    11a0:	08 95       	ret

000011a2 <ReadADC8Bit>:
*/

uint8_t ReadADC8Bit(uint8_t channel)
{
	uint16_t tempInt;
	tempInt = ReadADC10Bit(channel);
    11a2:	0e 94 c1 08 	call	0x1182	; 0x1182 <ReadADC10Bit>
	return tempInt>>2;
    11a6:	96 95       	lsr	r25
    11a8:	87 95       	ror	r24
    11aa:	96 95       	lsr	r25
    11ac:	87 95       	ror	r24
}
    11ae:	08 95       	ret

000011b0 <ButtonInit>:
* Returns    : none
*********************************************************************************************************
*/
void ButtonInit(void)
{
	ButtonInitEx();
    11b0:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <ButtonInitEx>

000011b4 <ButtonCycleUpdate>:
* Notes      : None
*
*/
ButtonDataType ButtonGetIO_State(void)
{
	return  ButtonGetIO_StateEx();
    11b4:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <ButtonGetIO_StateEx>
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
    11b8:	90 91 65 03 	lds	r25, 0x0365
    11bc:	89 2b       	or	r24, r25
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
    11be:	10 92 65 03 	sts	0x0365, r1
	b = button.buttonsLastCycle.bVal;
    11c2:	90 91 66 03 	lds	r25, 0x0366
	holdTime = button.buttonHoldTime;
    11c6:	20 91 6b 03 	lds	r18, 0x036B
    11ca:	30 91 6c 03 	lds	r19, 0x036C
	
	if (button.buttonsReleased.bVal != 0) {		
    11ce:	40 91 67 03 	lds	r20, 0x0367
    11d2:	44 23       	and	r20, r20
    11d4:	19 f0       	breq	.+6      	; 0x11dc <ButtonCycleUpdate+0x28>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
    11d6:	40 93 69 03 	sts	0x0369, r20
    11da:	05 c0       	rjmp	.+10     	; 0x11e6 <ButtonCycleUpdate+0x32>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
    11dc:	2d 33       	cpi	r18, 0x3D	; 61
    11de:	31 05       	cpc	r19, r1
    11e0:	10 f0       	brcs	.+4      	; 0x11e6 <ButtonCycleUpdate+0x32>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
    11e2:	10 92 69 03 	sts	0x0369, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
    11e6:	10 92 67 03 	sts	0x0367, r1
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
    11ea:	10 92 6a 03 	sts	0x036A, r1
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
    11ee:	89 13       	cpse	r24, r25
    11f0:	0f c0       	rjmp	.+30     	; 0x1210 <ButtonCycleUpdate+0x5c>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
    11f2:	2f 5f       	subi	r18, 0xFF	; 255
    11f4:	3f 4f       	sbci	r19, 0xFF	; 255
    11f6:	24 32       	cpi	r18, 0x24	; 36
    11f8:	31 05       	cpc	r19, r1
    11fa:	18 f4       	brcc	.+6      	; 0x1202 <ButtonCycleUpdate+0x4e>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
    11fc:	10 92 68 03 	sts	0x0368, r1
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <ButtonCycleUpdate+0x52>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
    1202:	80 93 68 03 	sts	0x0368, r24
		}	
		button.buttonHoldTime = holdTime;
    1206:	30 93 6c 03 	sts	0x036C, r19
    120a:	20 93 6b 03 	sts	0x036B, r18
    120e:	08 95       	ret
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
    1210:	80 93 66 03 	sts	0x0366, r24
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
    1214:	80 95       	com	r24
    1216:	89 23       	and	r24, r25
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
    1218:	90 91 68 03 	lds	r25, 0x0368
    121c:	98 23       	and	r25, r24
    121e:	81 f4       	brne	.+32     	; 0x1240 <ButtonCycleUpdate+0x8c>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
    1220:	10 92 6c 03 	sts	0x036C, r1
    1224:	10 92 6b 03 	sts	0x036B, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
    1228:	23 50       	subi	r18, 0x03	; 3
    122a:	31 09       	sbc	r19, r1
    122c:	20 32       	cpi	r18, 0x20	; 32
    122e:	31 05       	cpc	r19, r1
    1230:	38 f4       	brcc	.+14     	; 0x1240 <ButtonCycleUpdate+0x8c>
				button.buttonsReleased.bVal = buttons;	
    1232:	80 93 67 03 	sts	0x0367, r24
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
    1236:	90 91 69 03 	lds	r25, 0x0369
    123a:	89 23       	and	r24, r25
    123c:	80 93 6a 03 	sts	0x036A, r24
    1240:	08 95       	ret

00001242 <ButtonGetHoldTime>:
*/

uint16_t ButtonGetHoldTime(void)
{
	return button.buttonHoldTime;
}
    1242:	80 91 6b 03 	lds	r24, 0x036B
    1246:	90 91 6c 03 	lds	r25, 0x036C
    124a:	08 95       	ret

0000124c <ButtonGetReleased>:
*/

ButtonDataType ButtonGetReleased(void)
{
	return button.buttonsReleased.bVal;
}
    124c:	80 91 67 03 	lds	r24, 0x0367
    1250:	08 95       	ret

00001252 <ButtonGetHeld>:
*/

ButtonDataType ButtonGetHeld (void)
{
	return button.buttonsHeld.bVal;
}
    1252:	80 91 68 03 	lds	r24, 0x0368
    1256:	08 95       	ret

00001258 <__udivmodhi4>:
    1258:	aa 1b       	sub	r26, r26
    125a:	bb 1b       	sub	r27, r27
    125c:	51 e1       	ldi	r21, 0x11	; 17
    125e:	07 c0       	rjmp	.+14     	; 0x126e <__udivmodhi4_ep>

00001260 <__udivmodhi4_loop>:
    1260:	aa 1f       	adc	r26, r26
    1262:	bb 1f       	adc	r27, r27
    1264:	a6 17       	cp	r26, r22
    1266:	b7 07       	cpc	r27, r23
    1268:	10 f0       	brcs	.+4      	; 0x126e <__udivmodhi4_ep>
    126a:	a6 1b       	sub	r26, r22
    126c:	b7 0b       	sbc	r27, r23

0000126e <__udivmodhi4_ep>:
    126e:	88 1f       	adc	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	5a 95       	dec	r21
    1274:	a9 f7       	brne	.-22     	; 0x1260 <__udivmodhi4_loop>
    1276:	80 95       	com	r24
    1278:	90 95       	com	r25
    127a:	bc 01       	movw	r22, r24
    127c:	cd 01       	movw	r24, r26
    127e:	08 95       	ret

00001280 <__udivmodsi4>:
    1280:	a1 e2       	ldi	r26, 0x21	; 33
    1282:	1a 2e       	mov	r1, r26
    1284:	aa 1b       	sub	r26, r26
    1286:	bb 1b       	sub	r27, r27
    1288:	fd 01       	movw	r30, r26
    128a:	0d c0       	rjmp	.+26     	; 0x12a6 <__udivmodsi4_ep>

0000128c <__udivmodsi4_loop>:
    128c:	aa 1f       	adc	r26, r26
    128e:	bb 1f       	adc	r27, r27
    1290:	ee 1f       	adc	r30, r30
    1292:	ff 1f       	adc	r31, r31
    1294:	a2 17       	cp	r26, r18
    1296:	b3 07       	cpc	r27, r19
    1298:	e4 07       	cpc	r30, r20
    129a:	f5 07       	cpc	r31, r21
    129c:	20 f0       	brcs	.+8      	; 0x12a6 <__udivmodsi4_ep>
    129e:	a2 1b       	sub	r26, r18
    12a0:	b3 0b       	sbc	r27, r19
    12a2:	e4 0b       	sbc	r30, r20
    12a4:	f5 0b       	sbc	r31, r21

000012a6 <__udivmodsi4_ep>:
    12a6:	66 1f       	adc	r22, r22
    12a8:	77 1f       	adc	r23, r23
    12aa:	88 1f       	adc	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	1a 94       	dec	r1
    12b0:	69 f7       	brne	.-38     	; 0x128c <__udivmodsi4_loop>
    12b2:	60 95       	com	r22
    12b4:	70 95       	com	r23
    12b6:	80 95       	com	r24
    12b8:	90 95       	com	r25
    12ba:	9b 01       	movw	r18, r22
    12bc:	ac 01       	movw	r20, r24
    12be:	bd 01       	movw	r22, r26
    12c0:	cf 01       	movw	r24, r30
    12c2:	08 95       	ret

000012c4 <__tablejump2__>:
    12c4:	ee 0f       	add	r30, r30
    12c6:	ff 1f       	adc	r31, r31
    12c8:	05 90       	lpm	r0, Z+
    12ca:	f4 91       	lpm	r31, Z
    12cc:	e0 2d       	mov	r30, r0
    12ce:	09 94       	ijmp

000012d0 <_exit>:
    12d0:	f8 94       	cli

000012d2 <__stop_program>:
    12d2:	ff cf       	rjmp	.-2      	; 0x12d2 <__stop_program>
