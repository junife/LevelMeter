
LevelMeterMainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a74  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000ae8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ac  00800060  00800060  00000ae8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002615  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e98  00000000  00000000  00003461  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e10  00000000  00000000  000042f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000738  00000000  00000000  0000510c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b1d  00000000  00000000  00005844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001839  00000000  00000000  00006361  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  00007b9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
   4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  2c:	0c 94 10 02 	jmp	0x420	; 0x420 <__vector_11>
  30:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  34:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__vector_13>
  38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  44:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  48:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	30 31       	cpi	r19, 0x10	; 16
  56:	32 33       	cpi	r19, 0x32	; 50
  58:	34 35       	cpi	r19, 0x54	; 84
  5a:	36 37       	cpi	r19, 0x76	; 118
  5c:	38 39       	cpi	r19, 0x98	; 152
  5e:	41 42       	sbci	r20, 0x21	; 33
  60:	43 44       	sbci	r20, 0x43	; 67
  62:	45 46       	sbci	r20, 0x65	; 101
	...

00000065 <__c.2098>:
  65:	54 79 70 65 3d 25 63 0a 00                          Type=%c..

0000006e <__c.2096>:
  6e:	48 2d 4a 4d 50 31 0a 00                             H-JMP1..

00000076 <__c.2094>:
  76:	48 2d 4a 4d 50 32 0a 00                             H-JMP2..

0000007e <__c.2092>:
  7e:	4a 4d 50 31 0a 00                                   JMP1..

00000084 <__c.2090>:
  84:	4a 4d 50 32 0a 00                                   JMP2..

0000008a <__c.2083>:
  8a:	52 46 20 72 65 6d 6f 74 65 20 73 74 61 72 74 21     RF remote start!
  9a:	0a 00                                               ..

0000009c <ssdCharTble>:
  9c:	c0 f9 a4 b0 99 92 82 f8 80 90 88 83 c6 a1 86 8e     ................
  ac:	ff fe f7 00                                         ....

000000b0 <__ctors_end>:
  b0:	11 24       	eor	r1, r1
  b2:	1f be       	out	0x3f, r1	; 63
  b4:	cf e5       	ldi	r28, 0x5F	; 95
  b6:	d4 e0       	ldi	r29, 0x04	; 4
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_clear_bss>:
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	a0 e6       	ldi	r26, 0x60	; 96
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
  c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
  c6:	ac 30       	cpi	r26, 0x0C	; 12
  c8:	b2 07       	cpc	r27, r18
  ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
  cc:	0e 94 a9 03 	call	0x752	; 0x752 <main>
  d0:	0c 94 38 05 	jmp	0xa70	; 0xa70 <_exit>

000000d4 <__bad_interrupt>:
  d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
  d8:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
  da:	8f b7       	in	r24, 0x3f	; 63
  dc:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
  de:	71 83       	std	Z+1, r23	; 0x01
  e0:	60 83       	st	Z, r22
	buffer->size = size;
  e2:	53 83       	std	Z+3, r21	; 0x03
  e4:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
  e6:	17 82       	std	Z+7, r1	; 0x07
  e8:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
  ea:	15 82       	std	Z+5, r1	; 0x05
  ec:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
  ee:	8f bf       	out	0x3f, r24	; 63
  f0:	08 95       	ret

000000f2 <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
  f2:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
  f4:	9f b7       	in	r25, 0x3f	; 63
  f6:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
  f8:	44 81       	ldd	r20, Z+4	; 0x04
  fa:	55 81       	ldd	r21, Z+5	; 0x05
  fc:	41 15       	cp	r20, r1
  fe:	51 05       	cpc	r21, r1
 100:	c9 f0       	breq	.+50     	; 0x134 <bufferGetFromFront+0x42>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
 102:	26 81       	ldd	r18, Z+6	; 0x06
 104:	37 81       	ldd	r19, Z+7	; 0x07
 106:	a0 81       	ld	r26, Z
 108:	b1 81       	ldd	r27, Z+1	; 0x01
 10a:	a2 0f       	add	r26, r18
 10c:	b3 1f       	adc	r27, r19
 10e:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
 110:	2f 5f       	subi	r18, 0xFF	; 255
 112:	3f 4f       	sbci	r19, 0xFF	; 255
 114:	37 83       	std	Z+7, r19	; 0x07
 116:	26 83       	std	Z+6, r18	; 0x06
		if(buffer->dataindex >= buffer->size)
 118:	62 81       	ldd	r22, Z+2	; 0x02
 11a:	73 81       	ldd	r23, Z+3	; 0x03
 11c:	26 17       	cp	r18, r22
 11e:	37 07       	cpc	r19, r23
 120:	20 f0       	brcs	.+8      	; 0x12a <bufferGetFromFront+0x38>
		{
			buffer->dataindex -= buffer->size;
 122:	26 1b       	sub	r18, r22
 124:	37 0b       	sbc	r19, r23
 126:	37 83       	std	Z+7, r19	; 0x07
 128:	26 83       	std	Z+6, r18	; 0x06
		}
		buffer->datalength--;
 12a:	41 50       	subi	r20, 0x01	; 1
 12c:	51 09       	sbc	r21, r1
 12e:	55 83       	std	Z+5, r21	; 0x05
 130:	44 83       	std	Z+4, r20	; 0x04
 132:	01 c0       	rjmp	.+2      	; 0x136 <bufferGetFromFront+0x44>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
 134:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
 136:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
 138:	08 95       	ret

0000013a <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
 13a:	fc 01       	movw	r30, r24
 13c:	36 2f       	mov	r19, r22
	// begin critical section
	CRITICAL_SECTION_START;
 13e:	2f b7       	in	r18, 0x3f	; 63
 140:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
 142:	a4 81       	ldd	r26, Z+4	; 0x04
 144:	b5 81       	ldd	r27, Z+5	; 0x05
 146:	62 81       	ldd	r22, Z+2	; 0x02
 148:	73 81       	ldd	r23, Z+3	; 0x03
 14a:	a6 17       	cp	r26, r22
 14c:	b7 07       	cpc	r27, r23
 14e:	98 f4       	brcc	.+38     	; 0x176 <bufferAddToEnd+0x3c>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
 150:	86 81       	ldd	r24, Z+6	; 0x06
 152:	97 81       	ldd	r25, Z+7	; 0x07
 154:	8a 0f       	add	r24, r26
 156:	9b 1f       	adc	r25, r27
 158:	0e 94 02 05 	call	0xa04	; 0xa04 <__udivmodhi4>
 15c:	a0 81       	ld	r26, Z
 15e:	b1 81       	ldd	r27, Z+1	; 0x01
 160:	a8 0f       	add	r26, r24
 162:	b9 1f       	adc	r27, r25
 164:	3c 93       	st	X, r19
		// increment the length
		buffer->datalength++;
 166:	84 81       	ldd	r24, Z+4	; 0x04
 168:	95 81       	ldd	r25, Z+5	; 0x05
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	95 83       	std	Z+5, r25	; 0x05
 16e:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
 170:	2f bf       	out	0x3f, r18	; 63
		// return success
		return -1;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	08 95       	ret
	}
	// end critical section
	CRITICAL_SECTION_END;
 176:	2f bf       	out	0x3f, r18	; 63
	// return failure
	return 0;
 178:	80 e0       	ldi	r24, 0x00	; 0
}
 17a:	08 95       	ret

0000017c <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
 17c:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
 17e:	4f b7       	in	r20, 0x3f	; 63
 180:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
 182:	82 81       	ldd	r24, Z+2	; 0x02
 184:	93 81       	ldd	r25, Z+3	; 0x03
 186:	24 81       	ldd	r18, Z+4	; 0x04
 188:	35 81       	ldd	r19, Z+5	; 0x05
	// end critical section
	CRITICAL_SECTION_END;
 18a:	4f bf       	out	0x3f, r20	; 63
	return bytesleft;
}
 18c:	82 1b       	sub	r24, r18
 18e:	93 0b       	sbc	r25, r19
 190:	08 95       	ret

00000192 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
 192:	90 93 61 00 	sts	0x0061, r25
 196:	80 93 60 00 	sts	0x0060, r24
 19a:	08 95       	ret

0000019c <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
 19c:	cf 93       	push	r28
 19e:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
 1a0:	8a 30       	cpi	r24, 0x0A	; 10
 1a2:	31 f4       	brne	.+12     	; 0x1b0 <rprintfChar+0x14>
		rputchar('\r');
 1a4:	e0 91 60 00 	lds	r30, 0x0060
 1a8:	f0 91 61 00 	lds	r31, 0x0061
 1ac:	8d e0       	ldi	r24, 0x0D	; 13
 1ae:	09 95       	icall
	// send character
	rputchar(c);
 1b0:	e0 91 60 00 	lds	r30, 0x0060
 1b4:	f0 91 61 00 	lds	r31, 0x0061
 1b8:	8c 2f       	mov	r24, r28
}
 1ba:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
 1bc:	09 94       	ijmp

000001be <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
 1be:	8f 70       	andi	r24, 0x0F	; 15
 1c0:	e8 2f       	mov	r30, r24
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	ec 5a       	subi	r30, 0xAC	; 172
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	84 91       	lpm	r24, Z
 1ca:	0c 94 ce 00 	jmp	0x19c	; 0x19c <rprintfChar>

000001ce <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
 1ce:	5f 92       	push	r5
 1d0:	6f 92       	push	r6
 1d2:	7f 92       	push	r7
 1d4:	8f 92       	push	r8
 1d6:	9f 92       	push	r9
 1d8:	af 92       	push	r10
 1da:	bf 92       	push	r11
 1dc:	cf 92       	push	r12
 1de:	df 92       	push	r13
 1e0:	ef 92       	push	r14
 1e2:	ff 92       	push	r15
 1e4:	0f 93       	push	r16
 1e6:	1f 93       	push	r17
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	1f 92       	push	r1
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	ec 89       	ldd	r30, Y+20	; 0x14
 1f4:	fd 89       	ldd	r31, Y+21	; 0x15
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
 1f6:	3e 01       	movw	r6, r28
 1f8:	26 e1       	ldi	r18, 0x16	; 22
 1fa:	62 0e       	add	r6, r18
 1fc:	71 1c       	adc	r7, r1
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
					rprintfChar('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 1fe:	3a e0       	ldi	r19, 0x0A	; 10
 200:	a3 2e       	mov	r10, r19
 202:	b1 2c       	mov	r11, r1
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 204:	3b 89       	ldd	r19, Y+19	; 0x13
 206:	33 23       	and	r19, r19
 208:	81 f0       	breq	.+32     	; 0x22a <rprintf1RamRom+0x5c>
 20a:	8f 01       	movw	r16, r30
 20c:	0f 5f       	subi	r16, 0xFF	; 255
 20e:	1f 4f       	sbci	r17, 0xFF	; 255
 210:	84 91       	lpm	r24, Z
 212:	85 32       	cpi	r24, 0x25	; 37
 214:	89 f0       	breq	.+34     	; 0x238 <rprintf1RamRom+0x6a>
		{	// Until '%' or '\0'
			if (!format_flag)
 216:	88 23       	and	r24, r24
 218:	09 f4       	brne	.+2      	; 0x21c <rprintf1RamRom+0x4e>
 21a:	66 c0       	rjmp	.+204    	; 0x2e8 <rprintf1RamRom+0x11a>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
 21c:	0e 94 ce 00 	call	0x19c	; 0x19c <rprintfChar>
 220:	63 01       	movw	r12, r6
 222:	78 01       	movw	r14, r16
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
 224:	36 01       	movw	r6, r12
 226:	f7 01       	movw	r30, r14
 228:	ed cf       	rjmp	.-38     	; 0x204 <rprintf1RamRom+0x36>
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 22a:	80 81       	ld	r24, Z
 22c:	85 32       	cpi	r24, 0x25	; 37
 22e:	59 f0       	breq	.+22     	; 0x246 <rprintf1RamRom+0x78>
 230:	8f 01       	movw	r16, r30
 232:	0f 5f       	subi	r16, 0xFF	; 255
 234:	1f 4f       	sbci	r17, 0xFF	; 255
 236:	ef cf       	rjmp	.-34     	; 0x216 <rprintf1RamRom+0x48>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
 238:	7f 01       	movw	r14, r30
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	e8 0e       	add	r14, r24
 23e:	f1 1c       	adc	r15, r1
 240:	f8 01       	movw	r30, r16
 242:	84 91       	lpm	r24, Z
 244:	05 c0       	rjmp	.+10     	; 0x250 <rprintf1RamRom+0x82>
 246:	7f 01       	movw	r14, r30
 248:	22 e0       	ldi	r18, 0x02	; 2
 24a:	e2 0e       	add	r14, r18
 24c:	f1 1c       	adc	r15, r1
 24e:	81 81       	ldd	r24, Z+1	; 0x01
 250:	84 36       	cpi	r24, 0x64	; 100
 252:	a1 f0       	breq	.+40     	; 0x27c <rprintf1RamRom+0xae>
 254:	88 37       	cpi	r24, 0x78	; 120
 256:	61 f0       	breq	.+24     	; 0x270 <rprintf1RamRom+0xa2>
 258:	83 36       	cpi	r24, 0x63	; 99
 25a:	31 f4       	brne	.+12     	; 0x268 <rprintf1RamRom+0x9a>
		{
			case 'c': format_flag = va_arg(ap,int);
 25c:	f3 01       	movw	r30, r6
 25e:	80 81       	ld	r24, Z
 260:	93 01       	movw	r18, r6
 262:	2e 5f       	subi	r18, 0xFE	; 254
 264:	3f 4f       	sbci	r19, 0xFF	; 255
 266:	39 01       	movw	r6, r18
			default:  rprintfChar(format_flag); continue;
 268:	0e 94 ce 00 	call	0x19c	; 0x19c <rprintfChar>
 26c:	63 01       	movw	r12, r6
 26e:	da cf       	rjmp	.-76     	; 0x224 <rprintf1RamRom+0x56>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 270:	20 e1       	ldi	r18, 0x10	; 16
 272:	82 2e       	mov	r8, r18
 274:	91 2c       	mov	r9, r1
 276:	00 e0       	ldi	r16, 0x00	; 0
 278:	10 e1       	ldi	r17, 0x10	; 16
 27a:	05 c0       	rjmp	.+10     	; 0x286 <rprintf1RamRom+0xb8>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 27c:	9a e0       	ldi	r25, 0x0A	; 10
 27e:	89 2e       	mov	r8, r25
 280:	91 2c       	mov	r9, r1
 282:	00 e1       	ldi	r16, 0x10	; 16
 284:	17 e2       	ldi	r17, 0x27	; 39
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 286:	63 01       	movw	r12, r6
 288:	32 e0       	ldi	r19, 0x02	; 2
 28a:	c3 0e       	add	r12, r19
 28c:	d1 1c       	adc	r13, r1
 28e:	f3 01       	movw	r30, r6
 290:	60 80       	ld	r6, Z
 292:	71 80       	ldd	r7, Z+1	; 0x01
			if (format_flag == 'd')
 294:	84 36       	cpi	r24, 0x64	; 100
 296:	a1 f4       	brne	.+40     	; 0x2c0 <rprintf1RamRom+0xf2>
			{
				if (((int)u_val) < 0)
 298:	77 fe       	sbrs	r7, 7
 29a:	0f c0       	rjmp	.+30     	; 0x2ba <rprintf1RamRom+0xec>
				{
					u_val = - u_val;
 29c:	71 94       	neg	r7
 29e:	61 94       	neg	r6
 2a0:	71 08       	sbc	r7, r1
					rprintfChar('-');
 2a2:	8d e2       	ldi	r24, 0x2D	; 45
 2a4:	0e 94 ce 00 	call	0x19c	; 0x19c <rprintfChar>
 2a8:	08 c0       	rjmp	.+16     	; 0x2ba <rprintf1RamRom+0xec>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 2aa:	c8 01       	movw	r24, r16
 2ac:	b5 01       	movw	r22, r10
 2ae:	0e 94 02 05 	call	0xa04	; 0xa04 <__udivmodhi4>
 2b2:	8b 01       	movw	r16, r22
 2b4:	62 30       	cpi	r22, 0x02	; 2
 2b6:	71 05       	cpc	r23, r1
 2b8:	18 f0       	brcs	.+6      	; 0x2c0 <rprintf1RamRom+0xf2>
 2ba:	60 16       	cp	r6, r16
 2bc:	71 06       	cpc	r7, r17
 2be:	a8 f3       	brcs	.-22     	; 0x2aa <rprintf1RamRom+0xdc>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
 2c0:	c3 01       	movw	r24, r6
 2c2:	b8 01       	movw	r22, r16
 2c4:	0e 94 02 05 	call	0xa04	; 0xa04 <__udivmodhi4>
 2c8:	58 2e       	mov	r5, r24
 2ca:	86 2f       	mov	r24, r22
 2cc:	99 83       	std	Y+1, r25	; 0x01
 2ce:	0e 94 df 00 	call	0x1be	; 0x1be <rprintfu04>
				u_val %= div_val;
 2d2:	65 2c       	mov	r6, r5
 2d4:	99 81       	ldd	r25, Y+1	; 0x01
 2d6:	79 2e       	mov	r7, r25
				div_val /= base;
 2d8:	c8 01       	movw	r24, r16
 2da:	b4 01       	movw	r22, r8
 2dc:	0e 94 02 05 	call	0xa04	; 0xa04 <__udivmodhi4>
 2e0:	8b 01       	movw	r16, r22
			} while (div_val);
 2e2:	67 2b       	or	r22, r23
 2e4:	69 f7       	brne	.-38     	; 0x2c0 <rprintf1RamRom+0xf2>
 2e6:	9e cf       	rjmp	.-196    	; 0x224 <rprintf1RamRom+0x56>
		}
	}
	va_end(ap);
}
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0f 90       	pop	r0
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	ff 90       	pop	r15
 2f8:	ef 90       	pop	r14
 2fa:	df 90       	pop	r13
 2fc:	cf 90       	pop	r12
 2fe:	bf 90       	pop	r11
 300:	af 90       	pop	r10
 302:	9f 90       	pop	r9
 304:	8f 90       	pop	r8
 306:	7f 90       	pop	r7
 308:	6f 90       	pop	r6
 30a:	5f 90       	pop	r5
 30c:	08 95       	ret

0000030e <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (unsigned char *)uartRxData, UART_RX_BUFFER_SIZE);
 30e:	40 e4       	ldi	r20, 0x40	; 64
 310:	50 e0       	ldi	r21, 0x00	; 0
 312:	64 ea       	ldi	r22, 0xA4	; 164
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	87 ee       	ldi	r24, 0xE7	; 231
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 6c 00 	call	0xd8	; 0xd8 <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (unsigned char *)uartTxData, UART_TX_BUFFER_SIZE);
 31e:	40 e4       	ldi	r20, 0x40	; 64
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	64 e6       	ldi	r22, 0x64	; 100
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	80 ef       	ldi	r24, 0xF0	; 240
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <bufferInit>

0000032e <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
 32e:	0e 94 87 01 	call	0x30e	; 0x30e <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
 332:	10 92 63 00 	sts	0x0063, r1
 336:	10 92 62 00 	sts	0x0062, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
 33a:	88 ed       	ldi	r24, 0xD8	; 216
 33c:	8a b9       	out	0x0a, r24	; 10
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
 33e:	8f e5       	ldi	r24, 0x5F	; 95
 340:	89 b9       	out	0x09, r24	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 342:	10 bc       	out	0x20, r1	; 32
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	80 93 e6 00 	sts	0x00E6, r24
	uartBufferedTx = FALSE;
 34a:	10 92 ef 00 	sts	0x00EF, r1
	// clear overflow count
	uartRxOverflow = 0;
 34e:	10 92 f9 00 	sts	0x00F9, r1
 352:	10 92 f8 00 	sts	0x00F8, r1
	// enable interrupts
	sei();
 356:	78 94       	sei
 358:	08 95       	ret

0000035a <uartSetBaudRate>:
	UartRxFunc = rx_func;
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	8b 01       	movw	r16, r22
 360:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
 362:	dc 01       	movw	r26, r24
 364:	cb 01       	movw	r24, r22
 366:	90 5e       	subi	r25, 0xE0	; 224
 368:	a3 4e       	sbci	r26, 0xE3	; 227
 36a:	bf 4f       	sbci	r27, 0xFF	; 255
 36c:	bc 01       	movw	r22, r24
 36e:	cd 01       	movw	r24, r26
 370:	43 e0       	ldi	r20, 0x03	; 3
 372:	66 0f       	add	r22, r22
 374:	77 1f       	adc	r23, r23
 376:	88 1f       	adc	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	4a 95       	dec	r20
 37c:	d1 f7       	brne	.-12     	; 0x372 <uartSetBaudRate+0x18>
 37e:	a9 01       	movw	r20, r18
 380:	98 01       	movw	r18, r16
 382:	e4 e0       	ldi	r30, 0x04	; 4
 384:	22 0f       	add	r18, r18
 386:	33 1f       	adc	r19, r19
 388:	44 1f       	adc	r20, r20
 38a:	55 1f       	adc	r21, r21
 38c:	ea 95       	dec	r30
 38e:	d1 f7       	brne	.-12     	; 0x384 <uartSetBaudRate+0x2a>
 390:	0e 94 16 05 	call	0xa2c	; 0xa2c <__udivmodsi4>
 394:	21 50       	subi	r18, 0x01	; 1
 396:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
 398:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 39a:	30 bd       	out	0x20, r19	; 32
	#endif
}
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	08 95       	ret

000003a2 <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
 3a2:	90 91 e6 00 	lds	r25, 0x00E6
 3a6:	99 23       	and	r25, r25
 3a8:	e1 f3       	breq	.-8      	; 0x3a2 <uartSendByte>
	// send byte
	outb(UDR, txData);
 3aa:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
 3ac:	10 92 e6 00 	sts	0x00E6, r1
 3b0:	08 95       	ret

000003b2 <__vector_13>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_TRANS)
{
 3b2:	1f 92       	push	r1
 3b4:	0f 92       	push	r0
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	0f 92       	push	r0
 3ba:	11 24       	eor	r1, r1
 3bc:	2f 93       	push	r18
 3be:	3f 93       	push	r19
 3c0:	4f 93       	push	r20
 3c2:	5f 93       	push	r21
 3c4:	6f 93       	push	r22
 3c6:	7f 93       	push	r23
 3c8:	8f 93       	push	r24
 3ca:	9f 93       	push	r25
 3cc:	af 93       	push	r26
 3ce:	bf 93       	push	r27
 3d0:	ef 93       	push	r30
 3d2:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
 3d4:	80 91 ef 00 	lds	r24, 0x00EF
 3d8:	88 23       	and	r24, r24
 3da:	71 f0       	breq	.+28     	; 0x3f8 <__vector_13+0x46>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
 3dc:	80 91 f4 00 	lds	r24, 0x00F4
 3e0:	90 91 f5 00 	lds	r25, 0x00F5
 3e4:	89 2b       	or	r24, r25
 3e6:	31 f0       	breq	.+12     	; 0x3f4 <__vector_13+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
 3e8:	80 ef       	ldi	r24, 0xF0	; 240
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 79 00 	call	0xf2	; 0xf2 <bufferGetFromFront>
 3f0:	8c b9       	out	0x0c, r24	; 12
 3f2:	05 c0       	rjmp	.+10     	; 0x3fe <__vector_13+0x4c>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
 3f4:	10 92 ef 00 	sts	0x00EF, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	80 93 e6 00 	sts	0x00E6, r24
	}
}
 3fe:	ff 91       	pop	r31
 400:	ef 91       	pop	r30
 402:	bf 91       	pop	r27
 404:	af 91       	pop	r26
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	7f 91       	pop	r23
 40c:	6f 91       	pop	r22
 40e:	5f 91       	pop	r21
 410:	4f 91       	pop	r20
 412:	3f 91       	pop	r19
 414:	2f 91       	pop	r18
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <__vector_11>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(__SIG_UART_RECV)
{
 420:	1f 92       	push	r1
 422:	0f 92       	push	r0
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	0f 92       	push	r0
 428:	11 24       	eor	r1, r1
 42a:	2f 93       	push	r18
 42c:	3f 93       	push	r19
 42e:	4f 93       	push	r20
 430:	5f 93       	push	r21
 432:	6f 93       	push	r22
 434:	7f 93       	push	r23
 436:	8f 93       	push	r24
 438:	9f 93       	push	r25
 43a:	af 93       	push	r26
 43c:	bf 93       	push	r27
 43e:	ef 93       	push	r30
 440:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
 442:	8c b1       	in	r24, 0x0c	; 12

	// if there's a user function to handle this receive event
	if(UartRxFunc)
 444:	20 91 62 00 	lds	r18, 0x0062
 448:	30 91 63 00 	lds	r19, 0x0063
 44c:	23 2b       	or	r18, r19
 44e:	31 f0       	breq	.+12     	; 0x45c <__vector_11+0x3c>
	{
		// call it and pass the received data
		UartRxFunc(c);
 450:	e0 91 62 00 	lds	r30, 0x0062
 454:	f0 91 63 00 	lds	r31, 0x0063
 458:	09 95       	icall
 45a:	10 c0       	rjmp	.+32     	; 0x47c <__stack+0x1d>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
 45c:	68 2f       	mov	r22, r24
 45e:	87 ee       	ldi	r24, 0xE7	; 231
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 9d 00 	call	0x13a	; 0x13a <bufferAddToEnd>
 466:	81 11       	cpse	r24, r1
 468:	09 c0       	rjmp	.+18     	; 0x47c <__stack+0x1d>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
 46a:	80 91 f8 00 	lds	r24, 0x00F8
 46e:	90 91 f9 00 	lds	r25, 0x00F9
 472:	01 96       	adiw	r24, 0x01	; 1
 474:	90 93 f9 00 	sts	0x00F9, r25
 478:	80 93 f8 00 	sts	0x00F8, r24
		}
	}
}
 47c:	ff 91       	pop	r31
 47e:	ef 91       	pop	r30
 480:	bf 91       	pop	r27
 482:	af 91       	pop	r26
 484:	9f 91       	pop	r25
 486:	8f 91       	pop	r24
 488:	7f 91       	pop	r23
 48a:	6f 91       	pop	r22
 48c:	5f 91       	pop	r21
 48e:	4f 91       	pop	r20
 490:	3f 91       	pop	r19
 492:	2f 91       	pop	r18
 494:	0f 90       	pop	r0
 496:	0f be       	out	0x3f, r0	; 63
 498:	0f 90       	pop	r0
 49a:	1f 90       	pop	r1
 49c:	18 95       	reti

0000049e <McuInit>:

void McuInit(void)
{
	// initialize our libraries
	// initialize the UART (serial port)
	uartInit();		/* sei() call in the function */
 49e:	0e 94 97 01 	call	0x32e	; 0x32e <uartInit>
	// set the baud rate of the UART for our debug/reporting output
	uartSetBaudRate(9600);
 4a2:	60 e8       	ldi	r22, 0x80	; 128
 4a4:	75 e2       	ldi	r23, 0x25	; 37
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 ad 01 	call	0x35a	; 0x35a <uartSetBaudRate>
	// initialize rprintf system
	rprintfInit(uartSendByte);
 4ae:	81 ed       	ldi	r24, 0xD1	; 209
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	0c 94 c9 00 	jmp	0x192	; 0x192 <rprintfInit>

000004b6 <ApplInit>:
*********************************************************************************************************
*/

void ApplInit(void)
{
	ButtonInit();
 4b6:	0e 94 b3 04 	call	0x966	; 0x966 <ButtonInit>
	LEDInit();
 4ba:	0e 94 1b 03 	call	0x636	; 0x636 <LEDInit>
	SSDInit();
 4be:	0e 94 a4 04 	call	0x948	; 0x948 <SSDInit>
	
	//glcdInit();	/* Need connect to LCD device because MCU will check lcd busy or not will cause waiting */
	
	//glcdPutStr(&greeting[0]);
	// Just print message for debug.
	rprintf("RF remote start!\n" );	
 4c2:	8a e8       	ldi	r24, 0x8A	; 138
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	9f 93       	push	r25
 4c8:	8f 93       	push	r24
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	8f 93       	push	r24
 4ce:	0e 94 e7 00 	call	0x1ce	; 0x1ce <rprintf1RamRom>
 4d2:	0f 90       	pop	r0
 4d4:	0f 90       	pop	r0
 4d6:	0f 90       	pop	r0
 4d8:	08 95       	ret

000004da <AppCycleUpdate>:
*
* Returns    : none
*********************************************************************************************************
*/
void AppCycleUpdate(void)
{	
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
	char tempChar;
	static uint16_t cnt;
	cnt++;
 4de:	80 91 e4 00 	lds	r24, 0x00E4
 4e2:	90 91 e5 00 	lds	r25, 0x00E5
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	90 93 e5 00 	sts	0x00E5, r25
 4ec:	80 93 e4 00 	sts	0x00E4, r24

	if(ButtonGetReleased())
 4f0:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <ButtonGetReleased>
 4f4:	88 23       	and	r24, r24
 4f6:	81 f1       	breq	.+96     	; 0x558 <AppCycleUpdate+0x7e>
	{
		if(ButtonJMP2ReleasedEvent())
 4f8:	0e 94 11 03 	call	0x622	; 0x622 <ButtonJMP2ReleasedEvent>
 4fc:	88 23       	and	r24, r24
 4fe:	99 f0       	breq	.+38     	; 0x526 <AppCycleUpdate+0x4c>
		{
			rprintf("JMP2\n");
 500:	84 e8       	ldi	r24, 0x84	; 132
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	9f 93       	push	r25
 506:	8f 93       	push	r24
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	8f 93       	push	r24
 50c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <rprintf1RamRom>
			LEDFlag1On();
 510:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LEDFlag1On>
			LEDFlag2On();
 514:	0e 94 8e 03 	call	0x71c	; 0x71c <LEDFlag2On>
			SSDDisplayDec(9, SSD_0HZ, SSD_GREEN);
 518:	41 e0       	ldi	r20, 0x01	; 1
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	89 e0       	ldi	r24, 0x09	; 9
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 04 04 	call	0x808	; 0x808 <SSDDisplayDec>
 524:	16 c0       	rjmp	.+44     	; 0x552 <AppCycleUpdate+0x78>
		}
		else if(ButtonJMP1ReleasedEvent())
 526:	0e 94 09 03 	call	0x612	; 0x612 <ButtonJMP1ReleasedEvent>
 52a:	88 23       	and	r24, r24
 52c:	a9 f0       	breq	.+42     	; 0x558 <AppCycleUpdate+0x7e>
		{
			rprintf("JMP1\n");
 52e:	8e e7       	ldi	r24, 0x7E	; 126
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	9f 93       	push	r25
 534:	8f 93       	push	r24
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	8f 93       	push	r24
 53a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <rprintf1RamRom>
			LEDFlag1Off();
 53e:	0e 94 87 03 	call	0x70e	; 0x70e <LEDFlag1Off>
			LEDFlag2Off();
 542:	0e 94 a2 03 	call	0x744	; 0x744 <LEDFlag2Off>
			SSDDisplayHex(0x1abc, SSD_0HZ, SSD_RED);
 546:	40 e0       	ldi	r20, 0x00	; 0
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	8c eb       	ldi	r24, 0xBC	; 188
 54c:	9a e1       	ldi	r25, 0x1A	; 26
 54e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SSDDisplayHex>
 552:	0f 90       	pop	r0
 554:	0f 90       	pop	r0
 556:	0f 90       	pop	r0
		}
	}

	if(ButtonGetHeld())
 558:	0e 94 ff 04 	call	0x9fe	; 0x9fe <ButtonGetHeld>
 55c:	88 23       	and	r24, r24
 55e:	81 f1       	breq	.+96     	; 0x5c0 <AppCycleUpdate+0xe6>
	{
		if(ButtonJMP2HeldEvent())
 560:	0e 94 16 03 	call	0x62c	; 0x62c <ButtonJMP2HeldEvent>
 564:	88 23       	and	r24, r24
 566:	99 f0       	breq	.+38     	; 0x58e <AppCycleUpdate+0xb4>
		{
			rprintf("H-JMP2\n");
 568:	86 e7       	ldi	r24, 0x76	; 118
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	9f 93       	push	r25
 56e:	8f 93       	push	r24
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	8f 93       	push	r24
 574:	0e 94 e7 00 	call	0x1ce	; 0x1ce <rprintf1RamRom>
			LEDFlag1Flash1Hz();
 578:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LEDFlag1Flash1Hz>
			LEDFlag2Flash1Hz();
 57c:	0e 94 94 03 	call	0x728	; 0x728 <LEDFlag2Flash1Hz>
			SSDDisplayDec(0x1def, SSD_1HZ, SSD_AMBER);
 580:	42 e0       	ldi	r20, 0x02	; 2
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	8f ee       	ldi	r24, 0xEF	; 239
 586:	9d e1       	ldi	r25, 0x1D	; 29
 588:	0e 94 04 04 	call	0x808	; 0x808 <SSDDisplayDec>
 58c:	16 c0       	rjmp	.+44     	; 0x5ba <AppCycleUpdate+0xe0>
		}
		
		else if(ButtonJMP1HeldEvent())
 58e:	0e 94 0d 03 	call	0x61a	; 0x61a <ButtonJMP1HeldEvent>
 592:	88 23       	and	r24, r24
 594:	a9 f0       	breq	.+42     	; 0x5c0 <AppCycleUpdate+0xe6>
		{
			rprintf("H-JMP1\n");
 596:	8e e6       	ldi	r24, 0x6E	; 110
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	9f 93       	push	r25
 59c:	8f 93       	push	r24
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	8f 93       	push	r24
 5a2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <rprintf1RamRom>
			LEDFlag1Flash3Hz();
 5a6:	0e 94 80 03 	call	0x700	; 0x700 <LEDFlag1Flash3Hz>
			LEDFlag2Flash3Hz();
 5aa:	0e 94 9b 03 	call	0x736	; 0x736 <LEDFlag2Flash3Hz>
			SSDDisplayHex(0x1def, SSD_3HZ, SSD_RED);
 5ae:	40 e0       	ldi	r20, 0x00	; 0
 5b0:	63 e0       	ldi	r22, 0x03	; 3
 5b2:	8f ee       	ldi	r24, 0xEF	; 239
 5b4:	9d e1       	ldi	r25, 0x1D	; 29
 5b6:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SSDDisplayHex>
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
 5be:	0f 90       	pop	r0
		}
	}
	
	if(uartRxBuffer.size - bufferIsNotFull(&uartRxBuffer) != 0)
 5c0:	c0 91 e9 00 	lds	r28, 0x00E9
 5c4:	d0 91 ea 00 	lds	r29, 0x00EA
 5c8:	87 ee       	ldi	r24, 0xE7	; 231
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 be 00 	call	0x17c	; 0x17c <bufferIsNotFull>
 5d0:	c8 17       	cp	r28, r24
 5d2:	d9 07       	cpc	r29, r25
 5d4:	99 f0       	breq	.+38     	; 0x5fc <AppCycleUpdate+0x122>
	{
		tempChar = bufferGetFromFront(&uartRxBuffer);
 5d6:	87 ee       	ldi	r24, 0xE7	; 231
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 94 79 00 	call	0xf2	; 0xf2 <bufferGetFromFront>
		//rprintf("char=%c\n",tempChar);
		rprintf("Type=%c\n",tempChar);
 5de:	1f 92       	push	r1
 5e0:	8f 93       	push	r24
 5e2:	85 e6       	ldi	r24, 0x65	; 101
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	9f 93       	push	r25
 5e8:	8f 93       	push	r24
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	8f 93       	push	r24
 5ee:	0e 94 e7 00 	call	0x1ce	; 0x1ce <rprintf1RamRom>
 5f2:	0f 90       	pop	r0
 5f4:	0f 90       	pop	r0
 5f6:	0f 90       	pop	r0
 5f8:	0f 90       	pop	r0
 5fa:	0f 90       	pop	r0
	}
}
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	08 95       	ret

00000602 <ButtonInitEx>:
void ButtonInitEx(void)
{	
	/* 
	Set PC1-PC0 as input, the tow IO with external pull up 10K resistor.
	*/
	DDRC &= ((1<<DDC1) | (1<<DDC0));
 602:	84 b3       	in	r24, 0x14	; 20
 604:	83 70       	andi	r24, 0x03	; 3
 606:	84 bb       	out	0x14, r24	; 20
 608:	08 95       	ret

0000060a <ButtonGetIO_StateEx>:
*/
ButtonDataType ButtonGetIO_StateEx(void)
{
	ButtonDataType io_state;
	
	io_state = (~PINC) & ((1<<PINC1) | (1<<PINC0));	/* Get PC1-PC0 IO state */
 60a:	83 b3       	in	r24, 0x13	; 19
 60c:	80 95       	com	r24
	
	return  io_state;
}
 60e:	83 70       	andi	r24, 0x03	; 3
 610:	08 95       	ret

00000612 <ButtonJMP1ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP1) 
 612:	80 91 06 01 	lds	r24, 0x0106
	{
		return true;
	}
    
    return false;
}
 616:	81 70       	andi	r24, 0x01	; 1
 618:	08 95       	ret

0000061a <ButtonJMP1HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP1HeldEvent(void)
{
	if (button.buttonsHeld.JMP1) 
 61a:	80 91 07 01 	lds	r24, 0x0107
	{
		return true;
	}
    
    return false;
}
 61e:	81 70       	andi	r24, 0x01	; 1
 620:	08 95       	ret

00000622 <ButtonJMP2ReleasedEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2ReleasedEvent(void)
{
	if (button.buttonsReleased.JMP2) 
 622:	80 91 06 01 	lds	r24, 0x0106
	{
		return true;
	}
    
    return false;
}
 626:	86 95       	lsr	r24
 628:	81 70       	andi	r24, 0x01	; 1
 62a:	08 95       	ret

0000062c <ButtonJMP2HeldEvent>:
*********************************************************************************************************
*/

bool ButtonJMP2HeldEvent(void)
{
	if (button.buttonsHeld.JMP2) 
 62c:	80 91 07 01 	lds	r24, 0x0107
	{
		return true;
	}
    
    return false;
}
 630:	86 95       	lsr	r24
 632:	81 70       	andi	r24, 0x01	; 1
 634:	08 95       	ret

00000636 <LEDInit>:
	uint8_t i;
	
	/* 
	Set PB2-PB1 as output to drive to LEDs, default turn off all LEDs
	*/
	DDRB &= ~((1<<DDB2) | (1<<DDB1));
 636:	87 b3       	in	r24, 0x17	; 23
 638:	89 7f       	andi	r24, 0xF9	; 249
 63a:	87 bb       	out	0x17, r24	; 23
	DDRB |= ((1<<DDB2) | (1<<DDB1));
 63c:	87 b3       	in	r24, 0x17	; 23
 63e:	86 60       	ori	r24, 0x06	; 6
 640:	87 bb       	out	0x17, r24	; 23
	PORTB |= ((1<<DDB2) | (1<<DDB1));
 642:	88 b3       	in	r24, 0x18	; 24
 644:	86 60       	ori	r24, 0x06	; 6
 646:	88 bb       	out	0x18, r24	; 24
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
 648:	ea ef       	ldi	r30, 0xFA	; 250
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	80 81       	ld	r24, Z
 64e:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
 650:	84 60       	ori	r24, 0x04	; 4
 652:	88 60       	ori	r24, 0x08	; 8
 654:	80 83       	st	Z, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
 656:	9c e3       	ldi	r25, 0x3C	; 60
 658:	91 83       	std	Z+1, r25	; 0x01
	DDRB |= ((1<<DDB2) | (1<<DDB1));
	PORTB |= ((1<<DDB2) | (1<<DDB1));
	
	for(i = 0; i < LED_NUM; i++)
	{
		LEDs[i].led.LEDRate = LED_OFF;
 65a:	ac ef       	ldi	r26, 0xFC	; 252
 65c:	b0 e0       	ldi	r27, 0x00	; 0
 65e:	8c 91       	ld	r24, X
 660:	88 7f       	andi	r24, 0xF8	; 248
		LEDs[i].led.state = S_OFF;
 662:	84 60       	ori	r24, 0x04	; 4
 664:	88 60       	ori	r24, 0x08	; 8
 666:	8c 93       	st	X, r24
		LEDs[i].flashTimer = LED_ONE_SEC;
 668:	93 83       	std	Z+3, r25	; 0x03
 66a:	08 95       	ret

0000066c <LEDCycleUpdate>:
*
*********************************************************************************************************
*/

void LEDCycleUpdate(void)
{
 66c:	ab ef       	ldi	r26, 0xFB	; 251
 66e:	b0 e0       	ldi	r27, 0x00	; 0
 670:	40 e0       	ldi	r20, 0x00	; 0
 672:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
 674:	ca 01       	movw	r24, r20
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	fc 01       	movw	r30, r24
 67c:	e6 50       	subi	r30, 0x06	; 6
 67e:	ff 4f       	sbci	r31, 0xFF	; 255
 680:	30 81       	ld	r19, Z
 682:	37 70       	andi	r19, 0x07	; 7
		ft = LEDs[i].flashTimer;
 684:	2c 91       	ld	r18, X
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
 686:	34 30       	cpi	r19, 0x04	; 4
 688:	19 f0       	breq	.+6      	; 0x690 <LEDCycleUpdate+0x24>
	for(i = 0; i < LED_NUM; i++)
	{
		rate = LEDs[i].led.LEDRate;
		ft = LEDs[i].flashTimer;
		
		ft += rate;
 68a:	23 0f       	add	r18, r19
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
 68c:	2d 33       	cpi	r18, 0x3D	; 61
 68e:	38 f0       	brcs	.+14     	; 0x69e <LEDCycleUpdate+0x32>
		{
			ft = 0;
			LEDs[i].led.state = S_OFF;
 690:	fc 01       	movw	r30, r24
 692:	e6 50       	subi	r30, 0x06	; 6
 694:	ff 4f       	sbci	r31, 0xFF	; 255
 696:	20 81       	ld	r18, Z
 698:	28 60       	ori	r18, 0x08	; 8
 69a:	20 83       	st	Z, r18
		ft = LEDs[i].flashTimer;
		
		ft += rate;
		if((rate == LED_OFF) || (ft > LED_ONE_SEC))
		{
			ft = 0;
 69c:	20 e0       	ldi	r18, 0x00	; 0
			LEDs[i].led.state = S_OFF;
		}
		LEDs[i].flashTimer = ft;
 69e:	2c 93       	st	X, r18
		
		if((rate == LED_0HZ) || (ft > (LED_ONE_SEC/2)))
 6a0:	33 23       	and	r19, r19
 6a2:	11 f0       	breq	.+4      	; 0x6a8 <LEDCycleUpdate+0x3c>
 6a4:	2f 31       	cpi	r18, 0x1F	; 31
 6a6:	30 f0       	brcs	.+12     	; 0x6b4 <LEDCycleUpdate+0x48>
		{
			LEDs[i].led.state = S_ON;
 6a8:	fc 01       	movw	r30, r24
 6aa:	e6 50       	subi	r30, 0x06	; 6
 6ac:	ff 4f       	sbci	r31, 0xFF	; 255
 6ae:	80 81       	ld	r24, Z
 6b0:	87 7f       	andi	r24, 0xF7	; 247
 6b2:	80 83       	st	Z, r24
 6b4:	12 96       	adiw	r26, 0x02	; 2
{
	LED_RATE rate;
	uint8_t ft;				/* flash timer */
	uint8_t i;

	for(i = 0; i < LED_NUM; i++)
 6b6:	41 30       	cpi	r20, 0x01	; 1
 6b8:	51 05       	cpc	r21, r1
 6ba:	19 f0       	breq	.+6      	; 0x6c2 <LEDCycleUpdate+0x56>
 6bc:	41 e0       	ldi	r20, 0x01	; 1
 6be:	50 e0       	ldi	r21, 0x00	; 0
 6c0:	d9 cf       	rjmp	.-78     	; 0x674 <LEDCycleUpdate+0x8>
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */

	if(LEDs[0].led.state == S_OFF)
 6c2:	80 91 fa 00 	lds	r24, 0x00FA
 6c6:	83 ff       	sbrs	r24, 3
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <LEDCycleUpdate+0x62>
	{
		state |= (1<<DDB1);
 6ca:	82 e0       	ldi	r24, 0x02	; 2
 6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <LEDCycleUpdate+0x64>
*
*********************************************************************************************************
*/
void LEDUpdateState(void)
{
	uint8_t state = 0;		/* default is turn off LED */
 6ce:	80 e0       	ldi	r24, 0x00	; 0
	if(LEDs[0].led.state == S_OFF)
	{
		state |= (1<<DDB1);
	}
	
	if(LEDs[1].led.state == S_OFF)
 6d0:	90 91 fc 00 	lds	r25, 0x00FC
 6d4:	93 fd       	sbrc	r25, 3
	{
		state |= (1<<DDB2);
 6d6:	84 60       	ori	r24, 0x04	; 4
	}

	PORTB &= ~((1<<DDB2) | (1<<DDB1));
 6d8:	98 b3       	in	r25, 0x18	; 24
 6da:	99 7f       	andi	r25, 0xF9	; 249
 6dc:	98 bb       	out	0x18, r25	; 24
	PORTB |= state;
 6de:	98 b3       	in	r25, 0x18	; 24
 6e0:	89 2b       	or	r24, r25
 6e2:	88 bb       	out	0x18, r24	; 24
 6e4:	08 95       	ret

000006e6 <LEDFlag1On>:
*
*********************************************************************************************************
*/
void LEDFlag1Set(LED_RATE rate)
{
	LEDs[0].led.LEDRate = rate;
 6e6:	ea ef       	ldi	r30, 0xFA	; 250
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	80 81       	ld	r24, Z
 6ec:	88 7f       	andi	r24, 0xF8	; 248
 6ee:	80 83       	st	Z, r24
 6f0:	08 95       	ret

000006f2 <LEDFlag1Flash1Hz>:
 6f2:	ea ef       	ldi	r30, 0xFA	; 250
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	88 7f       	andi	r24, 0xF8	; 248
 6fa:	81 60       	ori	r24, 0x01	; 1
 6fc:	80 83       	st	Z, r24
 6fe:	08 95       	ret

00000700 <LEDFlag1Flash3Hz>:
 700:	ea ef       	ldi	r30, 0xFA	; 250
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	80 81       	ld	r24, Z
 706:	88 7f       	andi	r24, 0xF8	; 248
 708:	83 60       	ori	r24, 0x03	; 3
 70a:	80 83       	st	Z, r24
 70c:	08 95       	ret

0000070e <LEDFlag1Off>:
 70e:	ea ef       	ldi	r30, 0xFA	; 250
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	80 81       	ld	r24, Z
 714:	88 7f       	andi	r24, 0xF8	; 248
 716:	84 60       	ori	r24, 0x04	; 4
 718:	80 83       	st	Z, r24
 71a:	08 95       	ret

0000071c <LEDFlag2On>:
*
*********************************************************************************************************
*/
void LEDFlag2Set(LED_RATE rate)
{
	LEDs[1].led.LEDRate = rate;
 71c:	ec ef       	ldi	r30, 0xFC	; 252
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	80 81       	ld	r24, Z
 722:	88 7f       	andi	r24, 0xF8	; 248
 724:	80 83       	st	Z, r24
 726:	08 95       	ret

00000728 <LEDFlag2Flash1Hz>:
 728:	ec ef       	ldi	r30, 0xFC	; 252
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	80 81       	ld	r24, Z
 72e:	88 7f       	andi	r24, 0xF8	; 248
 730:	81 60       	ori	r24, 0x01	; 1
 732:	80 83       	st	Z, r24
 734:	08 95       	ret

00000736 <LEDFlag2Flash3Hz>:
 736:	ec ef       	ldi	r30, 0xFC	; 252
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	80 81       	ld	r24, Z
 73c:	88 7f       	andi	r24, 0xF8	; 248
 73e:	83 60       	ori	r24, 0x03	; 3
 740:	80 83       	st	Z, r24
 742:	08 95       	ret

00000744 <LEDFlag2Off>:
 744:	ec ef       	ldi	r30, 0xFC	; 252
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	80 81       	ld	r24, Z
 74a:	88 7f       	andi	r24, 0xF8	; 248
 74c:	84 60       	ori	r24, 0x04	; 4
 74e:	80 83       	st	Z, r24
 750:	08 95       	ret

00000752 <main>:
int main(void)
{	
	/*
	Calll all initial function
	*/
	McuInit();
 752:	0e 94 4f 02 	call	0x49e	; 0x49e <McuInit>
	ApplInit();
 756:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <ApplInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 75a:	26 e6       	ldi	r18, 0x66	; 102
 75c:	86 ee       	ldi	r24, 0xE6	; 230
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	21 50       	subi	r18, 0x01	; 1
 762:	80 40       	sbci	r24, 0x00	; 0
 764:	90 40       	sbci	r25, 0x00	; 0
 766:	e1 f7       	brne	.-8      	; 0x760 <main+0xe>
	
	while(1)
	{
		_delay_ms(20);
		ButtonCycleUpdate();
 768:	0e 94 b5 04 	call	0x96a	; 0x96a <ButtonCycleUpdate>
		AppCycleUpdate();
 76c:	0e 94 6d 02 	call	0x4da	; 0x4da <AppCycleUpdate>
		LEDCycleUpdate();
 770:	0e 94 36 03 	call	0x66c	; 0x66c <LEDCycleUpdate>
		SSDCycleUpdate();
 774:	0e 94 bd 03 	call	0x77a	; 0x77a <SSDCycleUpdate>
	}
 778:	f0 cf       	rjmp	.-32     	; 0x75a <main+0x8>

0000077a <SSDCycleUpdate>:
*
*********************************************************************************************************
*/

void SSDCycleUpdate(void)
{
 77a:	0f 93       	push	r16
 77c:	1f 93       	push	r17
*/
void SSDShitfOutData(void)
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
 77e:	40 91 00 01 	lds	r20, 0x0100
 782:	50 91 01 01 	lds	r21, 0x0101
 786:	60 91 02 01 	lds	r22, 0x0102
 78a:	70 91 03 01 	lds	r23, 0x0103
 78e:	80 e2       	ldi	r24, 0x20	; 32
	
	for(i = 0; i < 32; i++)
	{
		bitVal = 0;
		if(DispValTemp & 0x80000000)
 790:	8a 01       	movw	r16, r20
 792:	9b 01       	movw	r18, r22
		{
			bitVal = 1;
		}
		DispValTemp <<= 1;
 794:	44 0f       	add	r20, r20
 796:	55 1f       	adc	r21, r21
 798:	66 1f       	adc	r22, r22
 79a:	77 1f       	adc	r23, r23

		SSD_CLK_CLR();
 79c:	af 98       	cbi	0x15, 7	; 21
		SSD_DAT_CLR();
 79e:	ae 98       	cbi	0x15, 6	; 21
		if(bitVal)
 7a0:	37 fd       	sbrc	r19, 7
		{
			SSD_DAT_SET();
 7a2:	ae 9a       	sbi	0x15, 6	; 21
		}
		SSD_CLK_SET();
 7a4:	af 9a       	sbi	0x15, 7	; 21
 7a6:	81 50       	subi	r24, 0x01	; 1
{
	uint8_t i;
	uint8_t bitVal;
	uint32_t DispValTemp = SSD.DispVal.value; 
	
	for(i = 0; i < 32; i++)
 7a8:	99 f7       	brne	.-26     	; 0x790 <SSDCycleUpdate+0x16>
void SSDUpdateOnOff(void)
{
	SSD_RATE rate;
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
 7aa:	90 91 fe 00 	lds	r25, 0x00FE
 7ae:	97 70       	andi	r25, 0x07	; 7
	ft = SSD.flashTimer;
 7b0:	80 91 ff 00 	lds	r24, 0x00FF
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
 7b4:	94 30       	cpi	r25, 0x04	; 4
 7b6:	19 f0       	breq	.+6      	; 0x7be <SSDCycleUpdate+0x44>
	uint8_t ft;				/* flash timer */

	rate = SSD.ssd.rate;
	ft = SSD.flashTimer;
	
	ft += rate;
 7b8:	89 0f       	add	r24, r25
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
 7ba:	8d 33       	cpi	r24, 0x3D	; 61
 7bc:	30 f0       	brcs	.+12     	; 0x7ca <SSDCycleUpdate+0x50>
	{
		ft = 0;
		SSD.ssd.state = SSD_OFF;
 7be:	80 91 fe 00 	lds	r24, 0x00FE
 7c2:	8f 7d       	andi	r24, 0xDF	; 223
 7c4:	80 93 fe 00 	sts	0x00FE, r24
	ft = SSD.flashTimer;
	
	ft += rate;
	if((rate == SSD_R_OFF) || (ft > SSD_ONE_SEC))
	{
		ft = 0;
 7c8:	80 e0       	ldi	r24, 0x00	; 0
		SSD.ssd.state = SSD_OFF;
	}
	SSD.flashTimer = ft;
 7ca:	80 93 ff 00 	sts	0x00FF, r24
	
	if((rate == SSD_0HZ) || (ft > (SSD_ONE_SEC/2)))
 7ce:	99 23       	and	r25, r25
 7d0:	11 f0       	breq	.+4      	; 0x7d6 <SSDCycleUpdate+0x5c>
 7d2:	8f 31       	cpi	r24, 0x1F	; 31
 7d4:	28 f0       	brcs	.+10     	; 0x7e0 <SSDCycleUpdate+0x66>
	{
		SSD.ssd.state = SSD_ON;
 7d6:	80 91 fe 00 	lds	r24, 0x00FE
 7da:	80 62       	ori	r24, 0x20	; 32
 7dc:	80 93 fe 00 	sts	0x00FE, r24
*
*********************************************************************************************************
*/
void SSDUpdateComPin(void)
{
	if(SSD.ssd.state == SSD_OFF)		/* if ssd is in off state, cut power to green and color */
 7e0:	80 91 fe 00 	lds	r24, 0x00FE
 7e4:	85 fd       	sbrc	r24, 5
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <SSDCycleUpdate+0x72>
	{
		SSD_RED_CLR();
 7e8:	ac 98       	cbi	0x15, 4	; 21
 7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <SSDCycleUpdate+0x78>
		SSD_GRN_CLR();
	}
	else
	{
		if(SSD.ssd.color == SSD_RED)		/* dispay red color */
 7ec:	88 71       	andi	r24, 0x18	; 24
 7ee:	19 f4       	brne	.+6      	; 0x7f6 <SSDCycleUpdate+0x7c>
		{
			SSD_RED_SET();	/* give power to red ssd common pin */
 7f0:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_CLR();	/* cut power to green ssd common pin */
 7f2:	ad 98       	cbi	0x15, 5	; 21
 7f4:	06 c0       	rjmp	.+12     	; 0x802 <SSDCycleUpdate+0x88>
		}
		else if(SSD.ssd.color == SSD_GREEN) /* dispay green color */
 7f6:	88 30       	cpi	r24, 0x08	; 8
 7f8:	11 f4       	brne	.+4      	; 0x7fe <SSDCycleUpdate+0x84>
		{
			SSD_RED_CLR();
 7fa:	ac 98       	cbi	0x15, 4	; 21
 7fc:	01 c0       	rjmp	.+2      	; 0x800 <SSDCycleUpdate+0x86>
			SSD_GRN_SET();
		}
		else								/* dispay amber color */
		{
			SSD_RED_SET();
 7fe:	ac 9a       	sbi	0x15, 4	; 21
			SSD_GRN_SET();
 800:	ad 9a       	sbi	0x15, 5	; 21
void SSDCycleUpdate(void)
{
	SSDShitfOutData();
	SSDUpdateOnOff();
	SSDUpdateComPin();
}
 802:	1f 91       	pop	r17
 804:	0f 91       	pop	r16
 806:	08 95       	ret

00000808 <SSDDisplayDec>:
* Notes      :none
*
*********************************************************************************************************
*/
void SSDDisplayDec(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
 808:	0f 93       	push	r16
 80a:	1f 93       	push	r17
 80c:	cf 93       	push	r28
 80e:	df 93       	push	r29
 810:	8c 01       	movw	r16, r24
 812:	36 2f       	mov	r19, r22
uint32_t SSDHex2Dec(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = hexValue/1000;
 814:	68 ee       	ldi	r22, 0xE8	; 232
 816:	73 e0       	ldi	r23, 0x03	; 3
 818:	0e 94 02 05 	call	0xa04	; 0xa04 <__udivmodhi4>
 81c:	c6 2f       	mov	r28, r22
	dataSTR.hundred   = hexValue%1000/100;
 81e:	64 e6       	ldi	r22, 0x64	; 100
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	0e 94 02 05 	call	0xa04	; 0xa04 <__udivmodhi4>
 826:	d6 2f       	mov	r29, r22
	dataSTR.tens      = hexValue%1000%100/10;
 828:	6a e0       	ldi	r22, 0x0A	; 10
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	0e 94 02 05 	call	0xa04	; 0xa04 <__udivmodhi4>
 830:	56 2f       	mov	r21, r22
{
	SSD_DISP_T ValueCopy;
	
	SSD.DispVal.value = SSDHex2Dec(DispData);
	ValueCopy.value = SSD.DispVal.value;
	SSD.ssd.rate = rate;
 832:	37 70       	andi	r19, 0x07	; 7
 834:	60 91 fe 00 	lds	r22, 0x00FE
 838:	60 7e       	andi	r22, 0xE0	; 224
	SSD.ssd.color = color;
 83a:	43 70       	andi	r20, 0x03	; 3
 83c:	94 2f       	mov	r25, r20
 83e:	99 0f       	add	r25, r25
 840:	99 0f       	add	r25, r25
 842:	99 0f       	add	r25, r25
 844:	46 2f       	mov	r20, r22
 846:	43 2b       	or	r20, r19
 848:	49 2b       	or	r20, r25
 84a:	40 93 fe 00 	sts	0x00FE, r20
	
	/* Set display null for all 4 seven segment displays */
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
 84e:	ec ea       	ldi	r30, 0xAC	; 172
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	94 91       	lpm	r25, Z
 854:	90 93 03 01 	sts	0x0103, r25
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
 858:	94 91       	lpm	r25, Z
 85a:	90 93 02 01 	sts	0x0102, r25
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
 85e:	94 91       	lpm	r25, Z
 860:	90 93 01 01 	sts	0x0101, r25
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD_DISP_NULL]);
 864:	e4 91       	lpm	r30, Z
 866:	28 2f       	mov	r18, r24
 868:	30 e0       	ldi	r19, 0x00	; 0

	/* Set display remove zero before number */
	if(DispData > 1000)
 86a:	09 3e       	cpi	r16, 0xE9	; 233
 86c:	83 e0       	ldi	r24, 0x03	; 3
 86e:	18 07       	cpc	r17, r24
 870:	78 f0       	brcs	.+30     	; 0x890 <SSDDisplayDec+0x88>
	{
		SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[ValueCopy.thousands]);
 872:	ec 2f       	mov	r30, r28
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	e4 56       	subi	r30, 0x64	; 100
 878:	ff 4f       	sbci	r31, 0xFF	; 255
 87a:	84 91       	lpm	r24, Z
 87c:	80 93 03 01 	sts	0x0103, r24
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
 880:	ed 2f       	mov	r30, r29
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	e4 56       	subi	r30, 0x64	; 100
 886:	ff 4f       	sbci	r31, 0xFF	; 255
 888:	e4 91       	lpm	r30, Z
 88a:	e0 93 02 01 	sts	0x0102, r30
 88e:	0e c0       	rjmp	.+28     	; 0x8ac <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 100)
 890:	05 36       	cpi	r16, 0x65	; 101
 892:	11 05       	cpc	r17, r1
 894:	40 f0       	brcs	.+16     	; 0x8a6 <SSDDisplayDec+0x9e>
	{
		SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[ValueCopy.hundred]);
 896:	ed 2f       	mov	r30, r29
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	e4 56       	subi	r30, 0x64	; 100
 89c:	ff 4f       	sbci	r31, 0xFF	; 255
 89e:	84 91       	lpm	r24, Z
 8a0:	80 93 02 01 	sts	0x0102, r24
 8a4:	03 c0       	rjmp	.+6      	; 0x8ac <SSDDisplayDec+0xa4>
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else if(DispData > 10)
 8a6:	0b 30       	cpi	r16, 0x0B	; 11
 8a8:	11 05       	cpc	r17, r1
 8aa:	38 f0       	brcs	.+14     	; 0x8ba <SSDDisplayDec+0xb2>
	{
		SSD.DispVal.tens	  = pgm_read_byte(&ssdCharTble[ValueCopy.tens]);
 8ac:	e5 2f       	mov	r30, r21
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	e4 56       	subi	r30, 0x64	; 100
 8b2:	ff 4f       	sbci	r31, 0xFF	; 255
 8b4:	e4 91       	lpm	r30, Z
 8b6:	e0 93 01 01 	sts	0x0101, r30
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
	}
	else
	{
		SSD.DispVal.units	  = pgm_read_byte(&ssdCharTble[ValueCopy.units]);
 8ba:	f9 01       	movw	r30, r18
 8bc:	e4 56       	subi	r30, 0x64	; 100
 8be:	ff 4f       	sbci	r31, 0xFF	; 255
 8c0:	e4 91       	lpm	r30, Z
 8c2:	e0 93 00 01 	sts	0x0100, r30
	}
}
 8c6:	df 91       	pop	r29
 8c8:	cf 91       	pop	r28
 8ca:	1f 91       	pop	r17
 8cc:	0f 91       	pop	r16
 8ce:	08 95       	ret

000008d0 <SSDDisplayHex>:
uint32_t SSDHex2Hex(uint16_t hexValue)
{
	SSD_DISP_T dataSTR;
	dataSTR.value = 0;
	
	dataSTR.thousands = (hexValue >> 12) & 0x000f;
 8d0:	39 2f       	mov	r19, r25
 8d2:	32 95       	swap	r19
 8d4:	3f 70       	andi	r19, 0x0F	; 15
	dataSTR.hundred   = (hexValue >> 8) & 0x000f;
 8d6:	29 2f       	mov	r18, r25
 8d8:	2f 70       	andi	r18, 0x0F	; 15
	dataSTR.tens      = (hexValue >> 4) & 0x000f;
 8da:	fc 01       	movw	r30, r24
 8dc:	94 e0       	ldi	r25, 0x04	; 4
 8de:	f6 95       	lsr	r31
 8e0:	e7 95       	ror	r30
 8e2:	9a 95       	dec	r25
 8e4:	e1 f7       	brne	.-8      	; 0x8de <SSDDisplayHex+0xe>
 8e6:	9e 2f       	mov	r25, r30
 8e8:	9f 70       	andi	r25, 0x0F	; 15
	dataSTR.units     = (hexValue >> 0) & 0x000f;
 8ea:	8f 70       	andi	r24, 0x0F	; 15
*
*********************************************************************************************************
*/
void SSDDisplayHex(uint16_t DispData,  SSD_RATE rate, SSD_COLOR color)
{
	SSD.DispVal.value = SSDHex2Hex(DispData);
 8ec:	ae ef       	ldi	r26, 0xFE	; 254
 8ee:	b0 e0       	ldi	r27, 0x00	; 0
	SSD.ssd.rate = rate;
 8f0:	67 70       	andi	r22, 0x07	; 7
 8f2:	7c 91       	ld	r23, X
 8f4:	70 7e       	andi	r23, 0xE0	; 224
	SSD.ssd.color = color;
 8f6:	43 70       	andi	r20, 0x03	; 3
 8f8:	54 2f       	mov	r21, r20
 8fa:	55 0f       	add	r21, r21
 8fc:	55 0f       	add	r21, r21
 8fe:	55 0f       	add	r21, r21
 900:	47 2f       	mov	r20, r23
 902:	46 2b       	or	r20, r22
 904:	45 2b       	or	r20, r21
 906:	4c 93       	st	X, r20
	
	SSD.DispVal.thousands = pgm_read_byte(&ssdCharTble[SSD.DispVal.thousands]);
 908:	e3 2f       	mov	r30, r19
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	e4 56       	subi	r30, 0x64	; 100
 90e:	ff 4f       	sbci	r31, 0xFF	; 255
 910:	34 91       	lpm	r19, Z
 912:	15 96       	adiw	r26, 0x05	; 5
 914:	3c 93       	st	X, r19
 916:	15 97       	sbiw	r26, 0x05	; 5
	SSD.DispVal.hundred   = pgm_read_byte(&ssdCharTble[SSD.DispVal.hundred]);
 918:	e2 2f       	mov	r30, r18
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	e4 56       	subi	r30, 0x64	; 100
 91e:	ff 4f       	sbci	r31, 0xFF	; 255
 920:	24 91       	lpm	r18, Z
 922:	14 96       	adiw	r26, 0x04	; 4
 924:	2c 93       	st	X, r18
 926:	14 97       	sbiw	r26, 0x04	; 4
	SSD.DispVal.tens      = pgm_read_byte(&ssdCharTble[SSD.DispVal.tens]);
 928:	e9 2f       	mov	r30, r25
 92a:	f0 e0       	ldi	r31, 0x00	; 0
 92c:	e4 56       	subi	r30, 0x64	; 100
 92e:	ff 4f       	sbci	r31, 0xFF	; 255
 930:	e4 91       	lpm	r30, Z
 932:	13 96       	adiw	r26, 0x03	; 3
 934:	ec 93       	st	X, r30
 936:	13 97       	sbiw	r26, 0x03	; 3
	SSD.DispVal.units     = pgm_read_byte(&ssdCharTble[SSD.DispVal.units]);
 938:	e8 2f       	mov	r30, r24
 93a:	f0 e0       	ldi	r31, 0x00	; 0
 93c:	e4 56       	subi	r30, 0x64	; 100
 93e:	ff 4f       	sbci	r31, 0xFF	; 255
 940:	e4 91       	lpm	r30, Z
 942:	12 96       	adiw	r26, 0x02	; 2
 944:	ec 93       	st	X, r30
 946:	08 95       	ret

00000948 <SSDInit>:
void SSDInit(void)
{	
	/* 
	Set PB7-PB4 as output to drive seven segment display, default display turn off
	*/
	DDRC &= ~((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
 948:	84 b3       	in	r24, 0x14	; 20
 94a:	8f 70       	andi	r24, 0x0F	; 15
 94c:	84 bb       	out	0x14, r24	; 20
	DDRC |= ((1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4));
 94e:	84 b3       	in	r24, 0x14	; 20
 950:	80 6f       	ori	r24, 0xF0	; 240
 952:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~((1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4));
 954:	85 b3       	in	r24, 0x15	; 21
 956:	8f 70       	andi	r24, 0x0F	; 15
 958:	85 bb       	out	0x15, r24	; 21

	SSDDisplayHex(0, SSD_R_OFF, SSD_RED);	/* Initial turn off all SSDs */
 95a:	40 e0       	ldi	r20, 0x00	; 0
 95c:	64 e0       	ldi	r22, 0x04	; 4
 95e:	80 e0       	ldi	r24, 0x00	; 0
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <SSDDisplayHex>

00000966 <ButtonInit>:
* Returns    : none
*********************************************************************************************************
*/
void ButtonInit(void)
{
	ButtonInitEx();
 966:	0c 94 01 03 	jmp	0x602	; 0x602 <ButtonInitEx>

0000096a <ButtonCycleUpdate>:
* Notes      : None
*
*/
ButtonDataType ButtonGetIO_State(void)
{
	return  ButtonGetIO_StateEx();
 96a:	0e 94 05 03 	call	0x60a	; 0x60a <ButtonGetIO_StateEx>
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
 96e:	90 91 04 01 	lds	r25, 0x0104
 972:	89 2b       	or	r24, r25
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
 974:	10 92 04 01 	sts	0x0104, r1
	b = button.buttonsLastCycle.bVal;
 978:	90 91 05 01 	lds	r25, 0x0105
	holdTime = button.buttonHoldTime;
 97c:	20 91 0a 01 	lds	r18, 0x010A
 980:	30 91 0b 01 	lds	r19, 0x010B
	
	if (button.buttonsReleased.bVal != 0) {		
 984:	40 91 06 01 	lds	r20, 0x0106
 988:	44 23       	and	r20, r20
 98a:	19 f0       	breq	.+6      	; 0x992 <ButtonCycleUpdate+0x28>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
 98c:	40 93 08 01 	sts	0x0108, r20
 990:	05 c0       	rjmp	.+10     	; 0x99c <ButtonCycleUpdate+0x32>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
 992:	2d 33       	cpi	r18, 0x3D	; 61
 994:	31 05       	cpc	r19, r1
 996:	10 f0       	brcs	.+4      	; 0x99c <ButtonCycleUpdate+0x32>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
 998:	10 92 08 01 	sts	0x0108, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
 99c:	10 92 06 01 	sts	0x0106, r1
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
 9a0:	10 92 09 01 	sts	0x0109, r1
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
 9a4:	89 13       	cpse	r24, r25
 9a6:	0f c0       	rjmp	.+30     	; 0x9c6 <ButtonCycleUpdate+0x5c>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
 9a8:	2f 5f       	subi	r18, 0xFF	; 255
 9aa:	3f 4f       	sbci	r19, 0xFF	; 255
 9ac:	24 32       	cpi	r18, 0x24	; 36
 9ae:	31 05       	cpc	r19, r1
 9b0:	18 f4       	brcc	.+6      	; 0x9b8 <ButtonCycleUpdate+0x4e>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
 9b2:	10 92 07 01 	sts	0x0107, r1
 9b6:	02 c0       	rjmp	.+4      	; 0x9bc <ButtonCycleUpdate+0x52>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
 9b8:	80 93 07 01 	sts	0x0107, r24
		}	
		button.buttonHoldTime = holdTime;
 9bc:	30 93 0b 01 	sts	0x010B, r19
 9c0:	20 93 0a 01 	sts	0x010A, r18
 9c4:	08 95       	ret
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
 9c6:	80 93 05 01 	sts	0x0105, r24
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
 9ca:	80 95       	com	r24
 9cc:	89 23       	and	r24, r25
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
 9ce:	90 91 07 01 	lds	r25, 0x0107
 9d2:	98 23       	and	r25, r24
 9d4:	81 f4       	brne	.+32     	; 0x9f6 <ButtonCycleUpdate+0x8c>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
 9d6:	10 92 0b 01 	sts	0x010B, r1
 9da:	10 92 0a 01 	sts	0x010A, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
 9de:	23 50       	subi	r18, 0x03	; 3
 9e0:	31 09       	sbc	r19, r1
 9e2:	20 32       	cpi	r18, 0x20	; 32
 9e4:	31 05       	cpc	r19, r1
 9e6:	38 f4       	brcc	.+14     	; 0x9f6 <ButtonCycleUpdate+0x8c>
				button.buttonsReleased.bVal = buttons;	
 9e8:	80 93 06 01 	sts	0x0106, r24
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
 9ec:	90 91 08 01 	lds	r25, 0x0108
 9f0:	89 23       	and	r24, r25
 9f2:	80 93 09 01 	sts	0x0109, r24
 9f6:	08 95       	ret

000009f8 <ButtonGetReleased>:
*/

ButtonDataType ButtonGetReleased(void)
{
	return button.buttonsReleased.bVal;
}
 9f8:	80 91 06 01 	lds	r24, 0x0106
 9fc:	08 95       	ret

000009fe <ButtonGetHeld>:
*/

ButtonDataType ButtonGetHeld (void)
{
	return button.buttonsHeld.bVal;
}
 9fe:	80 91 07 01 	lds	r24, 0x0107
 a02:	08 95       	ret

00000a04 <__udivmodhi4>:
 a04:	aa 1b       	sub	r26, r26
 a06:	bb 1b       	sub	r27, r27
 a08:	51 e1       	ldi	r21, 0x11	; 17
 a0a:	07 c0       	rjmp	.+14     	; 0xa1a <__udivmodhi4_ep>

00000a0c <__udivmodhi4_loop>:
 a0c:	aa 1f       	adc	r26, r26
 a0e:	bb 1f       	adc	r27, r27
 a10:	a6 17       	cp	r26, r22
 a12:	b7 07       	cpc	r27, r23
 a14:	10 f0       	brcs	.+4      	; 0xa1a <__udivmodhi4_ep>
 a16:	a6 1b       	sub	r26, r22
 a18:	b7 0b       	sbc	r27, r23

00000a1a <__udivmodhi4_ep>:
 a1a:	88 1f       	adc	r24, r24
 a1c:	99 1f       	adc	r25, r25
 a1e:	5a 95       	dec	r21
 a20:	a9 f7       	brne	.-22     	; 0xa0c <__udivmodhi4_loop>
 a22:	80 95       	com	r24
 a24:	90 95       	com	r25
 a26:	bc 01       	movw	r22, r24
 a28:	cd 01       	movw	r24, r26
 a2a:	08 95       	ret

00000a2c <__udivmodsi4>:
 a2c:	a1 e2       	ldi	r26, 0x21	; 33
 a2e:	1a 2e       	mov	r1, r26
 a30:	aa 1b       	sub	r26, r26
 a32:	bb 1b       	sub	r27, r27
 a34:	fd 01       	movw	r30, r26
 a36:	0d c0       	rjmp	.+26     	; 0xa52 <__udivmodsi4_ep>

00000a38 <__udivmodsi4_loop>:
 a38:	aa 1f       	adc	r26, r26
 a3a:	bb 1f       	adc	r27, r27
 a3c:	ee 1f       	adc	r30, r30
 a3e:	ff 1f       	adc	r31, r31
 a40:	a2 17       	cp	r26, r18
 a42:	b3 07       	cpc	r27, r19
 a44:	e4 07       	cpc	r30, r20
 a46:	f5 07       	cpc	r31, r21
 a48:	20 f0       	brcs	.+8      	; 0xa52 <__udivmodsi4_ep>
 a4a:	a2 1b       	sub	r26, r18
 a4c:	b3 0b       	sbc	r27, r19
 a4e:	e4 0b       	sbc	r30, r20
 a50:	f5 0b       	sbc	r31, r21

00000a52 <__udivmodsi4_ep>:
 a52:	66 1f       	adc	r22, r22
 a54:	77 1f       	adc	r23, r23
 a56:	88 1f       	adc	r24, r24
 a58:	99 1f       	adc	r25, r25
 a5a:	1a 94       	dec	r1
 a5c:	69 f7       	brne	.-38     	; 0xa38 <__udivmodsi4_loop>
 a5e:	60 95       	com	r22
 a60:	70 95       	com	r23
 a62:	80 95       	com	r24
 a64:	90 95       	com	r25
 a66:	9b 01       	movw	r18, r22
 a68:	ac 01       	movw	r20, r24
 a6a:	bd 01       	movw	r22, r26
 a6c:	cf 01       	movw	r24, r30
 a6e:	08 95       	ret

00000a70 <_exit>:
 a70:	f8 94       	cli

00000a72 <__stop_program>:
 a72:	ff cf       	rjmp	.-2      	; 0xa72 <__stop_program>
