#ifndef COMMON_H_
#define COMMON_H_

/*
*********************************************************************************************************
*                                       CONST DEFINITION
*********************************************************************************************************
*/
#define DATAS_MAP_TO_EEPROM	10	/* totabl variables which need to store in eeprom */
#define DATA_CUR	0			/* current data used by application ans system */ 
#define DATA_SET	1			/* data copy from current data and tmp set by user, then save it after finish setting */ 

/*
*********************************************************************************************************
*                                       CONST DEFINITION FOR TIMERS
*********************************************************************************************************
*/
#define TIMER_INT_DISABLED		0xffff					// - 2 bytes timer is disabled.
#define TIMER_CHAR_DISABLED  	0xff					// - 1 byte timer is disabled.
#define TIMER_TIMEOUT         	0						// - 1 or 2 bytes timer times out.
#define TIMER_1_SEC_60HZ		(1*60)					/* 1 second,globle define for based timer count in 60Hz */ 
#define TIMER_1_MINS			(60)					/* 1 minutes,globle define */ 

/*
*********************************************************************************************************
*                                       DEFINE WORK MODE
* 
*********************************************************************************************************
*/
typedef enum work_mode 
{
	PWR_ON=0,				/* work in power on mode to display information */
	NORMAL,					/* work in normal mode, measure meterial and display alarm message */	
	SETTING, 				/* work in setting mode, set parameters */	
}WORK_MODE;

/*
*********************************************************************************************************
*                                       DEFINE SYSTEM FLAGS
* 
*********************************************************************************************************
*/
typedef union sys_flags
{
	volatile uint8_t SysFlags;		/* system flags */
	struct 
	{
		 volatile uint8_t fSysPwrZC:1;		/* set if power zero crossing was generated by software */	
	};
}SYS_F;

/*
*********************************************************************************************************
*                                       DEFINE CONFIGURE VARAILBE
* 
*********************************************************************************************************
*/
typedef union app_config
{
	uint8_t ArrayMapToEEPROM[DATAS_MAP_TO_EEPROM*2];	/* the array map all RAM variable need to store to eeprom */
	struct 
	{
		uint16_t FullWarehouse[2]; 
		uint16_t EmptyWarehouse[2];
		uint8_t  AlarmHighPercent[2];	/* Alarm when material high than the variable */
		uint8_t  AlarmLowPercent[2];	/* Alarm when material low than the variable */
		uint16_t ResponceTime[2];		/* Response  time */	
		uint16_t RemoteAddr[2];		/* Address for remote setting */	
	};
} APP_CONFIG;

/*
*********************************************************************************************************
*                                       DEFINE DISPLAY CODE
* 
*********************************************************************************************************
*/
typedef enum disp_code 
{
	START_CHAR=0,			/* Display 4 character after power on */	
	CURRENT_VALUE,			/* Display current measure value */
	FULL_WAREHOUSE,			/* Display full warehouse value or setting it */	
	EMPTY_WAREHOUSE, 		/* Display empty warehouse value or setting it */	
	ALARM_H_PERCENT, 		/* Display high percent threshold value or setting it */	
	ALARM_L_PERCENT,		/* Display low percent threshold value or setting it */
	RESPONSE_TIME,			/* Display response time or setting it */
	REMOTE_ADDR,			/* Address for setting remote by RF hand remote when address is  match */
}DISP_CODE;

#endif	/* endif COMMON_H_ */
