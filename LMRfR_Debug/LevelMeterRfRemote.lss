
LevelMeterRfRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000bbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b48  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cc  00800100  00800100  00000bbc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ef1  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b65  00000000  00000000  00002e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c2c  00000000  00000000  0000397a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a48  00000000  00000000  000045a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ace  00000000  00000000  00004ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001de7  00000000  00000000  00005abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  000078a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 c4 02 	jmp	0x588	; 0x588 <__vector_9>
  28:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__vector_10>
  2c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_11>
  30:	0c 94 97 02 	jmp	0x52e	; 0x52e <__vector_12>
  34:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__vector_13>
  38:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__vector_14>
  3c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__vector_15>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_18>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 af 03 	jmp	0x75e	; 0x75e <__vector_20>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__vector_22>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

0000007c <__trampolines_end>:
  7c:	30 31       	cpi	r19, 0x10	; 16
  7e:	32 33       	cpi	r19, 0x32	; 50
  80:	34 35       	cpi	r19, 0x54	; 84
  82:	36 37       	cpi	r19, 0x76	; 118
  84:	38 39       	cpi	r19, 0x98	; 152
  86:	41 42       	sbci	r20, 0x21	; 33
  88:	43 44       	sbci	r20, 0x43	; 67
  8a:	45 46       	sbci	r20, 0x65	; 101
	...

0000008d <__c.1999>:
  8d:	72 68 3d 25 78 0a 00                                rh=%x..

00000094 <__c.1997>:
  94:	72 6c 3d 25 78 0a 00 00                             rl=%x...

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e1       	ldi	r29, 0x10	; 16
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	e8 e4       	ldi	r30, 0x48	; 72
  b0:	fb e0       	ldi	r31, 0x0B	; 11
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x10>
  b4:	05 90       	lpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a0 30       	cpi	r26, 0x00	; 0
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0xc>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a0 e0       	ldi	r26, 0x00	; 0
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	ac 3c       	cpi	r26, 0xCC	; 204
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	0e 94 12 05 	call	0xa24	; 0xa24 <main>
  d2:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
  da:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
  dc:	8f b7       	in	r24, 0x3f	; 63
  de:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
  e0:	71 83       	std	Z+1, r23	; 0x01
  e2:	60 83       	st	Z, r22
	buffer->size = size;
  e4:	53 83       	std	Z+3, r21	; 0x03
  e6:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
  e8:	17 82       	std	Z+7, r1	; 0x07
  ea:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
  ec:	15 82       	std	Z+5, r1	; 0x05
  ee:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
  f0:	8f bf       	out	0x3f, r24	; 63
  f2:	08 95       	ret

000000f4 <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
  f4:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
  f6:	9f b7       	in	r25, 0x3f	; 63
  f8:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
  fa:	44 81       	ldd	r20, Z+4	; 0x04
  fc:	55 81       	ldd	r21, Z+5	; 0x05
  fe:	41 15       	cp	r20, r1
 100:	51 05       	cpc	r21, r1
 102:	c9 f0       	breq	.+50     	; 0x136 <bufferGetFromFront+0x42>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
 104:	26 81       	ldd	r18, Z+6	; 0x06
 106:	37 81       	ldd	r19, Z+7	; 0x07
 108:	a0 81       	ld	r26, Z
 10a:	b1 81       	ldd	r27, Z+1	; 0x01
 10c:	a2 0f       	add	r26, r18
 10e:	b3 1f       	adc	r27, r19
 110:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
 112:	2f 5f       	subi	r18, 0xFF	; 255
 114:	3f 4f       	sbci	r19, 0xFF	; 255
 116:	37 83       	std	Z+7, r19	; 0x07
 118:	26 83       	std	Z+6, r18	; 0x06
		if(buffer->dataindex >= buffer->size)
 11a:	62 81       	ldd	r22, Z+2	; 0x02
 11c:	73 81       	ldd	r23, Z+3	; 0x03
 11e:	26 17       	cp	r18, r22
 120:	37 07       	cpc	r19, r23
 122:	20 f0       	brcs	.+8      	; 0x12c <bufferGetFromFront+0x38>
		{
			buffer->dataindex -= buffer->size;
 124:	26 1b       	sub	r18, r22
 126:	37 0b       	sbc	r19, r23
 128:	37 83       	std	Z+7, r19	; 0x07
 12a:	26 83       	std	Z+6, r18	; 0x06
		}
		buffer->datalength--;
 12c:	41 50       	subi	r20, 0x01	; 1
 12e:	51 09       	sbc	r21, r1
 130:	55 83       	std	Z+5, r21	; 0x05
 132:	44 83       	std	Z+4, r20	; 0x04
 134:	01 c0       	rjmp	.+2      	; 0x138 <bufferGetFromFront+0x44>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
 136:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
 138:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
 13a:	08 95       	ret

0000013c <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
 13c:	fc 01       	movw	r30, r24
 13e:	36 2f       	mov	r19, r22
	// begin critical section
	CRITICAL_SECTION_START;
 140:	2f b7       	in	r18, 0x3f	; 63
 142:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
 144:	a4 81       	ldd	r26, Z+4	; 0x04
 146:	b5 81       	ldd	r27, Z+5	; 0x05
 148:	62 81       	ldd	r22, Z+2	; 0x02
 14a:	73 81       	ldd	r23, Z+3	; 0x03
 14c:	a6 17       	cp	r26, r22
 14e:	b7 07       	cpc	r27, r23
 150:	98 f4       	brcc	.+38     	; 0x178 <bufferAddToEnd+0x3c>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
 152:	86 81       	ldd	r24, Z+6	; 0x06
 154:	97 81       	ldd	r25, Z+7	; 0x07
 156:	8a 0f       	add	r24, r26
 158:	9b 1f       	adc	r25, r27
 15a:	0e 94 6c 05 	call	0xad8	; 0xad8 <__udivmodhi4>
 15e:	a0 81       	ld	r26, Z
 160:	b1 81       	ldd	r27, Z+1	; 0x01
 162:	a8 0f       	add	r26, r24
 164:	b9 1f       	adc	r27, r25
 166:	3c 93       	st	X, r19
		// increment the length
		buffer->datalength++;
 168:	84 81       	ldd	r24, Z+4	; 0x04
 16a:	95 81       	ldd	r25, Z+5	; 0x05
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	95 83       	std	Z+5, r25	; 0x05
 170:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
 172:	2f bf       	out	0x3f, r18	; 63
		// return success
		return -1;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	08 95       	ret
	}
	// end critical section
	CRITICAL_SECTION_END;
 178:	2f bf       	out	0x3f, r18	; 63
	// return failure
	return 0;
 17a:	80 e0       	ldi	r24, 0x00	; 0
}
 17c:	08 95       	ret

0000017e <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
 17e:	90 93 01 01 	sts	0x0101, r25
 182:	80 93 00 01 	sts	0x0100, r24
 186:	08 95       	ret

00000188 <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
 18c:	8a 30       	cpi	r24, 0x0A	; 10
 18e:	31 f4       	brne	.+12     	; 0x19c <rprintfChar+0x14>
		rputchar('\r');
 190:	e0 91 00 01 	lds	r30, 0x0100
 194:	f0 91 01 01 	lds	r31, 0x0101
 198:	8d e0       	ldi	r24, 0x0D	; 13
 19a:	09 95       	icall
	// send character
	rputchar(c);
 19c:	e0 91 00 01 	lds	r30, 0x0100
 1a0:	f0 91 01 01 	lds	r31, 0x0101
 1a4:	8c 2f       	mov	r24, r28
}
 1a6:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
 1a8:	09 94       	ijmp

000001aa <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
 1aa:	8f 70       	andi	r24, 0x0F	; 15
 1ac:	e8 2f       	mov	r30, r24
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	e4 58       	subi	r30, 0x84	; 132
 1b2:	ff 4f       	sbci	r31, 0xFF	; 255
 1b4:	84 91       	lpm	r24, Z
 1b6:	0c 94 c4 00 	jmp	0x188	; 0x188 <rprintfChar>

000001ba <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
 1ba:	5f 92       	push	r5
 1bc:	6f 92       	push	r6
 1be:	7f 92       	push	r7
 1c0:	8f 92       	push	r8
 1c2:	9f 92       	push	r9
 1c4:	af 92       	push	r10
 1c6:	bf 92       	push	r11
 1c8:	cf 92       	push	r12
 1ca:	df 92       	push	r13
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	1f 92       	push	r1
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
 1de:	ec 89       	ldd	r30, Y+20	; 0x14
 1e0:	fd 89       	ldd	r31, Y+21	; 0x15
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
 1e2:	3e 01       	movw	r6, r28
 1e4:	26 e1       	ldi	r18, 0x16	; 22
 1e6:	62 0e       	add	r6, r18
 1e8:	71 1c       	adc	r7, r1
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
					rprintfChar('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 1ea:	3a e0       	ldi	r19, 0x0A	; 10
 1ec:	a3 2e       	mov	r10, r19
 1ee:	b1 2c       	mov	r11, r1
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 1f0:	3b 89       	ldd	r19, Y+19	; 0x13
 1f2:	33 23       	and	r19, r19
 1f4:	81 f0       	breq	.+32     	; 0x216 <rprintf1RamRom+0x5c>
 1f6:	8f 01       	movw	r16, r30
 1f8:	0f 5f       	subi	r16, 0xFF	; 255
 1fa:	1f 4f       	sbci	r17, 0xFF	; 255
 1fc:	84 91       	lpm	r24, Z
 1fe:	85 32       	cpi	r24, 0x25	; 37
 200:	89 f0       	breq	.+34     	; 0x224 <rprintf1RamRom+0x6a>
		{	// Until '%' or '\0'
			if (!format_flag)
 202:	88 23       	and	r24, r24
 204:	09 f4       	brne	.+2      	; 0x208 <rprintf1RamRom+0x4e>
 206:	66 c0       	rjmp	.+204    	; 0x2d4 <rprintf1RamRom+0x11a>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
 208:	0e 94 c4 00 	call	0x188	; 0x188 <rprintfChar>
 20c:	63 01       	movw	r12, r6
 20e:	78 01       	movw	r14, r16
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
 210:	36 01       	movw	r6, r12
 212:	f7 01       	movw	r30, r14
 214:	ed cf       	rjmp	.-38     	; 0x1f0 <rprintf1RamRom+0x36>
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 216:	80 81       	ld	r24, Z
 218:	85 32       	cpi	r24, 0x25	; 37
 21a:	59 f0       	breq	.+22     	; 0x232 <rprintf1RamRom+0x78>
 21c:	8f 01       	movw	r16, r30
 21e:	0f 5f       	subi	r16, 0xFF	; 255
 220:	1f 4f       	sbci	r17, 0xFF	; 255
 222:	ef cf       	rjmp	.-34     	; 0x202 <rprintf1RamRom+0x48>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
 224:	7f 01       	movw	r14, r30
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	e8 0e       	add	r14, r24
 22a:	f1 1c       	adc	r15, r1
 22c:	f8 01       	movw	r30, r16
 22e:	84 91       	lpm	r24, Z
 230:	05 c0       	rjmp	.+10     	; 0x23c <rprintf1RamRom+0x82>
 232:	7f 01       	movw	r14, r30
 234:	22 e0       	ldi	r18, 0x02	; 2
 236:	e2 0e       	add	r14, r18
 238:	f1 1c       	adc	r15, r1
 23a:	81 81       	ldd	r24, Z+1	; 0x01
 23c:	84 36       	cpi	r24, 0x64	; 100
 23e:	a1 f0       	breq	.+40     	; 0x268 <rprintf1RamRom+0xae>
 240:	88 37       	cpi	r24, 0x78	; 120
 242:	61 f0       	breq	.+24     	; 0x25c <rprintf1RamRom+0xa2>
 244:	83 36       	cpi	r24, 0x63	; 99
 246:	31 f4       	brne	.+12     	; 0x254 <rprintf1RamRom+0x9a>
		{
			case 'c': format_flag = va_arg(ap,int);
 248:	f3 01       	movw	r30, r6
 24a:	80 81       	ld	r24, Z
 24c:	93 01       	movw	r18, r6
 24e:	2e 5f       	subi	r18, 0xFE	; 254
 250:	3f 4f       	sbci	r19, 0xFF	; 255
 252:	39 01       	movw	r6, r18
			default:  rprintfChar(format_flag); continue;
 254:	0e 94 c4 00 	call	0x188	; 0x188 <rprintfChar>
 258:	63 01       	movw	r12, r6
 25a:	da cf       	rjmp	.-76     	; 0x210 <rprintf1RamRom+0x56>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 25c:	20 e1       	ldi	r18, 0x10	; 16
 25e:	82 2e       	mov	r8, r18
 260:	91 2c       	mov	r9, r1
 262:	00 e0       	ldi	r16, 0x00	; 0
 264:	10 e1       	ldi	r17, 0x10	; 16
 266:	05 c0       	rjmp	.+10     	; 0x272 <rprintf1RamRom+0xb8>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 268:	9a e0       	ldi	r25, 0x0A	; 10
 26a:	89 2e       	mov	r8, r25
 26c:	91 2c       	mov	r9, r1
 26e:	00 e1       	ldi	r16, 0x10	; 16
 270:	17 e2       	ldi	r17, 0x27	; 39
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 272:	63 01       	movw	r12, r6
 274:	32 e0       	ldi	r19, 0x02	; 2
 276:	c3 0e       	add	r12, r19
 278:	d1 1c       	adc	r13, r1
 27a:	f3 01       	movw	r30, r6
 27c:	60 80       	ld	r6, Z
 27e:	71 80       	ldd	r7, Z+1	; 0x01
			if (format_flag == 'd')
 280:	84 36       	cpi	r24, 0x64	; 100
 282:	a1 f4       	brne	.+40     	; 0x2ac <rprintf1RamRom+0xf2>
			{
				if (((int)u_val) < 0)
 284:	77 fe       	sbrs	r7, 7
 286:	0f c0       	rjmp	.+30     	; 0x2a6 <rprintf1RamRom+0xec>
				{
					u_val = - u_val;
 288:	71 94       	neg	r7
 28a:	61 94       	neg	r6
 28c:	71 08       	sbc	r7, r1
					rprintfChar('-');
 28e:	8d e2       	ldi	r24, 0x2D	; 45
 290:	0e 94 c4 00 	call	0x188	; 0x188 <rprintfChar>
 294:	08 c0       	rjmp	.+16     	; 0x2a6 <rprintf1RamRom+0xec>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 296:	c8 01       	movw	r24, r16
 298:	b5 01       	movw	r22, r10
 29a:	0e 94 6c 05 	call	0xad8	; 0xad8 <__udivmodhi4>
 29e:	8b 01       	movw	r16, r22
 2a0:	62 30       	cpi	r22, 0x02	; 2
 2a2:	71 05       	cpc	r23, r1
 2a4:	18 f0       	brcs	.+6      	; 0x2ac <rprintf1RamRom+0xf2>
 2a6:	60 16       	cp	r6, r16
 2a8:	71 06       	cpc	r7, r17
 2aa:	a8 f3       	brcs	.-22     	; 0x296 <rprintf1RamRom+0xdc>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
 2ac:	c3 01       	movw	r24, r6
 2ae:	b8 01       	movw	r22, r16
 2b0:	0e 94 6c 05 	call	0xad8	; 0xad8 <__udivmodhi4>
 2b4:	58 2e       	mov	r5, r24
 2b6:	86 2f       	mov	r24, r22
 2b8:	99 83       	std	Y+1, r25	; 0x01
 2ba:	0e 94 d5 00 	call	0x1aa	; 0x1aa <rprintfu04>
				u_val %= div_val;
 2be:	65 2c       	mov	r6, r5
 2c0:	99 81       	ldd	r25, Y+1	; 0x01
 2c2:	79 2e       	mov	r7, r25
				div_val /= base;
 2c4:	c8 01       	movw	r24, r16
 2c6:	b4 01       	movw	r22, r8
 2c8:	0e 94 6c 05 	call	0xad8	; 0xad8 <__udivmodhi4>
 2cc:	8b 01       	movw	r16, r22
			} while (div_val);
 2ce:	67 2b       	or	r22, r23
 2d0:	69 f7       	brne	.-38     	; 0x2ac <rprintf1RamRom+0xf2>
 2d2:	9e cf       	rjmp	.-196    	; 0x210 <rprintf1RamRom+0x56>
		}
	}
	va_end(ap);
}
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0f 90       	pop	r0
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	ff 90       	pop	r15
 2e4:	ef 90       	pop	r14
 2e6:	df 90       	pop	r13
 2e8:	cf 90       	pop	r12
 2ea:	bf 90       	pop	r11
 2ec:	af 90       	pop	r10
 2ee:	9f 90       	pop	r9
 2f0:	8f 90       	pop	r8
 2f2:	7f 90       	pop	r7
 2f4:	6f 90       	pop	r6
 2f6:	5f 90       	pop	r5
 2f8:	08 95       	ret

000002fa <__vector_18>:
	OCR1B = pwmDuty;
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	2f 93       	push	r18
 306:	3f 93       	push	r19
 308:	4f 93       	push	r20
 30a:	5f 93       	push	r21
 30c:	6f 93       	push	r22
 30e:	7f 93       	push	r23
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	af 93       	push	r26
 316:	bf 93       	push	r27
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
 31c:	80 91 92 01 	lds	r24, 0x0192
 320:	90 91 93 01 	lds	r25, 0x0193
 324:	a0 91 94 01 	lds	r26, 0x0194
 328:	b0 91 95 01 	lds	r27, 0x0195
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	a1 1d       	adc	r26, r1
 330:	b1 1d       	adc	r27, r1
 332:	80 93 92 01 	sts	0x0192, r24
 336:	90 93 93 01 	sts	0x0193, r25
 33a:	a0 93 94 01 	sts	0x0194, r26
 33e:	b0 93 95 01 	sts	0x0195, r27

	// increment pause counter
	TimerPauseReg++;
 342:	80 91 96 01 	lds	r24, 0x0196
 346:	90 91 97 01 	lds	r25, 0x0197
 34a:	a0 91 98 01 	lds	r26, 0x0198
 34e:	b0 91 99 01 	lds	r27, 0x0199
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	a1 1d       	adc	r26, r1
 356:	b1 1d       	adc	r27, r1
 358:	80 93 96 01 	sts	0x0196, r24
 35c:	90 93 97 01 	sts	0x0197, r25
 360:	a0 93 98 01 	sts	0x0198, r26
 364:	b0 93 99 01 	sts	0x0199, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
 368:	80 91 02 01 	lds	r24, 0x0102
 36c:	90 91 03 01 	lds	r25, 0x0103
 370:	89 2b       	or	r24, r25
 372:	29 f0       	breq	.+10     	; 0x37e <__vector_18+0x84>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
 374:	e0 91 02 01 	lds	r30, 0x0102
 378:	f0 91 03 01 	lds	r31, 0x0103
 37c:	09 95       	icall
}
 37e:	ff 91       	pop	r31
 380:	ef 91       	pop	r30
 382:	bf 91       	pop	r27
 384:	af 91       	pop	r26
 386:	9f 91       	pop	r25
 388:	8f 91       	pop	r24
 38a:	7f 91       	pop	r23
 38c:	6f 91       	pop	r22
 38e:	5f 91       	pop	r21
 390:	4f 91       	pop	r20
 392:	3f 91       	pop	r19
 394:	2f 91       	pop	r18
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <__vector_15>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	2f 93       	push	r18
 3ac:	3f 93       	push	r19
 3ae:	4f 93       	push	r20
 3b0:	5f 93       	push	r21
 3b2:	6f 93       	push	r22
 3b4:	7f 93       	push	r23
 3b6:	8f 93       	push	r24
 3b8:	9f 93       	push	r25
 3ba:	af 93       	push	r26
 3bc:	bf 93       	push	r27
 3be:	ef 93       	push	r30
 3c0:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
 3c2:	80 91 04 01 	lds	r24, 0x0104
 3c6:	90 91 05 01 	lds	r25, 0x0105
 3ca:	89 2b       	or	r24, r25
 3cc:	29 f0       	breq	.+10     	; 0x3d8 <__vector_15+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
 3ce:	e0 91 04 01 	lds	r30, 0x0104
 3d2:	f0 91 05 01 	lds	r31, 0x0105
 3d6:	09 95       	icall
}
 3d8:	ff 91       	pop	r31
 3da:	ef 91       	pop	r30
 3dc:	bf 91       	pop	r27
 3de:	af 91       	pop	r26
 3e0:	9f 91       	pop	r25
 3e2:	8f 91       	pop	r24
 3e4:	7f 91       	pop	r23
 3e6:	6f 91       	pop	r22
 3e8:	5f 91       	pop	r21
 3ea:	4f 91       	pop	r20
 3ec:	3f 91       	pop	r19
 3ee:	2f 91       	pop	r18
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <__vector_11>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	2f 93       	push	r18
 406:	3f 93       	push	r19
 408:	4f 93       	push	r20
 40a:	5f 93       	push	r21
 40c:	6f 93       	push	r22
 40e:	7f 93       	push	r23
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25
 414:	af 93       	push	r26
 416:	bf 93       	push	r27
 418:	ef 93       	push	r30
 41a:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
 41c:	80 91 9a 01 	lds	r24, 0x019A
 420:	90 91 9b 01 	lds	r25, 0x019B
 424:	a0 91 9c 01 	lds	r26, 0x019C
 428:	b0 91 9d 01 	lds	r27, 0x019D
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	a1 1d       	adc	r26, r1
 430:	b1 1d       	adc	r27, r1
 432:	80 93 9a 01 	sts	0x019A, r24
 436:	90 93 9b 01 	sts	0x019B, r25
 43a:	a0 93 9c 01 	sts	0x019C, r26
 43e:	b0 93 9d 01 	sts	0x019D, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
 442:	80 91 0c 01 	lds	r24, 0x010C
 446:	90 91 0d 01 	lds	r25, 0x010D
 44a:	89 2b       	or	r24, r25
 44c:	29 f0       	breq	.+10     	; 0x458 <__vector_11+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
 44e:	e0 91 0c 01 	lds	r30, 0x010C
 452:	f0 91 0d 01 	lds	r31, 0x010D
 456:	09 95       	icall
}
 458:	ff 91       	pop	r31
 45a:	ef 91       	pop	r30
 45c:	bf 91       	pop	r27
 45e:	af 91       	pop	r26
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	7f 91       	pop	r23
 466:	6f 91       	pop	r22
 468:	5f 91       	pop	r21
 46a:	4f 91       	pop	r20
 46c:	3f 91       	pop	r19
 46e:	2f 91       	pop	r18
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

0000047a <__vector_13>:
}
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
 47a:	1f 92       	push	r1
 47c:	0f 92       	push	r0
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	0f 92       	push	r0
 482:	11 24       	eor	r1, r1
 484:	2f 93       	push	r18
 486:	3f 93       	push	r19
 488:	4f 93       	push	r20
 48a:	5f 93       	push	r21
 48c:	6f 93       	push	r22
 48e:	7f 93       	push	r23
 490:	8f 93       	push	r24
 492:	9f 93       	push	r25
 494:	af 93       	push	r26
 496:	bf 93       	push	r27
 498:	ef 93       	push	r30
 49a:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
 49c:	80 91 06 01 	lds	r24, 0x0106
 4a0:	90 91 07 01 	lds	r25, 0x0107
 4a4:	89 2b       	or	r24, r25
 4a6:	29 f0       	breq	.+10     	; 0x4b2 <__vector_13+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
 4a8:	e0 91 06 01 	lds	r30, 0x0106
 4ac:	f0 91 07 01 	lds	r31, 0x0107
 4b0:	09 95       	icall
}
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	bf 91       	pop	r27
 4b8:	af 91       	pop	r26
 4ba:	9f 91       	pop	r25
 4bc:	8f 91       	pop	r24
 4be:	7f 91       	pop	r23
 4c0:	6f 91       	pop	r22
 4c2:	5f 91       	pop	r21
 4c4:	4f 91       	pop	r20
 4c6:	3f 91       	pop	r19
 4c8:	2f 91       	pop	r18
 4ca:	0f 90       	pop	r0
 4cc:	0f be       	out	0x3f, r0	; 63
 4ce:	0f 90       	pop	r0
 4d0:	1f 90       	pop	r1
 4d2:	18 95       	reti

000004d4 <__vector_14>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
 4d4:	1f 92       	push	r1
 4d6:	0f 92       	push	r0
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	0f 92       	push	r0
 4dc:	11 24       	eor	r1, r1
 4de:	2f 93       	push	r18
 4e0:	3f 93       	push	r19
 4e2:	4f 93       	push	r20
 4e4:	5f 93       	push	r21
 4e6:	6f 93       	push	r22
 4e8:	7f 93       	push	r23
 4ea:	8f 93       	push	r24
 4ec:	9f 93       	push	r25
 4ee:	af 93       	push	r26
 4f0:	bf 93       	push	r27
 4f2:	ef 93       	push	r30
 4f4:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
 4f6:	80 91 08 01 	lds	r24, 0x0108
 4fa:	90 91 09 01 	lds	r25, 0x0109
 4fe:	89 2b       	or	r24, r25
 500:	29 f0       	breq	.+10     	; 0x50c <__vector_14+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
 502:	e0 91 08 01 	lds	r30, 0x0108
 506:	f0 91 09 01 	lds	r31, 0x0109
 50a:	09 95       	icall
}
 50c:	ff 91       	pop	r31
 50e:	ef 91       	pop	r30
 510:	bf 91       	pop	r27
 512:	af 91       	pop	r26
 514:	9f 91       	pop	r25
 516:	8f 91       	pop	r24
 518:	7f 91       	pop	r23
 51a:	6f 91       	pop	r22
 51c:	5f 91       	pop	r21
 51e:	4f 91       	pop	r20
 520:	3f 91       	pop	r19
 522:	2f 91       	pop	r18
 524:	0f 90       	pop	r0
 526:	0f be       	out	0x3f, r0	; 63
 528:	0f 90       	pop	r0
 52a:	1f 90       	pop	r1
 52c:	18 95       	reti

0000052e <__vector_12>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
 52e:	1f 92       	push	r1
 530:	0f 92       	push	r0
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	0f 92       	push	r0
 536:	11 24       	eor	r1, r1
 538:	2f 93       	push	r18
 53a:	3f 93       	push	r19
 53c:	4f 93       	push	r20
 53e:	5f 93       	push	r21
 540:	6f 93       	push	r22
 542:	7f 93       	push	r23
 544:	8f 93       	push	r24
 546:	9f 93       	push	r25
 548:	af 93       	push	r26
 54a:	bf 93       	push	r27
 54c:	ef 93       	push	r30
 54e:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
 550:	80 91 0a 01 	lds	r24, 0x010A
 554:	90 91 0b 01 	lds	r25, 0x010B
 558:	89 2b       	or	r24, r25
 55a:	29 f0       	breq	.+10     	; 0x566 <__vector_12+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
 55c:	e0 91 0a 01 	lds	r30, 0x010A
 560:	f0 91 0b 01 	lds	r31, 0x010B
 564:	09 95       	icall
}
 566:	ff 91       	pop	r31
 568:	ef 91       	pop	r30
 56a:	bf 91       	pop	r27
 56c:	af 91       	pop	r26
 56e:	9f 91       	pop	r25
 570:	8f 91       	pop	r24
 572:	7f 91       	pop	r23
 574:	6f 91       	pop	r22
 576:	5f 91       	pop	r21
 578:	4f 91       	pop	r20
 57a:	3f 91       	pop	r19
 57c:	2f 91       	pop	r18
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <__vector_9>:

//! Interrupt handler for OutputCompare2A match (OC2A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMPA_vect)
{
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	11 24       	eor	r1, r1
 592:	2f 93       	push	r18
 594:	3f 93       	push	r19
 596:	4f 93       	push	r20
 598:	5f 93       	push	r21
 59a:	6f 93       	push	r22
 59c:	7f 93       	push	r23
 59e:	8f 93       	push	r24
 5a0:	9f 93       	push	r25
 5a2:	af 93       	push	r26
 5a4:	bf 93       	push	r27
 5a6:	ef 93       	push	r30
 5a8:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
 5aa:	80 91 0e 01 	lds	r24, 0x010E
 5ae:	90 91 0f 01 	lds	r25, 0x010F
 5b2:	89 2b       	or	r24, r25
 5b4:	29 f0       	breq	.+10     	; 0x5c0 <__vector_9+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
 5b6:	e0 91 0e 01 	lds	r30, 0x010E
 5ba:	f0 91 0f 01 	lds	r31, 0x010F
 5be:	09 95       	icall
}
 5c0:	ff 91       	pop	r31
 5c2:	ef 91       	pop	r30
 5c4:	bf 91       	pop	r27
 5c6:	af 91       	pop	r26
 5c8:	9f 91       	pop	r25
 5ca:	8f 91       	pop	r24
 5cc:	7f 91       	pop	r23
 5ce:	6f 91       	pop	r22
 5d0:	5f 91       	pop	r21
 5d2:	4f 91       	pop	r20
 5d4:	3f 91       	pop	r19
 5d6:	2f 91       	pop	r18
 5d8:	0f 90       	pop	r0
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	0f 90       	pop	r0
 5de:	1f 90       	pop	r1
 5e0:	18 95       	reti

000005e2 <__vector_10>:

//! Interrupt handler for OutputCompare2B match (OC2B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMPB_vect)
{
 5e2:	1f 92       	push	r1
 5e4:	0f 92       	push	r0
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	0f 92       	push	r0
 5ea:	11 24       	eor	r1, r1
 5ec:	2f 93       	push	r18
 5ee:	3f 93       	push	r19
 5f0:	4f 93       	push	r20
 5f2:	5f 93       	push	r21
 5f4:	6f 93       	push	r22
 5f6:	7f 93       	push	r23
 5f8:	8f 93       	push	r24
 5fa:	9f 93       	push	r25
 5fc:	af 93       	push	r26
 5fe:	bf 93       	push	r27
 600:	ef 93       	push	r30
 602:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
 604:	80 91 0e 01 	lds	r24, 0x010E
 608:	90 91 0f 01 	lds	r25, 0x010F
 60c:	89 2b       	or	r24, r25
 60e:	29 f0       	breq	.+10     	; 0x61a <__vector_10+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
 610:	e0 91 0e 01 	lds	r30, 0x010E
 614:	f0 91 0f 01 	lds	r31, 0x010F
 618:	09 95       	icall
}
 61a:	ff 91       	pop	r31
 61c:	ef 91       	pop	r30
 61e:	bf 91       	pop	r27
 620:	af 91       	pop	r26
 622:	9f 91       	pop	r25
 624:	8f 91       	pop	r24
 626:	7f 91       	pop	r23
 628:	6f 91       	pop	r22
 62a:	5f 91       	pop	r21
 62c:	4f 91       	pop	r20
 62e:	3f 91       	pop	r19
 630:	2f 91       	pop	r18
 632:	0f 90       	pop	r0
 634:	0f be       	out	0x3f, r0	; 63
 636:	0f 90       	pop	r0
 638:	1f 90       	pop	r1
 63a:	18 95       	reti

0000063c <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (unsigned char *)uartRxData, UART_RX_BUFFER_SIZE);
 63c:	40 e4       	ldi	r20, 0x40	; 64
 63e:	50 e0       	ldi	r21, 0x00	; 0
 640:	62 e5       	ldi	r22, 0x52	; 82
 642:	71 e0       	ldi	r23, 0x01	; 1
 644:	8f e9       	ldi	r24, 0x9F	; 159
 646:	91 e0       	ldi	r25, 0x01	; 1
 648:	0e 94 6d 00 	call	0xda	; 0xda <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (unsigned char *)uartTxData, UART_TX_BUFFER_SIZE);
 64c:	40 e4       	ldi	r20, 0x40	; 64
 64e:	50 e0       	ldi	r21, 0x00	; 0
 650:	62 e1       	ldi	r22, 0x12	; 18
 652:	71 e0       	ldi	r23, 0x01	; 1
 654:	88 ea       	ldi	r24, 0xA8	; 168
 656:	91 e0       	ldi	r25, 0x01	; 1
 658:	0c 94 6d 00 	jmp	0xda	; 0xda <bufferInit>

0000065c <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
 65c:	0e 94 1e 03 	call	0x63c	; 0x63c <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
 660:	10 92 11 01 	sts	0x0111, r1
 664:	10 92 10 01 	sts	0x0110, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
 668:	88 ed       	ldi	r24, 0xD8	; 216
 66a:	80 93 c1 00 	sts	0x00C1, r24
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
 66e:	83 e3       	ldi	r24, 0x33	; 51
 670:	80 93 c4 00 	sts	0x00C4, r24
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 674:	10 92 c5 00 	sts	0x00C5, r1
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
 678:	8f ef       	ldi	r24, 0xFF	; 255
 67a:	80 93 9e 01 	sts	0x019E, r24
	uartBufferedTx = FALSE;
 67e:	10 92 a7 01 	sts	0x01A7, r1
	// clear overflow count
	uartRxOverflow = 0;
 682:	10 92 b1 01 	sts	0x01B1, r1
 686:	10 92 b0 01 	sts	0x01B0, r1
	// enable interrupts
	sei();
 68a:	78 94       	sei
 68c:	08 95       	ret

0000068e <uartSetBaudRate>:
	UartRxFunc = rx_func;
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
 68e:	0f 93       	push	r16
 690:	1f 93       	push	r17
 692:	8b 01       	movw	r16, r22
 694:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
 696:	dc 01       	movw	r26, r24
 698:	cb 01       	movw	r24, r22
 69a:	80 5c       	subi	r24, 0xC0	; 192
 69c:	9d 4b       	sbci	r25, 0xBD	; 189
 69e:	a0 4f       	sbci	r26, 0xF0	; 240
 6a0:	bf 4f       	sbci	r27, 0xFF	; 255
 6a2:	bc 01       	movw	r22, r24
 6a4:	cd 01       	movw	r24, r26
 6a6:	43 e0       	ldi	r20, 0x03	; 3
 6a8:	66 0f       	add	r22, r22
 6aa:	77 1f       	adc	r23, r23
 6ac:	88 1f       	adc	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	4a 95       	dec	r20
 6b2:	d1 f7       	brne	.-12     	; 0x6a8 <uartSetBaudRate+0x1a>
 6b4:	a9 01       	movw	r20, r18
 6b6:	98 01       	movw	r18, r16
 6b8:	e4 e0       	ldi	r30, 0x04	; 4
 6ba:	22 0f       	add	r18, r18
 6bc:	33 1f       	adc	r19, r19
 6be:	44 1f       	adc	r20, r20
 6c0:	55 1f       	adc	r21, r21
 6c2:	ea 95       	dec	r30
 6c4:	d1 f7       	brne	.-12     	; 0x6ba <uartSetBaudRate+0x2c>
 6c6:	0e 94 80 05 	call	0xb00	; 0xb00 <__udivmodsi4>
 6ca:	21 50       	subi	r18, 0x01	; 1
 6cc:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
 6ce:	20 93 c4 00 	sts	0x00C4, r18
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 6d2:	30 93 c5 00 	sts	0x00C5, r19
	#endif
}
 6d6:	1f 91       	pop	r17
 6d8:	0f 91       	pop	r16
 6da:	08 95       	ret

000006dc <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
 6dc:	90 91 9e 01 	lds	r25, 0x019E
 6e0:	99 23       	and	r25, r25
 6e2:	e1 f3       	breq	.-8      	; 0x6dc <uartSendByte>
	// send byte
	outb(UDR, txData);
 6e4:	80 93 c6 00 	sts	0x00C6, r24
	// set ready state to FALSE
	uartReadyTx = FALSE;
 6e8:	10 92 9e 01 	sts	0x019E, r1
 6ec:	08 95       	ret

000006ee <__vector_22>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_TRANS)
{
 6ee:	1f 92       	push	r1
 6f0:	0f 92       	push	r0
 6f2:	0f b6       	in	r0, 0x3f	; 63
 6f4:	0f 92       	push	r0
 6f6:	11 24       	eor	r1, r1
 6f8:	2f 93       	push	r18
 6fa:	3f 93       	push	r19
 6fc:	4f 93       	push	r20
 6fe:	5f 93       	push	r21
 700:	6f 93       	push	r22
 702:	7f 93       	push	r23
 704:	8f 93       	push	r24
 706:	9f 93       	push	r25
 708:	af 93       	push	r26
 70a:	bf 93       	push	r27
 70c:	ef 93       	push	r30
 70e:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
 710:	80 91 a7 01 	lds	r24, 0x01A7
 714:	88 23       	and	r24, r24
 716:	79 f0       	breq	.+30     	; 0x736 <__vector_22+0x48>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
 718:	80 91 ac 01 	lds	r24, 0x01AC
 71c:	90 91 ad 01 	lds	r25, 0x01AD
 720:	89 2b       	or	r24, r25
 722:	39 f0       	breq	.+14     	; 0x732 <__vector_22+0x44>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
 724:	88 ea       	ldi	r24, 0xA8	; 168
 726:	91 e0       	ldi	r25, 0x01	; 1
 728:	0e 94 7a 00 	call	0xf4	; 0xf4 <bufferGetFromFront>
 72c:	80 93 c6 00 	sts	0x00C6, r24
 730:	05 c0       	rjmp	.+10     	; 0x73c <__vector_22+0x4e>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
 732:	10 92 a7 01 	sts	0x01A7, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
 736:	8f ef       	ldi	r24, 0xFF	; 255
 738:	80 93 9e 01 	sts	0x019E, r24
	}
}
 73c:	ff 91       	pop	r31
 73e:	ef 91       	pop	r30
 740:	bf 91       	pop	r27
 742:	af 91       	pop	r26
 744:	9f 91       	pop	r25
 746:	8f 91       	pop	r24
 748:	7f 91       	pop	r23
 74a:	6f 91       	pop	r22
 74c:	5f 91       	pop	r21
 74e:	4f 91       	pop	r20
 750:	3f 91       	pop	r19
 752:	2f 91       	pop	r18
 754:	0f 90       	pop	r0
 756:	0f be       	out	0x3f, r0	; 63
 758:	0f 90       	pop	r0
 75a:	1f 90       	pop	r1
 75c:	18 95       	reti

0000075e <__vector_20>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_RECV)
{
 75e:	1f 92       	push	r1
 760:	0f 92       	push	r0
 762:	0f b6       	in	r0, 0x3f	; 63
 764:	0f 92       	push	r0
 766:	11 24       	eor	r1, r1
 768:	2f 93       	push	r18
 76a:	3f 93       	push	r19
 76c:	4f 93       	push	r20
 76e:	5f 93       	push	r21
 770:	6f 93       	push	r22
 772:	7f 93       	push	r23
 774:	8f 93       	push	r24
 776:	9f 93       	push	r25
 778:	af 93       	push	r26
 77a:	bf 93       	push	r27
 77c:	ef 93       	push	r30
 77e:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
 780:	80 91 c6 00 	lds	r24, 0x00C6

	// if there's a user function to handle this receive event
	if(UartRxFunc)
 784:	20 91 10 01 	lds	r18, 0x0110
 788:	30 91 11 01 	lds	r19, 0x0111
 78c:	23 2b       	or	r18, r19
 78e:	31 f0       	breq	.+12     	; 0x79c <__vector_20+0x3e>
	{
		// call it and pass the received data
		UartRxFunc(c);
 790:	e0 91 10 01 	lds	r30, 0x0110
 794:	f0 91 11 01 	lds	r31, 0x0111
 798:	09 95       	icall
 79a:	10 c0       	rjmp	.+32     	; 0x7bc <__vector_20+0x5e>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
 79c:	68 2f       	mov	r22, r24
 79e:	8f e9       	ldi	r24, 0x9F	; 159
 7a0:	91 e0       	ldi	r25, 0x01	; 1
 7a2:	0e 94 9e 00 	call	0x13c	; 0x13c <bufferAddToEnd>
 7a6:	81 11       	cpse	r24, r1
 7a8:	09 c0       	rjmp	.+18     	; 0x7bc <__vector_20+0x5e>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
 7aa:	80 91 b0 01 	lds	r24, 0x01B0
 7ae:	90 91 b1 01 	lds	r25, 0x01B1
 7b2:	01 96       	adiw	r24, 0x01	; 1
 7b4:	90 93 b1 01 	sts	0x01B1, r25
 7b8:	80 93 b0 01 	sts	0x01B0, r24
		}
	}
}
 7bc:	ff 91       	pop	r31
 7be:	ef 91       	pop	r30
 7c0:	bf 91       	pop	r27
 7c2:	af 91       	pop	r26
 7c4:	9f 91       	pop	r25
 7c6:	8f 91       	pop	r24
 7c8:	7f 91       	pop	r23
 7ca:	6f 91       	pop	r22
 7cc:	5f 91       	pop	r21
 7ce:	4f 91       	pop	r20
 7d0:	3f 91       	pop	r19
 7d2:	2f 91       	pop	r18
 7d4:	0f 90       	pop	r0
 7d6:	0f be       	out	0x3f, r0	; 63
 7d8:	0f 90       	pop	r0
 7da:	1f 90       	pop	r1
 7dc:	18 95       	reti

000007de <ButtonInit>:
*********************************************************************************************************
*/

void ButtonInit(void)
{
	DDRD  &= ~((1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3));	/* Set PD6-PD3 as input */
 7de:	8a b1       	in	r24, 0x0a	; 10
 7e0:	87 78       	andi	r24, 0x87	; 135
 7e2:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PD6) | (1<<PD5) | (1<<PD4) | (1<<PD3);			/* Set PD6-PD3 as internal pull up */
 7e4:	8b b1       	in	r24, 0x0b	; 11
 7e6:	88 67       	ori	r24, 0x78	; 120
 7e8:	8b b9       	out	0x0b, r24	; 11
	
	/* 
	Set PC7-PC4 as input as internal pull up
	Set PC3-PC0 as Tri-state (Hi-Z) 
	*/
	DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 7ea:	17 b8       	out	0x07, r1	; 7
	PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 7ec:	80 ef       	ldi	r24, 0xF0	; 240
 7ee:	88 b9       	out	0x08, r24	; 8
 7f0:	08 95       	ret

000007f2 <ButtonCycleUpdate>:
*
*********************************************************************************************************
*/

void ButtonCycleUpdate(void)
{
 7f2:	cf 92       	push	r12
 7f4:	df 92       	push	r13
 7f6:	ef 92       	push	r14
 7f8:	ff 92       	push	r15
 7fa:	0f 93       	push	r16
 7fc:	1f 93       	push	r17
 7fe:	cf 93       	push	r28
 800:	df 93       	push	r29
	ButtonDataType io_state = 0;
	ButtonDataType tempValue;
	ButtonDataType MatrixButtonValue;
	uint8_t Col;
	
	tempValue = (~PIND) & ((1<<PIND6) | (1<<PIND5) | (1<<PIND4) | (1<<PIND3));	/* Get PD6-PD3 IO state */
 802:	89 b1       	in	r24, 0x09	; 9
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	80 95       	com	r24
 808:	90 95       	com	r25
 80a:	88 77       	andi	r24, 0x78	; 120
 80c:	99 27       	eor	r25, r25
 80e:	09 2e       	mov	r0, r25
 810:	00 0c       	add	r0, r0
 812:	aa 0b       	sbc	r26, r26
 814:	bb 0b       	sbc	r27, r27
	tempValue >>= 3;	/* right rotate to low 4 bits location */
 816:	73 e0       	ldi	r23, 0x03	; 3
 818:	b6 95       	lsr	r27
 81a:	a7 95       	ror	r26
 81c:	97 95       	ror	r25
 81e:	87 95       	ror	r24
 820:	7a 95       	dec	r23
 822:	d1 f7       	brne	.-12     	; 0x818 <ButtonCycleUpdate+0x26>
 824:	e0 e0       	ldi	r30, 0x00	; 0
 826:	f0 e0       	ldi	r31, 0x00	; 0
	
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
 828:	40 e0       	ldi	r20, 0x00	; 0
 82a:	50 e0       	ldi	r21, 0x00	; 0
 82c:	ba 01       	movw	r22, r20
		/* 
		Set PC7-PC4 as input as internal pull up
		Set PC3-PC0 as Tri-state (Hi-Z)
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 82e:	10 ef       	ldi	r17, 0xF0	; 240
	
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
 830:	c8 e0       	ldi	r28, 0x08	; 8
 832:	d0 e0       	ldi	r29, 0x00	; 0
	{
		/* 
		Set PC7-PC4 as input as internal pull up
		Set PC3-PC0 as Tri-state (Hi-Z)
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 834:	17 b8       	out	0x07, r1	; 7
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 836:	18 b9       	out	0x08, r17	; 8
	
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
 838:	07 b1       	in	r16, 0x07	; 7
 83a:	9e 01       	movw	r18, r28
 83c:	0e 2e       	mov	r0, r30
 83e:	02 c0       	rjmp	.+4      	; 0x844 <ButtonCycleUpdate+0x52>
 840:	35 95       	asr	r19
 842:	27 95       	ror	r18
 844:	0a 94       	dec	r0
 846:	e2 f7       	brpl	.-8      	; 0x840 <ButtonCycleUpdate+0x4e>
 848:	30 2f       	mov	r19, r16
 84a:	32 2b       	or	r19, r18
 84c:	37 b9       	out	0x07, r19	; 7
		PORTC &= ~(0x08>>Col);		/* Set the column as low */
 84e:	38 b1       	in	r19, 0x08	; 8
 850:	20 95       	com	r18
 852:	23 23       	and	r18, r19
 854:	28 b9       	out	0x08, r18	; 8
		
		/* read and save button state after the column which active as low */
		MatrixButtonValue <<= 4;	/* newer 4 button state store in lower four bits */
 856:	6a 01       	movw	r12, r20
 858:	7b 01       	movw	r14, r22
 85a:	34 e0       	ldi	r19, 0x04	; 4
 85c:	cc 0c       	add	r12, r12
 85e:	dd 1c       	adc	r13, r13
 860:	ee 1c       	adc	r14, r14
 862:	ff 1c       	adc	r15, r15
 864:	3a 95       	dec	r19
 866:	d1 f7       	brne	.-12     	; 0x85c <ButtonCycleUpdate+0x6a>
		MatrixButtonValue |= ((~PINC) & 0x00f0) >> 4;
 868:	26 b1       	in	r18, 0x06	; 6
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	20 95       	com	r18
 86e:	30 95       	com	r19
 870:	20 7f       	andi	r18, 0xF0	; 240
 872:	33 27       	eor	r19, r19
 874:	a9 01       	movw	r20, r18
 876:	64 e0       	ldi	r22, 0x04	; 4
 878:	55 95       	asr	r21
 87a:	47 95       	ror	r20
 87c:	6a 95       	dec	r22
 87e:	e1 f7       	brne	.-8      	; 0x878 <ButtonCycleUpdate+0x86>
 880:	05 2e       	mov	r0, r21
 882:	00 0c       	add	r0, r0
 884:	66 0b       	sbc	r22, r22
 886:	77 0b       	sbc	r23, r23
 888:	4c 29       	or	r20, r12
 88a:	5d 29       	or	r21, r13
 88c:	6e 29       	or	r22, r14
 88e:	7f 29       	or	r23, r15
 890:	31 96       	adiw	r30, 0x01	; 1
	uint8_t Col;
	
	tempValue = (~PIND) & ((1<<PIND6) | (1<<PIND5) | (1<<PIND4) | (1<<PIND3));	/* Get PD6-PD3 IO state */
	tempValue >>= 3;	/* right rotate to low 4 bits location */
	
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
 892:	e4 30       	cpi	r30, 0x04	; 4
 894:	f1 05       	cpc	r31, r1
 896:	71 f6       	brne	.-100    	; 0x834 <ButtonCycleUpdate+0x42>
		/* read and save button state after the column which active as low */
		MatrixButtonValue <<= 4;	/* newer 4 button state store in lower four bits */
		MatrixButtonValue |= ((~PINC) & 0x00f0) >> 4;
	}
	
	io_state = (tempValue << 16) | MatrixButtonValue;
 898:	dc 01       	movw	r26, r24
 89a:	99 27       	eor	r25, r25
 89c:	88 27       	eor	r24, r24
 89e:	00 91 b2 01 	lds	r16, 0x01B2
 8a2:	10 91 b3 01 	lds	r17, 0x01B3
 8a6:	20 91 b4 01 	lds	r18, 0x01B4
 8aa:	30 91 b5 01 	lds	r19, 0x01B5
 8ae:	80 2b       	or	r24, r16
 8b0:	91 2b       	or	r25, r17
 8b2:	a2 2b       	or	r26, r18
 8b4:	b3 2b       	or	r27, r19
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
 8b6:	48 2b       	or	r20, r24
 8b8:	59 2b       	or	r21, r25
 8ba:	6a 2b       	or	r22, r26
 8bc:	7b 2b       	or	r23, r27
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
 8be:	10 92 b2 01 	sts	0x01B2, r1
 8c2:	10 92 b3 01 	sts	0x01B3, r1
 8c6:	10 92 b4 01 	sts	0x01B4, r1
 8ca:	10 92 b5 01 	sts	0x01B5, r1
	b = button.buttonsLastCycle.bVal;
 8ce:	80 91 b6 01 	lds	r24, 0x01B6
 8d2:	90 91 b7 01 	lds	r25, 0x01B7
 8d6:	a0 91 b8 01 	lds	r26, 0x01B8
 8da:	b0 91 b9 01 	lds	r27, 0x01B9
	holdTime = button.buttonHoldTime;
 8de:	20 91 ca 01 	lds	r18, 0x01CA
 8e2:	30 91 cb 01 	lds	r19, 0x01CB
	
	if (button.buttonsReleased.bVal != 0) {		
 8e6:	c0 90 ba 01 	lds	r12, 0x01BA
 8ea:	d0 90 bb 01 	lds	r13, 0x01BB
 8ee:	e0 90 bc 01 	lds	r14, 0x01BC
 8f2:	f0 90 bd 01 	lds	r15, 0x01BD
 8f6:	c1 14       	cp	r12, r1
 8f8:	d1 04       	cpc	r13, r1
 8fa:	e1 04       	cpc	r14, r1
 8fc:	f1 04       	cpc	r15, r1
 8fe:	49 f0       	breq	.+18     	; 0x912 <ButtonCycleUpdate+0x120>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
 900:	c0 92 c2 01 	sts	0x01C2, r12
 904:	d0 92 c3 01 	sts	0x01C3, r13
 908:	e0 92 c4 01 	sts	0x01C4, r14
 90c:	f0 92 c5 01 	sts	0x01C5, r15
 910:	0b c0       	rjmp	.+22     	; 0x928 <ButtonCycleUpdate+0x136>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
 912:	2d 33       	cpi	r18, 0x3D	; 61
 914:	31 05       	cpc	r19, r1
 916:	40 f0       	brcs	.+16     	; 0x928 <ButtonCycleUpdate+0x136>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
 918:	10 92 c2 01 	sts	0x01C2, r1
 91c:	10 92 c3 01 	sts	0x01C3, r1
 920:	10 92 c4 01 	sts	0x01C4, r1
 924:	10 92 c5 01 	sts	0x01C5, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
 928:	10 92 ba 01 	sts	0x01BA, r1
 92c:	10 92 bb 01 	sts	0x01BB, r1
 930:	10 92 bc 01 	sts	0x01BC, r1
 934:	10 92 bd 01 	sts	0x01BD, r1
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
 938:	10 92 c6 01 	sts	0x01C6, r1
 93c:	10 92 c7 01 	sts	0x01C7, r1
 940:	10 92 c8 01 	sts	0x01C8, r1
 944:	10 92 c9 01 	sts	0x01C9, r1
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
 948:	48 17       	cp	r20, r24
 94a:	59 07       	cpc	r21, r25
 94c:	6a 07       	cpc	r22, r26
 94e:	7b 07       	cpc	r23, r27
 950:	d9 f4       	brne	.+54     	; 0x988 <ButtonCycleUpdate+0x196>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
 952:	2f 5f       	subi	r18, 0xFF	; 255
 954:	3f 4f       	sbci	r19, 0xFF	; 255
 956:	24 32       	cpi	r18, 0x24	; 36
 958:	31 05       	cpc	r19, r1
 95a:	48 f4       	brcc	.+18     	; 0x96e <ButtonCycleUpdate+0x17c>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
 95c:	10 92 be 01 	sts	0x01BE, r1
 960:	10 92 bf 01 	sts	0x01BF, r1
 964:	10 92 c0 01 	sts	0x01C0, r1
 968:	10 92 c1 01 	sts	0x01C1, r1
 96c:	08 c0       	rjmp	.+16     	; 0x97e <ButtonCycleUpdate+0x18c>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
 96e:	40 93 be 01 	sts	0x01BE, r20
 972:	50 93 bf 01 	sts	0x01BF, r21
 976:	60 93 c0 01 	sts	0x01C0, r22
 97a:	70 93 c1 01 	sts	0x01C1, r23
		}	
		button.buttonHoldTime = holdTime;
 97e:	30 93 cb 01 	sts	0x01CB, r19
 982:	20 93 ca 01 	sts	0x01CA, r18
 986:	45 c0       	rjmp	.+138    	; 0xa12 <ButtonCycleUpdate+0x220>
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
 988:	40 93 b6 01 	sts	0x01B6, r20
 98c:	50 93 b7 01 	sts	0x01B7, r21
 990:	60 93 b8 01 	sts	0x01B8, r22
 994:	70 93 b9 01 	sts	0x01B9, r23
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
 998:	40 95       	com	r20
 99a:	50 95       	com	r21
 99c:	60 95       	com	r22
 99e:	70 95       	com	r23
 9a0:	48 23       	and	r20, r24
 9a2:	59 23       	and	r21, r25
 9a4:	6a 23       	and	r22, r26
 9a6:	7b 23       	and	r23, r27
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
 9a8:	80 91 be 01 	lds	r24, 0x01BE
 9ac:	90 91 bf 01 	lds	r25, 0x01BF
 9b0:	a0 91 c0 01 	lds	r26, 0x01C0
 9b4:	b0 91 c1 01 	lds	r27, 0x01C1
 9b8:	84 23       	and	r24, r20
 9ba:	95 23       	and	r25, r21
 9bc:	a6 23       	and	r26, r22
 9be:	b7 23       	and	r27, r23
 9c0:	89 2b       	or	r24, r25
 9c2:	8a 2b       	or	r24, r26
 9c4:	8b 2b       	or	r24, r27
 9c6:	29 f5       	brne	.+74     	; 0xa12 <ButtonCycleUpdate+0x220>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
 9c8:	10 92 cb 01 	sts	0x01CB, r1
 9cc:	10 92 ca 01 	sts	0x01CA, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
 9d0:	23 50       	subi	r18, 0x03	; 3
 9d2:	31 09       	sbc	r19, r1
 9d4:	20 32       	cpi	r18, 0x20	; 32
 9d6:	31 05       	cpc	r19, r1
 9d8:	e0 f4       	brcc	.+56     	; 0xa12 <ButtonCycleUpdate+0x220>
				button.buttonsReleased.bVal = buttons;	
 9da:	40 93 ba 01 	sts	0x01BA, r20
 9de:	50 93 bb 01 	sts	0x01BB, r21
 9e2:	60 93 bc 01 	sts	0x01BC, r22
 9e6:	70 93 bd 01 	sts	0x01BD, r23
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
 9ea:	80 91 c2 01 	lds	r24, 0x01C2
 9ee:	90 91 c3 01 	lds	r25, 0x01C3
 9f2:	a0 91 c4 01 	lds	r26, 0x01C4
 9f6:	b0 91 c5 01 	lds	r27, 0x01C5
 9fa:	48 23       	and	r20, r24
 9fc:	59 23       	and	r21, r25
 9fe:	6a 23       	and	r22, r26
 a00:	7b 23       	and	r23, r27
 a02:	40 93 c6 01 	sts	0x01C6, r20
 a06:	50 93 c7 01 	sts	0x01C7, r21
 a0a:	60 93 c8 01 	sts	0x01C8, r22
 a0e:	70 93 c9 01 	sts	0x01C9, r23
													button.buttonsReleasedHistory.bVal;
			}       
		}
	}
}
 a12:	df 91       	pop	r29
 a14:	cf 91       	pop	r28
 a16:	1f 91       	pop	r17
 a18:	0f 91       	pop	r16
 a1a:	ff 90       	pop	r15
 a1c:	ef 90       	pop	r14
 a1e:	df 90       	pop	r13
 a20:	cf 90       	pop	r12
 a22:	08 95       	ret

00000a24 <main>:
//----- Begin Code ------------------------------------------------------------
int main(void)
{
	// initialize our libraries
	// initialize the UART (serial port)
	uartInit();
 a24:	0e 94 2e 03 	call	0x65c	; 0x65c <uartInit>
	// set the baud rate of the UART for our debug/reporting output
	uartSetBaudRate(9600);
 a28:	60 e8       	ldi	r22, 0x80	; 128
 a2a:	75 e2       	ldi	r23, 0x25	; 37
 a2c:	80 e0       	ldi	r24, 0x00	; 0
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e 94 47 03 	call	0x68e	; 0x68e <uartSetBaudRate>
	// initialize rprintf system
	rprintfInit(uartSendByte);
 a34:	8e e6       	ldi	r24, 0x6E	; 110
 a36:	93 e0       	ldi	r25, 0x03	; 3
 a38:	0e 94 bf 00 	call	0x17e	; 0x17e <rprintfInit>
	//timerTest();
	
	/*
	Calll all initial function
	*/
	ButtonInit();
 a3c:	0e 94 ef 03 	call	0x7de	; 0x7de <ButtonInit>
	{
		_delay_ms(20);
		ButtonCycleUpdate();
		
		//rprintf("t=%x\n", button.buttonHoldTime);
		if(button.buttonsReleased.bVal) rprintf("rl=%x\n", button.buttonsReleased.bVal);
 a40:	04 e9       	ldi	r16, 0x94	; 148
 a42:	10 e0       	ldi	r17, 0x00	; 0
 a44:	ff 24       	eor	r15, r15
 a46:	f3 94       	inc	r15
		if(button.buttonsReleased.bVal) rprintf("rh=%x\n", button.buttonsReleased.bVal>>16);
 a48:	cd e8       	ldi	r28, 0x8D	; 141
 a4a:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a4c:	8f e3       	ldi	r24, 0x3F	; 63
 a4e:	9c e9       	ldi	r25, 0x9C	; 156
 a50:	01 97       	sbiw	r24, 0x01	; 1
 a52:	f1 f7       	brne	.-4      	; 0xa50 <main+0x2c>
 a54:	00 c0       	rjmp	.+0      	; 0xa56 <main+0x32>
 a56:	00 00       	nop
	ButtonInit();

	while(1)
	{
		_delay_ms(20);
		ButtonCycleUpdate();
 a58:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ButtonCycleUpdate>
		
		//rprintf("t=%x\n", button.buttonHoldTime);
		if(button.buttonsReleased.bVal) rprintf("rl=%x\n", button.buttonsReleased.bVal);
 a5c:	80 91 ba 01 	lds	r24, 0x01BA
 a60:	90 91 bb 01 	lds	r25, 0x01BB
 a64:	a0 91 bc 01 	lds	r26, 0x01BC
 a68:	b0 91 bd 01 	lds	r27, 0x01BD
 a6c:	00 97       	sbiw	r24, 0x00	; 0
 a6e:	a1 05       	cpc	r26, r1
 a70:	b1 05       	cpc	r27, r1
 a72:	89 f0       	breq	.+34     	; 0xa96 <main+0x72>
 a74:	bf 93       	push	r27
 a76:	af 93       	push	r26
 a78:	9f 93       	push	r25
 a7a:	8f 93       	push	r24
 a7c:	1f 93       	push	r17
 a7e:	0f 93       	push	r16
 a80:	ff 92       	push	r15
 a82:	0e 94 dd 00 	call	0x1ba	; 0x1ba <rprintf1RamRom>
 a86:	8d b7       	in	r24, 0x3d	; 61
 a88:	9e b7       	in	r25, 0x3e	; 62
 a8a:	07 96       	adiw	r24, 0x07	; 7
 a8c:	0f b6       	in	r0, 0x3f	; 63
 a8e:	f8 94       	cli
 a90:	9e bf       	out	0x3e, r25	; 62
 a92:	0f be       	out	0x3f, r0	; 63
 a94:	8d bf       	out	0x3d, r24	; 61
		if(button.buttonsReleased.bVal) rprintf("rh=%x\n", button.buttonsReleased.bVal>>16);
 a96:	80 91 ba 01 	lds	r24, 0x01BA
 a9a:	90 91 bb 01 	lds	r25, 0x01BB
 a9e:	a0 91 bc 01 	lds	r26, 0x01BC
 aa2:	b0 91 bd 01 	lds	r27, 0x01BD
 aa6:	00 97       	sbiw	r24, 0x00	; 0
 aa8:	a1 05       	cpc	r26, r1
 aaa:	b1 05       	cpc	r27, r1
 aac:	79 f2       	breq	.-98     	; 0xa4c <main+0x28>
 aae:	cd 01       	movw	r24, r26
 ab0:	aa 27       	eor	r26, r26
 ab2:	bb 27       	eor	r27, r27
 ab4:	bf 93       	push	r27
 ab6:	af 93       	push	r26
 ab8:	9f 93       	push	r25
 aba:	8f 93       	push	r24
 abc:	df 93       	push	r29
 abe:	cf 93       	push	r28
 ac0:	ff 92       	push	r15
 ac2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <rprintf1RamRom>
 ac6:	8d b7       	in	r24, 0x3d	; 61
 ac8:	9e b7       	in	r25, 0x3e	; 62
 aca:	07 96       	adiw	r24, 0x07	; 7
 acc:	0f b6       	in	r0, 0x3f	; 63
 ace:	f8 94       	cli
 ad0:	9e bf       	out	0x3e, r25	; 62
 ad2:	0f be       	out	0x3f, r0	; 63
 ad4:	8d bf       	out	0x3d, r24	; 61
 ad6:	ba cf       	rjmp	.-140    	; 0xa4c <main+0x28>

00000ad8 <__udivmodhi4>:
 ad8:	aa 1b       	sub	r26, r26
 ada:	bb 1b       	sub	r27, r27
 adc:	51 e1       	ldi	r21, 0x11	; 17
 ade:	07 c0       	rjmp	.+14     	; 0xaee <__udivmodhi4_ep>

00000ae0 <__udivmodhi4_loop>:
 ae0:	aa 1f       	adc	r26, r26
 ae2:	bb 1f       	adc	r27, r27
 ae4:	a6 17       	cp	r26, r22
 ae6:	b7 07       	cpc	r27, r23
 ae8:	10 f0       	brcs	.+4      	; 0xaee <__udivmodhi4_ep>
 aea:	a6 1b       	sub	r26, r22
 aec:	b7 0b       	sbc	r27, r23

00000aee <__udivmodhi4_ep>:
 aee:	88 1f       	adc	r24, r24
 af0:	99 1f       	adc	r25, r25
 af2:	5a 95       	dec	r21
 af4:	a9 f7       	brne	.-22     	; 0xae0 <__udivmodhi4_loop>
 af6:	80 95       	com	r24
 af8:	90 95       	com	r25
 afa:	bc 01       	movw	r22, r24
 afc:	cd 01       	movw	r24, r26
 afe:	08 95       	ret

00000b00 <__udivmodsi4>:
 b00:	a1 e2       	ldi	r26, 0x21	; 33
 b02:	1a 2e       	mov	r1, r26
 b04:	aa 1b       	sub	r26, r26
 b06:	bb 1b       	sub	r27, r27
 b08:	fd 01       	movw	r30, r26
 b0a:	0d c0       	rjmp	.+26     	; 0xb26 <__udivmodsi4_ep>

00000b0c <__udivmodsi4_loop>:
 b0c:	aa 1f       	adc	r26, r26
 b0e:	bb 1f       	adc	r27, r27
 b10:	ee 1f       	adc	r30, r30
 b12:	ff 1f       	adc	r31, r31
 b14:	a2 17       	cp	r26, r18
 b16:	b3 07       	cpc	r27, r19
 b18:	e4 07       	cpc	r30, r20
 b1a:	f5 07       	cpc	r31, r21
 b1c:	20 f0       	brcs	.+8      	; 0xb26 <__udivmodsi4_ep>
 b1e:	a2 1b       	sub	r26, r18
 b20:	b3 0b       	sbc	r27, r19
 b22:	e4 0b       	sbc	r30, r20
 b24:	f5 0b       	sbc	r31, r21

00000b26 <__udivmodsi4_ep>:
 b26:	66 1f       	adc	r22, r22
 b28:	77 1f       	adc	r23, r23
 b2a:	88 1f       	adc	r24, r24
 b2c:	99 1f       	adc	r25, r25
 b2e:	1a 94       	dec	r1
 b30:	69 f7       	brne	.-38     	; 0xb0c <__udivmodsi4_loop>
 b32:	60 95       	com	r22
 b34:	70 95       	com	r23
 b36:	80 95       	com	r24
 b38:	90 95       	com	r25
 b3a:	9b 01       	movw	r18, r22
 b3c:	ac 01       	movw	r20, r24
 b3e:	bd 01       	movw	r22, r26
 b40:	cf 01       	movw	r24, r30
 b42:	08 95       	ret

00000b44 <_exit>:
 b44:	f8 94       	cli

00000b46 <__stop_program>:
 b46:	ff cf       	rjmp	.-2      	; 0xb46 <__stop_program>
