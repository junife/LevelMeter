
LevelMeterRfRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  000011c4  00001258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e7  00800176  00800176  000012ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000438  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034b9  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010d5  00000000  00000000  00004c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f6a  00000000  00000000  00005d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d38  00000000  00000000  00007c70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000de0  00000000  00000000  000089a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ba8  00000000  00000000  00009788  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c0  00000000  00000000  0000c330  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	67 c1       	rjmp	.+718    	; 0x2d0 <__ctors_end>
       2:	00 00       	nop
       4:	80 c1       	rjmp	.+768    	; 0x306 <__bad_interrupt>
       6:	00 00       	nop
       8:	7e c1       	rjmp	.+764    	; 0x306 <__bad_interrupt>
       a:	00 00       	nop
       c:	7c c1       	rjmp	.+760    	; 0x306 <__bad_interrupt>
       e:	00 00       	nop
      10:	7a c1       	rjmp	.+756    	; 0x306 <__bad_interrupt>
      12:	00 00       	nop
      14:	78 c1       	rjmp	.+752    	; 0x306 <__bad_interrupt>
      16:	00 00       	nop
      18:	76 c1       	rjmp	.+748    	; 0x306 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	74 c1       	rjmp	.+744    	; 0x306 <__bad_interrupt>
      1e:	00 00       	nop
      20:	72 c1       	rjmp	.+740    	; 0x306 <__bad_interrupt>
      22:	00 00       	nop
      24:	3d c5       	rjmp	.+2682   	; 0xaa0 <__vector_9>
      26:	00 00       	nop
      28:	68 c5       	rjmp	.+2768   	; 0xafa <__vector_10>
      2a:	00 00       	nop
      2c:	72 c4       	rjmp	.+2276   	; 0x912 <__vector_11>
      2e:	00 00       	nop
      30:	0a c5       	rjmp	.+2580   	; 0xa46 <__vector_12>
      32:	00 00       	nop
      34:	ae c4       	rjmp	.+2396   	; 0x992 <__vector_13>
      36:	00 00       	nop
      38:	d9 c4       	rjmp	.+2482   	; 0x9ec <__vector_14>
      3a:	00 00       	nop
      3c:	3d c4       	rjmp	.+2170   	; 0x8b8 <__vector_15>
      3e:	00 00       	nop
      40:	62 c1       	rjmp	.+708    	; 0x306 <__bad_interrupt>
      42:	00 00       	nop
      44:	60 c1       	rjmp	.+704    	; 0x306 <__bad_interrupt>
      46:	00 00       	nop
      48:	e4 c3       	rjmp	.+1992   	; 0x812 <__vector_18>
      4a:	00 00       	nop
      4c:	5c c1       	rjmp	.+696    	; 0x306 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0d c6       	rjmp	.+3098   	; 0xc6c <__vector_20>
      52:	00 00       	nop
      54:	58 c1       	rjmp	.+688    	; 0x306 <__bad_interrupt>
      56:	00 00       	nop
      58:	d2 c5       	rjmp	.+2980   	; 0xbfe <__vector_22>
      5a:	00 00       	nop
      5c:	54 c1       	rjmp	.+680    	; 0x306 <__bad_interrupt>
      5e:	00 00       	nop
      60:	52 c1       	rjmp	.+676    	; 0x306 <__bad_interrupt>
      62:	00 00       	nop
      64:	50 c1       	rjmp	.+672    	; 0x306 <__bad_interrupt>
      66:	00 00       	nop
      68:	4e c1       	rjmp	.+668    	; 0x306 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4c c1       	rjmp	.+664    	; 0x306 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4a c1       	rjmp	.+660    	; 0x306 <__bad_interrupt>
      72:	00 00       	nop
      74:	48 c1       	rjmp	.+656    	; 0x306 <__bad_interrupt>
      76:	00 00       	nop
      78:	46 c1       	rjmp	.+652    	; 0x306 <__bad_interrupt>
	...

0000007c <__trampolines_end>:
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 00       	nop
      82:	00 5f       	subi	r16, 0xF0	; 240
      84:	00 00       	nop
      86:	00 07       	cpc	r16, r16
      88:	00 07       	cpc	r16, r16
      8a:	00 14       	cp	r0, r0
      8c:	7f 14       	cp	r7, r15
      8e:	7f 14       	cp	r7, r15
      90:	24 2a       	or	r2, r20
      92:	7f 2a       	or	r7, r31
      94:	12 23       	and	r17, r18
      96:	13 08       	sbc	r1, r3
      98:	64 62       	ori	r22, 0x24	; 36
      9a:	36 49       	sbci	r19, 0x96	; 150
      9c:	55 22       	and	r5, r21
      9e:	50 00       	.word	0x0050	; ????
      a0:	05 03       	mulsu	r16, r21
      a2:	00 00       	nop
      a4:	00 1c       	adc	r0, r0
      a6:	22 41       	sbci	r18, 0x12	; 18
      a8:	00 00       	nop
      aa:	41 22       	and	r4, r17
      ac:	1c 00       	.word	0x001c	; ????
      ae:	08 2a       	or	r0, r24
      b0:	1c 2a       	or	r1, r28
      b2:	08 08       	sbc	r0, r8
      b4:	08 3e       	cpi	r16, 0xE8	; 232
      b6:	08 08       	sbc	r0, r8
      b8:	00 50       	subi	r16, 0x00	; 0
      ba:	30 00       	.word	0x0030	; ????
      bc:	00 08       	sbc	r0, r0
      be:	08 08       	sbc	r0, r8
      c0:	08 08       	sbc	r0, r8
      c2:	00 60       	ori	r16, 0x00	; 0
      c4:	60 00       	.word	0x0060	; ????
      c6:	00 20       	and	r0, r0
      c8:	10 08       	sbc	r1, r0
      ca:	04 02       	muls	r16, r20
      cc:	3e 51       	subi	r19, 0x1E	; 30
      ce:	49 45       	sbci	r20, 0x59	; 89
      d0:	3e 00       	.word	0x003e	; ????
      d2:	42 7f       	andi	r20, 0xF2	; 242
      d4:	40 00       	.word	0x0040	; ????
      d6:	42 61       	ori	r20, 0x12	; 18
      d8:	51 49       	sbci	r21, 0x91	; 145
      da:	46 21       	and	r20, r6
      dc:	41 45       	sbci	r20, 0x51	; 81
      de:	4b 31       	cpi	r20, 0x1B	; 27
      e0:	18 14       	cp	r1, r8
      e2:	12 7f       	andi	r17, 0xF2	; 242
      e4:	10 27       	eor	r17, r16
      e6:	45 45       	sbci	r20, 0x55	; 85
      e8:	45 39       	cpi	r20, 0x95	; 149
      ea:	3c 4a       	sbci	r19, 0xAC	; 172
      ec:	49 49       	sbci	r20, 0x99	; 153
      ee:	30 01       	movw	r6, r0
      f0:	71 09       	sbc	r23, r1
      f2:	05 03       	mulsu	r16, r21
      f4:	36 49       	sbci	r19, 0x96	; 150
      f6:	49 49       	sbci	r20, 0x99	; 153
      f8:	36 06       	cpc	r3, r22
      fa:	49 49       	sbci	r20, 0x99	; 153
      fc:	29 1e       	adc	r2, r25
      fe:	00 36       	cpi	r16, 0x60	; 96
     100:	36 00       	.word	0x0036	; ????
     102:	00 00       	nop
     104:	56 36       	cpi	r21, 0x66	; 102
     106:	00 00       	nop
     108:	00 08       	sbc	r0, r0
     10a:	14 22       	and	r1, r20
     10c:	41 14       	cp	r4, r1
     10e:	14 14       	cp	r1, r4
     110:	14 14       	cp	r1, r4
     112:	41 22       	and	r4, r17
     114:	14 08       	sbc	r1, r4
     116:	00 02       	muls	r16, r16
     118:	01 51       	subi	r16, 0x11	; 17
     11a:	09 06       	cpc	r0, r25
     11c:	32 49       	sbci	r19, 0x92	; 146
     11e:	79 41       	sbci	r23, 0x19	; 25
     120:	3e 7e       	andi	r19, 0xEE	; 238
     122:	11 11       	cpse	r17, r1
     124:	11 7e       	andi	r17, 0xE1	; 225
     126:	7f 49       	sbci	r23, 0x9F	; 159
     128:	49 49       	sbci	r20, 0x99	; 153
     12a:	36 3e       	cpi	r19, 0xE6	; 230
     12c:	41 41       	sbci	r20, 0x11	; 17
     12e:	41 22       	and	r4, r17
     130:	7f 41       	sbci	r23, 0x1F	; 31
     132:	41 22       	and	r4, r17
     134:	1c 7f       	andi	r17, 0xFC	; 252
     136:	49 49       	sbci	r20, 0x99	; 153
     138:	49 41       	sbci	r20, 0x19	; 25
     13a:	7f 09       	sbc	r23, r15
     13c:	09 01       	movw	r0, r18
     13e:	01 3e       	cpi	r16, 0xE1	; 225
     140:	41 41       	sbci	r20, 0x11	; 17
     142:	51 32       	cpi	r21, 0x21	; 33
     144:	7f 08       	sbc	r7, r15
     146:	08 08       	sbc	r0, r8
     148:	7f 00       	.word	0x007f	; ????
     14a:	41 7f       	andi	r20, 0xF1	; 241
     14c:	41 00       	.word	0x0041	; ????
     14e:	20 40       	sbci	r18, 0x00	; 0
     150:	41 3f       	cpi	r20, 0xF1	; 241
     152:	01 7f       	andi	r16, 0xF1	; 241
     154:	08 14       	cp	r0, r8
     156:	22 41       	sbci	r18, 0x12	; 18
     158:	7f 40       	sbci	r23, 0x0F	; 15
     15a:	40 40       	sbci	r20, 0x00	; 0
     15c:	40 7f       	andi	r20, 0xF0	; 240
     15e:	02 04       	cpc	r0, r2
     160:	02 7f       	andi	r16, 0xF2	; 242
     162:	7f 04       	cpc	r7, r15
     164:	08 10       	cpse	r0, r8
     166:	7f 3e       	cpi	r23, 0xEF	; 239
     168:	41 41       	sbci	r20, 0x11	; 17
     16a:	41 3e       	cpi	r20, 0xE1	; 225
     16c:	7f 09       	sbc	r23, r15
     16e:	09 09       	sbc	r16, r9
     170:	06 3e       	cpi	r16, 0xE6	; 230
     172:	41 51       	subi	r20, 0x11	; 17
     174:	21 5e       	subi	r18, 0xE1	; 225
     176:	7f 09       	sbc	r23, r15
     178:	19 29       	or	r17, r9
     17a:	46 46       	sbci	r20, 0x66	; 102
     17c:	49 49       	sbci	r20, 0x99	; 153
     17e:	49 31       	cpi	r20, 0x19	; 25
     180:	01 01       	movw	r0, r2
     182:	7f 01       	movw	r14, r30
     184:	01 3f       	cpi	r16, 0xF1	; 241
     186:	40 40       	sbci	r20, 0x00	; 0
     188:	40 3f       	cpi	r20, 0xF0	; 240
     18a:	1f 20       	and	r1, r15
     18c:	40 20       	and	r4, r0
     18e:	1f 7f       	andi	r17, 0xFF	; 255
     190:	20 18       	sub	r2, r0
     192:	20 7f       	andi	r18, 0xF0	; 240
     194:	63 14       	cp	r6, r3
     196:	08 14       	cp	r0, r8
     198:	63 03       	mulsu	r22, r19
     19a:	04 78       	andi	r16, 0x84	; 132
     19c:	04 03       	mulsu	r16, r20
     19e:	61 51       	subi	r22, 0x11	; 17
     1a0:	49 45       	sbci	r20, 0x59	; 89
     1a2:	43 00       	.word	0x0043	; ????
     1a4:	00 7f       	andi	r16, 0xF0	; 240
     1a6:	41 41       	sbci	r20, 0x11	; 17
     1a8:	02 04       	cpc	r0, r2
     1aa:	08 10       	cpse	r0, r8
     1ac:	20 41       	sbci	r18, 0x10	; 16
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	00 00       	nop
     1b2:	04 02       	muls	r16, r20
     1b4:	01 02       	muls	r16, r17
     1b6:	04 40       	sbci	r16, 0x04	; 4
     1b8:	40 40       	sbci	r20, 0x00	; 0
     1ba:	40 40       	sbci	r20, 0x00	; 0
     1bc:	00 01       	movw	r0, r0
     1be:	02 04       	cpc	r0, r2
     1c0:	00 20       	and	r0, r0
     1c2:	54 54       	subi	r21, 0x44	; 68
     1c4:	54 78       	andi	r21, 0x84	; 132
     1c6:	7f 48       	sbci	r23, 0x8F	; 143
     1c8:	44 44       	sbci	r20, 0x44	; 68
     1ca:	38 38       	cpi	r19, 0x88	; 136
     1cc:	44 44       	sbci	r20, 0x44	; 68
     1ce:	44 20       	and	r4, r4
     1d0:	38 44       	sbci	r19, 0x48	; 72
     1d2:	44 48       	sbci	r20, 0x84	; 132
     1d4:	7f 38       	cpi	r23, 0x8F	; 143
     1d6:	54 54       	subi	r21, 0x44	; 68
     1d8:	54 18       	sub	r5, r4
     1da:	08 7e       	andi	r16, 0xE8	; 232
     1dc:	09 01       	movw	r0, r18
     1de:	02 08       	sbc	r0, r2
     1e0:	14 54       	subi	r17, 0x44	; 68
     1e2:	54 3c       	cpi	r21, 0xC4	; 196
     1e4:	7f 08       	sbc	r7, r15
     1e6:	04 04       	cpc	r0, r4
     1e8:	78 00       	.word	0x0078	; ????
     1ea:	44 7d       	andi	r20, 0xD4	; 212
     1ec:	40 00       	.word	0x0040	; ????
     1ee:	20 40       	sbci	r18, 0x00	; 0
     1f0:	44 3d       	cpi	r20, 0xD4	; 212
     1f2:	00 00       	nop
     1f4:	7f 10       	cpse	r7, r15
     1f6:	28 44       	sbci	r18, 0x48	; 72
     1f8:	00 41       	sbci	r16, 0x10	; 16
     1fa:	7f 40       	sbci	r23, 0x0F	; 15
     1fc:	00 7c       	andi	r16, 0xC0	; 192
     1fe:	04 18       	sub	r0, r4
     200:	04 78       	andi	r16, 0x84	; 132
     202:	7c 08       	sbc	r7, r12
     204:	04 04       	cpc	r0, r4
     206:	78 38       	cpi	r23, 0x88	; 136
     208:	44 44       	sbci	r20, 0x44	; 68
     20a:	44 38       	cpi	r20, 0x84	; 132
     20c:	7c 14       	cp	r7, r12
     20e:	14 14       	cp	r1, r4
     210:	08 08       	sbc	r0, r8
     212:	14 14       	cp	r1, r4
     214:	18 7c       	andi	r17, 0xC8	; 200
     216:	7c 08       	sbc	r7, r12
     218:	04 04       	cpc	r0, r4
     21a:	08 48       	sbci	r16, 0x88	; 136
     21c:	54 54       	subi	r21, 0x44	; 68
     21e:	54 20       	and	r5, r4
     220:	04 3f       	cpi	r16, 0xF4	; 244
     222:	44 40       	sbci	r20, 0x04	; 4
     224:	20 3c       	cpi	r18, 0xC0	; 192
     226:	40 40       	sbci	r20, 0x00	; 0
     228:	20 7c       	andi	r18, 0xC0	; 192
     22a:	1c 20       	and	r1, r12
     22c:	40 20       	and	r4, r0
     22e:	1c 3c       	cpi	r17, 0xCC	; 204
     230:	40 30       	cpi	r20, 0x00	; 0
     232:	40 3c       	cpi	r20, 0xC0	; 192
     234:	44 28       	or	r4, r4
     236:	10 28       	or	r1, r0
     238:	44 0c       	add	r4, r4
     23a:	50 50       	subi	r21, 0x00	; 0
     23c:	50 3c       	cpi	r21, 0xC0	; 192
     23e:	44 64       	ori	r20, 0x44	; 68
     240:	54 4c       	sbci	r21, 0xC4	; 196
     242:	44 00       	.word	0x0044	; ????
     244:	08 36       	cpi	r16, 0x68	; 104
     246:	41 00       	.word	0x0041	; ????
     248:	00 00       	nop
     24a:	7f 00       	.word	0x007f	; ????
     24c:	00 00       	nop
     24e:	41 36       	cpi	r20, 0x61	; 97
     250:	08 00       	.word	0x0008	; ????
     252:	08 08       	sbc	r0, r8
     254:	2a 1c       	adc	r2, r10
     256:	08 08       	sbc	r0, r8
     258:	1c 2a       	or	r1, r28
     25a:	08 08       	sbc	r0, r8

0000025c <HexChars>:
     25c:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

0000026d <__c.2083>:
     26d:	25 63 00                                            %c.

00000270 <__c.2081>:
     270:	50 42 74 6e 31 38 2c 43 6c 65 61 72 20 48 6f 6d     PBtn18,Clear Hom
     280:	65 0a 00                                            e..

00000283 <__c.2078>:
     283:	50 42 74 6e 39 0a 00                                PBtn9..

0000028a <__c.2074>:
     28a:	50 42 74 6e 35 0a 00                                PBtn5..

00000291 <__c.2070>:
     291:	50 42 74 6e 31 0a 00                                PBtn1..

00000298 <__c.2066>:
     298:	50 42 74 6e 31 35 0a 00                             PBtn15..

000002a0 <__c.2062>:
     2a0:	50 42 74 6e 31 34 0a 00                             PBtn14..

000002a8 <__c.2058>:
     2a8:	50 42 74 6e 31 33 0a 00                             PBtn13..

000002b0 <__c.2055>:
     2b0:	72 68 3d 25 78 0a 00                                rh=%x..

000002b7 <__c.2053>:
     2b7:	72 6c 3d 25 78 0a 00                                rl=%x..

000002be <__c.2046>:
     2be:	52 46 20 72 65 6d 6f 74 65 20 73 74 61 72 74 21     RF remote start!
     2ce:	0a 00                                               ..

000002d0 <__ctors_end>:
     2d0:	11 24       	eor	r1, r1
     2d2:	1f be       	out	0x3f, r1	; 63
     2d4:	cf ef       	ldi	r28, 0xFF	; 255
     2d6:	d0 e1       	ldi	r29, 0x10	; 16
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	cd bf       	out	0x3d, r28	; 61

000002dc <__do_copy_data>:
     2dc:	11 e0       	ldi	r17, 0x01	; 1
     2de:	a0 e0       	ldi	r26, 0x00	; 0
     2e0:	b1 e0       	ldi	r27, 0x01	; 1
     2e2:	e4 ec       	ldi	r30, 0xC4	; 196
     2e4:	f1 e1       	ldi	r31, 0x11	; 17
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__do_copy_data+0x10>
     2e8:	05 90       	lpm	r0, Z+
     2ea:	0d 92       	st	X+, r0
     2ec:	a6 37       	cpi	r26, 0x76	; 118
     2ee:	b1 07       	cpc	r27, r17
     2f0:	d9 f7       	brne	.-10     	; 0x2e8 <__do_copy_data+0xc>

000002f2 <__do_clear_bss>:
     2f2:	22 e0       	ldi	r18, 0x02	; 2
     2f4:	a6 e7       	ldi	r26, 0x76	; 118
     2f6:	b1 e0       	ldi	r27, 0x01	; 1
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <.do_clear_bss_start>

000002fa <.do_clear_bss_loop>:
     2fa:	1d 92       	st	X+, r1

000002fc <.do_clear_bss_start>:
     2fc:	ad 35       	cpi	r26, 0x5D	; 93
     2fe:	b2 07       	cpc	r27, r18
     300:	e1 f7       	brne	.-8      	; 0x2fa <.do_clear_bss_loop>
     302:	fa d5       	rcall	.+3060   	; 0xef8 <main>
     304:	5d c7       	rjmp	.+3770   	; 0x11c0 <_exit>

00000306 <__bad_interrupt>:
     306:	7c ce       	rjmp	.-776    	; 0x0 <__vectors>

00000308 <bufferInit>:
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
	return data;
}
     308:	fc 01       	movw	r30, r24
     30a:	8f b7       	in	r24, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	71 83       	std	Z+1, r23	; 0x01
     310:	60 83       	st	Z, r22
     312:	53 83       	std	Z+3, r21	; 0x03
     314:	42 83       	std	Z+2, r20	; 0x02
     316:	17 82       	std	Z+7, r1	; 0x07
     318:	16 82       	std	Z+6, r1	; 0x06
     31a:	15 82       	std	Z+5, r1	; 0x05
     31c:	14 82       	std	Z+4, r1	; 0x04
     31e:	8f bf       	out	0x3f, r24	; 63
     320:	08 95       	ret

00000322 <bufferGetFromFront>:
     322:	fc 01       	movw	r30, r24
     324:	9f b7       	in	r25, 0x3f	; 63
     326:	f8 94       	cli
     328:	44 81       	ldd	r20, Z+4	; 0x04
     32a:	55 81       	ldd	r21, Z+5	; 0x05
     32c:	41 15       	cp	r20, r1
     32e:	51 05       	cpc	r21, r1
     330:	c9 f0       	breq	.+50     	; 0x364 <bufferGetFromFront+0x42>
     332:	26 81       	ldd	r18, Z+6	; 0x06
     334:	37 81       	ldd	r19, Z+7	; 0x07
     336:	a0 81       	ld	r26, Z
     338:	b1 81       	ldd	r27, Z+1	; 0x01
     33a:	a2 0f       	add	r26, r18
     33c:	b3 1f       	adc	r27, r19
     33e:	8c 91       	ld	r24, X
     340:	2f 5f       	subi	r18, 0xFF	; 255
     342:	3f 4f       	sbci	r19, 0xFF	; 255
     344:	37 83       	std	Z+7, r19	; 0x07
     346:	26 83       	std	Z+6, r18	; 0x06
     348:	62 81       	ldd	r22, Z+2	; 0x02
     34a:	73 81       	ldd	r23, Z+3	; 0x03
     34c:	26 17       	cp	r18, r22
     34e:	37 07       	cpc	r19, r23
     350:	20 f0       	brcs	.+8      	; 0x35a <bufferGetFromFront+0x38>
     352:	26 1b       	sub	r18, r22
     354:	37 0b       	sbc	r19, r23
     356:	37 83       	std	Z+7, r19	; 0x07
     358:	26 83       	std	Z+6, r18	; 0x06
     35a:	41 50       	subi	r20, 0x01	; 1
     35c:	51 09       	sbc	r21, r1
     35e:	55 83       	std	Z+5, r21	; 0x05
     360:	44 83       	std	Z+4, r20	; 0x04
     362:	01 c0       	rjmp	.+2      	; 0x366 <bufferGetFromFront+0x44>
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	9f bf       	out	0x3f, r25	; 63
     368:	08 95       	ret

0000036a <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     36a:	fc 01       	movw	r30, r24
     36c:	36 2f       	mov	r19, r22
	// begin critical section
	CRITICAL_SECTION_START;
     36e:	2f b7       	in	r18, 0x3f	; 63
     370:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     372:	a4 81       	ldd	r26, Z+4	; 0x04
     374:	b5 81       	ldd	r27, Z+5	; 0x05
     376:	62 81       	ldd	r22, Z+2	; 0x02
     378:	73 81       	ldd	r23, Z+3	; 0x03
     37a:	a6 17       	cp	r26, r22
     37c:	b7 07       	cpc	r27, r23
     37e:	90 f4       	brcc	.+36     	; 0x3a4 <bufferAddToEnd+0x3a>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     380:	86 81       	ldd	r24, Z+6	; 0x06
     382:	97 81       	ldd	r25, Z+7	; 0x07
     384:	8a 0f       	add	r24, r26
     386:	9b 1f       	adc	r25, r27
     388:	e5 d6       	rcall	.+3530   	; 0x1154 <__udivmodhi4>
     38a:	a0 81       	ld	r26, Z
     38c:	b1 81       	ldd	r27, Z+1	; 0x01
     38e:	a8 0f       	add	r26, r24
     390:	b9 1f       	adc	r27, r25
     392:	3c 93       	st	X, r19
		// increment the length
		buffer->datalength++;
     394:	84 81       	ldd	r24, Z+4	; 0x04
     396:	95 81       	ldd	r25, Z+5	; 0x05
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	95 83       	std	Z+5, r25	; 0x05
     39c:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     39e:	2f bf       	out	0x3f, r18	; 63
		// return success
		return -1;
     3a0:	8f ef       	ldi	r24, 0xFF	; 255
     3a2:	08 95       	ret
	}
	// end critical section
	CRITICAL_SECTION_END;
     3a4:	2f bf       	out	0x3f, r18	; 63
	// return failure
	return 0;
     3a6:	80 e0       	ldi	r24, 0x00	; 0
}
     3a8:	08 95       	ret

000003aa <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
     3aa:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     3ac:	4f b7       	in	r20, 0x3f	; 63
     3ae:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
     3b0:	82 81       	ldd	r24, Z+2	; 0x02
     3b2:	93 81       	ldd	r25, Z+3	; 0x03
     3b4:	24 81       	ldd	r18, Z+4	; 0x04
     3b6:	35 81       	ldd	r19, Z+5	; 0x05
	// end critical section
	CRITICAL_SECTION_END;
     3b8:	4f bf       	out	0x3f, r20	; 63
	return bytesleft;
}
     3ba:	82 1b       	sub	r24, r18
     3bc:	93 0b       	sbc	r25, r19
     3be:	08 95       	ret

000003c0 <glcdWriteChar>:
	for(idx=0; idx<grLength; idx++)
	{
		// write the line
		glcdDataWrite(pgm_read_byte(FontGr+(grStartIdx+1)+idx));
	}
}
     3c0:	0f 93       	push	r16
     3c2:	1f 93       	push	r17
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	80 97       	sbiw	r24, 0x20	; 32
     3cc:	25 e0       	ldi	r18, 0x05	; 5
     3ce:	28 9f       	mul	r18, r24
     3d0:	80 01       	movw	r16, r0
     3d2:	29 9f       	mul	r18, r25
     3d4:	10 0d       	add	r17, r0
     3d6:	11 24       	eor	r1, r1
     3d8:	c0 e0       	ldi	r28, 0x00	; 0
     3da:	d0 e0       	ldi	r29, 0x00	; 0
     3dc:	fe 01       	movw	r30, r28
     3de:	e0 0f       	add	r30, r16
     3e0:	f1 1f       	adc	r31, r17
     3e2:	e4 58       	subi	r30, 0x84	; 132
     3e4:	ff 4f       	sbci	r31, 0xFF	; 255
     3e6:	84 91       	lpm	r24, Z
     3e8:	02 d1       	rcall	.+516    	; 0x5ee <glcdDataWrite>
     3ea:	21 96       	adiw	r28, 0x01	; 1
     3ec:	c5 30       	cpi	r28, 0x05	; 5
     3ee:	d1 05       	cpc	r29, r1
     3f0:	a9 f7       	brne	.-22     	; 0x3dc <glcdWriteChar+0x1c>
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	fc d0       	rcall	.+504    	; 0x5ee <glcdDataWrite>
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	e0 c0       	rjmp	.+448    	; 0x5c2 <glcdStartLine>

00000402 <glcdPutStr>:

void glcdPutStr(unsigned char *data)
{
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	ec 01       	movw	r28, r24
  while (*data) {
     408:	89 91       	ld	r24, Y+
     40a:	88 23       	and	r24, r24
     40c:	11 f0       	breq	.+4      	; 0x412 <glcdPutStr+0x10>
    glcdWriteChar(*data);
     40e:	d8 df       	rcall	.-80     	; 0x3c0 <glcdWriteChar>
     410:	fb cf       	rjmp	.-10     	; 0x408 <glcdPutStr+0x6>
    data++;
  }
}
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	08 95       	ret

00000418 <outb_lcd_ddr_port.part.1>:
	glcdSetXAddress(x);
}

void glcdGotoChar(u08 line, u08 col)
{
	glcdSetAddress(col*6, line);
     418:	81 b1       	in	r24, 0x01	; 1
     41a:	80 7f       	andi	r24, 0xF0	; 240
     41c:	81 b9       	out	0x01, r24	; 1
     41e:	84 b1       	in	r24, 0x04	; 4
     420:	80 7f       	andi	r24, 0xF0	; 240
     422:	84 b9       	out	0x04, r24	; 4
     424:	08 95       	ret

00000426 <glcdControllerSelect>:
     426:	14 98       	cbi	0x02, 4	; 2
     428:	15 98       	cbi	0x02, 5	; 2
     42a:	15 98       	cbi	0x02, 5	; 2
     42c:	15 98       	cbi	0x02, 5	; 2
     42e:	81 30       	cpi	r24, 0x01	; 1
     430:	41 f0       	breq	.+16     	; 0x442 <glcdControllerSelect+0x1c>
     432:	28 f0       	brcs	.+10     	; 0x43e <glcdControllerSelect+0x18>
     434:	82 30       	cpi	r24, 0x02	; 2
     436:	29 f0       	breq	.+10     	; 0x442 <glcdControllerSelect+0x1c>
     438:	83 30       	cpi	r24, 0x03	; 3
     43a:	19 f0       	breq	.+6      	; 0x442 <glcdControllerSelect+0x1c>
     43c:	08 95       	ret
     43e:	14 9a       	sbi	0x02, 4	; 2
     440:	08 95       	ret
     442:	15 9a       	sbi	0x02, 5	; 2
     444:	08 95       	ret

00000446 <outb_lcd_data_port>:
     446:	82 b1       	in	r24, 0x02	; 2
     448:	80 7f       	andi	r24, 0xF0	; 240
     44a:	82 b9       	out	0x02, r24	; 2
     44c:	82 b1       	in	r24, 0x02	; 2
     44e:	96 2f       	mov	r25, r22
     450:	92 95       	swap	r25
     452:	9f 70       	andi	r25, 0x0F	; 15
     454:	89 2b       	or	r24, r25
     456:	82 b9       	out	0x02, r24	; 2
     458:	6f 70       	andi	r22, 0x0F	; 15
     45a:	94 e0       	ldi	r25, 0x04	; 4
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	26 2f       	mov	r18, r22
     460:	21 70       	andi	r18, 0x01	; 1
     462:	88 0f       	add	r24, r24
     464:	82 2b       	or	r24, r18
     466:	66 95       	lsr	r22
     468:	91 50       	subi	r25, 0x01	; 1
     46a:	c9 f7       	brne	.-14     	; 0x45e <outb_lcd_data_port+0x18>
     46c:	95 b1       	in	r25, 0x05	; 5
     46e:	90 7f       	andi	r25, 0xF0	; 240
     470:	95 b9       	out	0x05, r25	; 5
     472:	95 b1       	in	r25, 0x05	; 5
     474:	89 2b       	or	r24, r25
     476:	85 b9       	out	0x05, r24	; 5
     478:	08 95       	ret

0000047a <outb_lcd_ddr_port>:
     47a:	61 11       	cpse	r22, r1
     47c:	01 c0       	rjmp	.+2      	; 0x480 <outb_lcd_ddr_port+0x6>
     47e:	cc cf       	rjmp	.-104    	; 0x418 <outb_lcd_ddr_port.part.1>
     480:	81 b1       	in	r24, 0x01	; 1
     482:	8f 60       	ori	r24, 0x0F	; 15
     484:	81 b9       	out	0x01, r24	; 1
     486:	84 b1       	in	r24, 0x04	; 4
     488:	8f 60       	ori	r24, 0x0F	; 15
     48a:	84 b9       	out	0x04, r24	; 4
     48c:	08 95       	ret

0000048e <glcdInitHW>:
     48e:	2f 98       	cbi	0x05, 7	; 5
     490:	2e 98       	cbi	0x05, 6	; 5
     492:	2d 98       	cbi	0x05, 5	; 5
     494:	2c 98       	cbi	0x05, 4	; 5
     496:	14 98       	cbi	0x02, 4	; 2
     498:	15 98       	cbi	0x02, 5	; 2
     49a:	15 98       	cbi	0x02, 5	; 2
     49c:	15 98       	cbi	0x02, 5	; 2
     49e:	27 9a       	sbi	0x04, 7	; 4
     4a0:	26 9a       	sbi	0x04, 6	; 4
     4a2:	25 9a       	sbi	0x04, 5	; 4
     4a4:	24 9a       	sbi	0x04, 4	; 4
     4a6:	0c 9a       	sbi	0x01, 4	; 1
     4a8:	0d 9a       	sbi	0x01, 5	; 1
     4aa:	0d 9a       	sbi	0x01, 5	; 1
     4ac:	0d 9a       	sbi	0x01, 5	; 1
     4ae:	88 b1       	in	r24, 0x08	; 8
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	c9 df       	rcall	.-110    	; 0x446 <outb_lcd_data_port>
     4b4:	87 b1       	in	r24, 0x07	; 7
     4b6:	6f ef       	ldi	r22, 0xFF	; 255
     4b8:	e0 cf       	rjmp	.-64     	; 0x47a <outb_lcd_ddr_port>

000004ba <inb_lcd_pin_port>:
     4ba:	20 b1       	in	r18, 0x00	; 0
     4bc:	80 e1       	ldi	r24, 0x10	; 16
     4be:	28 9f       	mul	r18, r24
     4c0:	90 01       	movw	r18, r0
     4c2:	11 24       	eor	r1, r1
     4c4:	43 b1       	in	r20, 0x03	; 3
     4c6:	84 e0       	ldi	r24, 0x04	; 4
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	54 2f       	mov	r21, r20
     4cc:	51 70       	andi	r21, 0x01	; 1
     4ce:	99 0f       	add	r25, r25
     4d0:	95 2b       	or	r25, r21
     4d2:	46 95       	lsr	r20
     4d4:	81 50       	subi	r24, 0x01	; 1
     4d6:	c9 f7       	brne	.-14     	; 0x4ca <inb_lcd_pin_port+0x10>
     4d8:	89 2f       	mov	r24, r25
     4da:	8f 70       	andi	r24, 0x0F	; 15
     4dc:	82 2b       	or	r24, r18
     4de:	08 95       	ret

000004e0 <glcdBusyWait>:
     4e0:	f8 94       	cli
     4e2:	a1 df       	rcall	.-190    	; 0x426 <glcdControllerSelect>
     4e4:	88 b1       	in	r24, 0x08	; 8
     4e6:	6f ef       	ldi	r22, 0xFF	; 255
     4e8:	ae df       	rcall	.-164    	; 0x446 <outb_lcd_data_port>
     4ea:	2f 98       	cbi	0x05, 7	; 5
     4ec:	87 b1       	in	r24, 0x07	; 7
     4ee:	94 df       	rcall	.-216    	; 0x418 <outb_lcd_ddr_port.part.1>
     4f0:	2e 9a       	sbi	0x05, 6	; 5
     4f2:	2d 9a       	sbi	0x05, 5	; 5
     4f4:	00 00       	nop
     4f6:	00 00       	nop
     4f8:	86 b1       	in	r24, 0x06	; 6
     4fa:	df df       	rcall	.-66     	; 0x4ba <inb_lcd_pin_port>
     4fc:	2d 98       	cbi	0x05, 5	; 5
     4fe:	87 ff       	sbrs	r24, 7
     500:	12 c0       	rjmp	.+36     	; 0x526 <glcdBusyWait+0x46>
	...
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	8a 95       	dec	r24
     50e:	f1 f7       	brne	.-4      	; 0x50c <glcdBusyWait+0x2c>
     510:	00 c0       	rjmp	.+0      	; 0x512 <glcdBusyWait+0x32>
     512:	2d 9a       	sbi	0x05, 5	; 5
	...
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	8a 95       	dec	r24
     520:	f1 f7       	brne	.-4      	; 0x51e <glcdBusyWait+0x3e>
     522:	00 c0       	rjmp	.+0      	; 0x524 <glcdBusyWait+0x44>
     524:	e9 cf       	rjmp	.-46     	; 0x4f8 <glcdBusyWait+0x18>
     526:	2e 98       	cbi	0x05, 6	; 5
     528:	87 b1       	in	r24, 0x07	; 7
     52a:	6f ef       	ldi	r22, 0xFF	; 255
     52c:	a6 df       	rcall	.-180    	; 0x47a <outb_lcd_ddr_port>
     52e:	78 94       	sei
     530:	08 95       	ret

00000532 <glcdControlWrite>:
     532:	cf 93       	push	r28
     534:	c6 2f       	mov	r28, r22
     536:	f8 94       	cli
     538:	d3 df       	rcall	.-90     	; 0x4e0 <glcdBusyWait>
     53a:	2f 98       	cbi	0x05, 7	; 5
     53c:	2e 98       	cbi	0x05, 6	; 5
     53e:	2d 9a       	sbi	0x05, 5	; 5
     540:	87 b1       	in	r24, 0x07	; 7
     542:	6f ef       	ldi	r22, 0xFF	; 255
     544:	9a df       	rcall	.-204    	; 0x47a <outb_lcd_ddr_port>
     546:	88 b1       	in	r24, 0x08	; 8
     548:	6c 2f       	mov	r22, r28
     54a:	7d df       	rcall	.-262    	; 0x446 <outb_lcd_data_port>
	...
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	8a 95       	dec	r24
     560:	f1 f7       	brne	.-4      	; 0x55e <glcdControlWrite+0x2c>
     562:	00 c0       	rjmp	.+0      	; 0x564 <glcdControlWrite+0x32>
     564:	2d 98       	cbi	0x05, 5	; 5
     566:	78 94       	sei
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <glcdSetXAddress>:
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	c8 e0       	ldi	r28, 0x08	; 8
     572:	d2 e0       	ldi	r29, 0x02	; 2
     574:	88 83       	st	Y, r24
     576:	60 e4       	ldi	r22, 0x40	; 64
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	db df       	rcall	.-74     	; 0x532 <glcdControlWrite>
     57c:	1a 82       	std	Y+2, r1	; 0x02
     57e:	60 e4       	ldi	r22, 0x40	; 64
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	d7 df       	rcall	.-82     	; 0x532 <glcdControlWrite>
     584:	1c 82       	std	Y+4, r1	; 0x04
     586:	88 81       	ld	r24, Y
     588:	68 2f       	mov	r22, r24
     58a:	6f 73       	andi	r22, 0x3F	; 63
     58c:	60 64       	ori	r22, 0x40	; 64
     58e:	82 95       	swap	r24
     590:	86 95       	lsr	r24
     592:	86 95       	lsr	r24
     594:	83 70       	andi	r24, 0x03	; 3
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	cb cf       	rjmp	.-106    	; 0x532 <glcdControlWrite>

0000059c <glcdSetYAddress>:
     59c:	cf 93       	push	r28
     59e:	80 93 09 02 	sts	0x0209, r24
     5a2:	c8 2f       	mov	r28, r24
     5a4:	c8 6b       	ori	r28, 0xB8	; 184
     5a6:	6c 2f       	mov	r22, r28
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	c3 df       	rcall	.-122    	; 0x532 <glcdControlWrite>
     5ac:	6c 2f       	mov	r22, r28
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	cf 91       	pop	r28
     5b2:	bf cf       	rjmp	.-130    	; 0x532 <glcdControlWrite>

000005b4 <glcdSetAddress>:
     5b4:	cf 93       	push	r28
     5b6:	c8 2f       	mov	r28, r24
     5b8:	86 2f       	mov	r24, r22
     5ba:	f0 df       	rcall	.-32     	; 0x59c <glcdSetYAddress>
     5bc:	8c 2f       	mov	r24, r28
     5be:	cf 91       	pop	r28
     5c0:	d5 cf       	rjmp	.-86     	; 0x56c <glcdSetXAddress>

000005c2 <glcdStartLine>:
		}
	}
}

void glcdStartLine(u08 start)
{
     5c2:	cf 93       	push	r28
	glcdControlWrite(0, GLCD_START_LINE | start);
     5c4:	c8 2f       	mov	r28, r24
     5c6:	c0 6c       	ori	r28, 0xC0	; 192
     5c8:	6c 2f       	mov	r22, r28
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	b2 df       	rcall	.-156    	; 0x532 <glcdControlWrite>
	glcdControlWrite(1, GLCD_START_LINE | start);
     5ce:	6c 2f       	mov	r22, r28
     5d0:	81 e0       	ldi	r24, 0x01	; 1
}
     5d2:	cf 91       	pop	r28
}

void glcdStartLine(u08 start)
{
	glcdControlWrite(0, GLCD_START_LINE | start);
	glcdControlWrite(1, GLCD_START_LINE | start);
     5d4:	ae cf       	rjmp	.-164    	; 0x532 <glcdControlWrite>

000005d6 <glcdHome>:

void glcdHome(void)
{
	u08 i;
	// initialize addresses/positions
	glcdStartLine(0);
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	f4 df       	rcall	.-24     	; 0x5c2 <glcdStartLine>
	glcdSetAddress(0,0);
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	ea df       	rcall	.-44     	; 0x5b4 <glcdSetAddress>
	// initialize local data structures
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		GrLcdState.ctrlr[i].xAddr = 0;
     5e0:	e8 e0       	ldi	r30, 0x08	; 8
     5e2:	f2 e0       	ldi	r31, 0x02	; 2
     5e4:	12 82       	std	Z+2, r1	; 0x02
		GrLcdState.ctrlr[i].yAddr = 0;
     5e6:	13 82       	std	Z+3, r1	; 0x03
	glcdStartLine(0);
	glcdSetAddress(0,0);
	// initialize local data structures
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		GrLcdState.ctrlr[i].xAddr = 0;
     5e8:	14 82       	std	Z+4, r1	; 0x04
		GrLcdState.ctrlr[i].yAddr = 0;
     5ea:	15 82       	std	Z+5, r1	; 0x05
     5ec:	08 95       	ret

000005ee <glcdDataWrite>:
#endif
	return data;
}

void glcdDataWrite(u08 data)
{
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	d8 2f       	mov	r29, r24
	register u08 controller = (GrLcdState.lcdXAddr/GLCD_CONTROLLER_XPIXELS);
     5f4:	e0 91 08 02 	lds	r30, 0x0208
     5f8:	ce 2f       	mov	r28, r30
     5fa:	c2 95       	swap	r28
     5fc:	c6 95       	lsr	r28
     5fe:	c6 95       	lsr	r28
     600:	c3 70       	andi	r28, 0x03	; 3
#ifdef GLCD_PORT_INTERFACE
	cli();
     602:	f8 94       	cli
	glcdBusyWait(controller);		// wait until LCD not busy
     604:	8c 2f       	mov	r24, r28
     606:	6c df       	rcall	.-296    	; 0x4e0 <glcdBusyWait>
	sbi(GLCD_CTRL_PORT, GLCD_CTRL_RS);
     608:	2f 9a       	sbi	0x05, 7	; 5
	cbi(GLCD_CTRL_PORT, GLCD_CTRL_RW);
     60a:	2e 98       	cbi	0x05, 6	; 5
	sbi(GLCD_CTRL_PORT, GLCD_CTRL_E);
     60c:	2d 9a       	sbi	0x05, 5	; 5
	outb_lcd_ddr_port(GLCD_DATA_DDR, 0xFF);
     60e:	87 b1       	in	r24, 0x07	; 7
     610:	6f ef       	ldi	r22, 0xFF	; 255
     612:	33 df       	rcall	.-410    	; 0x47a <outb_lcd_ddr_port>
	outb_lcd_data_port(GLCD_DATA_PORT, data);
     614:	88 b1       	in	r24, 0x08	; 8
     616:	6d 2f       	mov	r22, r29
     618:	16 df       	rcall	.-468    	; 0x446 <outb_lcd_data_port>
	...
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     62a:	82 e0       	ldi	r24, 0x02	; 2
     62c:	8a 95       	dec	r24
     62e:	f1 f7       	brne	.-4      	; 0x62c <glcdDataWrite+0x3e>
     630:	00 c0       	rjmp	.+0      	; 0x632 <glcdDataWrite+0x44>
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	_delay_us(1);
	cbi(GLCD_CTRL_PORT, GLCD_CTRL_E);
     632:	2d 98       	cbi	0x05, 5	; 5
	sei();
     634:	78 94       	sei
	glcdBusyWait(controller);		// wait until LCD not busy
	*(volatile unsigned char *) (GLCD_CONTROLLER0_CTRL_ADDR + GLCD_CONTROLLER_ADDR_OFFSET*controller) = data;
	//cbi(MCUCR, SRW);				// disable RAM waitstate
#endif
	// increment our local address counter
	GrLcdState.ctrlr[controller].xAddr++;
     636:	ec 2f       	mov	r30, r28
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	ee 0f       	add	r30, r30
     63c:	ff 1f       	adc	r31, r31
     63e:	e6 5f       	subi	r30, 0xF6	; 246
     640:	fd 4f       	sbci	r31, 0xFD	; 253
     642:	80 81       	ld	r24, Z
     644:	8f 5f       	subi	r24, 0xFF	; 255
     646:	80 83       	st	Z, r24
	GrLcdState.lcdXAddr++;
     648:	80 91 08 02 	lds	r24, 0x0208
     64c:	8f 5f       	subi	r24, 0xFF	; 255
     64e:	80 93 08 02 	sts	0x0208, r24
	if(GrLcdState.lcdXAddr >= GLCD_XPIXELS)
     652:	87 ff       	sbrs	r24, 7
     654:	0a c0       	rjmp	.+20     	; 0x66a <glcdDataWrite+0x7c>
	{
		GrLcdState.lcdYAddr++;
     656:	80 91 09 02 	lds	r24, 0x0209
     65a:	8f 5f       	subi	r24, 0xFF	; 255
     65c:	80 93 09 02 	sts	0x0209, r24
		glcdSetYAddress(GrLcdState.lcdYAddr);
     660:	9d df       	rcall	.-198    	; 0x59c <glcdSetYAddress>
		glcdSetXAddress(0);
     662:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
	GrLcdState.lcdXAddr++;
	if(GrLcdState.lcdXAddr >= GLCD_XPIXELS)
	{
		GrLcdState.lcdYAddr++;
		glcdSetYAddress(GrLcdState.lcdYAddr);
		glcdSetXAddress(0);
     668:	81 cf       	rjmp	.-254    	; 0x56c <glcdSetXAddress>
	}
}
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <glcdClearScreen>:
		GrLcdState.ctrlr[i].yAddr = 0;
	}
}

void glcdClearScreen(void)
{
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
	u08 pageAddr;
	u08 xAddr;

	// clear LCD
	// loop through all pages
	for(pageAddr=0; pageAddr<(GLCD_YPIXELS>>3); pageAddr++)
     674:	c0 e0       	ldi	r28, 0x00	; 0
	{
		// set page address
		glcdSetAddress(0, pageAddr);
     676:	6c 2f       	mov	r22, r28
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	9c df       	rcall	.-200    	; 0x5b4 <glcdSetAddress>
		// clear all lines of this page of display memory
		for(xAddr=0; xAddr<GLCD_XPIXELS; xAddr++)
     67c:	d0 e0       	ldi	r29, 0x00	; 0
		{
			glcdDataWrite(0x00);
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	b6 df       	rcall	.-148    	; 0x5ee <glcdDataWrite>
	for(pageAddr=0; pageAddr<(GLCD_YPIXELS>>3); pageAddr++)
	{
		// set page address
		glcdSetAddress(0, pageAddr);
		// clear all lines of this page of display memory
		for(xAddr=0; xAddr<GLCD_XPIXELS; xAddr++)
     682:	df 5f       	subi	r29, 0xFF	; 255
     684:	d0 38       	cpi	r29, 0x80	; 128
     686:	d9 f7       	brne	.-10     	; 0x67e <glcdClearScreen+0xe>
	u08 pageAddr;
	u08 xAddr;

	// clear LCD
	// loop through all pages
	for(pageAddr=0; pageAddr<(GLCD_YPIXELS>>3); pageAddr++)
     688:	cf 5f       	subi	r28, 0xFF	; 255
     68a:	c8 30       	cpi	r28, 0x08	; 8
     68c:	a1 f7       	brne	.-24     	; 0x676 <glcdClearScreen+0x6>
		for(xAddr=0; xAddr<GLCD_XPIXELS; xAddr++)
		{
			glcdDataWrite(0x00);
		}
	}
}
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <glcdInit>:

void glcdInit()
{
	u08 i;
	// initialize hardware
	glcdInitHW();
     694:	fc de       	rcall	.-520    	; 0x48e <glcdInitHW>
	// bring lcd out of reset
	//glcdReset(FALSE);
	// Turn on LCD
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		glcdControlWrite(i, GLCD_ON_CTRL | GLCD_ON_DISPLAY);
     696:	6f e3       	ldi	r22, 0x3F	; 63
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	4b df       	rcall	.-362    	; 0x532 <glcdControlWrite>
     69c:	6f e3       	ldi	r22, 0x3F	; 63
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	48 df       	rcall	.-368    	; 0x532 <glcdControlWrite>
	}
	// clear lcd
	glcdClearScreen();
     6a2:	e6 df       	rcall	.-52     	; 0x670 <glcdClearScreen>
	// initialize positions
	glcdHome();
     6a4:	98 cf       	rjmp	.-208    	; 0x5d6 <glcdHome>

000006a6 <rprintfInit>:
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
	}
}
     6a6:	90 93 77 01 	sts	0x0177, r25
     6aa:	80 93 76 01 	sts	0x0176, r24
     6ae:	08 95       	ret

000006b0 <rprintfChar>:
     6b0:	cf 93       	push	r28
     6b2:	c8 2f       	mov	r28, r24
     6b4:	8a 30       	cpi	r24, 0x0A	; 10
     6b6:	31 f4       	brne	.+12     	; 0x6c4 <rprintfChar+0x14>
     6b8:	e0 91 76 01 	lds	r30, 0x0176
     6bc:	f0 91 77 01 	lds	r31, 0x0177
     6c0:	8d e0       	ldi	r24, 0x0D	; 13
     6c2:	09 95       	icall
     6c4:	e0 91 76 01 	lds	r30, 0x0176
     6c8:	f0 91 77 01 	lds	r31, 0x0177
     6cc:	8c 2f       	mov	r24, r28
     6ce:	cf 91       	pop	r28
     6d0:	09 94       	ijmp

000006d2 <rprintfu04>:
     6d2:	8f 70       	andi	r24, 0x0F	; 15
     6d4:	e8 2f       	mov	r30, r24
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	e4 5a       	subi	r30, 0xA4	; 164
     6da:	fd 4f       	sbci	r31, 0xFD	; 253
     6dc:	84 91       	lpm	r24, Z
     6de:	e8 cf       	rjmp	.-48     	; 0x6b0 <rprintfChar>

000006e0 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
     6e0:	5f 92       	push	r5
     6e2:	6f 92       	push	r6
     6e4:	7f 92       	push	r7
     6e6:	8f 92       	push	r8
     6e8:	9f 92       	push	r9
     6ea:	af 92       	push	r10
     6ec:	bf 92       	push	r11
     6ee:	cf 92       	push	r12
     6f0:	df 92       	push	r13
     6f2:	ef 92       	push	r14
     6f4:	ff 92       	push	r15
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	1f 92       	push	r1
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62
     704:	ec 89       	ldd	r30, Y+20	; 0x14
     706:	fd 89       	ldd	r31, Y+21	; 0x15
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
     708:	3e 01       	movw	r6, r28
     70a:	26 e1       	ldi	r18, 0x16	; 22
     70c:	62 0e       	add	r6, r18
     70e:	71 1c       	adc	r7, r1
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
					rprintfChar('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     710:	3a e0       	ldi	r19, 0x0A	; 10
     712:	a3 2e       	mov	r10, r19
     714:	b1 2c       	mov	r11, r1
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     716:	3b 89       	ldd	r19, Y+19	; 0x13
     718:	33 23       	and	r19, r19
     71a:	79 f0       	breq	.+30     	; 0x73a <rprintf1RamRom+0x5a>
     71c:	8f 01       	movw	r16, r30
     71e:	0f 5f       	subi	r16, 0xFF	; 255
     720:	1f 4f       	sbci	r17, 0xFF	; 255
     722:	84 91       	lpm	r24, Z
     724:	85 32       	cpi	r24, 0x25	; 37
     726:	81 f0       	breq	.+32     	; 0x748 <rprintf1RamRom+0x68>
		{	// Until '%' or '\0'
			if (!format_flag)
     728:	88 23       	and	r24, r24
     72a:	09 f4       	brne	.+2      	; 0x72e <rprintf1RamRom+0x4e>
     72c:	5f c0       	rjmp	.+190    	; 0x7ec <rprintf1RamRom+0x10c>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
     72e:	c0 df       	rcall	.-128    	; 0x6b0 <rprintfChar>
     730:	63 01       	movw	r12, r6
     732:	78 01       	movw	r14, r16
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
     734:	36 01       	movw	r6, r12
     736:	f7 01       	movw	r30, r14
     738:	ee cf       	rjmp	.-36     	; 0x716 <rprintf1RamRom+0x36>
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     73a:	80 81       	ld	r24, Z
     73c:	85 32       	cpi	r24, 0x25	; 37
     73e:	59 f0       	breq	.+22     	; 0x756 <rprintf1RamRom+0x76>
     740:	8f 01       	movw	r16, r30
     742:	0f 5f       	subi	r16, 0xFF	; 255
     744:	1f 4f       	sbci	r17, 0xFF	; 255
     746:	f0 cf       	rjmp	.-32     	; 0x728 <rprintf1RamRom+0x48>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
     748:	7f 01       	movw	r14, r30
     74a:	82 e0       	ldi	r24, 0x02	; 2
     74c:	e8 0e       	add	r14, r24
     74e:	f1 1c       	adc	r15, r1
     750:	f8 01       	movw	r30, r16
     752:	84 91       	lpm	r24, Z
     754:	05 c0       	rjmp	.+10     	; 0x760 <rprintf1RamRom+0x80>
     756:	7f 01       	movw	r14, r30
     758:	22 e0       	ldi	r18, 0x02	; 2
     75a:	e2 0e       	add	r14, r18
     75c:	f1 1c       	adc	r15, r1
     75e:	81 81       	ldd	r24, Z+1	; 0x01
     760:	84 36       	cpi	r24, 0x64	; 100
     762:	99 f0       	breq	.+38     	; 0x78a <rprintf1RamRom+0xaa>
     764:	88 37       	cpi	r24, 0x78	; 120
     766:	59 f0       	breq	.+22     	; 0x77e <rprintf1RamRom+0x9e>
     768:	83 36       	cpi	r24, 0x63	; 99
     76a:	31 f4       	brne	.+12     	; 0x778 <rprintf1RamRom+0x98>
		{
			case 'c': format_flag = va_arg(ap,int);
     76c:	f3 01       	movw	r30, r6
     76e:	80 81       	ld	r24, Z
     770:	93 01       	movw	r18, r6
     772:	2e 5f       	subi	r18, 0xFE	; 254
     774:	3f 4f       	sbci	r19, 0xFF	; 255
     776:	39 01       	movw	r6, r18
			default:  rprintfChar(format_flag); continue;
     778:	9b df       	rcall	.-202    	; 0x6b0 <rprintfChar>
     77a:	63 01       	movw	r12, r6
     77c:	db cf       	rjmp	.-74     	; 0x734 <rprintf1RamRom+0x54>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
     77e:	20 e1       	ldi	r18, 0x10	; 16
     780:	82 2e       	mov	r8, r18
     782:	91 2c       	mov	r9, r1
     784:	00 e0       	ldi	r16, 0x00	; 0
     786:	10 e1       	ldi	r17, 0x10	; 16
     788:	05 c0       	rjmp	.+10     	; 0x794 <rprintf1RamRom+0xb4>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
     78a:	9a e0       	ldi	r25, 0x0A	; 10
     78c:	89 2e       	mov	r8, r25
     78e:	91 2c       	mov	r9, r1
     790:	00 e1       	ldi	r16, 0x10	; 16
     792:	17 e2       	ldi	r17, 0x27	; 39
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
     794:	63 01       	movw	r12, r6
     796:	32 e0       	ldi	r19, 0x02	; 2
     798:	c3 0e       	add	r12, r19
     79a:	d1 1c       	adc	r13, r1
     79c:	f3 01       	movw	r30, r6
     79e:	60 80       	ld	r6, Z
     7a0:	71 80       	ldd	r7, Z+1	; 0x01
			if (format_flag == 'd')
     7a2:	84 36       	cpi	r24, 0x64	; 100
     7a4:	91 f4       	brne	.+36     	; 0x7ca <rprintf1RamRom+0xea>
			{
				if (((int)u_val) < 0)
     7a6:	77 fe       	sbrs	r7, 7
     7a8:	0d c0       	rjmp	.+26     	; 0x7c4 <rprintf1RamRom+0xe4>
				{
					u_val = - u_val;
     7aa:	71 94       	neg	r7
     7ac:	61 94       	neg	r6
     7ae:	71 08       	sbc	r7, r1
					rprintfChar('-');
     7b0:	8d e2       	ldi	r24, 0x2D	; 45
     7b2:	7e df       	rcall	.-260    	; 0x6b0 <rprintfChar>
     7b4:	07 c0       	rjmp	.+14     	; 0x7c4 <rprintf1RamRom+0xe4>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     7b6:	c8 01       	movw	r24, r16
     7b8:	b5 01       	movw	r22, r10
     7ba:	cc d4       	rcall	.+2456   	; 0x1154 <__udivmodhi4>
     7bc:	8b 01       	movw	r16, r22
     7be:	62 30       	cpi	r22, 0x02	; 2
     7c0:	71 05       	cpc	r23, r1
     7c2:	18 f0       	brcs	.+6      	; 0x7ca <rprintf1RamRom+0xea>
     7c4:	60 16       	cp	r6, r16
     7c6:	71 06       	cpc	r7, r17
     7c8:	b0 f3       	brcs	.-20     	; 0x7b6 <rprintf1RamRom+0xd6>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
     7ca:	c3 01       	movw	r24, r6
     7cc:	b8 01       	movw	r22, r16
     7ce:	c2 d4       	rcall	.+2436   	; 0x1154 <__udivmodhi4>
     7d0:	58 2e       	mov	r5, r24
     7d2:	86 2f       	mov	r24, r22
     7d4:	99 83       	std	Y+1, r25	; 0x01
     7d6:	7d df       	rcall	.-262    	; 0x6d2 <rprintfu04>
				u_val %= div_val;
     7d8:	65 2c       	mov	r6, r5
     7da:	99 81       	ldd	r25, Y+1	; 0x01
     7dc:	79 2e       	mov	r7, r25
				div_val /= base;
     7de:	c8 01       	movw	r24, r16
     7e0:	b4 01       	movw	r22, r8
     7e2:	b8 d4       	rcall	.+2416   	; 0x1154 <__udivmodhi4>
     7e4:	8b 01       	movw	r16, r22
			} while (div_val);
     7e6:	67 2b       	or	r22, r23
     7e8:	81 f7       	brne	.-32     	; 0x7ca <rprintf1RamRom+0xea>
     7ea:	a4 cf       	rjmp	.-184    	; 0x734 <rprintf1RamRom+0x54>
		}
	}
	va_end(ap);
}
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0f 90       	pop	r0
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	df 90       	pop	r13
     800:	cf 90       	pop	r12
     802:	bf 90       	pop	r11
     804:	af 90       	pop	r10
     806:	9f 90       	pop	r9
     808:	8f 90       	pop	r8
     80a:	7f 90       	pop	r7
     80c:	6f 90       	pop	r6
     80e:	5f 90       	pop	r5
     810:	08 95       	ret

00000812 <__vector_18>:
	OCR1B = pwmDuty;
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
     812:	1f 92       	push	r1
     814:	0f 92       	push	r0
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	0f 92       	push	r0
     81a:	11 24       	eor	r1, r1
     81c:	2f 93       	push	r18
     81e:	3f 93       	push	r19
     820:	4f 93       	push	r20
     822:	5f 93       	push	r21
     824:	6f 93       	push	r22
     826:	7f 93       	push	r23
     828:	8f 93       	push	r24
     82a:	9f 93       	push	r25
     82c:	af 93       	push	r26
     82e:	bf 93       	push	r27
     830:	ef 93       	push	r30
     832:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
     834:	80 91 0e 02 	lds	r24, 0x020E
     838:	90 91 0f 02 	lds	r25, 0x020F
     83c:	a0 91 10 02 	lds	r26, 0x0210
     840:	b0 91 11 02 	lds	r27, 0x0211
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	a1 1d       	adc	r26, r1
     848:	b1 1d       	adc	r27, r1
     84a:	80 93 0e 02 	sts	0x020E, r24
     84e:	90 93 0f 02 	sts	0x020F, r25
     852:	a0 93 10 02 	sts	0x0210, r26
     856:	b0 93 11 02 	sts	0x0211, r27

	// increment pause counter
	TimerPauseReg++;
     85a:	80 91 12 02 	lds	r24, 0x0212
     85e:	90 91 13 02 	lds	r25, 0x0213
     862:	a0 91 14 02 	lds	r26, 0x0214
     866:	b0 91 15 02 	lds	r27, 0x0215
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	a1 1d       	adc	r26, r1
     86e:	b1 1d       	adc	r27, r1
     870:	80 93 12 02 	sts	0x0212, r24
     874:	90 93 13 02 	sts	0x0213, r25
     878:	a0 93 14 02 	sts	0x0214, r26
     87c:	b0 93 15 02 	sts	0x0215, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
     880:	80 91 78 01 	lds	r24, 0x0178
     884:	90 91 79 01 	lds	r25, 0x0179
     888:	89 2b       	or	r24, r25
     88a:	29 f0       	breq	.+10     	; 0x896 <__vector_18+0x84>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
     88c:	e0 91 78 01 	lds	r30, 0x0178
     890:	f0 91 79 01 	lds	r31, 0x0179
     894:	09 95       	icall
}
     896:	ff 91       	pop	r31
     898:	ef 91       	pop	r30
     89a:	bf 91       	pop	r27
     89c:	af 91       	pop	r26
     89e:	9f 91       	pop	r25
     8a0:	8f 91       	pop	r24
     8a2:	7f 91       	pop	r23
     8a4:	6f 91       	pop	r22
     8a6:	5f 91       	pop	r21
     8a8:	4f 91       	pop	r20
     8aa:	3f 91       	pop	r19
     8ac:	2f 91       	pop	r18
     8ae:	0f 90       	pop	r0
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	0f 90       	pop	r0
     8b4:	1f 90       	pop	r1
     8b6:	18 95       	reti

000008b8 <__vector_15>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
     8b8:	1f 92       	push	r1
     8ba:	0f 92       	push	r0
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	0f 92       	push	r0
     8c0:	11 24       	eor	r1, r1
     8c2:	2f 93       	push	r18
     8c4:	3f 93       	push	r19
     8c6:	4f 93       	push	r20
     8c8:	5f 93       	push	r21
     8ca:	6f 93       	push	r22
     8cc:	7f 93       	push	r23
     8ce:	8f 93       	push	r24
     8d0:	9f 93       	push	r25
     8d2:	af 93       	push	r26
     8d4:	bf 93       	push	r27
     8d6:	ef 93       	push	r30
     8d8:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
     8da:	80 91 7a 01 	lds	r24, 0x017A
     8de:	90 91 7b 01 	lds	r25, 0x017B
     8e2:	89 2b       	or	r24, r25
     8e4:	29 f0       	breq	.+10     	; 0x8f0 <__vector_15+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
     8e6:	e0 91 7a 01 	lds	r30, 0x017A
     8ea:	f0 91 7b 01 	lds	r31, 0x017B
     8ee:	09 95       	icall
}
     8f0:	ff 91       	pop	r31
     8f2:	ef 91       	pop	r30
     8f4:	bf 91       	pop	r27
     8f6:	af 91       	pop	r26
     8f8:	9f 91       	pop	r25
     8fa:	8f 91       	pop	r24
     8fc:	7f 91       	pop	r23
     8fe:	6f 91       	pop	r22
     900:	5f 91       	pop	r21
     902:	4f 91       	pop	r20
     904:	3f 91       	pop	r19
     906:	2f 91       	pop	r18
     908:	0f 90       	pop	r0
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	0f 90       	pop	r0
     90e:	1f 90       	pop	r1
     910:	18 95       	reti

00000912 <__vector_11>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
     912:	1f 92       	push	r1
     914:	0f 92       	push	r0
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	0f 92       	push	r0
     91a:	11 24       	eor	r1, r1
     91c:	2f 93       	push	r18
     91e:	3f 93       	push	r19
     920:	4f 93       	push	r20
     922:	5f 93       	push	r21
     924:	6f 93       	push	r22
     926:	7f 93       	push	r23
     928:	8f 93       	push	r24
     92a:	9f 93       	push	r25
     92c:	af 93       	push	r26
     92e:	bf 93       	push	r27
     930:	ef 93       	push	r30
     932:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
     934:	80 91 16 02 	lds	r24, 0x0216
     938:	90 91 17 02 	lds	r25, 0x0217
     93c:	a0 91 18 02 	lds	r26, 0x0218
     940:	b0 91 19 02 	lds	r27, 0x0219
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	a1 1d       	adc	r26, r1
     948:	b1 1d       	adc	r27, r1
     94a:	80 93 16 02 	sts	0x0216, r24
     94e:	90 93 17 02 	sts	0x0217, r25
     952:	a0 93 18 02 	sts	0x0218, r26
     956:	b0 93 19 02 	sts	0x0219, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
     95a:	80 91 82 01 	lds	r24, 0x0182
     95e:	90 91 83 01 	lds	r25, 0x0183
     962:	89 2b       	or	r24, r25
     964:	29 f0       	breq	.+10     	; 0x970 <__vector_11+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
     966:	e0 91 82 01 	lds	r30, 0x0182
     96a:	f0 91 83 01 	lds	r31, 0x0183
     96e:	09 95       	icall
}
     970:	ff 91       	pop	r31
     972:	ef 91       	pop	r30
     974:	bf 91       	pop	r27
     976:	af 91       	pop	r26
     978:	9f 91       	pop	r25
     97a:	8f 91       	pop	r24
     97c:	7f 91       	pop	r23
     97e:	6f 91       	pop	r22
     980:	5f 91       	pop	r21
     982:	4f 91       	pop	r20
     984:	3f 91       	pop	r19
     986:	2f 91       	pop	r18
     988:	0f 90       	pop	r0
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	0f 90       	pop	r0
     98e:	1f 90       	pop	r1
     990:	18 95       	reti

00000992 <__vector_13>:
}
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
     992:	1f 92       	push	r1
     994:	0f 92       	push	r0
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	0f 92       	push	r0
     99a:	11 24       	eor	r1, r1
     99c:	2f 93       	push	r18
     99e:	3f 93       	push	r19
     9a0:	4f 93       	push	r20
     9a2:	5f 93       	push	r21
     9a4:	6f 93       	push	r22
     9a6:	7f 93       	push	r23
     9a8:	8f 93       	push	r24
     9aa:	9f 93       	push	r25
     9ac:	af 93       	push	r26
     9ae:	bf 93       	push	r27
     9b0:	ef 93       	push	r30
     9b2:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
     9b4:	80 91 7c 01 	lds	r24, 0x017C
     9b8:	90 91 7d 01 	lds	r25, 0x017D
     9bc:	89 2b       	or	r24, r25
     9be:	29 f0       	breq	.+10     	; 0x9ca <__vector_13+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
     9c0:	e0 91 7c 01 	lds	r30, 0x017C
     9c4:	f0 91 7d 01 	lds	r31, 0x017D
     9c8:	09 95       	icall
}
     9ca:	ff 91       	pop	r31
     9cc:	ef 91       	pop	r30
     9ce:	bf 91       	pop	r27
     9d0:	af 91       	pop	r26
     9d2:	9f 91       	pop	r25
     9d4:	8f 91       	pop	r24
     9d6:	7f 91       	pop	r23
     9d8:	6f 91       	pop	r22
     9da:	5f 91       	pop	r21
     9dc:	4f 91       	pop	r20
     9de:	3f 91       	pop	r19
     9e0:	2f 91       	pop	r18
     9e2:	0f 90       	pop	r0
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	0f 90       	pop	r0
     9e8:	1f 90       	pop	r1
     9ea:	18 95       	reti

000009ec <__vector_14>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
     9ec:	1f 92       	push	r1
     9ee:	0f 92       	push	r0
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	0f 92       	push	r0
     9f4:	11 24       	eor	r1, r1
     9f6:	2f 93       	push	r18
     9f8:	3f 93       	push	r19
     9fa:	4f 93       	push	r20
     9fc:	5f 93       	push	r21
     9fe:	6f 93       	push	r22
     a00:	7f 93       	push	r23
     a02:	8f 93       	push	r24
     a04:	9f 93       	push	r25
     a06:	af 93       	push	r26
     a08:	bf 93       	push	r27
     a0a:	ef 93       	push	r30
     a0c:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
     a0e:	80 91 7e 01 	lds	r24, 0x017E
     a12:	90 91 7f 01 	lds	r25, 0x017F
     a16:	89 2b       	or	r24, r25
     a18:	29 f0       	breq	.+10     	; 0xa24 <__vector_14+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
     a1a:	e0 91 7e 01 	lds	r30, 0x017E
     a1e:	f0 91 7f 01 	lds	r31, 0x017F
     a22:	09 95       	icall
}
     a24:	ff 91       	pop	r31
     a26:	ef 91       	pop	r30
     a28:	bf 91       	pop	r27
     a2a:	af 91       	pop	r26
     a2c:	9f 91       	pop	r25
     a2e:	8f 91       	pop	r24
     a30:	7f 91       	pop	r23
     a32:	6f 91       	pop	r22
     a34:	5f 91       	pop	r21
     a36:	4f 91       	pop	r20
     a38:	3f 91       	pop	r19
     a3a:	2f 91       	pop	r18
     a3c:	0f 90       	pop	r0
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	0f 90       	pop	r0
     a42:	1f 90       	pop	r1
     a44:	18 95       	reti

00000a46 <__vector_12>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
     a46:	1f 92       	push	r1
     a48:	0f 92       	push	r0
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	0f 92       	push	r0
     a4e:	11 24       	eor	r1, r1
     a50:	2f 93       	push	r18
     a52:	3f 93       	push	r19
     a54:	4f 93       	push	r20
     a56:	5f 93       	push	r21
     a58:	6f 93       	push	r22
     a5a:	7f 93       	push	r23
     a5c:	8f 93       	push	r24
     a5e:	9f 93       	push	r25
     a60:	af 93       	push	r26
     a62:	bf 93       	push	r27
     a64:	ef 93       	push	r30
     a66:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
     a68:	80 91 80 01 	lds	r24, 0x0180
     a6c:	90 91 81 01 	lds	r25, 0x0181
     a70:	89 2b       	or	r24, r25
     a72:	29 f0       	breq	.+10     	; 0xa7e <__vector_12+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
     a74:	e0 91 80 01 	lds	r30, 0x0180
     a78:	f0 91 81 01 	lds	r31, 0x0181
     a7c:	09 95       	icall
}
     a7e:	ff 91       	pop	r31
     a80:	ef 91       	pop	r30
     a82:	bf 91       	pop	r27
     a84:	af 91       	pop	r26
     a86:	9f 91       	pop	r25
     a88:	8f 91       	pop	r24
     a8a:	7f 91       	pop	r23
     a8c:	6f 91       	pop	r22
     a8e:	5f 91       	pop	r21
     a90:	4f 91       	pop	r20
     a92:	3f 91       	pop	r19
     a94:	2f 91       	pop	r18
     a96:	0f 90       	pop	r0
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	0f 90       	pop	r0
     a9c:	1f 90       	pop	r1
     a9e:	18 95       	reti

00000aa0 <__vector_9>:

//! Interrupt handler for OutputCompare2A match (OC2A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMPA_vect)
{
     aa0:	1f 92       	push	r1
     aa2:	0f 92       	push	r0
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	0f 92       	push	r0
     aa8:	11 24       	eor	r1, r1
     aaa:	2f 93       	push	r18
     aac:	3f 93       	push	r19
     aae:	4f 93       	push	r20
     ab0:	5f 93       	push	r21
     ab2:	6f 93       	push	r22
     ab4:	7f 93       	push	r23
     ab6:	8f 93       	push	r24
     ab8:	9f 93       	push	r25
     aba:	af 93       	push	r26
     abc:	bf 93       	push	r27
     abe:	ef 93       	push	r30
     ac0:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     ac2:	80 91 84 01 	lds	r24, 0x0184
     ac6:	90 91 85 01 	lds	r25, 0x0185
     aca:	89 2b       	or	r24, r25
     acc:	29 f0       	breq	.+10     	; 0xad8 <__vector_9+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     ace:	e0 91 84 01 	lds	r30, 0x0184
     ad2:	f0 91 85 01 	lds	r31, 0x0185
     ad6:	09 95       	icall
}
     ad8:	ff 91       	pop	r31
     ada:	ef 91       	pop	r30
     adc:	bf 91       	pop	r27
     ade:	af 91       	pop	r26
     ae0:	9f 91       	pop	r25
     ae2:	8f 91       	pop	r24
     ae4:	7f 91       	pop	r23
     ae6:	6f 91       	pop	r22
     ae8:	5f 91       	pop	r21
     aea:	4f 91       	pop	r20
     aec:	3f 91       	pop	r19
     aee:	2f 91       	pop	r18
     af0:	0f 90       	pop	r0
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	0f 90       	pop	r0
     af6:	1f 90       	pop	r1
     af8:	18 95       	reti

00000afa <__vector_10>:

//! Interrupt handler for OutputCompare2B match (OC2B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMPB_vect)
{
     afa:	1f 92       	push	r1
     afc:	0f 92       	push	r0
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	0f 92       	push	r0
     b02:	11 24       	eor	r1, r1
     b04:	2f 93       	push	r18
     b06:	3f 93       	push	r19
     b08:	4f 93       	push	r20
     b0a:	5f 93       	push	r21
     b0c:	6f 93       	push	r22
     b0e:	7f 93       	push	r23
     b10:	8f 93       	push	r24
     b12:	9f 93       	push	r25
     b14:	af 93       	push	r26
     b16:	bf 93       	push	r27
     b18:	ef 93       	push	r30
     b1a:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     b1c:	80 91 84 01 	lds	r24, 0x0184
     b20:	90 91 85 01 	lds	r25, 0x0185
     b24:	89 2b       	or	r24, r25
     b26:	29 f0       	breq	.+10     	; 0xb32 <__vector_10+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     b28:	e0 91 84 01 	lds	r30, 0x0184
     b2c:	f0 91 85 01 	lds	r31, 0x0185
     b30:	09 95       	icall
}
     b32:	ff 91       	pop	r31
     b34:	ef 91       	pop	r30
     b36:	bf 91       	pop	r27
     b38:	af 91       	pop	r26
     b3a:	9f 91       	pop	r25
     b3c:	8f 91       	pop	r24
     b3e:	7f 91       	pop	r23
     b40:	6f 91       	pop	r22
     b42:	5f 91       	pop	r21
     b44:	4f 91       	pop	r20
     b46:	3f 91       	pop	r19
     b48:	2f 91       	pop	r18
     b4a:	0f 90       	pop	r0
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	0f 90       	pop	r0
     b50:	1f 90       	pop	r1
     b52:	18 95       	reti

00000b54 <uartInitBuffers>:
void uartSendTxBuffer(void)
{
	// turn on buffered transmit
	uartBufferedTx = TRUE;
	// send the first byte to get things going by interrupts
	uartSendByte(bufferGetFromFront(&uartTxBuffer));
     b54:	40 e4       	ldi	r20, 0x40	; 64
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	68 ec       	ldi	r22, 0xC8	; 200
     b5a:	71 e0       	ldi	r23, 0x01	; 1
     b5c:	8b e1       	ldi	r24, 0x1B	; 27
     b5e:	92 e0       	ldi	r25, 0x02	; 2
     b60:	d3 db       	rcall	.-2138   	; 0x308 <bufferInit>
     b62:	40 e4       	ldi	r20, 0x40	; 64
     b64:	50 e0       	ldi	r21, 0x00	; 0
     b66:	68 e8       	ldi	r22, 0x88	; 136
     b68:	71 e0       	ldi	r23, 0x01	; 1
     b6a:	84 e2       	ldi	r24, 0x24	; 36
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	cc cb       	rjmp	.-2152   	; 0x308 <bufferInit>

00000b70 <uartInit>:
     b70:	f1 df       	rcall	.-30     	; 0xb54 <uartInitBuffers>
     b72:	10 92 87 01 	sts	0x0187, r1
     b76:	10 92 86 01 	sts	0x0186, r1
     b7a:	88 ed       	ldi	r24, 0xD8	; 216
     b7c:	80 93 c1 00 	sts	0x00C1, r24
     b80:	83 e3       	ldi	r24, 0x33	; 51
     b82:	80 93 c4 00 	sts	0x00C4, r24
     b86:	10 92 c5 00 	sts	0x00C5, r1
     b8a:	8f ef       	ldi	r24, 0xFF	; 255
     b8c:	80 93 1a 02 	sts	0x021A, r24
     b90:	10 92 23 02 	sts	0x0223, r1
     b94:	10 92 2d 02 	sts	0x022D, r1
     b98:	10 92 2c 02 	sts	0x022C, r1
     b9c:	78 94       	sei
     b9e:	08 95       	ret

00000ba0 <uartSetBaudRate>:
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	8b 01       	movw	r16, r22
     ba6:	9c 01       	movw	r18, r24
     ba8:	dc 01       	movw	r26, r24
     baa:	cb 01       	movw	r24, r22
     bac:	80 5c       	subi	r24, 0xC0	; 192
     bae:	9d 4b       	sbci	r25, 0xBD	; 189
     bb0:	a0 4f       	sbci	r26, 0xF0	; 240
     bb2:	bf 4f       	sbci	r27, 0xFF	; 255
     bb4:	bc 01       	movw	r22, r24
     bb6:	cd 01       	movw	r24, r26
     bb8:	43 e0       	ldi	r20, 0x03	; 3
     bba:	66 0f       	add	r22, r22
     bbc:	77 1f       	adc	r23, r23
     bbe:	88 1f       	adc	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	4a 95       	dec	r20
     bc4:	d1 f7       	brne	.-12     	; 0xbba <uartSetBaudRate+0x1a>
     bc6:	a9 01       	movw	r20, r18
     bc8:	98 01       	movw	r18, r16
     bca:	e4 e0       	ldi	r30, 0x04	; 4
     bcc:	22 0f       	add	r18, r18
     bce:	33 1f       	adc	r19, r19
     bd0:	44 1f       	adc	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	ea 95       	dec	r30
     bd6:	d1 f7       	brne	.-12     	; 0xbcc <uartSetBaudRate+0x2c>
     bd8:	d1 d2       	rcall	.+1442   	; 0x117c <__udivmodsi4>
     bda:	21 50       	subi	r18, 0x01	; 1
     bdc:	31 09       	sbc	r19, r1
     bde:	20 93 c4 00 	sts	0x00C4, r18
     be2:	30 93 c5 00 	sts	0x00C5, r19
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	08 95       	ret

00000bec <uartSendByte>:
     bec:	90 91 1a 02 	lds	r25, 0x021A
     bf0:	99 23       	and	r25, r25
     bf2:	e1 f3       	breq	.-8      	; 0xbec <uartSendByte>
     bf4:	80 93 c6 00 	sts	0x00C6, r24
     bf8:	10 92 1a 02 	sts	0x021A, r1
     bfc:	08 95       	ret

00000bfe <__vector_22>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_TRANS)
{
     bfe:	1f 92       	push	r1
     c00:	0f 92       	push	r0
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	0f 92       	push	r0
     c06:	11 24       	eor	r1, r1
     c08:	2f 93       	push	r18
     c0a:	3f 93       	push	r19
     c0c:	4f 93       	push	r20
     c0e:	5f 93       	push	r21
     c10:	6f 93       	push	r22
     c12:	7f 93       	push	r23
     c14:	8f 93       	push	r24
     c16:	9f 93       	push	r25
     c18:	af 93       	push	r26
     c1a:	bf 93       	push	r27
     c1c:	ef 93       	push	r30
     c1e:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
     c20:	80 91 23 02 	lds	r24, 0x0223
     c24:	88 23       	and	r24, r24
     c26:	71 f0       	breq	.+28     	; 0xc44 <__vector_22+0x46>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
     c28:	80 91 28 02 	lds	r24, 0x0228
     c2c:	90 91 29 02 	lds	r25, 0x0229
     c30:	89 2b       	or	r24, r25
     c32:	31 f0       	breq	.+12     	; 0xc40 <__vector_22+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
     c34:	84 e2       	ldi	r24, 0x24	; 36
     c36:	92 e0       	ldi	r25, 0x02	; 2
     c38:	74 db       	rcall	.-2328   	; 0x322 <bufferGetFromFront>
     c3a:	80 93 c6 00 	sts	0x00C6, r24
     c3e:	05 c0       	rjmp	.+10     	; 0xc4a <__vector_22+0x4c>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
     c40:	10 92 23 02 	sts	0x0223, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
     c44:	8f ef       	ldi	r24, 0xFF	; 255
     c46:	80 93 1a 02 	sts	0x021A, r24
	}
}
     c4a:	ff 91       	pop	r31
     c4c:	ef 91       	pop	r30
     c4e:	bf 91       	pop	r27
     c50:	af 91       	pop	r26
     c52:	9f 91       	pop	r25
     c54:	8f 91       	pop	r24
     c56:	7f 91       	pop	r23
     c58:	6f 91       	pop	r22
     c5a:	5f 91       	pop	r21
     c5c:	4f 91       	pop	r20
     c5e:	3f 91       	pop	r19
     c60:	2f 91       	pop	r18
     c62:	0f 90       	pop	r0
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	0f 90       	pop	r0
     c68:	1f 90       	pop	r1
     c6a:	18 95       	reti

00000c6c <__vector_20>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_RECV)
{
     c6c:	1f 92       	push	r1
     c6e:	0f 92       	push	r0
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	0f 92       	push	r0
     c74:	11 24       	eor	r1, r1
     c76:	2f 93       	push	r18
     c78:	3f 93       	push	r19
     c7a:	4f 93       	push	r20
     c7c:	5f 93       	push	r21
     c7e:	6f 93       	push	r22
     c80:	7f 93       	push	r23
     c82:	8f 93       	push	r24
     c84:	9f 93       	push	r25
     c86:	af 93       	push	r26
     c88:	bf 93       	push	r27
     c8a:	ef 93       	push	r30
     c8c:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
     c8e:	80 91 c6 00 	lds	r24, 0x00C6

	// if there's a user function to handle this receive event
	if(UartRxFunc)
     c92:	20 91 86 01 	lds	r18, 0x0186
     c96:	30 91 87 01 	lds	r19, 0x0187
     c9a:	23 2b       	or	r18, r19
     c9c:	31 f0       	breq	.+12     	; 0xcaa <__vector_20+0x3e>
	{
		// call it and pass the received data
		UartRxFunc(c);
     c9e:	e0 91 86 01 	lds	r30, 0x0186
     ca2:	f0 91 87 01 	lds	r31, 0x0187
     ca6:	09 95       	icall
     ca8:	0f c0       	rjmp	.+30     	; 0xcc8 <__vector_20+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
     caa:	68 2f       	mov	r22, r24
     cac:	8b e1       	ldi	r24, 0x1B	; 27
     cae:	92 e0       	ldi	r25, 0x02	; 2
     cb0:	5c db       	rcall	.-2376   	; 0x36a <bufferAddToEnd>
     cb2:	81 11       	cpse	r24, r1
     cb4:	09 c0       	rjmp	.+18     	; 0xcc8 <__vector_20+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
     cb6:	80 91 2c 02 	lds	r24, 0x022C
     cba:	90 91 2d 02 	lds	r25, 0x022D
     cbe:	01 96       	adiw	r24, 0x01	; 1
     cc0:	90 93 2d 02 	sts	0x022D, r25
     cc4:	80 93 2c 02 	sts	0x022C, r24
		}
	}
}
     cc8:	ff 91       	pop	r31
     cca:	ef 91       	pop	r30
     ccc:	bf 91       	pop	r27
     cce:	af 91       	pop	r26
     cd0:	9f 91       	pop	r25
     cd2:	8f 91       	pop	r24
     cd4:	7f 91       	pop	r23
     cd6:	6f 91       	pop	r22
     cd8:	5f 91       	pop	r21
     cda:	4f 91       	pop	r20
     cdc:	3f 91       	pop	r19
     cde:	2f 91       	pop	r18
     ce0:	0f 90       	pop	r0
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	0f 90       	pop	r0
     ce6:	1f 90       	pop	r1
     ce8:	18 95       	reti

00000cea <McuInit>:

void McuInit(void)
{
	// initialize our libraries
	// initialize the UART (serial port)
	uartInit();		/* sei() call in the function */
     cea:	42 df       	rcall	.-380    	; 0xb70 <uartInit>
	// set the baud rate of the UART for our debug/reporting output
	uartSetBaudRate(9600);
     cec:	60 e8       	ldi	r22, 0x80	; 128
     cee:	75 e2       	ldi	r23, 0x25	; 37
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	55 df       	rcall	.-342    	; 0xba0 <uartSetBaudRate>
	// initialize rprintf system
	rprintfInit(uartSendByte);
     cf6:	86 ef       	ldi	r24, 0xF6	; 246
     cf8:	95 e0       	ldi	r25, 0x05	; 5
     cfa:	d5 cc       	rjmp	.-1622   	; 0x6a6 <rprintfInit>

00000cfc <ApplInit>:
*********************************************************************************************************
*/

void ApplInit(void)
{
	ButtonInit();
     cfc:	08 d1       	rcall	.+528    	; 0xf0e <ButtonInit>
	
	glcdInit();	/* Need connect to LCD device because MCU will check lcd busy or not will cause waiting */
     cfe:	ca dc       	rcall	.-1644   	; 0x694 <glcdInit>
	
	glcdPutStr(&greeting[0]);
     d00:	8e e2       	ldi	r24, 0x2E	; 46
     d02:	92 e0       	ldi	r25, 0x02	; 2
     d04:	7e db       	rcall	.-2308   	; 0x402 <glcdPutStr>
	// Just print message for debug.
	rprintf("RF remote start!\n" );	
     d06:	8e eb       	ldi	r24, 0xBE	; 190
     d08:	92 e0       	ldi	r25, 0x02	; 2
     d0a:	9f 93       	push	r25
     d0c:	8f 93       	push	r24
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8f 93       	push	r24
     d12:	e6 dc       	rcall	.-1588   	; 0x6e0 <rprintf1RamRom>
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	08 95       	ret

00000d1c <AppCycleUpdate>:
*
* Returns    : none
*********************************************************************************************************
*/
void AppCycleUpdate(void)
{	
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	64 97       	sbiw	r28, 0x14	; 20
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
	char tempChar;
	//if(button.buttonsReleased.bVal) rprintf("rl=%x\n", button.buttonsReleased.bVal);
	if(button.buttonsReleased.bVal) 
     d34:	80 91 4b 02 	lds	r24, 0x024B
     d38:	90 91 4c 02 	lds	r25, 0x024C
     d3c:	a0 91 4d 02 	lds	r26, 0x024D
     d40:	b0 91 4e 02 	lds	r27, 0x024E
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	a1 05       	cpc	r26, r1
     d48:	b1 05       	cpc	r27, r1
     d4a:	09 f4       	brne	.+2      	; 0xd4e <AppCycleUpdate+0x32>
     d4c:	af c0       	rjmp	.+350    	; 0xeac <AppCycleUpdate+0x190>
	{
		rprintf("rl=%x\n", button.buttonsReleased.bVal);
     d4e:	bf 93       	push	r27
     d50:	af 93       	push	r26
     d52:	9f 93       	push	r25
     d54:	8f 93       	push	r24
     d56:	87 eb       	ldi	r24, 0xB7	; 183
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	9f 93       	push	r25
     d5c:	8f 93       	push	r24
     d5e:	11 e0       	ldi	r17, 0x01	; 1
     d60:	1f 93       	push	r17
     d62:	be dc       	rcall	.-1668   	; 0x6e0 <rprintf1RamRom>
		rprintf("rh=%x\n", button.buttonsReleased.bVal>>16);
     d64:	80 91 4b 02 	lds	r24, 0x024B
     d68:	90 91 4c 02 	lds	r25, 0x024C
     d6c:	a0 91 4d 02 	lds	r26, 0x024D
     d70:	b0 91 4e 02 	lds	r27, 0x024E
     d74:	cd 01       	movw	r24, r26
     d76:	aa 27       	eor	r26, r26
     d78:	bb 27       	eor	r27, r27
     d7a:	bf 93       	push	r27
     d7c:	af 93       	push	r26
     d7e:	9f 93       	push	r25
     d80:	8f 93       	push	r24
     d82:	80 eb       	ldi	r24, 0xB0	; 176
     d84:	92 e0       	ldi	r25, 0x02	; 2
     d86:	9f 93       	push	r25
     d88:	8f 93       	push	r24
     d8a:	1f 93       	push	r17
     d8c:	a9 dc       	rcall	.-1710   	; 0x6e0 <rprintf1RamRom>
		
		if(button.buttonsReleased.PBtn13)
     d8e:	80 91 4c 02 	lds	r24, 0x024C
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	cd bf       	out	0x3d, r28	; 61
     d9c:	84 ff       	sbrs	r24, 4
     d9e:	12 c0       	rjmp	.+36     	; 0xdc4 <AppCycleUpdate+0xa8>
		{
			glcdSetAddress(0,0);
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	07 dc       	rcall	.-2034   	; 0x5b4 <glcdSetAddress>
			char greeting[] = "PBtn13,Hello World!";
     da6:	84 e1       	ldi	r24, 0x14	; 20
     da8:	e0 e0       	ldi	r30, 0x00	; 0
     daa:	f1 e0       	ldi	r31, 0x01	; 1
     dac:	de 01       	movw	r26, r28
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	01 90       	ld	r0, Z+
     db2:	0d 92       	st	X+, r0
     db4:	8a 95       	dec	r24
     db6:	e1 f7       	brne	.-8      	; 0xdb0 <AppCycleUpdate+0x94>
			glcdPutStr(&greeting[0]);
     db8:	ce 01       	movw	r24, r28
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	22 db       	rcall	.-2492   	; 0x402 <glcdPutStr>
			rprintf("PBtn13\n");
     dbe:	88 ea       	ldi	r24, 0xA8	; 168
     dc0:	92 e0       	ldi	r25, 0x02	; 2
     dc2:	6d c0       	rjmp	.+218    	; 0xe9e <AppCycleUpdate+0x182>
		}
		else if(button.buttonsReleased.PBtn14)
     dc4:	80 ff       	sbrs	r24, 0
     dc6:	12 c0       	rjmp	.+36     	; 0xdec <AppCycleUpdate+0xd0>
		{
			glcdSetAddress(0,1);
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	f3 db       	rcall	.-2074   	; 0x5b4 <glcdSetAddress>
			char greeting[] = "PBtn14,Hello World!";
     dce:	84 e1       	ldi	r24, 0x14	; 20
     dd0:	e4 e1       	ldi	r30, 0x14	; 20
     dd2:	f1 e0       	ldi	r31, 0x01	; 1
     dd4:	de 01       	movw	r26, r28
     dd6:	11 96       	adiw	r26, 0x01	; 1
     dd8:	01 90       	ld	r0, Z+
     dda:	0d 92       	st	X+, r0
     ddc:	8a 95       	dec	r24
     dde:	e1 f7       	brne	.-8      	; 0xdd8 <AppCycleUpdate+0xbc>
			glcdPutStr(&greeting[0]);
     de0:	ce 01       	movw	r24, r28
     de2:	01 96       	adiw	r24, 0x01	; 1
     de4:	0e db       	rcall	.-2532   	; 0x402 <glcdPutStr>
			rprintf("PBtn14\n");
     de6:	80 ea       	ldi	r24, 0xA0	; 160
     de8:	92 e0       	ldi	r25, 0x02	; 2
     dea:	59 c0       	rjmp	.+178    	; 0xe9e <AppCycleUpdate+0x182>
		}
		else if(button.buttonsReleased.PBtn15)
     dec:	90 91 4b 02 	lds	r25, 0x024B
     df0:	94 ff       	sbrs	r25, 4
     df2:	12 c0       	rjmp	.+36     	; 0xe18 <AppCycleUpdate+0xfc>
		{
			glcdSetAddress(0,2);
     df4:	62 e0       	ldi	r22, 0x02	; 2
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	dd db       	rcall	.-2118   	; 0x5b4 <glcdSetAddress>
			char greeting[] = "PBtn15,Hello World!";
     dfa:	84 e1       	ldi	r24, 0x14	; 20
     dfc:	e8 e2       	ldi	r30, 0x28	; 40
     dfe:	f1 e0       	ldi	r31, 0x01	; 1
     e00:	de 01       	movw	r26, r28
     e02:	11 96       	adiw	r26, 0x01	; 1
     e04:	01 90       	ld	r0, Z+
     e06:	0d 92       	st	X+, r0
     e08:	8a 95       	dec	r24
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <AppCycleUpdate+0xe8>
			glcdPutStr(&greeting[0]);
     e0c:	ce 01       	movw	r24, r28
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	f8 da       	rcall	.-2576   	; 0x402 <glcdPutStr>
			rprintf("PBtn15\n");
     e12:	88 e9       	ldi	r24, 0x98	; 152
     e14:	92 e0       	ldi	r25, 0x02	; 2
     e16:	43 c0       	rjmp	.+134    	; 0xe9e <AppCycleUpdate+0x182>
		}
		else if(button.buttonsReleased.PBtn1)
     e18:	87 ff       	sbrs	r24, 7
     e1a:	12 c0       	rjmp	.+36     	; 0xe40 <AppCycleUpdate+0x124>
		{
			glcdSetAddress(0,3);
     e1c:	63 e0       	ldi	r22, 0x03	; 3
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	c9 db       	rcall	.-2158   	; 0x5b4 <glcdSetAddress>
			char greeting[] = "PBtn1,Hello World!";
     e22:	83 e1       	ldi	r24, 0x13	; 19
     e24:	ec e3       	ldi	r30, 0x3C	; 60
     e26:	f1 e0       	ldi	r31, 0x01	; 1
     e28:	de 01       	movw	r26, r28
     e2a:	11 96       	adiw	r26, 0x01	; 1
     e2c:	01 90       	ld	r0, Z+
     e2e:	0d 92       	st	X+, r0
     e30:	8a 95       	dec	r24
     e32:	e1 f7       	brne	.-8      	; 0xe2c <AppCycleUpdate+0x110>
			glcdPutStr(&greeting[0]);
     e34:	ce 01       	movw	r24, r28
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	e4 da       	rcall	.-2616   	; 0x402 <glcdPutStr>
			rprintf("PBtn1\n");
     e3a:	81 e9       	ldi	r24, 0x91	; 145
     e3c:	92 e0       	ldi	r25, 0x02	; 2
     e3e:	2f c0       	rjmp	.+94     	; 0xe9e <AppCycleUpdate+0x182>
		}
		else if(button.buttonsReleased.PBtn5)
     e40:	86 ff       	sbrs	r24, 6
     e42:	12 c0       	rjmp	.+36     	; 0xe68 <AppCycleUpdate+0x14c>
		{
			glcdSetAddress(0,4);
     e44:	64 e0       	ldi	r22, 0x04	; 4
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	b5 db       	rcall	.-2198   	; 0x5b4 <glcdSetAddress>
			char greeting[] = "PBtn5,Hello World!";
     e4a:	83 e1       	ldi	r24, 0x13	; 19
     e4c:	ef e4       	ldi	r30, 0x4F	; 79
     e4e:	f1 e0       	ldi	r31, 0x01	; 1
     e50:	de 01       	movw	r26, r28
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	01 90       	ld	r0, Z+
     e56:	0d 92       	st	X+, r0
     e58:	8a 95       	dec	r24
     e5a:	e1 f7       	brne	.-8      	; 0xe54 <AppCycleUpdate+0x138>
			glcdPutStr(&greeting[0]);
     e5c:	ce 01       	movw	r24, r28
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	d0 da       	rcall	.-2656   	; 0x402 <glcdPutStr>
			rprintf("PBtn5\n");
     e62:	8a e8       	ldi	r24, 0x8A	; 138
     e64:	92 e0       	ldi	r25, 0x02	; 2
     e66:	1b c0       	rjmp	.+54     	; 0xe9e <AppCycleUpdate+0x182>
		}
		else if(button.buttonsReleased.PBtn9)
     e68:	85 ff       	sbrs	r24, 5
     e6a:	12 c0       	rjmp	.+36     	; 0xe90 <AppCycleUpdate+0x174>
		{
			glcdSetAddress(0,5);
     e6c:	65 e0       	ldi	r22, 0x05	; 5
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	a1 db       	rcall	.-2238   	; 0x5b4 <glcdSetAddress>
			char greeting[] = "PBtn9,Hello World!";
     e72:	83 e1       	ldi	r24, 0x13	; 19
     e74:	e2 e6       	ldi	r30, 0x62	; 98
     e76:	f1 e0       	ldi	r31, 0x01	; 1
     e78:	de 01       	movw	r26, r28
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	01 90       	ld	r0, Z+
     e7e:	0d 92       	st	X+, r0
     e80:	8a 95       	dec	r24
     e82:	e1 f7       	brne	.-8      	; 0xe7c <AppCycleUpdate+0x160>
			glcdPutStr(&greeting[0]);
     e84:	ce 01       	movw	r24, r28
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	bc da       	rcall	.-2696   	; 0x402 <glcdPutStr>
			rprintf("PBtn9\n");
     e8a:	83 e8       	ldi	r24, 0x83	; 131
     e8c:	92 e0       	ldi	r25, 0x02	; 2
     e8e:	07 c0       	rjmp	.+14     	; 0xe9e <AppCycleUpdate+0x182>
		}
		else if(button.buttonsReleased.PBtn18)
     e90:	80 91 4d 02 	lds	r24, 0x024D
     e94:	82 ff       	sbrs	r24, 2
     e96:	0a c0       	rjmp	.+20     	; 0xeac <AppCycleUpdate+0x190>
		{
			//glcdSetAddress(0,1);
			glcdClearScreen();
     e98:	eb db       	rcall	.-2090   	; 0x670 <glcdClearScreen>
			rprintf("PBtn18,Clear Home\n");
     e9a:	80 e7       	ldi	r24, 0x70	; 112
     e9c:	92 e0       	ldi	r25, 0x02	; 2
     e9e:	9f 93       	push	r25
     ea0:	8f 93       	push	r24
     ea2:	1f 93       	push	r17
     ea4:	1d dc       	rcall	.-1990   	; 0x6e0 <rprintf1RamRom>
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
		}
	}

	if(uartRxBuffer.size - bufferIsNotFull(&uartRxBuffer) != 0)
     eac:	00 91 1d 02 	lds	r16, 0x021D
     eb0:	10 91 1e 02 	lds	r17, 0x021E
     eb4:	8b e1       	ldi	r24, 0x1B	; 27
     eb6:	92 e0       	ldi	r25, 0x02	; 2
     eb8:	78 da       	rcall	.-2832   	; 0x3aa <bufferIsNotFull>
     eba:	08 17       	cp	r16, r24
     ebc:	19 07       	cpc	r17, r25
     ebe:	89 f0       	breq	.+34     	; 0xee2 <AppCycleUpdate+0x1c6>
	{
		tempChar = bufferGetFromFront(&uartRxBuffer);
     ec0:	8b e1       	ldi	r24, 0x1B	; 27
     ec2:	92 e0       	ldi	r25, 0x02	; 2
     ec4:	2e da       	rcall	.-2980   	; 0x322 <bufferGetFromFront>
		//rprintf("char=%c\n",tempChar);
		rprintf("%c",tempChar);
     ec6:	1f 92       	push	r1
     ec8:	8f 93       	push	r24
     eca:	8d e6       	ldi	r24, 0x6D	; 109
     ecc:	92 e0       	ldi	r25, 0x02	; 2
     ece:	9f 93       	push	r25
     ed0:	8f 93       	push	r24
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	8f 93       	push	r24
     ed6:	04 dc       	rcall	.-2040   	; 0x6e0 <rprintf1RamRom>
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
	}
	//rprintf("D=%d\n",uartRxBuffer.datalength);

	//rprintfChar('a');
	//glcdWriteChar(cnt++/2);
}
     ee2:	64 96       	adiw	r28, 0x14	; 20
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	08 95       	ret

00000ef8 <main>:
int main(void)
{	
	/*
	Calll all initial function
	*/
	McuInit();
     ef8:	f8 de       	rcall	.-528    	; 0xcea <McuInit>
	ApplInit();
     efa:	00 df       	rcall	.-512    	; 0xcfc <ApplInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     efc:	8f e3       	ldi	r24, 0x3F	; 63
     efe:	9c e9       	ldi	r25, 0x9C	; 156
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <main+0x8>
     f04:	00 c0       	rjmp	.+0      	; 0xf06 <main+0xe>
     f06:	00 00       	nop
	
	while(1)
	{
		_delay_ms(20);
		ButtonCycleUpdate();
     f08:	0c d0       	rcall	.+24     	; 0xf22 <ButtonCycleUpdate>
		AppCycleUpdate();
     f0a:	08 df       	rcall	.-496    	; 0xd1c <AppCycleUpdate>
	}
     f0c:	f7 cf       	rjmp	.-18     	; 0xefc <main+0x4>

00000f0e <ButtonInit>:
*********************************************************************************************************
*/

void ButtonInit(void)
{
	DDRD  &= ~((1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3));	/* Set PD6-PD3 as input */
     f0e:	8a b1       	in	r24, 0x0a	; 10
     f10:	87 78       	andi	r24, 0x87	; 135
     f12:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PD6) | (1<<PD5) | (1<<PD4) | (1<<PD3);			/* Set PD6-PD3 as internal pull up */
     f14:	8b b1       	in	r24, 0x0b	; 11
     f16:	88 67       	ori	r24, 0x78	; 120
     f18:	8b b9       	out	0x0b, r24	; 11
	
	/* 
	Set PC7-PC4 as input as internal pull up
	Set PC3-PC0 as Tri-state (Hi-Z) 
	*/
	DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
     f1a:	17 b8       	out	0x07, r1	; 7
	PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
     f1c:	80 ef       	ldi	r24, 0xF0	; 240
     f1e:	88 b9       	out	0x08, r24	; 8
     f20:	08 95       	ret

00000f22 <ButtonCycleUpdate>:
*
*********************************************************************************************************
*/

void ButtonCycleUpdate(void)
{
     f22:	cf 92       	push	r12
     f24:	df 92       	push	r13
     f26:	ef 92       	push	r14
     f28:	ff 92       	push	r15
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
	ButtonDataType io_state = 0;
	ButtonDataType tempValue;
	ButtonDataType MatrixButtonValue;
	uint8_t Col;
	
	tempValue = (~PIND) & ((1<<PIND6) | (1<<PIND5) | (1<<PIND4) | (1<<PIND3));	/* Get PD6-PD3 IO state */
     f32:	89 b1       	in	r24, 0x09	; 9
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	80 95       	com	r24
     f38:	90 95       	com	r25
     f3a:	88 77       	andi	r24, 0x78	; 120
     f3c:	99 27       	eor	r25, r25
     f3e:	09 2e       	mov	r0, r25
     f40:	00 0c       	add	r0, r0
     f42:	aa 0b       	sbc	r26, r26
     f44:	bb 0b       	sbc	r27, r27
	tempValue >>= 3;	/* right rotate to low 4 bits location */
     f46:	73 e0       	ldi	r23, 0x03	; 3
     f48:	b6 95       	lsr	r27
     f4a:	a7 95       	ror	r26
     f4c:	97 95       	ror	r25
     f4e:	87 95       	ror	r24
     f50:	7a 95       	dec	r23
     f52:	d1 f7       	brne	.-12     	; 0xf48 <ButtonCycleUpdate+0x26>
     f54:	e0 e0       	ldi	r30, 0x00	; 0
     f56:	f0 e0       	ldi	r31, 0x00	; 0
	
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
     f58:	40 e0       	ldi	r20, 0x00	; 0
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	ba 01       	movw	r22, r20
		/* 
		Set PC7-PC4 as input as internal pull up
		Set PC3-PC0 as Tri-state (Hi-Z)
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
     f5e:	10 ef       	ldi	r17, 0xF0	; 240
	
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
     f60:	c8 e0       	ldi	r28, 0x08	; 8
     f62:	d0 e0       	ldi	r29, 0x00	; 0
	{
		/* 
		Set PC7-PC4 as input as internal pull up
		Set PC3-PC0 as Tri-state (Hi-Z)
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
     f64:	17 b8       	out	0x07, r1	; 7
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
     f66:	18 b9       	out	0x08, r17	; 8
	
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
     f68:	07 b1       	in	r16, 0x07	; 7
     f6a:	9e 01       	movw	r18, r28
     f6c:	0e 2e       	mov	r0, r30
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <ButtonCycleUpdate+0x52>
     f70:	35 95       	asr	r19
     f72:	27 95       	ror	r18
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <ButtonCycleUpdate+0x4e>
     f78:	30 2f       	mov	r19, r16
     f7a:	32 2b       	or	r19, r18
     f7c:	37 b9       	out	0x07, r19	; 7
		PORTC &= ~(0x08>>Col);		/* Set the column as low */
     f7e:	38 b1       	in	r19, 0x08	; 8
     f80:	20 95       	com	r18
     f82:	23 23       	and	r18, r19
     f84:	28 b9       	out	0x08, r18	; 8
		
		/* read and save button state after the column which active as low */
		MatrixButtonValue <<= 4;	/* newer 4 button state store in lower four bits */
     f86:	6a 01       	movw	r12, r20
     f88:	7b 01       	movw	r14, r22
     f8a:	34 e0       	ldi	r19, 0x04	; 4
     f8c:	cc 0c       	add	r12, r12
     f8e:	dd 1c       	adc	r13, r13
     f90:	ee 1c       	adc	r14, r14
     f92:	ff 1c       	adc	r15, r15
     f94:	3a 95       	dec	r19
     f96:	d1 f7       	brne	.-12     	; 0xf8c <ButtonCycleUpdate+0x6a>
		MatrixButtonValue |= ((~PINC) & 0x00f0) >> 4;
     f98:	26 b1       	in	r18, 0x06	; 6
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	20 95       	com	r18
     f9e:	30 95       	com	r19
     fa0:	20 7f       	andi	r18, 0xF0	; 240
     fa2:	33 27       	eor	r19, r19
     fa4:	a9 01       	movw	r20, r18
     fa6:	64 e0       	ldi	r22, 0x04	; 4
     fa8:	55 95       	asr	r21
     faa:	47 95       	ror	r20
     fac:	6a 95       	dec	r22
     fae:	e1 f7       	brne	.-8      	; 0xfa8 <ButtonCycleUpdate+0x86>
     fb0:	05 2e       	mov	r0, r21
     fb2:	00 0c       	add	r0, r0
     fb4:	66 0b       	sbc	r22, r22
     fb6:	77 0b       	sbc	r23, r23
     fb8:	4c 29       	or	r20, r12
     fba:	5d 29       	or	r21, r13
     fbc:	6e 29       	or	r22, r14
     fbe:	7f 29       	or	r23, r15
     fc0:	31 96       	adiw	r30, 0x01	; 1
	uint8_t Col;
	
	tempValue = (~PIND) & ((1<<PIND6) | (1<<PIND5) | (1<<PIND4) | (1<<PIND3));	/* Get PD6-PD3 IO state */
	tempValue >>= 3;	/* right rotate to low 4 bits location */
	
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
     fc2:	e4 30       	cpi	r30, 0x04	; 4
     fc4:	f1 05       	cpc	r31, r1
     fc6:	71 f6       	brne	.-100    	; 0xf64 <ButtonCycleUpdate+0x42>
		/* read and save button state after the column which active as low */
		MatrixButtonValue <<= 4;	/* newer 4 button state store in lower four bits */
		MatrixButtonValue |= ((~PINC) & 0x00f0) >> 4;
	}
	
	io_state = (tempValue << 16) | MatrixButtonValue;
     fc8:	dc 01       	movw	r26, r24
     fca:	99 27       	eor	r25, r25
     fcc:	88 27       	eor	r24, r24
     fce:	00 91 43 02 	lds	r16, 0x0243
     fd2:	10 91 44 02 	lds	r17, 0x0244
     fd6:	20 91 45 02 	lds	r18, 0x0245
     fda:	30 91 46 02 	lds	r19, 0x0246
     fde:	80 2b       	or	r24, r16
     fe0:	91 2b       	or	r25, r17
     fe2:	a2 2b       	or	r26, r18
     fe4:	b3 2b       	or	r27, r19
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
     fe6:	48 2b       	or	r20, r24
     fe8:	59 2b       	or	r21, r25
     fea:	6a 2b       	or	r22, r26
     fec:	7b 2b       	or	r23, r27
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
     fee:	10 92 43 02 	sts	0x0243, r1
     ff2:	10 92 44 02 	sts	0x0244, r1
     ff6:	10 92 45 02 	sts	0x0245, r1
     ffa:	10 92 46 02 	sts	0x0246, r1
	b = button.buttonsLastCycle.bVal;
     ffe:	80 91 47 02 	lds	r24, 0x0247
    1002:	90 91 48 02 	lds	r25, 0x0248
    1006:	a0 91 49 02 	lds	r26, 0x0249
    100a:	b0 91 4a 02 	lds	r27, 0x024A
	holdTime = button.buttonHoldTime;
    100e:	20 91 5b 02 	lds	r18, 0x025B
    1012:	30 91 5c 02 	lds	r19, 0x025C
	
	if (button.buttonsReleased.bVal != 0) {		
    1016:	c0 90 4b 02 	lds	r12, 0x024B
    101a:	d0 90 4c 02 	lds	r13, 0x024C
    101e:	e0 90 4d 02 	lds	r14, 0x024D
    1022:	f0 90 4e 02 	lds	r15, 0x024E
    1026:	c1 14       	cp	r12, r1
    1028:	d1 04       	cpc	r13, r1
    102a:	e1 04       	cpc	r14, r1
    102c:	f1 04       	cpc	r15, r1
    102e:	49 f0       	breq	.+18     	; 0x1042 <ButtonCycleUpdate+0x120>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
    1030:	c0 92 53 02 	sts	0x0253, r12
    1034:	d0 92 54 02 	sts	0x0254, r13
    1038:	e0 92 55 02 	sts	0x0255, r14
    103c:	f0 92 56 02 	sts	0x0256, r15
    1040:	0b c0       	rjmp	.+22     	; 0x1058 <ButtonCycleUpdate+0x136>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
    1042:	2d 33       	cpi	r18, 0x3D	; 61
    1044:	31 05       	cpc	r19, r1
    1046:	40 f0       	brcs	.+16     	; 0x1058 <ButtonCycleUpdate+0x136>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
    1048:	10 92 53 02 	sts	0x0253, r1
    104c:	10 92 54 02 	sts	0x0254, r1
    1050:	10 92 55 02 	sts	0x0255, r1
    1054:	10 92 56 02 	sts	0x0256, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
    1058:	10 92 4b 02 	sts	0x024B, r1
    105c:	10 92 4c 02 	sts	0x024C, r1
    1060:	10 92 4d 02 	sts	0x024D, r1
    1064:	10 92 4e 02 	sts	0x024E, r1
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
    1068:	10 92 57 02 	sts	0x0257, r1
    106c:	10 92 58 02 	sts	0x0258, r1
    1070:	10 92 59 02 	sts	0x0259, r1
    1074:	10 92 5a 02 	sts	0x025A, r1
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
    1078:	48 17       	cp	r20, r24
    107a:	59 07       	cpc	r21, r25
    107c:	6a 07       	cpc	r22, r26
    107e:	7b 07       	cpc	r23, r27
    1080:	d9 f4       	brne	.+54     	; 0x10b8 <ButtonCycleUpdate+0x196>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
    1082:	2f 5f       	subi	r18, 0xFF	; 255
    1084:	3f 4f       	sbci	r19, 0xFF	; 255
    1086:	24 32       	cpi	r18, 0x24	; 36
    1088:	31 05       	cpc	r19, r1
    108a:	48 f4       	brcc	.+18     	; 0x109e <ButtonCycleUpdate+0x17c>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
    108c:	10 92 4f 02 	sts	0x024F, r1
    1090:	10 92 50 02 	sts	0x0250, r1
    1094:	10 92 51 02 	sts	0x0251, r1
    1098:	10 92 52 02 	sts	0x0252, r1
    109c:	08 c0       	rjmp	.+16     	; 0x10ae <ButtonCycleUpdate+0x18c>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
    109e:	40 93 4f 02 	sts	0x024F, r20
    10a2:	50 93 50 02 	sts	0x0250, r21
    10a6:	60 93 51 02 	sts	0x0251, r22
    10aa:	70 93 52 02 	sts	0x0252, r23
		}	
		button.buttonHoldTime = holdTime;
    10ae:	30 93 5c 02 	sts	0x025C, r19
    10b2:	20 93 5b 02 	sts	0x025B, r18
    10b6:	45 c0       	rjmp	.+138    	; 0x1142 <__stack+0x43>
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
    10b8:	40 93 47 02 	sts	0x0247, r20
    10bc:	50 93 48 02 	sts	0x0248, r21
    10c0:	60 93 49 02 	sts	0x0249, r22
    10c4:	70 93 4a 02 	sts	0x024A, r23
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
    10c8:	40 95       	com	r20
    10ca:	50 95       	com	r21
    10cc:	60 95       	com	r22
    10ce:	70 95       	com	r23
    10d0:	48 23       	and	r20, r24
    10d2:	59 23       	and	r21, r25
    10d4:	6a 23       	and	r22, r26
    10d6:	7b 23       	and	r23, r27
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
    10d8:	80 91 4f 02 	lds	r24, 0x024F
    10dc:	90 91 50 02 	lds	r25, 0x0250
    10e0:	a0 91 51 02 	lds	r26, 0x0251
    10e4:	b0 91 52 02 	lds	r27, 0x0252
    10e8:	84 23       	and	r24, r20
    10ea:	95 23       	and	r25, r21
    10ec:	a6 23       	and	r26, r22
    10ee:	b7 23       	and	r27, r23
    10f0:	89 2b       	or	r24, r25
    10f2:	8a 2b       	or	r24, r26
    10f4:	8b 2b       	or	r24, r27
    10f6:	29 f5       	brne	.+74     	; 0x1142 <__stack+0x43>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
    10f8:	10 92 5c 02 	sts	0x025C, r1
    10fc:	10 92 5b 02 	sts	0x025B, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
    1100:	23 50       	subi	r18, 0x03	; 3
    1102:	31 09       	sbc	r19, r1
    1104:	20 32       	cpi	r18, 0x20	; 32
    1106:	31 05       	cpc	r19, r1
    1108:	e0 f4       	brcc	.+56     	; 0x1142 <__stack+0x43>
				button.buttonsReleased.bVal = buttons;	
    110a:	40 93 4b 02 	sts	0x024B, r20
    110e:	50 93 4c 02 	sts	0x024C, r21
    1112:	60 93 4d 02 	sts	0x024D, r22
    1116:	70 93 4e 02 	sts	0x024E, r23
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
    111a:	80 91 53 02 	lds	r24, 0x0253
    111e:	90 91 54 02 	lds	r25, 0x0254
    1122:	a0 91 55 02 	lds	r26, 0x0255
    1126:	b0 91 56 02 	lds	r27, 0x0256
    112a:	48 23       	and	r20, r24
    112c:	59 23       	and	r21, r25
    112e:	6a 23       	and	r22, r26
    1130:	7b 23       	and	r23, r27
    1132:	40 93 57 02 	sts	0x0257, r20
    1136:	50 93 58 02 	sts	0x0258, r21
    113a:	60 93 59 02 	sts	0x0259, r22
    113e:	70 93 5a 02 	sts	0x025A, r23
													button.buttonsReleasedHistory.bVal;
			}       
		}
	}
}
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	ff 90       	pop	r15
    114c:	ef 90       	pop	r14
    114e:	df 90       	pop	r13
    1150:	cf 90       	pop	r12
    1152:	08 95       	ret

00001154 <__udivmodhi4>:
    1154:	aa 1b       	sub	r26, r26
    1156:	bb 1b       	sub	r27, r27
    1158:	51 e1       	ldi	r21, 0x11	; 17
    115a:	07 c0       	rjmp	.+14     	; 0x116a <__udivmodhi4_ep>

0000115c <__udivmodhi4_loop>:
    115c:	aa 1f       	adc	r26, r26
    115e:	bb 1f       	adc	r27, r27
    1160:	a6 17       	cp	r26, r22
    1162:	b7 07       	cpc	r27, r23
    1164:	10 f0       	brcs	.+4      	; 0x116a <__udivmodhi4_ep>
    1166:	a6 1b       	sub	r26, r22
    1168:	b7 0b       	sbc	r27, r23

0000116a <__udivmodhi4_ep>:
    116a:	88 1f       	adc	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	5a 95       	dec	r21
    1170:	a9 f7       	brne	.-22     	; 0x115c <__udivmodhi4_loop>
    1172:	80 95       	com	r24
    1174:	90 95       	com	r25
    1176:	bc 01       	movw	r22, r24
    1178:	cd 01       	movw	r24, r26
    117a:	08 95       	ret

0000117c <__udivmodsi4>:
    117c:	a1 e2       	ldi	r26, 0x21	; 33
    117e:	1a 2e       	mov	r1, r26
    1180:	aa 1b       	sub	r26, r26
    1182:	bb 1b       	sub	r27, r27
    1184:	fd 01       	movw	r30, r26
    1186:	0d c0       	rjmp	.+26     	; 0x11a2 <__udivmodsi4_ep>

00001188 <__udivmodsi4_loop>:
    1188:	aa 1f       	adc	r26, r26
    118a:	bb 1f       	adc	r27, r27
    118c:	ee 1f       	adc	r30, r30
    118e:	ff 1f       	adc	r31, r31
    1190:	a2 17       	cp	r26, r18
    1192:	b3 07       	cpc	r27, r19
    1194:	e4 07       	cpc	r30, r20
    1196:	f5 07       	cpc	r31, r21
    1198:	20 f0       	brcs	.+8      	; 0x11a2 <__udivmodsi4_ep>
    119a:	a2 1b       	sub	r26, r18
    119c:	b3 0b       	sbc	r27, r19
    119e:	e4 0b       	sbc	r30, r20
    11a0:	f5 0b       	sbc	r31, r21

000011a2 <__udivmodsi4_ep>:
    11a2:	66 1f       	adc	r22, r22
    11a4:	77 1f       	adc	r23, r23
    11a6:	88 1f       	adc	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	1a 94       	dec	r1
    11ac:	69 f7       	brne	.-38     	; 0x1188 <__udivmodsi4_loop>
    11ae:	60 95       	com	r22
    11b0:	70 95       	com	r23
    11b2:	80 95       	com	r24
    11b4:	90 95       	com	r25
    11b6:	9b 01       	movw	r18, r22
    11b8:	ac 01       	movw	r20, r24
    11ba:	bd 01       	movw	r22, r26
    11bc:	cf 01       	movw	r24, r30
    11be:	08 95       	ret

000011c0 <_exit>:
    11c0:	f8 94       	cli

000011c2 <__stop_program>:
    11c2:	ff cf       	rjmp	.-2      	; 0x11c2 <__stop_program>
