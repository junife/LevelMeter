
LevelMeterRfRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001066  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ff2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cc  00800100  00800100  00001066  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001098  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cf0  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a91  00000000  00000000  000030c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc4  00000000  00000000  00003b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a10  00000000  00000000  00004718  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a8c  00000000  00000000  00005128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cef  00000000  00000000  00005bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  000078a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 b9 04 	jmp	0x972	; 0x972 <__vector_9>
  28:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__vector_10>
  2c:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__vector_11>
  30:	0c 94 8c 04 	jmp	0x918	; 0x918 <__vector_12>
  34:	0c 94 32 04 	jmp	0x864	; 0x864 <__vector_13>
  38:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__vector_14>
  3c:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__vector_15>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__vector_18>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_20>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__vector_22>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

0000007c <__trampolines_end>:
  7c:	30 31       	cpi	r19, 0x10	; 16
  7e:	32 33       	cpi	r19, 0x32	; 50
  80:	34 35       	cpi	r19, 0x54	; 84
  82:	36 37       	cpi	r19, 0x76	; 118
  84:	38 39       	cpi	r19, 0x98	; 152
  86:	41 42       	sbci	r20, 0x21	; 33
  88:	43 44       	sbci	r20, 0x43	; 67
  8a:	45 46       	sbci	r20, 0x65	; 101
	...

0000008d <TimerPrescaleFactor>:
  8d:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

00000099 <__c.1894>:
  99:	54 75 72 6e 69 6e 67 20 6f 66 66 20 61 6c 6c 20     Turning off all 
  a9:	50 57 4d 20 6f 6e 20 74 69 6d 65 72 31 0d 0a 00     PWM on timer1...

000000b9 <__c.1892>:
  b9:	50 61 75 73 65 20 66 6f 72 20 35 20 73 65 63 6f     Pause for 5 seco
  c9:	6e 64 73 2e 2e 2e 0d 0a 00                          nds......

000000d2 <__c.1890>:
  d2:	54 75 72 6e 69 6e 67 20 6f 6e 20 63 68 61 6e 6e     Turning on chann
  e2:	65 6c 20 42 20 74 6f 6f 2c 20 77 69 74 68 20 37     el B too, with 7
  f2:	35 25 25 20 64 75 74 79 0d 0a 00                    5%% duty...

000000fd <__c.1888>:
  fd:	53 65 74 74 69 6e 67 20 64 75 74 79 20 63 79 63     Setting duty cyc
 10d:	6c 65 20 74 6f 20 32 35 25 25 0d 0a 00              le to 25%%...

0000011a <__c.1886>:
 11a:	54 75 72 6e 69 6e 67 20 6f 6e 20 74 69 6d 65 72     Turning on timer
 12a:	31 20 63 68 61 6e 6e 65 6c 20 41 20 50 57 4d 20     1 channel A PWM 
 13a:	6f 75 74 70 75 74 0d 0a 00                          output...

00000143 <__c.1884>:
 143:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 74 69 6d     Initializing tim
 153:	65 72 31 20 66 6f 72 20 50 57 4d 0d 0a 00           er1 for PWM...

00000161 <__c.1882>:
 161:	0d 0a 54 65 73 74 20 6f 66 20 74 69 6d 65 72 31     ..Test of timer1
 171:	20 50 57 4d 20 6f 75 74 70 75 74 0d 0a 00            PWM output...

0000017f <__c.1880>:
 17f:	44 6f 6e 65 21 0d 0a 00                             Done!...

00000187 <__c.1878>:
 187:	48 65 72 65 20 63 6f 6d 65 73 20 61 20 31 2f 32     Here comes a 1/2
 197:	2d 73 65 63 6f 6e 64 20 64 65 6c 61 79 2e 2e 2e     -second delay...
 1a7:	0d 0a 00                                            ...

000001aa <__c.1876>:
 1aa:	0d 0a 54 65 73 74 20 6f 66 20 74 69 6d 65 72 50     ..Test of timerP
 1ba:	61 75 73 65 28 29 20 66 75 6e 63 74 69 6f 6e 0d     ause() function.
 1ca:	0a 00                                               ..

000001cc <__c.1874>:
 1cc:	0d 0a 0a 0a 57 65 6c 63 6f 6d 65 20 74 6f 20 74     ....Welcome to t
 1dc:	68 65 20 74 69 6d 65 72 20 6c 69 62 72 61 72 79     he timer library
 1ec:	20 74 65 73 74 20 70 72 6f 67 72 61 6d 21 0d 0a      test program!..
	...

000001fe <__ctors_end>:
 1fe:	11 24       	eor	r1, r1
 200:	1f be       	out	0x3f, r1	; 63
 202:	cf ef       	ldi	r28, 0xFF	; 255
 204:	d0 e1       	ldi	r29, 0x10	; 16
 206:	de bf       	out	0x3e, r29	; 62
 208:	cd bf       	out	0x3d, r28	; 61

0000020a <__do_copy_data>:
 20a:	11 e0       	ldi	r17, 0x01	; 1
 20c:	a0 e0       	ldi	r26, 0x00	; 0
 20e:	b1 e0       	ldi	r27, 0x01	; 1
 210:	e2 ef       	ldi	r30, 0xF2	; 242
 212:	ff e0       	ldi	r31, 0x0F	; 15
 214:	02 c0       	rjmp	.+4      	; 0x21a <__do_copy_data+0x10>
 216:	05 90       	lpm	r0, Z+
 218:	0d 92       	st	X+, r0
 21a:	a0 30       	cpi	r26, 0x00	; 0
 21c:	b1 07       	cpc	r27, r17
 21e:	d9 f7       	brne	.-10     	; 0x216 <__do_copy_data+0xc>

00000220 <__do_clear_bss>:
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	a0 e0       	ldi	r26, 0x00	; 0
 224:	b1 e0       	ldi	r27, 0x01	; 1
 226:	01 c0       	rjmp	.+2      	; 0x22a <.do_clear_bss_start>

00000228 <.do_clear_bss_loop>:
 228:	1d 92       	st	X+, r1

0000022a <.do_clear_bss_start>:
 22a:	ac 3c       	cpi	r26, 0xCC	; 204
 22c:	b2 07       	cpc	r27, r18
 22e:	e1 f7       	brne	.-8      	; 0x228 <.do_clear_bss_loop>
 230:	0e 94 65 07 	call	0xeca	; 0xeca <main>
 234:	0c 94 f7 07 	jmp	0xfee	; 0xfee <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
 23c:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
 23e:	8f b7       	in	r24, 0x3f	; 63
 240:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
 242:	71 83       	std	Z+1, r23	; 0x01
 244:	60 83       	st	Z, r22
	buffer->size = size;
 246:	53 83       	std	Z+3, r21	; 0x03
 248:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
 24a:	17 82       	std	Z+7, r1	; 0x07
 24c:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
 24e:	15 82       	std	Z+5, r1	; 0x05
 250:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
 252:	8f bf       	out	0x3f, r24	; 63
 254:	08 95       	ret

00000256 <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
 256:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
 258:	9f b7       	in	r25, 0x3f	; 63
 25a:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
 25c:	44 81       	ldd	r20, Z+4	; 0x04
 25e:	55 81       	ldd	r21, Z+5	; 0x05
 260:	41 15       	cp	r20, r1
 262:	51 05       	cpc	r21, r1
 264:	c9 f0       	breq	.+50     	; 0x298 <bufferGetFromFront+0x42>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
 266:	26 81       	ldd	r18, Z+6	; 0x06
 268:	37 81       	ldd	r19, Z+7	; 0x07
 26a:	a0 81       	ld	r26, Z
 26c:	b1 81       	ldd	r27, Z+1	; 0x01
 26e:	a2 0f       	add	r26, r18
 270:	b3 1f       	adc	r27, r19
 272:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
 274:	2f 5f       	subi	r18, 0xFF	; 255
 276:	3f 4f       	sbci	r19, 0xFF	; 255
 278:	37 83       	std	Z+7, r19	; 0x07
 27a:	26 83       	std	Z+6, r18	; 0x06
		if(buffer->dataindex >= buffer->size)
 27c:	62 81       	ldd	r22, Z+2	; 0x02
 27e:	73 81       	ldd	r23, Z+3	; 0x03
 280:	26 17       	cp	r18, r22
 282:	37 07       	cpc	r19, r23
 284:	20 f0       	brcs	.+8      	; 0x28e <bufferGetFromFront+0x38>
		{
			buffer->dataindex -= buffer->size;
 286:	26 1b       	sub	r18, r22
 288:	37 0b       	sbc	r19, r23
 28a:	37 83       	std	Z+7, r19	; 0x07
 28c:	26 83       	std	Z+6, r18	; 0x06
		}
		buffer->datalength--;
 28e:	41 50       	subi	r20, 0x01	; 1
 290:	51 09       	sbc	r21, r1
 292:	55 83       	std	Z+5, r21	; 0x05
 294:	44 83       	std	Z+4, r20	; 0x04
 296:	01 c0       	rjmp	.+2      	; 0x29a <bufferGetFromFront+0x44>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
 298:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
 29a:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
 29c:	08 95       	ret

0000029e <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
 29e:	fc 01       	movw	r30, r24
 2a0:	36 2f       	mov	r19, r22
	// begin critical section
	CRITICAL_SECTION_START;
 2a2:	2f b7       	in	r18, 0x3f	; 63
 2a4:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
 2a6:	a4 81       	ldd	r26, Z+4	; 0x04
 2a8:	b5 81       	ldd	r27, Z+5	; 0x05
 2aa:	62 81       	ldd	r22, Z+2	; 0x02
 2ac:	73 81       	ldd	r23, Z+3	; 0x03
 2ae:	a6 17       	cp	r26, r22
 2b0:	b7 07       	cpc	r27, r23
 2b2:	98 f4       	brcc	.+38     	; 0x2da <bufferAddToEnd+0x3c>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
 2b4:	86 81       	ldd	r24, Z+6	; 0x06
 2b6:	97 81       	ldd	r25, Z+7	; 0x07
 2b8:	8a 0f       	add	r24, r26
 2ba:	9b 1f       	adc	r25, r27
 2bc:	0e 94 88 07 	call	0xf10	; 0xf10 <__udivmodhi4>
 2c0:	a0 81       	ld	r26, Z
 2c2:	b1 81       	ldd	r27, Z+1	; 0x01
 2c4:	a8 0f       	add	r26, r24
 2c6:	b9 1f       	adc	r27, r25
 2c8:	3c 93       	st	X, r19
		// increment the length
		buffer->datalength++;
 2ca:	84 81       	ldd	r24, Z+4	; 0x04
 2cc:	95 81       	ldd	r25, Z+5	; 0x05
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	95 83       	std	Z+5, r25	; 0x05
 2d2:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
 2d4:	2f bf       	out	0x3f, r18	; 63
		// return success
		return -1;
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	08 95       	ret
	}
	// end critical section
	CRITICAL_SECTION_END;
 2da:	2f bf       	out	0x3f, r18	; 63
	// return failure
	return 0;
 2dc:	80 e0       	ldi	r24, 0x00	; 0
}
 2de:	08 95       	ret

000002e0 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
 2e0:	90 93 01 01 	sts	0x0101, r25
 2e4:	80 93 00 01 	sts	0x0100, r24
 2e8:	08 95       	ret

000002ea <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
 2ea:	cf 93       	push	r28
 2ec:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
 2ee:	8a 30       	cpi	r24, 0x0A	; 10
 2f0:	31 f4       	brne	.+12     	; 0x2fe <rprintfChar+0x14>
		rputchar('\r');
 2f2:	e0 91 00 01 	lds	r30, 0x0100
 2f6:	f0 91 01 01 	lds	r31, 0x0101
 2fa:	8d e0       	ldi	r24, 0x0D	; 13
 2fc:	09 95       	icall
	// send character
	rputchar(c);
 2fe:	e0 91 00 01 	lds	r30, 0x0100
 302:	f0 91 01 01 	lds	r31, 0x0101
 306:	8c 2f       	mov	r24, r28
}
 308:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
 30a:	09 94       	ijmp

0000030c <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
 30c:	8f 70       	andi	r24, 0x0F	; 15
 30e:	e8 2f       	mov	r30, r24
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	e4 58       	subi	r30, 0x84	; 132
 314:	ff 4f       	sbci	r31, 0xFF	; 255
 316:	84 91       	lpm	r24, Z
 318:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <rprintfChar>

0000031c <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
 31c:	5f 92       	push	r5
 31e:	6f 92       	push	r6
 320:	7f 92       	push	r7
 322:	8f 92       	push	r8
 324:	9f 92       	push	r9
 326:	af 92       	push	r10
 328:	bf 92       	push	r11
 32a:	cf 92       	push	r12
 32c:	df 92       	push	r13
 32e:	ef 92       	push	r14
 330:	ff 92       	push	r15
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	1f 92       	push	r1
 33c:	cd b7       	in	r28, 0x3d	; 61
 33e:	de b7       	in	r29, 0x3e	; 62
 340:	ec 89       	ldd	r30, Y+20	; 0x14
 342:	fd 89       	ldd	r31, Y+21	; 0x15
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
 344:	3e 01       	movw	r6, r28
 346:	26 e1       	ldi	r18, 0x16	; 22
 348:	62 0e       	add	r6, r18
 34a:	71 1c       	adc	r7, r1
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
					rprintfChar('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 34c:	3a e0       	ldi	r19, 0x0A	; 10
 34e:	a3 2e       	mov	r10, r19
 350:	b1 2c       	mov	r11, r1
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 352:	3b 89       	ldd	r19, Y+19	; 0x13
 354:	33 23       	and	r19, r19
 356:	81 f0       	breq	.+32     	; 0x378 <rprintf1RamRom+0x5c>
 358:	8f 01       	movw	r16, r30
 35a:	0f 5f       	subi	r16, 0xFF	; 255
 35c:	1f 4f       	sbci	r17, 0xFF	; 255
 35e:	84 91       	lpm	r24, Z
 360:	85 32       	cpi	r24, 0x25	; 37
 362:	89 f0       	breq	.+34     	; 0x386 <rprintf1RamRom+0x6a>
		{	// Until '%' or '\0'
			if (!format_flag)
 364:	88 23       	and	r24, r24
 366:	09 f4       	brne	.+2      	; 0x36a <rprintf1RamRom+0x4e>
 368:	66 c0       	rjmp	.+204    	; 0x436 <rprintf1RamRom+0x11a>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
 36a:	0e 94 75 01 	call	0x2ea	; 0x2ea <rprintfChar>
 36e:	63 01       	movw	r12, r6
 370:	78 01       	movw	r14, r16
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
 372:	36 01       	movw	r6, r12
 374:	f7 01       	movw	r30, r14
 376:	ed cf       	rjmp	.-38     	; 0x352 <rprintf1RamRom+0x36>
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 378:	80 81       	ld	r24, Z
 37a:	85 32       	cpi	r24, 0x25	; 37
 37c:	59 f0       	breq	.+22     	; 0x394 <rprintf1RamRom+0x78>
 37e:	8f 01       	movw	r16, r30
 380:	0f 5f       	subi	r16, 0xFF	; 255
 382:	1f 4f       	sbci	r17, 0xFF	; 255
 384:	ef cf       	rjmp	.-34     	; 0x364 <rprintf1RamRom+0x48>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
 386:	7f 01       	movw	r14, r30
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	e8 0e       	add	r14, r24
 38c:	f1 1c       	adc	r15, r1
 38e:	f8 01       	movw	r30, r16
 390:	84 91       	lpm	r24, Z
 392:	05 c0       	rjmp	.+10     	; 0x39e <rprintf1RamRom+0x82>
 394:	7f 01       	movw	r14, r30
 396:	22 e0       	ldi	r18, 0x02	; 2
 398:	e2 0e       	add	r14, r18
 39a:	f1 1c       	adc	r15, r1
 39c:	81 81       	ldd	r24, Z+1	; 0x01
 39e:	84 36       	cpi	r24, 0x64	; 100
 3a0:	a1 f0       	breq	.+40     	; 0x3ca <rprintf1RamRom+0xae>
 3a2:	88 37       	cpi	r24, 0x78	; 120
 3a4:	61 f0       	breq	.+24     	; 0x3be <rprintf1RamRom+0xa2>
 3a6:	83 36       	cpi	r24, 0x63	; 99
 3a8:	31 f4       	brne	.+12     	; 0x3b6 <rprintf1RamRom+0x9a>
		{
			case 'c': format_flag = va_arg(ap,int);
 3aa:	f3 01       	movw	r30, r6
 3ac:	80 81       	ld	r24, Z
 3ae:	93 01       	movw	r18, r6
 3b0:	2e 5f       	subi	r18, 0xFE	; 254
 3b2:	3f 4f       	sbci	r19, 0xFF	; 255
 3b4:	39 01       	movw	r6, r18
			default:  rprintfChar(format_flag); continue;
 3b6:	0e 94 75 01 	call	0x2ea	; 0x2ea <rprintfChar>
 3ba:	63 01       	movw	r12, r6
 3bc:	da cf       	rjmp	.-76     	; 0x372 <rprintf1RamRom+0x56>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 3be:	20 e1       	ldi	r18, 0x10	; 16
 3c0:	82 2e       	mov	r8, r18
 3c2:	91 2c       	mov	r9, r1
 3c4:	00 e0       	ldi	r16, 0x00	; 0
 3c6:	10 e1       	ldi	r17, 0x10	; 16
 3c8:	05 c0       	rjmp	.+10     	; 0x3d4 <rprintf1RamRom+0xb8>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 3ca:	9a e0       	ldi	r25, 0x0A	; 10
 3cc:	89 2e       	mov	r8, r25
 3ce:	91 2c       	mov	r9, r1
 3d0:	00 e1       	ldi	r16, 0x10	; 16
 3d2:	17 e2       	ldi	r17, 0x27	; 39
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 3d4:	63 01       	movw	r12, r6
 3d6:	32 e0       	ldi	r19, 0x02	; 2
 3d8:	c3 0e       	add	r12, r19
 3da:	d1 1c       	adc	r13, r1
 3dc:	f3 01       	movw	r30, r6
 3de:	60 80       	ld	r6, Z
 3e0:	71 80       	ldd	r7, Z+1	; 0x01
			if (format_flag == 'd')
 3e2:	84 36       	cpi	r24, 0x64	; 100
 3e4:	a1 f4       	brne	.+40     	; 0x40e <rprintf1RamRom+0xf2>
			{
				if (((int)u_val) < 0)
 3e6:	77 fe       	sbrs	r7, 7
 3e8:	0f c0       	rjmp	.+30     	; 0x408 <rprintf1RamRom+0xec>
				{
					u_val = - u_val;
 3ea:	71 94       	neg	r7
 3ec:	61 94       	neg	r6
 3ee:	71 08       	sbc	r7, r1
					rprintfChar('-');
 3f0:	8d e2       	ldi	r24, 0x2D	; 45
 3f2:	0e 94 75 01 	call	0x2ea	; 0x2ea <rprintfChar>
 3f6:	08 c0       	rjmp	.+16     	; 0x408 <rprintf1RamRom+0xec>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 3f8:	c8 01       	movw	r24, r16
 3fa:	b5 01       	movw	r22, r10
 3fc:	0e 94 88 07 	call	0xf10	; 0xf10 <__udivmodhi4>
 400:	8b 01       	movw	r16, r22
 402:	62 30       	cpi	r22, 0x02	; 2
 404:	71 05       	cpc	r23, r1
 406:	18 f0       	brcs	.+6      	; 0x40e <rprintf1RamRom+0xf2>
 408:	60 16       	cp	r6, r16
 40a:	71 06       	cpc	r7, r17
 40c:	a8 f3       	brcs	.-22     	; 0x3f8 <rprintf1RamRom+0xdc>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
 40e:	c3 01       	movw	r24, r6
 410:	b8 01       	movw	r22, r16
 412:	0e 94 88 07 	call	0xf10	; 0xf10 <__udivmodhi4>
 416:	58 2e       	mov	r5, r24
 418:	86 2f       	mov	r24, r22
 41a:	99 83       	std	Y+1, r25	; 0x01
 41c:	0e 94 86 01 	call	0x30c	; 0x30c <rprintfu04>
				u_val %= div_val;
 420:	65 2c       	mov	r6, r5
 422:	99 81       	ldd	r25, Y+1	; 0x01
 424:	79 2e       	mov	r7, r25
				div_val /= base;
 426:	c8 01       	movw	r24, r16
 428:	b4 01       	movw	r22, r8
 42a:	0e 94 88 07 	call	0xf10	; 0xf10 <__udivmodhi4>
 42e:	8b 01       	movw	r16, r22
			} while (div_val);
 430:	67 2b       	or	r22, r23
 432:	69 f7       	brne	.-38     	; 0x40e <rprintf1RamRom+0xf2>
 434:	9e cf       	rjmp	.-196    	; 0x372 <rprintf1RamRom+0x56>
		}
	}
	va_end(ap);
}
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0f 90       	pop	r0
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	1f 91       	pop	r17
 442:	0f 91       	pop	r16
 444:	ff 90       	pop	r15
 446:	ef 90       	pop	r14
 448:	df 90       	pop	r13
 44a:	cf 90       	pop	r12
 44c:	bf 90       	pop	r11
 44e:	af 90       	pop	r10
 450:	9f 90       	pop	r9
 452:	8f 90       	pop	r8
 454:	7f 90       	pop	r7
 456:	6f 90       	pop	r6
 458:	5f 90       	pop	r5
 45a:	08 95       	ret

0000045c <timer0SetPrescaler>:
#endif

void timer0SetPrescaler(u08 prescale)
{
	// set prescaler on timer 0
	TCCR0B = ((TCCR0B & ~TIMER_PRESCALE_MASK) | prescale);
 45c:	95 b5       	in	r25, 0x25	; 37
 45e:	98 7f       	andi	r25, 0xF8	; 248
 460:	89 2b       	or	r24, r25
 462:	85 bd       	out	0x25, r24	; 37
 464:	08 95       	ret

00000466 <timer0Init>:
}

void timer0Init()
{
	// initialize timer 0
	timer0SetPrescaler( TIMER0PRESCALE );	// set prescaler
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	0e 94 2e 02 	call	0x45c	; 0x45c <timer0SetPrescaler>
	TCNT0 = 0;								// reset TCNT0
 46c:	16 bc       	out	0x26, r1	; 38
	sbi(TIMSK0, TOIE0);						// enable TCNT0 overflow interrupt
 46e:	ee e6       	ldi	r30, 0x6E	; 110
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	81 60       	ori	r24, 0x01	; 1
 476:	80 83       	st	Z, r24
}

void timer0ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer0Reg0 = 0;	// initialize time registers
 478:	10 92 92 01 	sts	0x0192, r1
 47c:	10 92 93 01 	sts	0x0193, r1
 480:	10 92 94 01 	sts	0x0194, r1
 484:	10 92 95 01 	sts	0x0195, r1
 488:	08 95       	ret

0000048a <timer1SetPrescaler>:
}

void timer1SetPrescaler(u08 prescale)
{
	// set prescaler on timer 1
	TCCR1B = ((TCCR1B & ~TIMER_PRESCALE_MASK) | prescale);
 48a:	e1 e8       	ldi	r30, 0x81	; 129
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	90 81       	ld	r25, Z
 490:	98 7f       	andi	r25, 0xF8	; 248
 492:	89 2b       	or	r24, r25
 494:	80 83       	st	Z, r24
 496:	08 95       	ret

00000498 <timer1Init>:
}

void timer1Init(void)
{
	// initialize timer 1
	timer1SetPrescaler( TIMER1PRESCALE );	// set prescaler
 498:	83 e0       	ldi	r24, 0x03	; 3
 49a:	0e 94 45 02 	call	0x48a	; 0x48a <timer1SetPrescaler>
	TCNT1 = 0;								// reset TCNT1
 49e:	10 92 85 00 	sts	0x0085, r1
 4a2:	10 92 84 00 	sts	0x0084, r1
	sbi(TIMSK1, TOIE1);						// enable TCNT1 overflow
 4a6:	ef e6       	ldi	r30, 0x6F	; 111
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	81 60       	ori	r24, 0x01	; 1
 4ae:	80 83       	st	Z, r24
 4b0:	08 95       	ret

000004b2 <timer2SetPrescaler>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2SetPrescaler(u08 prescale)
{
	// set prescaler on timer 2
	TCCR2B = ((TCCR2B & ~TIMER_PRESCALE_MASK) | prescale);
 4b2:	e1 eb       	ldi	r30, 0xB1	; 177
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	90 81       	ld	r25, Z
 4b8:	98 7f       	andi	r25, 0xF8	; 248
 4ba:	89 2b       	or	r24, r25
 4bc:	80 83       	st	Z, r24
 4be:	08 95       	ret

000004c0 <timer2Init>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2Init(void)
{
	// initialize timer 2
	timer2SetPrescaler( TIMER2PRESCALE );	// set prescaler
 4c0:	84 e0       	ldi	r24, 0x04	; 4
 4c2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <timer2SetPrescaler>
	TCNT2 = 0;								// reset TCNT2
 4c6:	10 92 b2 00 	sts	0x00B2, r1
	sbi(TIMSK2, TOIE2);						// enable TCNT2 overflow
 4ca:	e0 e7       	ldi	r30, 0x70	; 112
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	81 60       	ori	r24, 0x01	; 1
 4d2:	80 83       	st	Z, r24

#ifdef TCNT2	// support timer2 only if it exists
void timer2ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer2Reg0 = 0;	// initialize time registers
 4d4:	10 92 9a 01 	sts	0x019A, r1
 4d8:	10 92 9b 01 	sts	0x019B, r1
 4dc:	10 92 9c 01 	sts	0x019C, r1
 4e0:	10 92 9d 01 	sts	0x019D, r1
 4e4:	08 95       	ret

000004e6 <timer0GetPrescaler>:
#endif

u16 timer0GetPrescaler(void)
{
	// get the current prescaler setting
	return (pgm_read_word(TimerPrescaleFactor+(TCCR0B & TIMER_PRESCALE_MASK)));
 4e6:	e5 b5       	in	r30, 0x25	; 37
 4e8:	e7 70       	andi	r30, 0x07	; 7
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	ee 0f       	add	r30, r30
 4ee:	ff 1f       	adc	r31, r31
 4f0:	e3 57       	subi	r30, 0x73	; 115
 4f2:	ff 4f       	sbci	r31, 0xFF	; 255
}
 4f4:	85 91       	lpm	r24, Z+
 4f6:	94 91       	lpm	r25, Z
 4f8:	08 95       	ret

000004fa <timerDetach>:
}

void timerDetach(u08 interruptNum)
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
 4fa:	87 30       	cpi	r24, 0x07	; 7
 4fc:	40 f4       	brcc	.+16     	; 0x50e <timerDetach+0x14>
	{
		// set the interrupt function to run nothing
		TimerIntFunc[interruptNum] = 0;
 4fe:	e8 2f       	mov	r30, r24
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	ee 0f       	add	r30, r30
 504:	ff 1f       	adc	r31, r31
 506:	ee 5f       	subi	r30, 0xFE	; 254
 508:	fe 4f       	sbci	r31, 0xFE	; 254
 50a:	11 82       	std	Z+1, r1	; 0x01
 50c:	10 82       	st	Z, r1
 50e:	08 95       	ret

00000510 <timerInit>:
                  :"r"(time_ms), "r"((unsigned short) (delay_count))
	);
}
*/
void timerInit(void)
{
 510:	cf 93       	push	r28
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
 512:	c0 e0       	ldi	r28, 0x00	; 0
		timerDetach(intNum);
 514:	8c 2f       	mov	r24, r28
 516:	0e 94 7d 02 	call	0x4fa	; 0x4fa <timerDetach>
*/
void timerInit(void)
{
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
 51a:	cf 5f       	subi	r28, 0xFF	; 255
 51c:	c7 30       	cpi	r28, 0x07	; 7
 51e:	d1 f7       	brne	.-12     	; 0x514 <timerInit+0x4>
		timerDetach(intNum);

	// initialize all timers
	timer0Init();
 520:	0e 94 33 02 	call	0x466	; 0x466 <timer0Init>
	timer1Init();
 524:	0e 94 4c 02 	call	0x498	; 0x498 <timer1Init>
	#ifdef TCNT2	// support timer2 only if it exists
	timer2Init();
 528:	0e 94 60 02 	call	0x4c0	; 0x4c0 <timer2Init>
	#endif
	// enable interrupts
	sei();
 52c:	78 94       	sei
}
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <timerPause>:
	// calculate the number of milliseconds in x timer tics
	return (tics*1000*(prescaleDiv*256))/F_CPU;
}
*/
void timerPause(unsigned short pause_ms)
{
 532:	cf 92       	push	r12
 534:	df 92       	push	r13
 536:	ef 92       	push	r14
 538:	ff 92       	push	r15
 53a:	0f 93       	push	r16
 53c:	1f 93       	push	r17
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29
 542:	ec 01       	movw	r28, r24
	u08 timerThres;
	u32 ticRateHz;
	u32 pause;

	// capture current pause timer value
	timerThres = TCNT0;
 544:	16 b5       	in	r17, 0x26	; 38
	// reset pause timer overflow count
	TimerPauseReg = 0;
 546:	10 92 96 01 	sts	0x0196, r1
 54a:	10 92 97 01 	sts	0x0197, r1
 54e:	10 92 98 01 	sts	0x0198, r1
 552:	10 92 99 01 	sts	0x0199, r1
	// calculate delay for [pause_ms] milliseconds
	// prescaler division = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)))
	ticRateHz = F_CPU/timer0GetPrescaler();
 556:	0e 94 73 02 	call	0x4e6	; 0x4e6 <timer0GetPrescaler>
 55a:	9c 01       	movw	r18, r24
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	50 e0       	ldi	r21, 0x00	; 0
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	70 e8       	ldi	r23, 0x80	; 128
 564:	80 e7       	ldi	r24, 0x70	; 112
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 be 07 	call	0xf7c	; 0xf7c <__divmodsi4>
 56c:	6e 01       	movw	r12, r28
 56e:	e1 2c       	mov	r14, r1
 570:	f1 2c       	mov	r15, r1
	// precision management
	// prevent overflow and precision underflow
	//	-could add more conditions to improve accuracy
	if( ((ticRateHz < 429497) && (pause_ms <= 10000)) )
 572:	29 3b       	cpi	r18, 0xB9	; 185
 574:	8d e8       	ldi	r24, 0x8D	; 141
 576:	38 07       	cpc	r19, r24
 578:	86 e0       	ldi	r24, 0x06	; 6
 57a:	48 07       	cpc	r20, r24
 57c:	51 05       	cpc	r21, r1
 57e:	b4 f4       	brge	.+44     	; 0x5ac <timerPause+0x7a>
 580:	c1 31       	cpi	r28, 0x11	; 17
 582:	d7 42       	sbci	r29, 0x27	; 39
 584:	98 f4       	brcc	.+38     	; 0x5ac <timerPause+0x7a>
		pause = (pause_ms*ticRateHz)/1000;
 586:	c7 01       	movw	r24, r14
 588:	b6 01       	movw	r22, r12
 58a:	0e 94 78 07 	call	0xef0	; 0xef0 <__mulsi3>
 58e:	28 ee       	ldi	r18, 0xE8	; 232
 590:	33 e0       	ldi	r19, 0x03	; 3
 592:	40 e0       	ldi	r20, 0x00	; 0
 594:	50 e0       	ldi	r21, 0x00	; 0
 596:	0e 94 9c 07 	call	0xf38	; 0xf38 <__udivmodsi4>
	else
		pause = pause_ms*(ticRateHz/1000);

	// loop until time expires
	while( ((TimerPauseReg<<8) | (TCNT0)) < (pause+timerThres) )
 59a:	da 01       	movw	r26, r20
 59c:	c9 01       	movw	r24, r18
 59e:	81 0f       	add	r24, r17
 5a0:	91 1d       	adc	r25, r1
 5a2:	a1 1d       	adc	r26, r1
 5a4:	b1 1d       	adc	r27, r1
 5a6:	8c 01       	movw	r16, r24
 5a8:	9d 01       	movw	r18, r26
 5aa:	0f c0       	rjmp	.+30     	; 0x5ca <timerPause+0x98>
	// prevent overflow and precision underflow
	//	-could add more conditions to improve accuracy
	if( ((ticRateHz < 429497) && (pause_ms <= 10000)) )
		pause = (pause_ms*ticRateHz)/1000;
	else
		pause = pause_ms*(ticRateHz/1000);
 5ac:	ca 01       	movw	r24, r20
 5ae:	b9 01       	movw	r22, r18
 5b0:	28 ee       	ldi	r18, 0xE8	; 232
 5b2:	33 e0       	ldi	r19, 0x03	; 3
 5b4:	40 e0       	ldi	r20, 0x00	; 0
 5b6:	50 e0       	ldi	r21, 0x00	; 0
 5b8:	0e 94 9c 07 	call	0xf38	; 0xf38 <__udivmodsi4>
 5bc:	c7 01       	movw	r24, r14
 5be:	b6 01       	movw	r22, r12
 5c0:	0e 94 78 07 	call	0xef0	; 0xef0 <__mulsi3>
 5c4:	9b 01       	movw	r18, r22
 5c6:	ac 01       	movw	r20, r24
 5c8:	e8 cf       	rjmp	.-48     	; 0x59a <timerPause+0x68>

	// loop until time expires
	while( ((TimerPauseReg<<8) | (TCNT0)) < (pause+timerThres) )
 5ca:	80 91 96 01 	lds	r24, 0x0196
 5ce:	90 91 97 01 	lds	r25, 0x0197
 5d2:	a0 91 98 01 	lds	r26, 0x0198
 5d6:	b0 91 99 01 	lds	r27, 0x0199
 5da:	66 b5       	in	r22, 0x26	; 38
 5dc:	ba 2f       	mov	r27, r26
 5de:	a9 2f       	mov	r26, r25
 5e0:	98 2f       	mov	r25, r24
 5e2:	88 27       	eor	r24, r24
 5e4:	86 2b       	or	r24, r22
 5e6:	80 17       	cp	r24, r16
 5e8:	91 07       	cpc	r25, r17
 5ea:	a2 07       	cpc	r26, r18
 5ec:	b3 07       	cpc	r27, r19
 5ee:	98 f4       	brcc	.+38     	; 0x616 <timerPause+0xe4>
	{
		if( TimerPauseReg < (pause>>8));
 5f0:	80 91 96 01 	lds	r24, 0x0196
 5f4:	90 91 97 01 	lds	r25, 0x0197
 5f8:	a0 91 98 01 	lds	r26, 0x0198
 5fc:	b0 91 99 01 	lds	r27, 0x0199
		{
			// save power by idling the processor
			set_sleep_mode(SLEEP_MODE_IDLE);
 600:	83 b7       	in	r24, 0x33	; 51
 602:	81 7f       	andi	r24, 0xF1	; 241
 604:	83 bf       	out	0x33, r24	; 51
			sleep_mode();
 606:	83 b7       	in	r24, 0x33	; 51
 608:	81 60       	ori	r24, 0x01	; 1
 60a:	83 bf       	out	0x33, r24	; 51
 60c:	88 95       	sleep
 60e:	83 b7       	in	r24, 0x33	; 51
 610:	8e 7f       	andi	r24, 0xFE	; 254
 612:	83 bf       	out	0x33, r24	; 51
 614:	da cf       	rjmp	.-76     	; 0x5ca <timerPause+0x98>
	
	TimerPauseReg = 0;
	while(TimerPauseReg < pause);

	*/
}
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	1f 91       	pop	r17
 61c:	0f 91       	pop	r16
 61e:	ff 90       	pop	r15
 620:	ef 90       	pop	r14
 622:	df 90       	pop	r13
 624:	cf 90       	pop	r12
 626:	08 95       	ret

00000628 <timer1PWMInit>:
{
	// configures timer1 for use with PWM output
	// on OC1A and OC1B pins

	// enable timer1 as 8,9,10bit PWM
	if(bitRes == 9)
 628:	89 30       	cpi	r24, 0x09	; 9
 62a:	49 f4       	brne	.+18     	; 0x63e <timer1PWMInit+0x16>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
 62c:	80 91 80 00 	lds	r24, 0x0080
 630:	82 60       	ori	r24, 0x02	; 2
 632:	80 93 80 00 	sts	0x0080, r24
		cbi(TCCR1A,PWM10);
 636:	80 91 80 00 	lds	r24, 0x0080
 63a:	8e 7f       	andi	r24, 0xFE	; 254
 63c:	0e c0       	rjmp	.+28     	; 0x65a <timer1PWMInit+0x32>
	}
	else if( bitRes == 10 )
 63e:	8a 30       	cpi	r24, 0x0A	; 10
 640:	21 f4       	brne	.+8      	; 0x64a <timer1PWMInit+0x22>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
 642:	80 91 80 00 	lds	r24, 0x0080
 646:	82 60       	ori	r24, 0x02	; 2
 648:	03 c0       	rjmp	.+6      	; 0x650 <timer1PWMInit+0x28>
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
 64a:	80 91 80 00 	lds	r24, 0x0080
 64e:	8d 7f       	andi	r24, 0xFD	; 253
 650:	80 93 80 00 	sts	0x0080, r24
		sbi(TCCR1A,PWM10);
 654:	80 91 80 00 	lds	r24, 0x0080
 658:	81 60       	ori	r24, 0x01	; 1
 65a:	80 93 80 00 	sts	0x0080, r24
	}

	// clear output compare value A
	OCR1A = 0;
 65e:	10 92 89 00 	sts	0x0089, r1
 662:	10 92 88 00 	sts	0x0088, r1
	// clear output compare value B
	OCR1B = 0;
 666:	10 92 8b 00 	sts	0x008B, r1
 66a:	10 92 8a 00 	sts	0x008A, r1
 66e:	08 95       	ret

00000670 <timer1PWMAOn>:

void timer1PWMAOn(void)
{
	// turn on channel A (OC1A) PWM output
	// set OC1A as non-inverted PWM
	sbi(TCCR1A,COM1A1);
 670:	e0 e8       	ldi	r30, 0x80	; 128
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	80 81       	ld	r24, Z
 676:	80 68       	ori	r24, 0x80	; 128
 678:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1A0);
 67a:	80 81       	ld	r24, Z
 67c:	8f 7b       	andi	r24, 0xBF	; 191
 67e:	80 83       	st	Z, r24
 680:	08 95       	ret

00000682 <timer1PWMBOn>:

void timer1PWMBOn(void)
{
	// turn on channel B (OC1B) PWM output
	// set OC1B as non-inverted PWM
	sbi(TCCR1A,COM1B1);
 682:	e0 e8       	ldi	r30, 0x80	; 128
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	80 81       	ld	r24, Z
 688:	80 62       	ori	r24, 0x20	; 32
 68a:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
 68c:	80 81       	ld	r24, Z
 68e:	8f 7e       	andi	r24, 0xEF	; 239
 690:	80 83       	st	Z, r24
 692:	08 95       	ret

00000694 <timer1PWMAOff>:

void timer1PWMAOff(void)
{
	// turn off channel A (OC1A) PWM output
	// set OC1A (OutputCompare action) to none
	cbi(TCCR1A,COM1A1);
 694:	e0 e8       	ldi	r30, 0x80	; 128
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	8f 77       	andi	r24, 0x7F	; 127
 69c:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1A0);
 69e:	80 81       	ld	r24, Z
 6a0:	8f 7b       	andi	r24, 0xBF	; 191
 6a2:	80 83       	st	Z, r24
 6a4:	08 95       	ret

000006a6 <timer1PWMBOff>:

void timer1PWMBOff(void)
{
	// turn off channel B (OC1B) PWM output
	// set OC1B (OutputCompare action) to none
	cbi(TCCR1A,COM1B1);
 6a6:	e0 e8       	ldi	r30, 0x80	; 128
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	80 81       	ld	r24, Z
 6ac:	8f 7d       	andi	r24, 0xDF	; 223
 6ae:	80 83       	st	Z, r24
	cbi(TCCR1A,COM1B0);
 6b0:	80 81       	ld	r24, Z
 6b2:	8f 7e       	andi	r24, 0xEF	; 239
 6b4:	80 83       	st	Z, r24
 6b6:	08 95       	ret

000006b8 <timer1PWMOff>:
#endif

void timer1PWMOff(void)
{
	// turn off timer1 PWM mode
	cbi(TCCR1A,PWM11);
 6b8:	e0 e8       	ldi	r30, 0x80	; 128
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	80 81       	ld	r24, Z
 6be:	8d 7f       	andi	r24, 0xFD	; 253
 6c0:	80 83       	st	Z, r24
	cbi(TCCR1A,PWM10);
 6c2:	80 81       	ld	r24, Z
 6c4:	8e 7f       	andi	r24, 0xFE	; 254
 6c6:	80 83       	st	Z, r24
	// set PWM1A/B (OutputCompare action) to none
	timer1PWMAOff();
 6c8:	0e 94 4a 03 	call	0x694	; 0x694 <timer1PWMAOff>
	timer1PWMBOff();
 6cc:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <timer1PWMBOff>

000006d0 <timer1PWMASet>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1AH);		// set the high 8bits of OCR1A
	//outp( (pwmDuty&0x00FF), OCR1AL);	// set the low 8bits of OCR1A
	OCR1A = pwmDuty;
 6d0:	90 93 89 00 	sts	0x0089, r25
 6d4:	80 93 88 00 	sts	0x0088, r24
 6d8:	08 95       	ret

000006da <timer1PWMBSet>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
 6da:	90 93 8b 00 	sts	0x008B, r25
 6de:	80 93 8a 00 	sts	0x008A, r24
 6e2:	08 95       	ret

000006e4 <__vector_18>:
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
 6e4:	1f 92       	push	r1
 6e6:	0f 92       	push	r0
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	0f 92       	push	r0
 6ec:	11 24       	eor	r1, r1
 6ee:	2f 93       	push	r18
 6f0:	3f 93       	push	r19
 6f2:	4f 93       	push	r20
 6f4:	5f 93       	push	r21
 6f6:	6f 93       	push	r22
 6f8:	7f 93       	push	r23
 6fa:	8f 93       	push	r24
 6fc:	9f 93       	push	r25
 6fe:	af 93       	push	r26
 700:	bf 93       	push	r27
 702:	ef 93       	push	r30
 704:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
 706:	80 91 92 01 	lds	r24, 0x0192
 70a:	90 91 93 01 	lds	r25, 0x0193
 70e:	a0 91 94 01 	lds	r26, 0x0194
 712:	b0 91 95 01 	lds	r27, 0x0195
 716:	01 96       	adiw	r24, 0x01	; 1
 718:	a1 1d       	adc	r26, r1
 71a:	b1 1d       	adc	r27, r1
 71c:	80 93 92 01 	sts	0x0192, r24
 720:	90 93 93 01 	sts	0x0193, r25
 724:	a0 93 94 01 	sts	0x0194, r26
 728:	b0 93 95 01 	sts	0x0195, r27

	// increment pause counter
	TimerPauseReg++;
 72c:	80 91 96 01 	lds	r24, 0x0196
 730:	90 91 97 01 	lds	r25, 0x0197
 734:	a0 91 98 01 	lds	r26, 0x0198
 738:	b0 91 99 01 	lds	r27, 0x0199
 73c:	01 96       	adiw	r24, 0x01	; 1
 73e:	a1 1d       	adc	r26, r1
 740:	b1 1d       	adc	r27, r1
 742:	80 93 96 01 	sts	0x0196, r24
 746:	90 93 97 01 	sts	0x0197, r25
 74a:	a0 93 98 01 	sts	0x0198, r26
 74e:	b0 93 99 01 	sts	0x0199, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
 752:	80 91 02 01 	lds	r24, 0x0102
 756:	90 91 03 01 	lds	r25, 0x0103
 75a:	89 2b       	or	r24, r25
 75c:	29 f0       	breq	.+10     	; 0x768 <__vector_18+0x84>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
 75e:	e0 91 02 01 	lds	r30, 0x0102
 762:	f0 91 03 01 	lds	r31, 0x0103
 766:	09 95       	icall
}
 768:	ff 91       	pop	r31
 76a:	ef 91       	pop	r30
 76c:	bf 91       	pop	r27
 76e:	af 91       	pop	r26
 770:	9f 91       	pop	r25
 772:	8f 91       	pop	r24
 774:	7f 91       	pop	r23
 776:	6f 91       	pop	r22
 778:	5f 91       	pop	r21
 77a:	4f 91       	pop	r20
 77c:	3f 91       	pop	r19
 77e:	2f 91       	pop	r18
 780:	0f 90       	pop	r0
 782:	0f be       	out	0x3f, r0	; 63
 784:	0f 90       	pop	r0
 786:	1f 90       	pop	r1
 788:	18 95       	reti

0000078a <__vector_15>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
 78a:	1f 92       	push	r1
 78c:	0f 92       	push	r0
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	0f 92       	push	r0
 792:	11 24       	eor	r1, r1
 794:	2f 93       	push	r18
 796:	3f 93       	push	r19
 798:	4f 93       	push	r20
 79a:	5f 93       	push	r21
 79c:	6f 93       	push	r22
 79e:	7f 93       	push	r23
 7a0:	8f 93       	push	r24
 7a2:	9f 93       	push	r25
 7a4:	af 93       	push	r26
 7a6:	bf 93       	push	r27
 7a8:	ef 93       	push	r30
 7aa:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
 7ac:	80 91 04 01 	lds	r24, 0x0104
 7b0:	90 91 05 01 	lds	r25, 0x0105
 7b4:	89 2b       	or	r24, r25
 7b6:	29 f0       	breq	.+10     	; 0x7c2 <__vector_15+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
 7b8:	e0 91 04 01 	lds	r30, 0x0104
 7bc:	f0 91 05 01 	lds	r31, 0x0105
 7c0:	09 95       	icall
}
 7c2:	ff 91       	pop	r31
 7c4:	ef 91       	pop	r30
 7c6:	bf 91       	pop	r27
 7c8:	af 91       	pop	r26
 7ca:	9f 91       	pop	r25
 7cc:	8f 91       	pop	r24
 7ce:	7f 91       	pop	r23
 7d0:	6f 91       	pop	r22
 7d2:	5f 91       	pop	r21
 7d4:	4f 91       	pop	r20
 7d6:	3f 91       	pop	r19
 7d8:	2f 91       	pop	r18
 7da:	0f 90       	pop	r0
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	0f 90       	pop	r0
 7e0:	1f 90       	pop	r1
 7e2:	18 95       	reti

000007e4 <__vector_11>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
 7e4:	1f 92       	push	r1
 7e6:	0f 92       	push	r0
 7e8:	0f b6       	in	r0, 0x3f	; 63
 7ea:	0f 92       	push	r0
 7ec:	11 24       	eor	r1, r1
 7ee:	2f 93       	push	r18
 7f0:	3f 93       	push	r19
 7f2:	4f 93       	push	r20
 7f4:	5f 93       	push	r21
 7f6:	6f 93       	push	r22
 7f8:	7f 93       	push	r23
 7fa:	8f 93       	push	r24
 7fc:	9f 93       	push	r25
 7fe:	af 93       	push	r26
 800:	bf 93       	push	r27
 802:	ef 93       	push	r30
 804:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
 806:	80 91 9a 01 	lds	r24, 0x019A
 80a:	90 91 9b 01 	lds	r25, 0x019B
 80e:	a0 91 9c 01 	lds	r26, 0x019C
 812:	b0 91 9d 01 	lds	r27, 0x019D
 816:	01 96       	adiw	r24, 0x01	; 1
 818:	a1 1d       	adc	r26, r1
 81a:	b1 1d       	adc	r27, r1
 81c:	80 93 9a 01 	sts	0x019A, r24
 820:	90 93 9b 01 	sts	0x019B, r25
 824:	a0 93 9c 01 	sts	0x019C, r26
 828:	b0 93 9d 01 	sts	0x019D, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
 82c:	80 91 0c 01 	lds	r24, 0x010C
 830:	90 91 0d 01 	lds	r25, 0x010D
 834:	89 2b       	or	r24, r25
 836:	29 f0       	breq	.+10     	; 0x842 <__vector_11+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
 838:	e0 91 0c 01 	lds	r30, 0x010C
 83c:	f0 91 0d 01 	lds	r31, 0x010D
 840:	09 95       	icall
}
 842:	ff 91       	pop	r31
 844:	ef 91       	pop	r30
 846:	bf 91       	pop	r27
 848:	af 91       	pop	r26
 84a:	9f 91       	pop	r25
 84c:	8f 91       	pop	r24
 84e:	7f 91       	pop	r23
 850:	6f 91       	pop	r22
 852:	5f 91       	pop	r21
 854:	4f 91       	pop	r20
 856:	3f 91       	pop	r19
 858:	2f 91       	pop	r18
 85a:	0f 90       	pop	r0
 85c:	0f be       	out	0x3f, r0	; 63
 85e:	0f 90       	pop	r0
 860:	1f 90       	pop	r1
 862:	18 95       	reti

00000864 <__vector_13>:
}
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
 864:	1f 92       	push	r1
 866:	0f 92       	push	r0
 868:	0f b6       	in	r0, 0x3f	; 63
 86a:	0f 92       	push	r0
 86c:	11 24       	eor	r1, r1
 86e:	2f 93       	push	r18
 870:	3f 93       	push	r19
 872:	4f 93       	push	r20
 874:	5f 93       	push	r21
 876:	6f 93       	push	r22
 878:	7f 93       	push	r23
 87a:	8f 93       	push	r24
 87c:	9f 93       	push	r25
 87e:	af 93       	push	r26
 880:	bf 93       	push	r27
 882:	ef 93       	push	r30
 884:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
 886:	80 91 06 01 	lds	r24, 0x0106
 88a:	90 91 07 01 	lds	r25, 0x0107
 88e:	89 2b       	or	r24, r25
 890:	29 f0       	breq	.+10     	; 0x89c <__vector_13+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
 892:	e0 91 06 01 	lds	r30, 0x0106
 896:	f0 91 07 01 	lds	r31, 0x0107
 89a:	09 95       	icall
}
 89c:	ff 91       	pop	r31
 89e:	ef 91       	pop	r30
 8a0:	bf 91       	pop	r27
 8a2:	af 91       	pop	r26
 8a4:	9f 91       	pop	r25
 8a6:	8f 91       	pop	r24
 8a8:	7f 91       	pop	r23
 8aa:	6f 91       	pop	r22
 8ac:	5f 91       	pop	r21
 8ae:	4f 91       	pop	r20
 8b0:	3f 91       	pop	r19
 8b2:	2f 91       	pop	r18
 8b4:	0f 90       	pop	r0
 8b6:	0f be       	out	0x3f, r0	; 63
 8b8:	0f 90       	pop	r0
 8ba:	1f 90       	pop	r1
 8bc:	18 95       	reti

000008be <__vector_14>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
 8be:	1f 92       	push	r1
 8c0:	0f 92       	push	r0
 8c2:	0f b6       	in	r0, 0x3f	; 63
 8c4:	0f 92       	push	r0
 8c6:	11 24       	eor	r1, r1
 8c8:	2f 93       	push	r18
 8ca:	3f 93       	push	r19
 8cc:	4f 93       	push	r20
 8ce:	5f 93       	push	r21
 8d0:	6f 93       	push	r22
 8d2:	7f 93       	push	r23
 8d4:	8f 93       	push	r24
 8d6:	9f 93       	push	r25
 8d8:	af 93       	push	r26
 8da:	bf 93       	push	r27
 8dc:	ef 93       	push	r30
 8de:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
 8e0:	80 91 08 01 	lds	r24, 0x0108
 8e4:	90 91 09 01 	lds	r25, 0x0109
 8e8:	89 2b       	or	r24, r25
 8ea:	29 f0       	breq	.+10     	; 0x8f6 <__vector_14+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
 8ec:	e0 91 08 01 	lds	r30, 0x0108
 8f0:	f0 91 09 01 	lds	r31, 0x0109
 8f4:	09 95       	icall
}
 8f6:	ff 91       	pop	r31
 8f8:	ef 91       	pop	r30
 8fa:	bf 91       	pop	r27
 8fc:	af 91       	pop	r26
 8fe:	9f 91       	pop	r25
 900:	8f 91       	pop	r24
 902:	7f 91       	pop	r23
 904:	6f 91       	pop	r22
 906:	5f 91       	pop	r21
 908:	4f 91       	pop	r20
 90a:	3f 91       	pop	r19
 90c:	2f 91       	pop	r18
 90e:	0f 90       	pop	r0
 910:	0f be       	out	0x3f, r0	; 63
 912:	0f 90       	pop	r0
 914:	1f 90       	pop	r1
 916:	18 95       	reti

00000918 <__vector_12>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
 918:	1f 92       	push	r1
 91a:	0f 92       	push	r0
 91c:	0f b6       	in	r0, 0x3f	; 63
 91e:	0f 92       	push	r0
 920:	11 24       	eor	r1, r1
 922:	2f 93       	push	r18
 924:	3f 93       	push	r19
 926:	4f 93       	push	r20
 928:	5f 93       	push	r21
 92a:	6f 93       	push	r22
 92c:	7f 93       	push	r23
 92e:	8f 93       	push	r24
 930:	9f 93       	push	r25
 932:	af 93       	push	r26
 934:	bf 93       	push	r27
 936:	ef 93       	push	r30
 938:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
 93a:	80 91 0a 01 	lds	r24, 0x010A
 93e:	90 91 0b 01 	lds	r25, 0x010B
 942:	89 2b       	or	r24, r25
 944:	29 f0       	breq	.+10     	; 0x950 <__vector_12+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
 946:	e0 91 0a 01 	lds	r30, 0x010A
 94a:	f0 91 0b 01 	lds	r31, 0x010B
 94e:	09 95       	icall
}
 950:	ff 91       	pop	r31
 952:	ef 91       	pop	r30
 954:	bf 91       	pop	r27
 956:	af 91       	pop	r26
 958:	9f 91       	pop	r25
 95a:	8f 91       	pop	r24
 95c:	7f 91       	pop	r23
 95e:	6f 91       	pop	r22
 960:	5f 91       	pop	r21
 962:	4f 91       	pop	r20
 964:	3f 91       	pop	r19
 966:	2f 91       	pop	r18
 968:	0f 90       	pop	r0
 96a:	0f be       	out	0x3f, r0	; 63
 96c:	0f 90       	pop	r0
 96e:	1f 90       	pop	r1
 970:	18 95       	reti

00000972 <__vector_9>:

//! Interrupt handler for OutputCompare2A match (OC2A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMPA_vect)
{
 972:	1f 92       	push	r1
 974:	0f 92       	push	r0
 976:	0f b6       	in	r0, 0x3f	; 63
 978:	0f 92       	push	r0
 97a:	11 24       	eor	r1, r1
 97c:	2f 93       	push	r18
 97e:	3f 93       	push	r19
 980:	4f 93       	push	r20
 982:	5f 93       	push	r21
 984:	6f 93       	push	r22
 986:	7f 93       	push	r23
 988:	8f 93       	push	r24
 98a:	9f 93       	push	r25
 98c:	af 93       	push	r26
 98e:	bf 93       	push	r27
 990:	ef 93       	push	r30
 992:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
 994:	80 91 0e 01 	lds	r24, 0x010E
 998:	90 91 0f 01 	lds	r25, 0x010F
 99c:	89 2b       	or	r24, r25
 99e:	29 f0       	breq	.+10     	; 0x9aa <__vector_9+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
 9a0:	e0 91 0e 01 	lds	r30, 0x010E
 9a4:	f0 91 0f 01 	lds	r31, 0x010F
 9a8:	09 95       	icall
}
 9aa:	ff 91       	pop	r31
 9ac:	ef 91       	pop	r30
 9ae:	bf 91       	pop	r27
 9b0:	af 91       	pop	r26
 9b2:	9f 91       	pop	r25
 9b4:	8f 91       	pop	r24
 9b6:	7f 91       	pop	r23
 9b8:	6f 91       	pop	r22
 9ba:	5f 91       	pop	r21
 9bc:	4f 91       	pop	r20
 9be:	3f 91       	pop	r19
 9c0:	2f 91       	pop	r18
 9c2:	0f 90       	pop	r0
 9c4:	0f be       	out	0x3f, r0	; 63
 9c6:	0f 90       	pop	r0
 9c8:	1f 90       	pop	r1
 9ca:	18 95       	reti

000009cc <__vector_10>:

//! Interrupt handler for OutputCompare2B match (OC2B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMPB_vect)
{
 9cc:	1f 92       	push	r1
 9ce:	0f 92       	push	r0
 9d0:	0f b6       	in	r0, 0x3f	; 63
 9d2:	0f 92       	push	r0
 9d4:	11 24       	eor	r1, r1
 9d6:	2f 93       	push	r18
 9d8:	3f 93       	push	r19
 9da:	4f 93       	push	r20
 9dc:	5f 93       	push	r21
 9de:	6f 93       	push	r22
 9e0:	7f 93       	push	r23
 9e2:	8f 93       	push	r24
 9e4:	9f 93       	push	r25
 9e6:	af 93       	push	r26
 9e8:	bf 93       	push	r27
 9ea:	ef 93       	push	r30
 9ec:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
 9ee:	80 91 0e 01 	lds	r24, 0x010E
 9f2:	90 91 0f 01 	lds	r25, 0x010F
 9f6:	89 2b       	or	r24, r25
 9f8:	29 f0       	breq	.+10     	; 0xa04 <__vector_10+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
 9fa:	e0 91 0e 01 	lds	r30, 0x010E
 9fe:	f0 91 0f 01 	lds	r31, 0x010F
 a02:	09 95       	icall
}
 a04:	ff 91       	pop	r31
 a06:	ef 91       	pop	r30
 a08:	bf 91       	pop	r27
 a0a:	af 91       	pop	r26
 a0c:	9f 91       	pop	r25
 a0e:	8f 91       	pop	r24
 a10:	7f 91       	pop	r23
 a12:	6f 91       	pop	r22
 a14:	5f 91       	pop	r21
 a16:	4f 91       	pop	r20
 a18:	3f 91       	pop	r19
 a1a:	2f 91       	pop	r18
 a1c:	0f 90       	pop	r0
 a1e:	0f be       	out	0x3f, r0	; 63
 a20:	0f 90       	pop	r0
 a22:	1f 90       	pop	r1
 a24:	18 95       	reti

00000a26 <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (unsigned char *)uartRxData, UART_RX_BUFFER_SIZE);
 a26:	40 e4       	ldi	r20, 0x40	; 64
 a28:	50 e0       	ldi	r21, 0x00	; 0
 a2a:	62 e5       	ldi	r22, 0x52	; 82
 a2c:	71 e0       	ldi	r23, 0x01	; 1
 a2e:	8f e9       	ldi	r24, 0x9F	; 159
 a30:	91 e0       	ldi	r25, 0x01	; 1
 a32:	0e 94 1e 01 	call	0x23c	; 0x23c <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (unsigned char *)uartTxData, UART_TX_BUFFER_SIZE);
 a36:	40 e4       	ldi	r20, 0x40	; 64
 a38:	50 e0       	ldi	r21, 0x00	; 0
 a3a:	62 e1       	ldi	r22, 0x12	; 18
 a3c:	71 e0       	ldi	r23, 0x01	; 1
 a3e:	88 ea       	ldi	r24, 0xA8	; 168
 a40:	91 e0       	ldi	r25, 0x01	; 1
 a42:	0c 94 1e 01 	jmp	0x23c	; 0x23c <bufferInit>

00000a46 <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
 a46:	0e 94 13 05 	call	0xa26	; 0xa26 <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
 a4a:	10 92 11 01 	sts	0x0111, r1
 a4e:	10 92 10 01 	sts	0x0110, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
 a52:	88 ed       	ldi	r24, 0xD8	; 216
 a54:	80 93 c1 00 	sts	0x00C1, r24
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
 a58:	8f e2       	ldi	r24, 0x2F	; 47
 a5a:	80 93 c4 00 	sts	0x00C4, r24
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 a5e:	10 92 c5 00 	sts	0x00C5, r1
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
 a62:	8f ef       	ldi	r24, 0xFF	; 255
 a64:	80 93 9e 01 	sts	0x019E, r24
	uartBufferedTx = FALSE;
 a68:	10 92 a7 01 	sts	0x01A7, r1
	// clear overflow count
	uartRxOverflow = 0;
 a6c:	10 92 b1 01 	sts	0x01B1, r1
 a70:	10 92 b0 01 	sts	0x01B0, r1
	// enable interrupts
	sei();
 a74:	78 94       	sei
 a76:	08 95       	ret

00000a78 <uartSetBaudRate>:
	UartRxFunc = rx_func;
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
 a78:	0f 93       	push	r16
 a7a:	1f 93       	push	r17
 a7c:	8b 01       	movw	r16, r22
 a7e:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
 a80:	dc 01       	movw	r26, r24
 a82:	cb 01       	movw	r24, r22
 a84:	90 5f       	subi	r25, 0xF0	; 240
 a86:	a1 4f       	sbci	r26, 0xF1	; 241
 a88:	bf 4f       	sbci	r27, 0xFF	; 255
 a8a:	bc 01       	movw	r22, r24
 a8c:	cd 01       	movw	r24, r26
 a8e:	43 e0       	ldi	r20, 0x03	; 3
 a90:	66 0f       	add	r22, r22
 a92:	77 1f       	adc	r23, r23
 a94:	88 1f       	adc	r24, r24
 a96:	99 1f       	adc	r25, r25
 a98:	4a 95       	dec	r20
 a9a:	d1 f7       	brne	.-12     	; 0xa90 <uartSetBaudRate+0x18>
 a9c:	a9 01       	movw	r20, r18
 a9e:	98 01       	movw	r18, r16
 aa0:	e4 e0       	ldi	r30, 0x04	; 4
 aa2:	22 0f       	add	r18, r18
 aa4:	33 1f       	adc	r19, r19
 aa6:	44 1f       	adc	r20, r20
 aa8:	55 1f       	adc	r21, r21
 aaa:	ea 95       	dec	r30
 aac:	d1 f7       	brne	.-12     	; 0xaa2 <uartSetBaudRate+0x2a>
 aae:	0e 94 9c 07 	call	0xf38	; 0xf38 <__udivmodsi4>
 ab2:	21 50       	subi	r18, 0x01	; 1
 ab4:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
 ab6:	20 93 c4 00 	sts	0x00C4, r18
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 aba:	30 93 c5 00 	sts	0x00C5, r19
	#endif
}
 abe:	1f 91       	pop	r17
 ac0:	0f 91       	pop	r16
 ac2:	08 95       	ret

00000ac4 <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
 ac4:	90 91 9e 01 	lds	r25, 0x019E
 ac8:	99 23       	and	r25, r25
 aca:	e1 f3       	breq	.-8      	; 0xac4 <uartSendByte>
	// send byte
	outb(UDR, txData);
 acc:	80 93 c6 00 	sts	0x00C6, r24
	// set ready state to FALSE
	uartReadyTx = FALSE;
 ad0:	10 92 9e 01 	sts	0x019E, r1
 ad4:	08 95       	ret

00000ad6 <__vector_22>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_TRANS)
{
 ad6:	1f 92       	push	r1
 ad8:	0f 92       	push	r0
 ada:	0f b6       	in	r0, 0x3f	; 63
 adc:	0f 92       	push	r0
 ade:	11 24       	eor	r1, r1
 ae0:	2f 93       	push	r18
 ae2:	3f 93       	push	r19
 ae4:	4f 93       	push	r20
 ae6:	5f 93       	push	r21
 ae8:	6f 93       	push	r22
 aea:	7f 93       	push	r23
 aec:	8f 93       	push	r24
 aee:	9f 93       	push	r25
 af0:	af 93       	push	r26
 af2:	bf 93       	push	r27
 af4:	ef 93       	push	r30
 af6:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
 af8:	80 91 a7 01 	lds	r24, 0x01A7
 afc:	88 23       	and	r24, r24
 afe:	79 f0       	breq	.+30     	; 0xb1e <__vector_22+0x48>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
 b00:	80 91 ac 01 	lds	r24, 0x01AC
 b04:	90 91 ad 01 	lds	r25, 0x01AD
 b08:	89 2b       	or	r24, r25
 b0a:	39 f0       	breq	.+14     	; 0xb1a <__vector_22+0x44>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
 b0c:	88 ea       	ldi	r24, 0xA8	; 168
 b0e:	91 e0       	ldi	r25, 0x01	; 1
 b10:	0e 94 2b 01 	call	0x256	; 0x256 <bufferGetFromFront>
 b14:	80 93 c6 00 	sts	0x00C6, r24
 b18:	05 c0       	rjmp	.+10     	; 0xb24 <__vector_22+0x4e>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
 b1a:	10 92 a7 01 	sts	0x01A7, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
 b1e:	8f ef       	ldi	r24, 0xFF	; 255
 b20:	80 93 9e 01 	sts	0x019E, r24
	}
}
 b24:	ff 91       	pop	r31
 b26:	ef 91       	pop	r30
 b28:	bf 91       	pop	r27
 b2a:	af 91       	pop	r26
 b2c:	9f 91       	pop	r25
 b2e:	8f 91       	pop	r24
 b30:	7f 91       	pop	r23
 b32:	6f 91       	pop	r22
 b34:	5f 91       	pop	r21
 b36:	4f 91       	pop	r20
 b38:	3f 91       	pop	r19
 b3a:	2f 91       	pop	r18
 b3c:	0f 90       	pop	r0
 b3e:	0f be       	out	0x3f, r0	; 63
 b40:	0f 90       	pop	r0
 b42:	1f 90       	pop	r1
 b44:	18 95       	reti

00000b46 <__vector_20>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_RECV)
{
 b46:	1f 92       	push	r1
 b48:	0f 92       	push	r0
 b4a:	0f b6       	in	r0, 0x3f	; 63
 b4c:	0f 92       	push	r0
 b4e:	11 24       	eor	r1, r1
 b50:	2f 93       	push	r18
 b52:	3f 93       	push	r19
 b54:	4f 93       	push	r20
 b56:	5f 93       	push	r21
 b58:	6f 93       	push	r22
 b5a:	7f 93       	push	r23
 b5c:	8f 93       	push	r24
 b5e:	9f 93       	push	r25
 b60:	af 93       	push	r26
 b62:	bf 93       	push	r27
 b64:	ef 93       	push	r30
 b66:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
 b68:	80 91 c6 00 	lds	r24, 0x00C6

	// if there's a user function to handle this receive event
	if(UartRxFunc)
 b6c:	20 91 10 01 	lds	r18, 0x0110
 b70:	30 91 11 01 	lds	r19, 0x0111
 b74:	23 2b       	or	r18, r19
 b76:	31 f0       	breq	.+12     	; 0xb84 <__vector_20+0x3e>
	{
		// call it and pass the received data
		UartRxFunc(c);
 b78:	e0 91 10 01 	lds	r30, 0x0110
 b7c:	f0 91 11 01 	lds	r31, 0x0111
 b80:	09 95       	icall
 b82:	10 c0       	rjmp	.+32     	; 0xba4 <__vector_20+0x5e>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
 b84:	68 2f       	mov	r22, r24
 b86:	8f e9       	ldi	r24, 0x9F	; 159
 b88:	91 e0       	ldi	r25, 0x01	; 1
 b8a:	0e 94 4f 01 	call	0x29e	; 0x29e <bufferAddToEnd>
 b8e:	81 11       	cpse	r24, r1
 b90:	09 c0       	rjmp	.+18     	; 0xba4 <__vector_20+0x5e>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
 b92:	80 91 b0 01 	lds	r24, 0x01B0
 b96:	90 91 b1 01 	lds	r25, 0x01B1
 b9a:	01 96       	adiw	r24, 0x01	; 1
 b9c:	90 93 b1 01 	sts	0x01B1, r25
 ba0:	80 93 b0 01 	sts	0x01B0, r24
		}
	}
}
 ba4:	ff 91       	pop	r31
 ba6:	ef 91       	pop	r30
 ba8:	bf 91       	pop	r27
 baa:	af 91       	pop	r26
 bac:	9f 91       	pop	r25
 bae:	8f 91       	pop	r24
 bb0:	7f 91       	pop	r23
 bb2:	6f 91       	pop	r22
 bb4:	5f 91       	pop	r21
 bb6:	4f 91       	pop	r20
 bb8:	3f 91       	pop	r19
 bba:	2f 91       	pop	r18
 bbc:	0f 90       	pop	r0
 bbe:	0f be       	out	0x3f, r0	; 63
 bc0:	0f 90       	pop	r0
 bc2:	1f 90       	pop	r1
 bc4:	18 95       	reti

00000bc6 <ButtonInit>:
*********************************************************************************************************
*/

void ButtonInit(void)
{
	DDRD  &= ~((1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3));	/* Set PD6-PD3 as input */
 bc6:	8a b1       	in	r24, 0x0a	; 10
 bc8:	87 78       	andi	r24, 0x87	; 135
 bca:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PD6) | (1<<PD5) | (1<<PD4) | (1<<PD3);			/* Set PD6-PD3 as internal pull up */
 bcc:	8b b1       	in	r24, 0x0b	; 11
 bce:	88 67       	ori	r24, 0x78	; 120
 bd0:	8b b9       	out	0x0b, r24	; 11
	
	/* 
	Set PC7-PC4 as input as internal pull up
	Set PC3-PC0 as Tri-state (Hi-Z) 
	*/
	DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 bd2:	17 b8       	out	0x07, r1	; 7
	PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 bd4:	80 ef       	ldi	r24, 0xF0	; 240
 bd6:	88 b9       	out	0x08, r24	; 8
 bd8:	08 95       	ret

00000bda <ButtonCycleUpdate>:
*
*********************************************************************************************************
*/

void ButtonCycleUpdate(void)
{
 bda:	cf 92       	push	r12
 bdc:	df 92       	push	r13
 bde:	ef 92       	push	r14
 be0:	ff 92       	push	r15
 be2:	0f 93       	push	r16
 be4:	1f 93       	push	r17
	ButtonDataType io_state = 0;
	ButtonDataType tempValue;
	ButtonDataType MatrixButtonValue;
	uint8_t Col;
	
	tempValue = (~PIND) & ((1<<PIND6) | (1<<PIND5) | (1<<PIND4) | (1<<PIND3));	/* Get PD6-PD3 IO state */
 be6:	89 b1       	in	r24, 0x09	; 9
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	80 95       	com	r24
 bec:	90 95       	com	r25
 bee:	88 77       	andi	r24, 0x78	; 120
 bf0:	99 27       	eor	r25, r25
 bf2:	09 2e       	mov	r0, r25
 bf4:	00 0c       	add	r0, r0
 bf6:	aa 0b       	sbc	r26, r26
 bf8:	bb 0b       	sbc	r27, r27
	tempValue >>= 3;
 bfa:	33 e0       	ldi	r19, 0x03	; 3
 bfc:	b6 95       	lsr	r27
 bfe:	a7 95       	ror	r26
 c00:	97 95       	ror	r25
 c02:	87 95       	ror	r24
 c04:	3a 95       	dec	r19
 c06:	d1 f7       	brne	.-12     	; 0xbfc <ButtonCycleUpdate+0x22>
	/* 
	Set PC7-PC4 as input as internal pull up
	Set PC3-PC0 as Tri-state (Hi-Z) 
	*/
	DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 c08:	17 b8       	out	0x07, r1	; 7
	PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 c0a:	20 ef       	ldi	r18, 0xF0	; 240
 c0c:	28 b9       	out	0x08, r18	; 8
 c0e:	20 e0       	ldi	r18, 0x00	; 0
 c10:	30 e0       	ldi	r19, 0x00	; 0
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
	{
		/* Set one Column as output low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
 c12:	e8 e0       	ldi	r30, 0x08	; 8
 c14:	f0 e0       	ldi	r31, 0x00	; 0
		/* 
		Set PC7-PC4 as input as internal pull up,
		Set PC3-PC0 as Tri-state (Hi-Z), prepare next column read.
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 c16:	70 ef       	ldi	r23, 0xF0	; 240
	DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
	PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
	{
		/* Set one Column as output low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
 c18:	67 b1       	in	r22, 0x07	; 7
 c1a:	af 01       	movw	r20, r30
 c1c:	02 2e       	mov	r0, r18
 c1e:	02 c0       	rjmp	.+4      	; 0xc24 <ButtonCycleUpdate+0x4a>
 c20:	55 95       	asr	r21
 c22:	47 95       	ror	r20
 c24:	0a 94       	dec	r0
 c26:	e2 f7       	brpl	.-8      	; 0xc20 <ButtonCycleUpdate+0x46>
 c28:	56 2f       	mov	r21, r22
 c2a:	54 2b       	or	r21, r20
 c2c:	57 b9       	out	0x07, r21	; 7
		PORTC &= ~(0x08>>Col);		/* Set the column as low */
 c2e:	58 b1       	in	r21, 0x08	; 8
 c30:	40 95       	com	r20
 c32:	45 23       	and	r20, r21
 c34:	48 b9       	out	0x08, r20	; 8
		
		/* Save button state after the column which active as low */
		MatrixButtonValue = ((~PORTC) & 0xf0) << 4*(3-Col);
 c36:	48 b1       	in	r20, 0x08	; 8
		
		/* 
		Set PC7-PC4 as input as internal pull up,
		Set PC3-PC0 as Tri-state (Hi-Z), prepare next column read.
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 c38:	17 b8       	out	0x07, r1	; 7
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 c3a:	78 b9       	out	0x08, r23	; 8
 c3c:	2f 5f       	subi	r18, 0xFF	; 255
 c3e:	3f 4f       	sbci	r19, 0xFF	; 255
	Set PC7-PC4 as input as internal pull up
	Set PC3-PC0 as Tri-state (Hi-Z) 
	*/
	DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
	PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
 c40:	24 30       	cpi	r18, 0x04	; 4
 c42:	31 05       	cpc	r19, r1
 c44:	49 f7       	brne	.-46     	; 0xc18 <ButtonCycleUpdate+0x3e>
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
	}
	
	io_state = MatrixButtonValue | (tempValue << 16);
 c46:	dc 01       	movw	r26, r24
 c48:	99 27       	eor	r25, r25
 c4a:	88 27       	eor	r24, r24
 c4c:	00 91 b2 01 	lds	r16, 0x01B2
 c50:	10 91 b3 01 	lds	r17, 0x01B3
 c54:	20 91 b4 01 	lds	r18, 0x01B4
 c58:	30 91 b5 01 	lds	r19, 0x01B5
 c5c:	80 2b       	or	r24, r16
 c5e:	91 2b       	or	r25, r17
 c60:	a2 2b       	or	r26, r18
 c62:	b3 2b       	or	r27, r19
		/* Set one Column as output low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
		PORTC &= ~(0x08>>Col);		/* Set the column as low */
		
		/* Save button state after the column which active as low */
		MatrixButtonValue = ((~PORTC) & 0xf0) << 4*(3-Col);
 c64:	50 e0       	ldi	r21, 0x00	; 0
 c66:	40 95       	com	r20
 c68:	50 95       	com	r21
 c6a:	40 7f       	andi	r20, 0xF0	; 240
 c6c:	55 27       	eor	r21, r21
 c6e:	05 2e       	mov	r0, r21
 c70:	00 0c       	add	r0, r0
 c72:	66 0b       	sbc	r22, r22
 c74:	77 0b       	sbc	r23, r23
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
 c76:	84 2b       	or	r24, r20
 c78:	95 2b       	or	r25, r21
 c7a:	a6 2b       	or	r26, r22
 c7c:	b7 2b       	or	r27, r23
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
 c7e:	10 92 b2 01 	sts	0x01B2, r1
 c82:	10 92 b3 01 	sts	0x01B3, r1
 c86:	10 92 b4 01 	sts	0x01B4, r1
 c8a:	10 92 b5 01 	sts	0x01B5, r1
	b = button.buttonsLastCycle.bVal;
 c8e:	40 91 b6 01 	lds	r20, 0x01B6
 c92:	50 91 b7 01 	lds	r21, 0x01B7
 c96:	60 91 b8 01 	lds	r22, 0x01B8
 c9a:	70 91 b9 01 	lds	r23, 0x01B9
	holdTime = button.buttonHoldTime;
 c9e:	20 91 ca 01 	lds	r18, 0x01CA
 ca2:	30 91 cb 01 	lds	r19, 0x01CB
	
	if (button.buttonsReleased.bVal != 0) {		
 ca6:	c0 90 ba 01 	lds	r12, 0x01BA
 caa:	d0 90 bb 01 	lds	r13, 0x01BB
 cae:	e0 90 bc 01 	lds	r14, 0x01BC
 cb2:	f0 90 bd 01 	lds	r15, 0x01BD
 cb6:	c1 14       	cp	r12, r1
 cb8:	d1 04       	cpc	r13, r1
 cba:	e1 04       	cpc	r14, r1
 cbc:	f1 04       	cpc	r15, r1
 cbe:	49 f0       	breq	.+18     	; 0xcd2 <ButtonCycleUpdate+0xf8>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
 cc0:	c0 92 c2 01 	sts	0x01C2, r12
 cc4:	d0 92 c3 01 	sts	0x01C3, r13
 cc8:	e0 92 c4 01 	sts	0x01C4, r14
 ccc:	f0 92 c5 01 	sts	0x01C5, r15
 cd0:	0b c0       	rjmp	.+22     	; 0xce8 <ButtonCycleUpdate+0x10e>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
 cd2:	2d 33       	cpi	r18, 0x3D	; 61
 cd4:	31 05       	cpc	r19, r1
 cd6:	40 f0       	brcs	.+16     	; 0xce8 <ButtonCycleUpdate+0x10e>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
 cd8:	10 92 c2 01 	sts	0x01C2, r1
 cdc:	10 92 c3 01 	sts	0x01C3, r1
 ce0:	10 92 c4 01 	sts	0x01C4, r1
 ce4:	10 92 c5 01 	sts	0x01C5, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
 ce8:	10 92 ba 01 	sts	0x01BA, r1
 cec:	10 92 bb 01 	sts	0x01BB, r1
 cf0:	10 92 bc 01 	sts	0x01BC, r1
 cf4:	10 92 bd 01 	sts	0x01BD, r1
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
 cf8:	10 92 c6 01 	sts	0x01C6, r1
 cfc:	10 92 c7 01 	sts	0x01C7, r1
 d00:	10 92 c8 01 	sts	0x01C8, r1
 d04:	10 92 c9 01 	sts	0x01C9, r1
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
 d08:	84 17       	cp	r24, r20
 d0a:	95 07       	cpc	r25, r21
 d0c:	a6 07       	cpc	r26, r22
 d0e:	b7 07       	cpc	r27, r23
 d10:	d9 f4       	brne	.+54     	; 0xd48 <ButtonCycleUpdate+0x16e>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
 d12:	2f 5f       	subi	r18, 0xFF	; 255
 d14:	3f 4f       	sbci	r19, 0xFF	; 255
 d16:	24 32       	cpi	r18, 0x24	; 36
 d18:	31 05       	cpc	r19, r1
 d1a:	48 f4       	brcc	.+18     	; 0xd2e <ButtonCycleUpdate+0x154>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
 d1c:	10 92 be 01 	sts	0x01BE, r1
 d20:	10 92 bf 01 	sts	0x01BF, r1
 d24:	10 92 c0 01 	sts	0x01C0, r1
 d28:	10 92 c1 01 	sts	0x01C1, r1
 d2c:	08 c0       	rjmp	.+16     	; 0xd3e <ButtonCycleUpdate+0x164>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
 d2e:	80 93 be 01 	sts	0x01BE, r24
 d32:	90 93 bf 01 	sts	0x01BF, r25
 d36:	a0 93 c0 01 	sts	0x01C0, r26
 d3a:	b0 93 c1 01 	sts	0x01C1, r27
		}	
		button.buttonHoldTime = holdTime;
 d3e:	30 93 cb 01 	sts	0x01CB, r19
 d42:	20 93 ca 01 	sts	0x01CA, r18
 d46:	45 c0       	rjmp	.+138    	; 0xdd2 <ButtonCycleUpdate+0x1f8>
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
 d48:	80 93 b6 01 	sts	0x01B6, r24
 d4c:	90 93 b7 01 	sts	0x01B7, r25
 d50:	a0 93 b8 01 	sts	0x01B8, r26
 d54:	b0 93 b9 01 	sts	0x01B9, r27
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
 d58:	80 95       	com	r24
 d5a:	90 95       	com	r25
 d5c:	a0 95       	com	r26
 d5e:	b0 95       	com	r27
 d60:	84 23       	and	r24, r20
 d62:	95 23       	and	r25, r21
 d64:	a6 23       	and	r26, r22
 d66:	b7 23       	and	r27, r23
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
 d68:	40 91 be 01 	lds	r20, 0x01BE
 d6c:	50 91 bf 01 	lds	r21, 0x01BF
 d70:	60 91 c0 01 	lds	r22, 0x01C0
 d74:	70 91 c1 01 	lds	r23, 0x01C1
 d78:	48 23       	and	r20, r24
 d7a:	59 23       	and	r21, r25
 d7c:	6a 23       	and	r22, r26
 d7e:	7b 23       	and	r23, r27
 d80:	45 2b       	or	r20, r21
 d82:	46 2b       	or	r20, r22
 d84:	47 2b       	or	r20, r23
 d86:	29 f5       	brne	.+74     	; 0xdd2 <ButtonCycleUpdate+0x1f8>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
 d88:	10 92 cb 01 	sts	0x01CB, r1
 d8c:	10 92 ca 01 	sts	0x01CA, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
 d90:	25 50       	subi	r18, 0x05	; 5
 d92:	31 09       	sbc	r19, r1
 d94:	2e 31       	cpi	r18, 0x1E	; 30
 d96:	31 05       	cpc	r19, r1
 d98:	e0 f4       	brcc	.+56     	; 0xdd2 <ButtonCycleUpdate+0x1f8>
				button.buttonsReleased.bVal = buttons;	
 d9a:	80 93 ba 01 	sts	0x01BA, r24
 d9e:	90 93 bb 01 	sts	0x01BB, r25
 da2:	a0 93 bc 01 	sts	0x01BC, r26
 da6:	b0 93 bd 01 	sts	0x01BD, r27
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
 daa:	40 91 c2 01 	lds	r20, 0x01C2
 dae:	50 91 c3 01 	lds	r21, 0x01C3
 db2:	60 91 c4 01 	lds	r22, 0x01C4
 db6:	70 91 c5 01 	lds	r23, 0x01C5
 dba:	84 23       	and	r24, r20
 dbc:	95 23       	and	r25, r21
 dbe:	a6 23       	and	r26, r22
 dc0:	b7 23       	and	r27, r23
 dc2:	80 93 c6 01 	sts	0x01C6, r24
 dc6:	90 93 c7 01 	sts	0x01C7, r25
 dca:	a0 93 c8 01 	sts	0x01C8, r26
 dce:	b0 93 c9 01 	sts	0x01C9, r27
													button.buttonsReleasedHistory.bVal;
			}       
		}
	}
}
 dd2:	1f 91       	pop	r17
 dd4:	0f 91       	pop	r16
 dd6:	ff 90       	pop	r15
 dd8:	ef 90       	pop	r14
 dda:	df 90       	pop	r13
 ddc:	cf 90       	pop	r12
 dde:	08 95       	ret

00000de0 <timerTest>:
	}
	return 0;
}

void timerTest(void)
{
 de0:	cf 93       	push	r28
	// print a little intro message so we know things are working
	rprintf("\r\n\n\nWelcome to the timer library test program!\r\n");
 de2:	8c ec       	ldi	r24, 0xCC	; 204
 de4:	91 e0       	ldi	r25, 0x01	; 1
 de6:	9f 93       	push	r25
 de8:	8f 93       	push	r24
 dea:	c1 e0       	ldi	r28, 0x01	; 1
 dec:	cf 93       	push	r28
 dee:	0e 94 8e 01 	call	0x31c	; 0x31c <rprintf1RamRom>

	// initialize the timer system
	timerInit();
 df2:	0e 94 88 02 	call	0x510	; 0x510 <timerInit>
	// to use the internal timers to produce a calibrated delay,
	// use the timerPause() function.  timerPause takes a 16-bit
	// integer argument in milliseconds

	// example: wait for 1/2 of a second, or 500ms
	rprintf("\r\nTest of timerPause() function\r\n");
 df6:	8a ea       	ldi	r24, 0xAA	; 170
 df8:	91 e0       	ldi	r25, 0x01	; 1
 dfa:	9f 93       	push	r25
 dfc:	8f 93       	push	r24
 dfe:	cf 93       	push	r28
 e00:	0e 94 8e 01 	call	0x31c	; 0x31c <rprintf1RamRom>
	rprintf("Here comes a 1/2-second delay...\r\n");
 e04:	87 e8       	ldi	r24, 0x87	; 135
 e06:	91 e0       	ldi	r25, 0x01	; 1
 e08:	9f 93       	push	r25
 e0a:	8f 93       	push	r24
 e0c:	cf 93       	push	r28
 e0e:	0e 94 8e 01 	call	0x31c	; 0x31c <rprintf1RamRom>
	timerPause(500);
 e12:	84 ef       	ldi	r24, 0xF4	; 244
 e14:	91 e0       	ldi	r25, 0x01	; 1
 e16:	0e 94 99 02 	call	0x532	; 0x532 <timerPause>
	rprintf("Done!\r\n");
 e1a:	8f e7       	ldi	r24, 0x7F	; 127
 e1c:	91 e0       	ldi	r25, 0x01	; 1
 e1e:	9f 93       	push	r25
 e20:	8f 93       	push	r24
 e22:	cf 93       	push	r28
 e24:	0e 94 8e 01 	call	0x31c	; 0x31c <rprintf1RamRom>
	// here's an example of using the timer library to do
	// pulse-width modulation or PWM.  PWM signals can be created on
	// any output compare (OCx) pin.  See your processor's data sheet
	// for more information on which I/O pins have output compare
	// capability.
	rprintf("\r\nTest of timer1 PWM output\r\n");
 e28:	81 e6       	ldi	r24, 0x61	; 97
 e2a:	91 e0       	ldi	r25, 0x01	; 1
 e2c:	9f 93       	push	r25
 e2e:	8f 93       	push	r24
 e30:	cf 93       	push	r28
 e32:	0e 94 8e 01 	call	0x31c	; 0x31c <rprintf1RamRom>

	// set the OC1x port pins to output
	// We need to do this so we can see and use the PWM signal
	// ** these settings are correct for most processors, but not for all
	sbi(DDRD, PD4);
 e36:	54 9a       	sbi	0x0a, 4	; 10
	sbi(DDRD, PD5);
 e38:	55 9a       	sbi	0x0a, 5	; 10

	// initialize timer1 for PWM output
	// - you may use 8,9, or 10 bit PWM resolution
	rprintf("Initializing timer1 for PWM\r\n");
 e3a:	83 e4       	ldi	r24, 0x43	; 67
 e3c:	91 e0       	ldi	r25, 0x01	; 1
 e3e:	9f 93       	push	r25
 e40:	8f 93       	push	r24
 e42:	cf 93       	push	r28
 e44:	0e 94 8e 01 	call	0x31c	; 0x31c <rprintf1RamRom>
	timer1PWMInit(8);
 e48:	88 e0       	ldi	r24, 0x08	; 8
 e4a:	0e 94 14 03 	call	0x628	; 0x628 <timer1PWMInit>

	// turn on the channel A PWM output of timer1
	// - this signal will come out on the OC1A I/O pin
	rprintf("Turning on timer1 channel A PWM output\r\n");
 e4e:	8a e1       	ldi	r24, 0x1A	; 26
 e50:	91 e0       	ldi	r25, 0x01	; 1
 e52:	9f 93       	push	r25
 e54:	8f 93       	push	r24
 e56:	cf 93       	push	r28
 e58:	0e 94 8e 01 	call	0x31c	; 0x31c <rprintf1RamRom>
	timer1PWMAOn();
 e5c:	0e 94 38 03 	call	0x670	; 0x670 <timer1PWMAOn>

	// set the duty cycle of the channel A output
	// - let's try 25% duty, or 256*25% = 64
	rprintf("Setting duty cycle to 25%%\r\n");
 e60:	8d ef       	ldi	r24, 0xFD	; 253
 e62:	90 e0       	ldi	r25, 0x00	; 0
 e64:	9f 93       	push	r25
 e66:	8f 93       	push	r24
 e68:	cf 93       	push	r28
 e6a:	0e 94 8e 01 	call	0x31c	; 0x31c <rprintf1RamRom>
	timer1PWMASet(64);
 e6e:	80 e4       	ldi	r24, 0x40	; 64
 e70:	90 e0       	ldi	r25, 0x00	; 0
 e72:	0e 94 68 03 	call	0x6d0	; 0x6d0 <timer1PWMASet>

	// turn on channel B and set it to 75% duty cycle
	rprintf("Turning on channel B too, with 75%% duty\r\n");
 e76:	82 ed       	ldi	r24, 0xD2	; 210
 e78:	90 e0       	ldi	r25, 0x00	; 0
 e7a:	9f 93       	push	r25
 e7c:	8f 93       	push	r24
 e7e:	cf 93       	push	r28
 e80:	0e 94 8e 01 	call	0x31c	; 0x31c <rprintf1RamRom>
	timer1PWMBOn();
 e84:	0e 94 41 03 	call	0x682	; 0x682 <timer1PWMBOn>
	timer1PWMBSet(192);
 e88:	80 ec       	ldi	r24, 0xC0	; 192
 e8a:	90 e0       	ldi	r25, 0x00	; 0
 e8c:	0e 94 6d 03 	call	0x6da	; 0x6da <timer1PWMBSet>

	// wait for 5 seconds
	rprintf("Pause for 5 seconds...\r\n");
 e90:	89 eb       	ldi	r24, 0xB9	; 185
 e92:	90 e0       	ldi	r25, 0x00	; 0
 e94:	9f 93       	push	r25
 e96:	8f 93       	push	r24
 e98:	cf 93       	push	r28
 e9a:	0e 94 8e 01 	call	0x31c	; 0x31c <rprintf1RamRom>
	timerPause(5000);
 e9e:	88 e8       	ldi	r24, 0x88	; 136
 ea0:	93 e1       	ldi	r25, 0x13	; 19
 ea2:	0e 94 99 02 	call	0x532	; 0x532 <timerPause>

	// now turn off all PWM on timer1
	rprintf("Turning off all PWM on timer1\r\n");
 ea6:	89 e9       	ldi	r24, 0x99	; 153
 ea8:	90 e0       	ldi	r25, 0x00	; 0
 eaa:	9f 93       	push	r25
 eac:	8f 93       	push	r24
 eae:	cf 93       	push	r28
 eb0:	0e 94 8e 01 	call	0x31c	; 0x31c <rprintf1RamRom>
	timer1PWMOff();
 eb4:	8d b7       	in	r24, 0x3d	; 61
 eb6:	9e b7       	in	r25, 0x3e	; 62
 eb8:	81 96       	adiw	r24, 0x21	; 33
 eba:	0f b6       	in	r0, 0x3f	; 63
 ebc:	f8 94       	cli
 ebe:	9e bf       	out	0x3e, r25	; 62
 ec0:	0f be       	out	0x3f, r0	; 63
 ec2:	8d bf       	out	0x3d, r24	; 61
}
 ec4:	cf 91       	pop	r28
	rprintf("Pause for 5 seconds...\r\n");
	timerPause(5000);

	// now turn off all PWM on timer1
	rprintf("Turning off all PWM on timer1\r\n");
	timer1PWMOff();
 ec6:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <timer1PWMOff>

00000eca <main>:
//----- Begin Code ------------------------------------------------------------
int main(void)
{
	// initialize our libraries
	// initialize the UART (serial port)
	uartInit();
 eca:	0e 94 23 05 	call	0xa46	; 0xa46 <uartInit>
	// set the baud rate of the UART for our debug/reporting output
	uartSetBaudRate(9600);
 ece:	60 e8       	ldi	r22, 0x80	; 128
 ed0:	75 e2       	ldi	r23, 0x25	; 37
 ed2:	80 e0       	ldi	r24, 0x00	; 0
 ed4:	90 e0       	ldi	r25, 0x00	; 0
 ed6:	0e 94 3c 05 	call	0xa78	; 0xa78 <uartSetBaudRate>
	// initialize rprintf system
	rprintfInit(uartSendByte);
 eda:	82 e6       	ldi	r24, 0x62	; 98
 edc:	95 e0       	ldi	r25, 0x05	; 5
 ede:	0e 94 70 01 	call	0x2e0	; 0x2e0 <rprintfInit>
	
	// run the test
	timerTest();
 ee2:	0e 94 f0 06 	call	0xde0	; 0xde0 <timerTest>
	
	/*
	Calll all initial function
	*/
	ButtonInit();
 ee6:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ButtonInit>
	
	while(1)
	{
		ButtonCycleUpdate();
 eea:	0e 94 ed 05 	call	0xbda	; 0xbda <ButtonCycleUpdate>
	}
 eee:	fd cf       	rjmp	.-6      	; 0xeea <main+0x20>

00000ef0 <__mulsi3>:
 ef0:	db 01       	movw	r26, r22
 ef2:	8f 93       	push	r24
 ef4:	9f 93       	push	r25
 ef6:	0e 94 dd 07 	call	0xfba	; 0xfba <__muluhisi3>
 efa:	bf 91       	pop	r27
 efc:	af 91       	pop	r26
 efe:	a2 9f       	mul	r26, r18
 f00:	80 0d       	add	r24, r0
 f02:	91 1d       	adc	r25, r1
 f04:	a3 9f       	mul	r26, r19
 f06:	90 0d       	add	r25, r0
 f08:	b2 9f       	mul	r27, r18
 f0a:	90 0d       	add	r25, r0
 f0c:	11 24       	eor	r1, r1
 f0e:	08 95       	ret

00000f10 <__udivmodhi4>:
 f10:	aa 1b       	sub	r26, r26
 f12:	bb 1b       	sub	r27, r27
 f14:	51 e1       	ldi	r21, 0x11	; 17
 f16:	07 c0       	rjmp	.+14     	; 0xf26 <__udivmodhi4_ep>

00000f18 <__udivmodhi4_loop>:
 f18:	aa 1f       	adc	r26, r26
 f1a:	bb 1f       	adc	r27, r27
 f1c:	a6 17       	cp	r26, r22
 f1e:	b7 07       	cpc	r27, r23
 f20:	10 f0       	brcs	.+4      	; 0xf26 <__udivmodhi4_ep>
 f22:	a6 1b       	sub	r26, r22
 f24:	b7 0b       	sbc	r27, r23

00000f26 <__udivmodhi4_ep>:
 f26:	88 1f       	adc	r24, r24
 f28:	99 1f       	adc	r25, r25
 f2a:	5a 95       	dec	r21
 f2c:	a9 f7       	brne	.-22     	; 0xf18 <__udivmodhi4_loop>
 f2e:	80 95       	com	r24
 f30:	90 95       	com	r25
 f32:	bc 01       	movw	r22, r24
 f34:	cd 01       	movw	r24, r26
 f36:	08 95       	ret

00000f38 <__udivmodsi4>:
 f38:	a1 e2       	ldi	r26, 0x21	; 33
 f3a:	1a 2e       	mov	r1, r26
 f3c:	aa 1b       	sub	r26, r26
 f3e:	bb 1b       	sub	r27, r27
 f40:	fd 01       	movw	r30, r26
 f42:	0d c0       	rjmp	.+26     	; 0xf5e <__udivmodsi4_ep>

00000f44 <__udivmodsi4_loop>:
 f44:	aa 1f       	adc	r26, r26
 f46:	bb 1f       	adc	r27, r27
 f48:	ee 1f       	adc	r30, r30
 f4a:	ff 1f       	adc	r31, r31
 f4c:	a2 17       	cp	r26, r18
 f4e:	b3 07       	cpc	r27, r19
 f50:	e4 07       	cpc	r30, r20
 f52:	f5 07       	cpc	r31, r21
 f54:	20 f0       	brcs	.+8      	; 0xf5e <__udivmodsi4_ep>
 f56:	a2 1b       	sub	r26, r18
 f58:	b3 0b       	sbc	r27, r19
 f5a:	e4 0b       	sbc	r30, r20
 f5c:	f5 0b       	sbc	r31, r21

00000f5e <__udivmodsi4_ep>:
 f5e:	66 1f       	adc	r22, r22
 f60:	77 1f       	adc	r23, r23
 f62:	88 1f       	adc	r24, r24
 f64:	99 1f       	adc	r25, r25
 f66:	1a 94       	dec	r1
 f68:	69 f7       	brne	.-38     	; 0xf44 <__udivmodsi4_loop>
 f6a:	60 95       	com	r22
 f6c:	70 95       	com	r23
 f6e:	80 95       	com	r24
 f70:	90 95       	com	r25
 f72:	9b 01       	movw	r18, r22
 f74:	ac 01       	movw	r20, r24
 f76:	bd 01       	movw	r22, r26
 f78:	cf 01       	movw	r24, r30
 f7a:	08 95       	ret

00000f7c <__divmodsi4>:
 f7c:	05 2e       	mov	r0, r21
 f7e:	97 fb       	bst	r25, 7
 f80:	1e f4       	brtc	.+6      	; 0xf88 <__divmodsi4+0xc>
 f82:	00 94       	com	r0
 f84:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__negsi2>
 f88:	57 fd       	sbrc	r21, 7
 f8a:	07 d0       	rcall	.+14     	; 0xf9a <__divmodsi4_neg2>
 f8c:	0e 94 9c 07 	call	0xf38	; 0xf38 <__udivmodsi4>
 f90:	07 fc       	sbrc	r0, 7
 f92:	03 d0       	rcall	.+6      	; 0xf9a <__divmodsi4_neg2>
 f94:	4e f4       	brtc	.+18     	; 0xfa8 <__divmodsi4_exit>
 f96:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__negsi2>

00000f9a <__divmodsi4_neg2>:
 f9a:	50 95       	com	r21
 f9c:	40 95       	com	r20
 f9e:	30 95       	com	r19
 fa0:	21 95       	neg	r18
 fa2:	3f 4f       	sbci	r19, 0xFF	; 255
 fa4:	4f 4f       	sbci	r20, 0xFF	; 255
 fa6:	5f 4f       	sbci	r21, 0xFF	; 255

00000fa8 <__divmodsi4_exit>:
 fa8:	08 95       	ret

00000faa <__negsi2>:
 faa:	90 95       	com	r25
 fac:	80 95       	com	r24
 fae:	70 95       	com	r23
 fb0:	61 95       	neg	r22
 fb2:	7f 4f       	sbci	r23, 0xFF	; 255
 fb4:	8f 4f       	sbci	r24, 0xFF	; 255
 fb6:	9f 4f       	sbci	r25, 0xFF	; 255
 fb8:	08 95       	ret

00000fba <__muluhisi3>:
 fba:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__umulhisi3>
 fbe:	a5 9f       	mul	r26, r21
 fc0:	90 0d       	add	r25, r0
 fc2:	b4 9f       	mul	r27, r20
 fc4:	90 0d       	add	r25, r0
 fc6:	a4 9f       	mul	r26, r20
 fc8:	80 0d       	add	r24, r0
 fca:	91 1d       	adc	r25, r1
 fcc:	11 24       	eor	r1, r1
 fce:	08 95       	ret

00000fd0 <__umulhisi3>:
 fd0:	a2 9f       	mul	r26, r18
 fd2:	b0 01       	movw	r22, r0
 fd4:	b3 9f       	mul	r27, r19
 fd6:	c0 01       	movw	r24, r0
 fd8:	a3 9f       	mul	r26, r19
 fda:	70 0d       	add	r23, r0
 fdc:	81 1d       	adc	r24, r1
 fde:	11 24       	eor	r1, r1
 fe0:	91 1d       	adc	r25, r1
 fe2:	b2 9f       	mul	r27, r18
 fe4:	70 0d       	add	r23, r0
 fe6:	81 1d       	adc	r24, r1
 fe8:	11 24       	eor	r1, r1
 fea:	91 1d       	adc	r25, r1
 fec:	08 95       	ret

00000fee <_exit>:
 fee:	f8 94       	cli

00000ff0 <__stop_program>:
 ff0:	ff cf       	rjmp	.-2      	; 0xff0 <__stop_program>
