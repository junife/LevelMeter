
LevelMeterRfRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00001172  00001206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001172  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e6  00800176  00800176  0000127c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000438  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033b3  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010c0  00000000  00000000  00004ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f55  00000000  00000000  00005b97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d34  00000000  00000000  00007aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dd1  00000000  00000000  00008820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b54  00000000  00000000  000095f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c0  00000000  00000000  0000c145  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	7f c1       	rjmp	.+766    	; 0x304 <__bad_interrupt>
       6:	00 00       	nop
       8:	7d c1       	rjmp	.+762    	; 0x304 <__bad_interrupt>
       a:	00 00       	nop
       c:	7b c1       	rjmp	.+758    	; 0x304 <__bad_interrupt>
       e:	00 00       	nop
      10:	79 c1       	rjmp	.+754    	; 0x304 <__bad_interrupt>
      12:	00 00       	nop
      14:	77 c1       	rjmp	.+750    	; 0x304 <__bad_interrupt>
      16:	00 00       	nop
      18:	75 c1       	rjmp	.+746    	; 0x304 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	73 c1       	rjmp	.+742    	; 0x304 <__bad_interrupt>
      1e:	00 00       	nop
      20:	71 c1       	rjmp	.+738    	; 0x304 <__bad_interrupt>
      22:	00 00       	nop
      24:	31 c5       	rjmp	.+2658   	; 0xa88 <__vector_9>
      26:	00 00       	nop
      28:	5c c5       	rjmp	.+2744   	; 0xae2 <__vector_10>
      2a:	00 00       	nop
      2c:	66 c4       	rjmp	.+2252   	; 0x8fa <__vector_11>
      2e:	00 00       	nop
      30:	fe c4       	rjmp	.+2556   	; 0xa2e <__vector_12>
      32:	00 00       	nop
      34:	a2 c4       	rjmp	.+2372   	; 0x97a <__vector_13>
      36:	00 00       	nop
      38:	cd c4       	rjmp	.+2458   	; 0x9d4 <__vector_14>
      3a:	00 00       	nop
      3c:	31 c4       	rjmp	.+2146   	; 0x8a0 <__vector_15>
      3e:	00 00       	nop
      40:	61 c1       	rjmp	.+706    	; 0x304 <__bad_interrupt>
      42:	00 00       	nop
      44:	5f c1       	rjmp	.+702    	; 0x304 <__bad_interrupt>
      46:	00 00       	nop
      48:	d8 c3       	rjmp	.+1968   	; 0x7fa <__vector_18>
      4a:	00 00       	nop
      4c:	5b c1       	rjmp	.+694    	; 0x304 <__bad_interrupt>
      4e:	00 00       	nop
      50:	01 c6       	rjmp	.+3074   	; 0xc54 <__vector_20>
      52:	00 00       	nop
      54:	57 c1       	rjmp	.+686    	; 0x304 <__bad_interrupt>
      56:	00 00       	nop
      58:	c6 c5       	rjmp	.+2956   	; 0xbe6 <__vector_22>
      5a:	00 00       	nop
      5c:	53 c1       	rjmp	.+678    	; 0x304 <__bad_interrupt>
      5e:	00 00       	nop
      60:	51 c1       	rjmp	.+674    	; 0x304 <__bad_interrupt>
      62:	00 00       	nop
      64:	4f c1       	rjmp	.+670    	; 0x304 <__bad_interrupt>
      66:	00 00       	nop
      68:	4d c1       	rjmp	.+666    	; 0x304 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4b c1       	rjmp	.+662    	; 0x304 <__bad_interrupt>
      6e:	00 00       	nop
      70:	49 c1       	rjmp	.+658    	; 0x304 <__bad_interrupt>
      72:	00 00       	nop
      74:	47 c1       	rjmp	.+654    	; 0x304 <__bad_interrupt>
      76:	00 00       	nop
      78:	45 c1       	rjmp	.+650    	; 0x304 <__bad_interrupt>
	...

0000007c <__trampolines_end>:
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 00       	nop
      82:	00 5f       	subi	r16, 0xF0	; 240
      84:	00 00       	nop
      86:	00 07       	cpc	r16, r16
      88:	00 07       	cpc	r16, r16
      8a:	00 14       	cp	r0, r0
      8c:	7f 14       	cp	r7, r15
      8e:	7f 14       	cp	r7, r15
      90:	24 2a       	or	r2, r20
      92:	7f 2a       	or	r7, r31
      94:	12 23       	and	r17, r18
      96:	13 08       	sbc	r1, r3
      98:	64 62       	ori	r22, 0x24	; 36
      9a:	36 49       	sbci	r19, 0x96	; 150
      9c:	55 22       	and	r5, r21
      9e:	50 00       	.word	0x0050	; ????
      a0:	05 03       	mulsu	r16, r21
      a2:	00 00       	nop
      a4:	00 1c       	adc	r0, r0
      a6:	22 41       	sbci	r18, 0x12	; 18
      a8:	00 00       	nop
      aa:	41 22       	and	r4, r17
      ac:	1c 00       	.word	0x001c	; ????
      ae:	08 2a       	or	r0, r24
      b0:	1c 2a       	or	r1, r28
      b2:	08 08       	sbc	r0, r8
      b4:	08 3e       	cpi	r16, 0xE8	; 232
      b6:	08 08       	sbc	r0, r8
      b8:	00 50       	subi	r16, 0x00	; 0
      ba:	30 00       	.word	0x0030	; ????
      bc:	00 08       	sbc	r0, r0
      be:	08 08       	sbc	r0, r8
      c0:	08 08       	sbc	r0, r8
      c2:	00 60       	ori	r16, 0x00	; 0
      c4:	60 00       	.word	0x0060	; ????
      c6:	00 20       	and	r0, r0
      c8:	10 08       	sbc	r1, r0
      ca:	04 02       	muls	r16, r20
      cc:	3e 51       	subi	r19, 0x1E	; 30
      ce:	49 45       	sbci	r20, 0x59	; 89
      d0:	3e 00       	.word	0x003e	; ????
      d2:	42 7f       	andi	r20, 0xF2	; 242
      d4:	40 00       	.word	0x0040	; ????
      d6:	42 61       	ori	r20, 0x12	; 18
      d8:	51 49       	sbci	r21, 0x91	; 145
      da:	46 21       	and	r20, r6
      dc:	41 45       	sbci	r20, 0x51	; 81
      de:	4b 31       	cpi	r20, 0x1B	; 27
      e0:	18 14       	cp	r1, r8
      e2:	12 7f       	andi	r17, 0xF2	; 242
      e4:	10 27       	eor	r17, r16
      e6:	45 45       	sbci	r20, 0x55	; 85
      e8:	45 39       	cpi	r20, 0x95	; 149
      ea:	3c 4a       	sbci	r19, 0xAC	; 172
      ec:	49 49       	sbci	r20, 0x99	; 153
      ee:	30 01       	movw	r6, r0
      f0:	71 09       	sbc	r23, r1
      f2:	05 03       	mulsu	r16, r21
      f4:	36 49       	sbci	r19, 0x96	; 150
      f6:	49 49       	sbci	r20, 0x99	; 153
      f8:	36 06       	cpc	r3, r22
      fa:	49 49       	sbci	r20, 0x99	; 153
      fc:	29 1e       	adc	r2, r25
      fe:	00 36       	cpi	r16, 0x60	; 96
     100:	36 00       	.word	0x0036	; ????
     102:	00 00       	nop
     104:	56 36       	cpi	r21, 0x66	; 102
     106:	00 00       	nop
     108:	00 08       	sbc	r0, r0
     10a:	14 22       	and	r1, r20
     10c:	41 14       	cp	r4, r1
     10e:	14 14       	cp	r1, r4
     110:	14 14       	cp	r1, r4
     112:	41 22       	and	r4, r17
     114:	14 08       	sbc	r1, r4
     116:	00 02       	muls	r16, r16
     118:	01 51       	subi	r16, 0x11	; 17
     11a:	09 06       	cpc	r0, r25
     11c:	32 49       	sbci	r19, 0x92	; 146
     11e:	79 41       	sbci	r23, 0x19	; 25
     120:	3e 7e       	andi	r19, 0xEE	; 238
     122:	11 11       	cpse	r17, r1
     124:	11 7e       	andi	r17, 0xE1	; 225
     126:	7f 49       	sbci	r23, 0x9F	; 159
     128:	49 49       	sbci	r20, 0x99	; 153
     12a:	36 3e       	cpi	r19, 0xE6	; 230
     12c:	41 41       	sbci	r20, 0x11	; 17
     12e:	41 22       	and	r4, r17
     130:	7f 41       	sbci	r23, 0x1F	; 31
     132:	41 22       	and	r4, r17
     134:	1c 7f       	andi	r17, 0xFC	; 252
     136:	49 49       	sbci	r20, 0x99	; 153
     138:	49 41       	sbci	r20, 0x19	; 25
     13a:	7f 09       	sbc	r23, r15
     13c:	09 01       	movw	r0, r18
     13e:	01 3e       	cpi	r16, 0xE1	; 225
     140:	41 41       	sbci	r20, 0x11	; 17
     142:	51 32       	cpi	r21, 0x21	; 33
     144:	7f 08       	sbc	r7, r15
     146:	08 08       	sbc	r0, r8
     148:	7f 00       	.word	0x007f	; ????
     14a:	41 7f       	andi	r20, 0xF1	; 241
     14c:	41 00       	.word	0x0041	; ????
     14e:	20 40       	sbci	r18, 0x00	; 0
     150:	41 3f       	cpi	r20, 0xF1	; 241
     152:	01 7f       	andi	r16, 0xF1	; 241
     154:	08 14       	cp	r0, r8
     156:	22 41       	sbci	r18, 0x12	; 18
     158:	7f 40       	sbci	r23, 0x0F	; 15
     15a:	40 40       	sbci	r20, 0x00	; 0
     15c:	40 7f       	andi	r20, 0xF0	; 240
     15e:	02 04       	cpc	r0, r2
     160:	02 7f       	andi	r16, 0xF2	; 242
     162:	7f 04       	cpc	r7, r15
     164:	08 10       	cpse	r0, r8
     166:	7f 3e       	cpi	r23, 0xEF	; 239
     168:	41 41       	sbci	r20, 0x11	; 17
     16a:	41 3e       	cpi	r20, 0xE1	; 225
     16c:	7f 09       	sbc	r23, r15
     16e:	09 09       	sbc	r16, r9
     170:	06 3e       	cpi	r16, 0xE6	; 230
     172:	41 51       	subi	r20, 0x11	; 17
     174:	21 5e       	subi	r18, 0xE1	; 225
     176:	7f 09       	sbc	r23, r15
     178:	19 29       	or	r17, r9
     17a:	46 46       	sbci	r20, 0x66	; 102
     17c:	49 49       	sbci	r20, 0x99	; 153
     17e:	49 31       	cpi	r20, 0x19	; 25
     180:	01 01       	movw	r0, r2
     182:	7f 01       	movw	r14, r30
     184:	01 3f       	cpi	r16, 0xF1	; 241
     186:	40 40       	sbci	r20, 0x00	; 0
     188:	40 3f       	cpi	r20, 0xF0	; 240
     18a:	1f 20       	and	r1, r15
     18c:	40 20       	and	r4, r0
     18e:	1f 7f       	andi	r17, 0xFF	; 255
     190:	20 18       	sub	r2, r0
     192:	20 7f       	andi	r18, 0xF0	; 240
     194:	63 14       	cp	r6, r3
     196:	08 14       	cp	r0, r8
     198:	63 03       	mulsu	r22, r19
     19a:	04 78       	andi	r16, 0x84	; 132
     19c:	04 03       	mulsu	r16, r20
     19e:	61 51       	subi	r22, 0x11	; 17
     1a0:	49 45       	sbci	r20, 0x59	; 89
     1a2:	43 00       	.word	0x0043	; ????
     1a4:	00 7f       	andi	r16, 0xF0	; 240
     1a6:	41 41       	sbci	r20, 0x11	; 17
     1a8:	02 04       	cpc	r0, r2
     1aa:	08 10       	cpse	r0, r8
     1ac:	20 41       	sbci	r18, 0x10	; 16
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	00 00       	nop
     1b2:	04 02       	muls	r16, r20
     1b4:	01 02       	muls	r16, r17
     1b6:	04 40       	sbci	r16, 0x04	; 4
     1b8:	40 40       	sbci	r20, 0x00	; 0
     1ba:	40 40       	sbci	r20, 0x00	; 0
     1bc:	00 01       	movw	r0, r0
     1be:	02 04       	cpc	r0, r2
     1c0:	00 20       	and	r0, r0
     1c2:	54 54       	subi	r21, 0x44	; 68
     1c4:	54 78       	andi	r21, 0x84	; 132
     1c6:	7f 48       	sbci	r23, 0x8F	; 143
     1c8:	44 44       	sbci	r20, 0x44	; 68
     1ca:	38 38       	cpi	r19, 0x88	; 136
     1cc:	44 44       	sbci	r20, 0x44	; 68
     1ce:	44 20       	and	r4, r4
     1d0:	38 44       	sbci	r19, 0x48	; 72
     1d2:	44 48       	sbci	r20, 0x84	; 132
     1d4:	7f 38       	cpi	r23, 0x8F	; 143
     1d6:	54 54       	subi	r21, 0x44	; 68
     1d8:	54 18       	sub	r5, r4
     1da:	08 7e       	andi	r16, 0xE8	; 232
     1dc:	09 01       	movw	r0, r18
     1de:	02 08       	sbc	r0, r2
     1e0:	14 54       	subi	r17, 0x44	; 68
     1e2:	54 3c       	cpi	r21, 0xC4	; 196
     1e4:	7f 08       	sbc	r7, r15
     1e6:	04 04       	cpc	r0, r4
     1e8:	78 00       	.word	0x0078	; ????
     1ea:	44 7d       	andi	r20, 0xD4	; 212
     1ec:	40 00       	.word	0x0040	; ????
     1ee:	20 40       	sbci	r18, 0x00	; 0
     1f0:	44 3d       	cpi	r20, 0xD4	; 212
     1f2:	00 00       	nop
     1f4:	7f 10       	cpse	r7, r15
     1f6:	28 44       	sbci	r18, 0x48	; 72
     1f8:	00 41       	sbci	r16, 0x10	; 16
     1fa:	7f 40       	sbci	r23, 0x0F	; 15
     1fc:	00 7c       	andi	r16, 0xC0	; 192
     1fe:	04 18       	sub	r0, r4
     200:	04 78       	andi	r16, 0x84	; 132
     202:	7c 08       	sbc	r7, r12
     204:	04 04       	cpc	r0, r4
     206:	78 38       	cpi	r23, 0x88	; 136
     208:	44 44       	sbci	r20, 0x44	; 68
     20a:	44 38       	cpi	r20, 0x84	; 132
     20c:	7c 14       	cp	r7, r12
     20e:	14 14       	cp	r1, r4
     210:	08 08       	sbc	r0, r8
     212:	14 14       	cp	r1, r4
     214:	18 7c       	andi	r17, 0xC8	; 200
     216:	7c 08       	sbc	r7, r12
     218:	04 04       	cpc	r0, r4
     21a:	08 48       	sbci	r16, 0x88	; 136
     21c:	54 54       	subi	r21, 0x44	; 68
     21e:	54 20       	and	r5, r4
     220:	04 3f       	cpi	r16, 0xF4	; 244
     222:	44 40       	sbci	r20, 0x04	; 4
     224:	20 3c       	cpi	r18, 0xC0	; 192
     226:	40 40       	sbci	r20, 0x00	; 0
     228:	20 7c       	andi	r18, 0xC0	; 192
     22a:	1c 20       	and	r1, r12
     22c:	40 20       	and	r4, r0
     22e:	1c 3c       	cpi	r17, 0xCC	; 204
     230:	40 30       	cpi	r20, 0x00	; 0
     232:	40 3c       	cpi	r20, 0xC0	; 192
     234:	44 28       	or	r4, r4
     236:	10 28       	or	r1, r0
     238:	44 0c       	add	r4, r4
     23a:	50 50       	subi	r21, 0x00	; 0
     23c:	50 3c       	cpi	r21, 0xC0	; 192
     23e:	44 64       	ori	r20, 0x44	; 68
     240:	54 4c       	sbci	r21, 0xC4	; 196
     242:	44 00       	.word	0x0044	; ????
     244:	08 36       	cpi	r16, 0x68	; 104
     246:	41 00       	.word	0x0041	; ????
     248:	00 00       	nop
     24a:	7f 00       	.word	0x007f	; ????
     24c:	00 00       	nop
     24e:	41 36       	cpi	r20, 0x61	; 97
     250:	08 00       	.word	0x0008	; ????
     252:	08 08       	sbc	r0, r8
     254:	2a 1c       	adc	r2, r10
     256:	08 08       	sbc	r0, r8
     258:	1c 2a       	or	r1, r28
     25a:	08 08       	sbc	r0, r8

0000025c <HexChars>:
     25c:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

0000026d <__c.2077>:
     26d:	50 42 74 6e 31 38 2c 43 6c 65 61 72 20 48 6f 6d     PBtn18,Clear Hom
     27d:	65 0a 00                                            e..

00000280 <__c.2074>:
     280:	50 42 74 6e 39 0a 00                                PBtn9..

00000287 <__c.2070>:
     287:	50 42 74 6e 35 0a 00                                PBtn5..

0000028e <__c.2066>:
     28e:	50 42 74 6e 31 0a 00                                PBtn1..

00000295 <__c.2062>:
     295:	50 42 74 6e 31 35 0a 00                             PBtn15..

0000029d <__c.2058>:
     29d:	50 42 74 6e 31 34 0a 00                             PBtn14..

000002a5 <__c.2054>:
     2a5:	50 42 74 6e 31 33 0a 00                             PBtn13..

000002ad <__c.2051>:
     2ad:	72 68 3d 25 78 0a 00                                rh=%x..

000002b4 <__c.2049>:
     2b4:	72 6c 3d 25 78 0a 00                                rl=%x..

000002bb <__c.2042>:
     2bb:	52 46 20 72 65 6d 6f 74 65 20 73 74 61 72 74 21     RF remote start!
     2cb:	0a 00 00                                            ...

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d0 e1       	ldi	r29, 0x10	; 16
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61

000002da <__do_copy_data>:
     2da:	11 e0       	ldi	r17, 0x01	; 1
     2dc:	a0 e0       	ldi	r26, 0x00	; 0
     2de:	b1 e0       	ldi	r27, 0x01	; 1
     2e0:	e2 e7       	ldi	r30, 0x72	; 114
     2e2:	f1 e1       	ldi	r31, 0x11	; 17
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <__do_copy_data+0x10>
     2e6:	05 90       	lpm	r0, Z+
     2e8:	0d 92       	st	X+, r0
     2ea:	a6 37       	cpi	r26, 0x76	; 118
     2ec:	b1 07       	cpc	r27, r17
     2ee:	d9 f7       	brne	.-10     	; 0x2e6 <__do_copy_data+0xc>

000002f0 <__do_clear_bss>:
     2f0:	22 e0       	ldi	r18, 0x02	; 2
     2f2:	a6 e7       	ldi	r26, 0x76	; 118
     2f4:	b1 e0       	ldi	r27, 0x01	; 1
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <.do_clear_bss_start>

000002f8 <.do_clear_bss_loop>:
     2f8:	1d 92       	st	X+, r1

000002fa <.do_clear_bss_start>:
     2fa:	ac 35       	cpi	r26, 0x5C	; 92
     2fc:	b2 07       	cpc	r27, r18
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <.do_clear_bss_loop>
     300:	f5 d6       	rcall	.+3562   	; 0x10ec <main>
     302:	35 c7       	rjmp	.+3690   	; 0x116e <_exit>

00000304 <__bad_interrupt>:
     304:	7d ce       	rjmp	.-774    	; 0x0 <__vectors>

00000306 <bufferInit>:
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
	return data;
}
     306:	fc 01       	movw	r30, r24
     308:	8f b7       	in	r24, 0x3f	; 63
     30a:	f8 94       	cli
     30c:	71 83       	std	Z+1, r23	; 0x01
     30e:	60 83       	st	Z, r22
     310:	53 83       	std	Z+3, r21	; 0x03
     312:	42 83       	std	Z+2, r20	; 0x02
     314:	17 82       	std	Z+7, r1	; 0x07
     316:	16 82       	std	Z+6, r1	; 0x06
     318:	15 82       	std	Z+5, r1	; 0x05
     31a:	14 82       	std	Z+4, r1	; 0x04
     31c:	8f bf       	out	0x3f, r24	; 63
     31e:	08 95       	ret

00000320 <bufferGetFromFront>:
     320:	fc 01       	movw	r30, r24
     322:	9f b7       	in	r25, 0x3f	; 63
     324:	f8 94       	cli
     326:	44 81       	ldd	r20, Z+4	; 0x04
     328:	55 81       	ldd	r21, Z+5	; 0x05
     32a:	41 15       	cp	r20, r1
     32c:	51 05       	cpc	r21, r1
     32e:	c9 f0       	breq	.+50     	; 0x362 <bufferGetFromFront+0x42>
     330:	26 81       	ldd	r18, Z+6	; 0x06
     332:	37 81       	ldd	r19, Z+7	; 0x07
     334:	a0 81       	ld	r26, Z
     336:	b1 81       	ldd	r27, Z+1	; 0x01
     338:	a2 0f       	add	r26, r18
     33a:	b3 1f       	adc	r27, r19
     33c:	8c 91       	ld	r24, X
     33e:	2f 5f       	subi	r18, 0xFF	; 255
     340:	3f 4f       	sbci	r19, 0xFF	; 255
     342:	37 83       	std	Z+7, r19	; 0x07
     344:	26 83       	std	Z+6, r18	; 0x06
     346:	62 81       	ldd	r22, Z+2	; 0x02
     348:	73 81       	ldd	r23, Z+3	; 0x03
     34a:	26 17       	cp	r18, r22
     34c:	37 07       	cpc	r19, r23
     34e:	20 f0       	brcs	.+8      	; 0x358 <bufferGetFromFront+0x38>
     350:	26 1b       	sub	r18, r22
     352:	37 0b       	sbc	r19, r23
     354:	37 83       	std	Z+7, r19	; 0x07
     356:	26 83       	std	Z+6, r18	; 0x06
     358:	41 50       	subi	r20, 0x01	; 1
     35a:	51 09       	sbc	r21, r1
     35c:	55 83       	std	Z+5, r21	; 0x05
     35e:	44 83       	std	Z+4, r20	; 0x04
     360:	01 c0       	rjmp	.+2      	; 0x364 <bufferGetFromFront+0x44>
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	9f bf       	out	0x3f, r25	; 63
     366:	08 95       	ret

00000368 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     368:	fc 01       	movw	r30, r24
     36a:	36 2f       	mov	r19, r22
	// begin critical section
	CRITICAL_SECTION_START;
     36c:	2f b7       	in	r18, 0x3f	; 63
     36e:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     370:	a4 81       	ldd	r26, Z+4	; 0x04
     372:	b5 81       	ldd	r27, Z+5	; 0x05
     374:	62 81       	ldd	r22, Z+2	; 0x02
     376:	73 81       	ldd	r23, Z+3	; 0x03
     378:	a6 17       	cp	r26, r22
     37a:	b7 07       	cpc	r27, r23
     37c:	90 f4       	brcc	.+36     	; 0x3a2 <bufferAddToEnd+0x3a>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     37e:	86 81       	ldd	r24, Z+6	; 0x06
     380:	97 81       	ldd	r25, Z+7	; 0x07
     382:	8a 0f       	add	r24, r26
     384:	9b 1f       	adc	r25, r27
     386:	bd d6       	rcall	.+3450   	; 0x1102 <__udivmodhi4>
     388:	a0 81       	ld	r26, Z
     38a:	b1 81       	ldd	r27, Z+1	; 0x01
     38c:	a8 0f       	add	r26, r24
     38e:	b9 1f       	adc	r27, r25
     390:	3c 93       	st	X, r19
		// increment the length
		buffer->datalength++;
     392:	84 81       	ldd	r24, Z+4	; 0x04
     394:	95 81       	ldd	r25, Z+5	; 0x05
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	95 83       	std	Z+5, r25	; 0x05
     39a:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     39c:	2f bf       	out	0x3f, r18	; 63
		// return success
		return -1;
     39e:	8f ef       	ldi	r24, 0xFF	; 255
     3a0:	08 95       	ret
	}
	// end critical section
	CRITICAL_SECTION_END;
     3a2:	2f bf       	out	0x3f, r18	; 63
	// return failure
	return 0;
     3a4:	80 e0       	ldi	r24, 0x00	; 0
}
     3a6:	08 95       	ret

000003a8 <glcdWriteChar>:
	for(idx=0; idx<grLength; idx++)
	{
		// write the line
		glcdDataWrite(pgm_read_byte(FontGr+(grStartIdx+1)+idx));
	}
}
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	80 97       	sbiw	r24, 0x20	; 32
     3b4:	25 e0       	ldi	r18, 0x05	; 5
     3b6:	28 9f       	mul	r18, r24
     3b8:	80 01       	movw	r16, r0
     3ba:	29 9f       	mul	r18, r25
     3bc:	10 0d       	add	r17, r0
     3be:	11 24       	eor	r1, r1
     3c0:	c0 e0       	ldi	r28, 0x00	; 0
     3c2:	d0 e0       	ldi	r29, 0x00	; 0
     3c4:	fe 01       	movw	r30, r28
     3c6:	e0 0f       	add	r30, r16
     3c8:	f1 1f       	adc	r31, r17
     3ca:	e4 58       	subi	r30, 0x84	; 132
     3cc:	ff 4f       	sbci	r31, 0xFF	; 255
     3ce:	84 91       	lpm	r24, Z
     3d0:	02 d1       	rcall	.+516    	; 0x5d6 <glcdDataWrite>
     3d2:	21 96       	adiw	r28, 0x01	; 1
     3d4:	c5 30       	cpi	r28, 0x05	; 5
     3d6:	d1 05       	cpc	r29, r1
     3d8:	a9 f7       	brne	.-22     	; 0x3c4 <glcdWriteChar+0x1c>
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	fc d0       	rcall	.+504    	; 0x5d6 <glcdDataWrite>
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	1f 91       	pop	r17
     3e6:	0f 91       	pop	r16
     3e8:	e0 c0       	rjmp	.+448    	; 0x5aa <glcdStartLine>

000003ea <glcdPutStr>:

void glcdPutStr(unsigned char *data)
{
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	ec 01       	movw	r28, r24
  while (*data) {
     3f0:	89 91       	ld	r24, Y+
     3f2:	88 23       	and	r24, r24
     3f4:	11 f0       	breq	.+4      	; 0x3fa <glcdPutStr+0x10>
    glcdWriteChar(*data);
     3f6:	d8 df       	rcall	.-80     	; 0x3a8 <glcdWriteChar>
     3f8:	fb cf       	rjmp	.-10     	; 0x3f0 <glcdPutStr+0x6>
    data++;
  }
}
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <outb_lcd_ddr_port.part.1>:
	glcdSetXAddress(x);
}

void glcdGotoChar(u08 line, u08 col)
{
	glcdSetAddress(col*6, line);
     400:	81 b1       	in	r24, 0x01	; 1
     402:	80 7f       	andi	r24, 0xF0	; 240
     404:	81 b9       	out	0x01, r24	; 1
     406:	84 b1       	in	r24, 0x04	; 4
     408:	80 7f       	andi	r24, 0xF0	; 240
     40a:	84 b9       	out	0x04, r24	; 4
     40c:	08 95       	ret

0000040e <glcdControllerSelect>:
     40e:	14 98       	cbi	0x02, 4	; 2
     410:	15 98       	cbi	0x02, 5	; 2
     412:	15 98       	cbi	0x02, 5	; 2
     414:	15 98       	cbi	0x02, 5	; 2
     416:	81 30       	cpi	r24, 0x01	; 1
     418:	41 f0       	breq	.+16     	; 0x42a <glcdControllerSelect+0x1c>
     41a:	28 f0       	brcs	.+10     	; 0x426 <glcdControllerSelect+0x18>
     41c:	82 30       	cpi	r24, 0x02	; 2
     41e:	29 f0       	breq	.+10     	; 0x42a <glcdControllerSelect+0x1c>
     420:	83 30       	cpi	r24, 0x03	; 3
     422:	19 f0       	breq	.+6      	; 0x42a <glcdControllerSelect+0x1c>
     424:	08 95       	ret
     426:	14 9a       	sbi	0x02, 4	; 2
     428:	08 95       	ret
     42a:	15 9a       	sbi	0x02, 5	; 2
     42c:	08 95       	ret

0000042e <outb_lcd_data_port>:
     42e:	82 b1       	in	r24, 0x02	; 2
     430:	80 7f       	andi	r24, 0xF0	; 240
     432:	82 b9       	out	0x02, r24	; 2
     434:	82 b1       	in	r24, 0x02	; 2
     436:	96 2f       	mov	r25, r22
     438:	92 95       	swap	r25
     43a:	9f 70       	andi	r25, 0x0F	; 15
     43c:	89 2b       	or	r24, r25
     43e:	82 b9       	out	0x02, r24	; 2
     440:	6f 70       	andi	r22, 0x0F	; 15
     442:	94 e0       	ldi	r25, 0x04	; 4
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	26 2f       	mov	r18, r22
     448:	21 70       	andi	r18, 0x01	; 1
     44a:	88 0f       	add	r24, r24
     44c:	82 2b       	or	r24, r18
     44e:	66 95       	lsr	r22
     450:	91 50       	subi	r25, 0x01	; 1
     452:	c9 f7       	brne	.-14     	; 0x446 <outb_lcd_data_port+0x18>
     454:	95 b1       	in	r25, 0x05	; 5
     456:	90 7f       	andi	r25, 0xF0	; 240
     458:	95 b9       	out	0x05, r25	; 5
     45a:	95 b1       	in	r25, 0x05	; 5
     45c:	89 2b       	or	r24, r25
     45e:	85 b9       	out	0x05, r24	; 5
     460:	08 95       	ret

00000462 <outb_lcd_ddr_port>:
     462:	61 11       	cpse	r22, r1
     464:	01 c0       	rjmp	.+2      	; 0x468 <outb_lcd_ddr_port+0x6>
     466:	cc cf       	rjmp	.-104    	; 0x400 <outb_lcd_ddr_port.part.1>
     468:	81 b1       	in	r24, 0x01	; 1
     46a:	8f 60       	ori	r24, 0x0F	; 15
     46c:	81 b9       	out	0x01, r24	; 1
     46e:	84 b1       	in	r24, 0x04	; 4
     470:	8f 60       	ori	r24, 0x0F	; 15
     472:	84 b9       	out	0x04, r24	; 4
     474:	08 95       	ret

00000476 <glcdInitHW>:
     476:	2f 98       	cbi	0x05, 7	; 5
     478:	2e 98       	cbi	0x05, 6	; 5
     47a:	2d 98       	cbi	0x05, 5	; 5
     47c:	2c 98       	cbi	0x05, 4	; 5
     47e:	14 98       	cbi	0x02, 4	; 2
     480:	15 98       	cbi	0x02, 5	; 2
     482:	15 98       	cbi	0x02, 5	; 2
     484:	15 98       	cbi	0x02, 5	; 2
     486:	27 9a       	sbi	0x04, 7	; 4
     488:	26 9a       	sbi	0x04, 6	; 4
     48a:	25 9a       	sbi	0x04, 5	; 4
     48c:	24 9a       	sbi	0x04, 4	; 4
     48e:	0c 9a       	sbi	0x01, 4	; 1
     490:	0d 9a       	sbi	0x01, 5	; 1
     492:	0d 9a       	sbi	0x01, 5	; 1
     494:	0d 9a       	sbi	0x01, 5	; 1
     496:	88 b1       	in	r24, 0x08	; 8
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	c9 df       	rcall	.-110    	; 0x42e <outb_lcd_data_port>
     49c:	87 b1       	in	r24, 0x07	; 7
     49e:	6f ef       	ldi	r22, 0xFF	; 255
     4a0:	e0 cf       	rjmp	.-64     	; 0x462 <outb_lcd_ddr_port>

000004a2 <inb_lcd_pin_port>:
     4a2:	20 b1       	in	r18, 0x00	; 0
     4a4:	80 e1       	ldi	r24, 0x10	; 16
     4a6:	28 9f       	mul	r18, r24
     4a8:	90 01       	movw	r18, r0
     4aa:	11 24       	eor	r1, r1
     4ac:	43 b1       	in	r20, 0x03	; 3
     4ae:	84 e0       	ldi	r24, 0x04	; 4
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	54 2f       	mov	r21, r20
     4b4:	51 70       	andi	r21, 0x01	; 1
     4b6:	99 0f       	add	r25, r25
     4b8:	95 2b       	or	r25, r21
     4ba:	46 95       	lsr	r20
     4bc:	81 50       	subi	r24, 0x01	; 1
     4be:	c9 f7       	brne	.-14     	; 0x4b2 <inb_lcd_pin_port+0x10>
     4c0:	89 2f       	mov	r24, r25
     4c2:	8f 70       	andi	r24, 0x0F	; 15
     4c4:	82 2b       	or	r24, r18
     4c6:	08 95       	ret

000004c8 <glcdBusyWait>:
     4c8:	f8 94       	cli
     4ca:	a1 df       	rcall	.-190    	; 0x40e <glcdControllerSelect>
     4cc:	88 b1       	in	r24, 0x08	; 8
     4ce:	6f ef       	ldi	r22, 0xFF	; 255
     4d0:	ae df       	rcall	.-164    	; 0x42e <outb_lcd_data_port>
     4d2:	2f 98       	cbi	0x05, 7	; 5
     4d4:	87 b1       	in	r24, 0x07	; 7
     4d6:	94 df       	rcall	.-216    	; 0x400 <outb_lcd_ddr_port.part.1>
     4d8:	2e 9a       	sbi	0x05, 6	; 5
     4da:	2d 9a       	sbi	0x05, 5	; 5
     4dc:	00 00       	nop
     4de:	00 00       	nop
     4e0:	86 b1       	in	r24, 0x06	; 6
     4e2:	df df       	rcall	.-66     	; 0x4a2 <inb_lcd_pin_port>
     4e4:	2d 98       	cbi	0x05, 5	; 5
     4e6:	87 ff       	sbrs	r24, 7
     4e8:	12 c0       	rjmp	.+36     	; 0x50e <glcdBusyWait+0x46>
	...
     4f2:	82 e0       	ldi	r24, 0x02	; 2
     4f4:	8a 95       	dec	r24
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <glcdBusyWait+0x2c>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <glcdBusyWait+0x32>
     4fa:	2d 9a       	sbi	0x05, 5	; 5
	...
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	8a 95       	dec	r24
     508:	f1 f7       	brne	.-4      	; 0x506 <glcdBusyWait+0x3e>
     50a:	00 c0       	rjmp	.+0      	; 0x50c <glcdBusyWait+0x44>
     50c:	e9 cf       	rjmp	.-46     	; 0x4e0 <glcdBusyWait+0x18>
     50e:	2e 98       	cbi	0x05, 6	; 5
     510:	87 b1       	in	r24, 0x07	; 7
     512:	6f ef       	ldi	r22, 0xFF	; 255
     514:	a6 df       	rcall	.-180    	; 0x462 <outb_lcd_ddr_port>
     516:	78 94       	sei
     518:	08 95       	ret

0000051a <glcdControlWrite>:
     51a:	cf 93       	push	r28
     51c:	c6 2f       	mov	r28, r22
     51e:	f8 94       	cli
     520:	d3 df       	rcall	.-90     	; 0x4c8 <glcdBusyWait>
     522:	2f 98       	cbi	0x05, 7	; 5
     524:	2e 98       	cbi	0x05, 6	; 5
     526:	2d 9a       	sbi	0x05, 5	; 5
     528:	87 b1       	in	r24, 0x07	; 7
     52a:	6f ef       	ldi	r22, 0xFF	; 255
     52c:	9a df       	rcall	.-204    	; 0x462 <outb_lcd_ddr_port>
     52e:	88 b1       	in	r24, 0x08	; 8
     530:	6c 2f       	mov	r22, r28
     532:	7d df       	rcall	.-262    	; 0x42e <outb_lcd_data_port>
	...
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	8a 95       	dec	r24
     548:	f1 f7       	brne	.-4      	; 0x546 <glcdControlWrite+0x2c>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <glcdControlWrite+0x32>
     54c:	2d 98       	cbi	0x05, 5	; 5
     54e:	78 94       	sei
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <glcdSetXAddress>:
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	c8 e0       	ldi	r28, 0x08	; 8
     55a:	d2 e0       	ldi	r29, 0x02	; 2
     55c:	88 83       	st	Y, r24
     55e:	60 e4       	ldi	r22, 0x40	; 64
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	db df       	rcall	.-74     	; 0x51a <glcdControlWrite>
     564:	1a 82       	std	Y+2, r1	; 0x02
     566:	60 e4       	ldi	r22, 0x40	; 64
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	d7 df       	rcall	.-82     	; 0x51a <glcdControlWrite>
     56c:	1c 82       	std	Y+4, r1	; 0x04
     56e:	88 81       	ld	r24, Y
     570:	68 2f       	mov	r22, r24
     572:	6f 73       	andi	r22, 0x3F	; 63
     574:	60 64       	ori	r22, 0x40	; 64
     576:	82 95       	swap	r24
     578:	86 95       	lsr	r24
     57a:	86 95       	lsr	r24
     57c:	83 70       	andi	r24, 0x03	; 3
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	cb cf       	rjmp	.-106    	; 0x51a <glcdControlWrite>

00000584 <glcdSetYAddress>:
     584:	cf 93       	push	r28
     586:	80 93 09 02 	sts	0x0209, r24
     58a:	c8 2f       	mov	r28, r24
     58c:	c8 6b       	ori	r28, 0xB8	; 184
     58e:	6c 2f       	mov	r22, r28
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	c3 df       	rcall	.-122    	; 0x51a <glcdControlWrite>
     594:	6c 2f       	mov	r22, r28
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	cf 91       	pop	r28
     59a:	bf cf       	rjmp	.-130    	; 0x51a <glcdControlWrite>

0000059c <glcdSetAddress>:
     59c:	cf 93       	push	r28
     59e:	c8 2f       	mov	r28, r24
     5a0:	86 2f       	mov	r24, r22
     5a2:	f0 df       	rcall	.-32     	; 0x584 <glcdSetYAddress>
     5a4:	8c 2f       	mov	r24, r28
     5a6:	cf 91       	pop	r28
     5a8:	d5 cf       	rjmp	.-86     	; 0x554 <glcdSetXAddress>

000005aa <glcdStartLine>:
		}
	}
}

void glcdStartLine(u08 start)
{
     5aa:	cf 93       	push	r28
	glcdControlWrite(0, GLCD_START_LINE | start);
     5ac:	c8 2f       	mov	r28, r24
     5ae:	c0 6c       	ori	r28, 0xC0	; 192
     5b0:	6c 2f       	mov	r22, r28
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	b2 df       	rcall	.-156    	; 0x51a <glcdControlWrite>
	glcdControlWrite(1, GLCD_START_LINE | start);
     5b6:	6c 2f       	mov	r22, r28
     5b8:	81 e0       	ldi	r24, 0x01	; 1
}
     5ba:	cf 91       	pop	r28
}

void glcdStartLine(u08 start)
{
	glcdControlWrite(0, GLCD_START_LINE | start);
	glcdControlWrite(1, GLCD_START_LINE | start);
     5bc:	ae cf       	rjmp	.-164    	; 0x51a <glcdControlWrite>

000005be <glcdHome>:

void glcdHome(void)
{
	u08 i;
	// initialize addresses/positions
	glcdStartLine(0);
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	f4 df       	rcall	.-24     	; 0x5aa <glcdStartLine>
	glcdSetAddress(0,0);
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	ea df       	rcall	.-44     	; 0x59c <glcdSetAddress>
	// initialize local data structures
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		GrLcdState.ctrlr[i].xAddr = 0;
     5c8:	e8 e0       	ldi	r30, 0x08	; 8
     5ca:	f2 e0       	ldi	r31, 0x02	; 2
     5cc:	12 82       	std	Z+2, r1	; 0x02
		GrLcdState.ctrlr[i].yAddr = 0;
     5ce:	13 82       	std	Z+3, r1	; 0x03
	glcdStartLine(0);
	glcdSetAddress(0,0);
	// initialize local data structures
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		GrLcdState.ctrlr[i].xAddr = 0;
     5d0:	14 82       	std	Z+4, r1	; 0x04
		GrLcdState.ctrlr[i].yAddr = 0;
     5d2:	15 82       	std	Z+5, r1	; 0x05
     5d4:	08 95       	ret

000005d6 <glcdDataWrite>:
#endif
	return data;
}

void glcdDataWrite(u08 data)
{
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	d8 2f       	mov	r29, r24
	register u08 controller = (GrLcdState.lcdXAddr/GLCD_CONTROLLER_XPIXELS);
     5dc:	e0 91 08 02 	lds	r30, 0x0208
     5e0:	ce 2f       	mov	r28, r30
     5e2:	c2 95       	swap	r28
     5e4:	c6 95       	lsr	r28
     5e6:	c6 95       	lsr	r28
     5e8:	c3 70       	andi	r28, 0x03	; 3
#ifdef GLCD_PORT_INTERFACE
	cli();
     5ea:	f8 94       	cli
	glcdBusyWait(controller);		// wait until LCD not busy
     5ec:	8c 2f       	mov	r24, r28
     5ee:	6c df       	rcall	.-296    	; 0x4c8 <glcdBusyWait>
	sbi(GLCD_CTRL_PORT, GLCD_CTRL_RS);
     5f0:	2f 9a       	sbi	0x05, 7	; 5
	cbi(GLCD_CTRL_PORT, GLCD_CTRL_RW);
     5f2:	2e 98       	cbi	0x05, 6	; 5
	sbi(GLCD_CTRL_PORT, GLCD_CTRL_E);
     5f4:	2d 9a       	sbi	0x05, 5	; 5
	outb_lcd_ddr_port(GLCD_DATA_DDR, 0xFF);
     5f6:	87 b1       	in	r24, 0x07	; 7
     5f8:	6f ef       	ldi	r22, 0xFF	; 255
     5fa:	33 df       	rcall	.-410    	; 0x462 <outb_lcd_ddr_port>
	outb_lcd_data_port(GLCD_DATA_PORT, data);
     5fc:	88 b1       	in	r24, 0x08	; 8
     5fe:	6d 2f       	mov	r22, r29
     600:	16 df       	rcall	.-468    	; 0x42e <outb_lcd_data_port>
	...
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     612:	82 e0       	ldi	r24, 0x02	; 2
     614:	8a 95       	dec	r24
     616:	f1 f7       	brne	.-4      	; 0x614 <glcdDataWrite+0x3e>
     618:	00 c0       	rjmp	.+0      	; 0x61a <glcdDataWrite+0x44>
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	_delay_us(1);
	cbi(GLCD_CTRL_PORT, GLCD_CTRL_E);
     61a:	2d 98       	cbi	0x05, 5	; 5
	sei();
     61c:	78 94       	sei
	glcdBusyWait(controller);		// wait until LCD not busy
	*(volatile unsigned char *) (GLCD_CONTROLLER0_CTRL_ADDR + GLCD_CONTROLLER_ADDR_OFFSET*controller) = data;
	//cbi(MCUCR, SRW);				// disable RAM waitstate
#endif
	// increment our local address counter
	GrLcdState.ctrlr[controller].xAddr++;
     61e:	ec 2f       	mov	r30, r28
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	e6 5f       	subi	r30, 0xF6	; 246
     628:	fd 4f       	sbci	r31, 0xFD	; 253
     62a:	80 81       	ld	r24, Z
     62c:	8f 5f       	subi	r24, 0xFF	; 255
     62e:	80 83       	st	Z, r24
	GrLcdState.lcdXAddr++;
     630:	80 91 08 02 	lds	r24, 0x0208
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	80 93 08 02 	sts	0x0208, r24
	if(GrLcdState.lcdXAddr >= GLCD_XPIXELS)
     63a:	87 ff       	sbrs	r24, 7
     63c:	0a c0       	rjmp	.+20     	; 0x652 <glcdDataWrite+0x7c>
	{
		GrLcdState.lcdYAddr++;
     63e:	80 91 09 02 	lds	r24, 0x0209
     642:	8f 5f       	subi	r24, 0xFF	; 255
     644:	80 93 09 02 	sts	0x0209, r24
		glcdSetYAddress(GrLcdState.lcdYAddr);
     648:	9d df       	rcall	.-198    	; 0x584 <glcdSetYAddress>
		glcdSetXAddress(0);
     64a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
	GrLcdState.lcdXAddr++;
	if(GrLcdState.lcdXAddr >= GLCD_XPIXELS)
	{
		GrLcdState.lcdYAddr++;
		glcdSetYAddress(GrLcdState.lcdYAddr);
		glcdSetXAddress(0);
     650:	81 cf       	rjmp	.-254    	; 0x554 <glcdSetXAddress>
	}
}
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	08 95       	ret

00000658 <glcdClearScreen>:
		GrLcdState.ctrlr[i].yAddr = 0;
	}
}

void glcdClearScreen(void)
{
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
	u08 pageAddr;
	u08 xAddr;

	// clear LCD
	// loop through all pages
	for(pageAddr=0; pageAddr<(GLCD_YPIXELS>>3); pageAddr++)
     65c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		// set page address
		glcdSetAddress(0, pageAddr);
     65e:	6c 2f       	mov	r22, r28
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	9c df       	rcall	.-200    	; 0x59c <glcdSetAddress>
		// clear all lines of this page of display memory
		for(xAddr=0; xAddr<GLCD_XPIXELS; xAddr++)
     664:	d0 e0       	ldi	r29, 0x00	; 0
		{
			glcdDataWrite(0x00);
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	b6 df       	rcall	.-148    	; 0x5d6 <glcdDataWrite>
	for(pageAddr=0; pageAddr<(GLCD_YPIXELS>>3); pageAddr++)
	{
		// set page address
		glcdSetAddress(0, pageAddr);
		// clear all lines of this page of display memory
		for(xAddr=0; xAddr<GLCD_XPIXELS; xAddr++)
     66a:	df 5f       	subi	r29, 0xFF	; 255
     66c:	d0 38       	cpi	r29, 0x80	; 128
     66e:	d9 f7       	brne	.-10     	; 0x666 <glcdClearScreen+0xe>
	u08 pageAddr;
	u08 xAddr;

	// clear LCD
	// loop through all pages
	for(pageAddr=0; pageAddr<(GLCD_YPIXELS>>3); pageAddr++)
     670:	cf 5f       	subi	r28, 0xFF	; 255
     672:	c8 30       	cpi	r28, 0x08	; 8
     674:	a1 f7       	brne	.-24     	; 0x65e <glcdClearScreen+0x6>
		for(xAddr=0; xAddr<GLCD_XPIXELS; xAddr++)
		{
			glcdDataWrite(0x00);
		}
	}
}
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <glcdInit>:

void glcdInit()
{
	u08 i;
	// initialize hardware
	glcdInitHW();
     67c:	fc de       	rcall	.-520    	; 0x476 <glcdInitHW>
	// bring lcd out of reset
	//glcdReset(FALSE);
	// Turn on LCD
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		glcdControlWrite(i, GLCD_ON_CTRL | GLCD_ON_DISPLAY);
     67e:	6f e3       	ldi	r22, 0x3F	; 63
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	4b df       	rcall	.-362    	; 0x51a <glcdControlWrite>
     684:	6f e3       	ldi	r22, 0x3F	; 63
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	48 df       	rcall	.-368    	; 0x51a <glcdControlWrite>
	}
	// clear lcd
	glcdClearScreen();
     68a:	e6 df       	rcall	.-52     	; 0x658 <glcdClearScreen>
	// initialize positions
	glcdHome();
     68c:	98 cf       	rjmp	.-208    	; 0x5be <glcdHome>

0000068e <rprintfInit>:
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
	}
}
     68e:	90 93 77 01 	sts	0x0177, r25
     692:	80 93 76 01 	sts	0x0176, r24
     696:	08 95       	ret

00000698 <rprintfChar>:
     698:	cf 93       	push	r28
     69a:	c8 2f       	mov	r28, r24
     69c:	8a 30       	cpi	r24, 0x0A	; 10
     69e:	31 f4       	brne	.+12     	; 0x6ac <rprintfChar+0x14>
     6a0:	e0 91 76 01 	lds	r30, 0x0176
     6a4:	f0 91 77 01 	lds	r31, 0x0177
     6a8:	8d e0       	ldi	r24, 0x0D	; 13
     6aa:	09 95       	icall
     6ac:	e0 91 76 01 	lds	r30, 0x0176
     6b0:	f0 91 77 01 	lds	r31, 0x0177
     6b4:	8c 2f       	mov	r24, r28
     6b6:	cf 91       	pop	r28
     6b8:	09 94       	ijmp

000006ba <rprintfu04>:
     6ba:	8f 70       	andi	r24, 0x0F	; 15
     6bc:	e8 2f       	mov	r30, r24
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	e4 5a       	subi	r30, 0xA4	; 164
     6c2:	fd 4f       	sbci	r31, 0xFD	; 253
     6c4:	84 91       	lpm	r24, Z
     6c6:	e8 cf       	rjmp	.-48     	; 0x698 <rprintfChar>

000006c8 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
     6c8:	5f 92       	push	r5
     6ca:	6f 92       	push	r6
     6cc:	7f 92       	push	r7
     6ce:	8f 92       	push	r8
     6d0:	9f 92       	push	r9
     6d2:	af 92       	push	r10
     6d4:	bf 92       	push	r11
     6d6:	cf 92       	push	r12
     6d8:	df 92       	push	r13
     6da:	ef 92       	push	r14
     6dc:	ff 92       	push	r15
     6de:	0f 93       	push	r16
     6e0:	1f 93       	push	r17
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	1f 92       	push	r1
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	ec 89       	ldd	r30, Y+20	; 0x14
     6ee:	fd 89       	ldd	r31, Y+21	; 0x15
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
     6f0:	3e 01       	movw	r6, r28
     6f2:	26 e1       	ldi	r18, 0x16	; 22
     6f4:	62 0e       	add	r6, r18
     6f6:	71 1c       	adc	r7, r1
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
					rprintfChar('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     6f8:	3a e0       	ldi	r19, 0x0A	; 10
     6fa:	a3 2e       	mov	r10, r19
     6fc:	b1 2c       	mov	r11, r1
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     6fe:	3b 89       	ldd	r19, Y+19	; 0x13
     700:	33 23       	and	r19, r19
     702:	79 f0       	breq	.+30     	; 0x722 <rprintf1RamRom+0x5a>
     704:	8f 01       	movw	r16, r30
     706:	0f 5f       	subi	r16, 0xFF	; 255
     708:	1f 4f       	sbci	r17, 0xFF	; 255
     70a:	84 91       	lpm	r24, Z
     70c:	85 32       	cpi	r24, 0x25	; 37
     70e:	81 f0       	breq	.+32     	; 0x730 <rprintf1RamRom+0x68>
		{	// Until '%' or '\0'
			if (!format_flag)
     710:	88 23       	and	r24, r24
     712:	09 f4       	brne	.+2      	; 0x716 <rprintf1RamRom+0x4e>
     714:	5f c0       	rjmp	.+190    	; 0x7d4 <rprintf1RamRom+0x10c>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
     716:	c0 df       	rcall	.-128    	; 0x698 <rprintfChar>
     718:	63 01       	movw	r12, r6
     71a:	78 01       	movw	r14, r16
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
     71c:	36 01       	movw	r6, r12
     71e:	f7 01       	movw	r30, r14
     720:	ee cf       	rjmp	.-36     	; 0x6fe <rprintf1RamRom+0x36>
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     722:	80 81       	ld	r24, Z
     724:	85 32       	cpi	r24, 0x25	; 37
     726:	59 f0       	breq	.+22     	; 0x73e <rprintf1RamRom+0x76>
     728:	8f 01       	movw	r16, r30
     72a:	0f 5f       	subi	r16, 0xFF	; 255
     72c:	1f 4f       	sbci	r17, 0xFF	; 255
     72e:	f0 cf       	rjmp	.-32     	; 0x710 <rprintf1RamRom+0x48>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
     730:	7f 01       	movw	r14, r30
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	e8 0e       	add	r14, r24
     736:	f1 1c       	adc	r15, r1
     738:	f8 01       	movw	r30, r16
     73a:	84 91       	lpm	r24, Z
     73c:	05 c0       	rjmp	.+10     	; 0x748 <rprintf1RamRom+0x80>
     73e:	7f 01       	movw	r14, r30
     740:	22 e0       	ldi	r18, 0x02	; 2
     742:	e2 0e       	add	r14, r18
     744:	f1 1c       	adc	r15, r1
     746:	81 81       	ldd	r24, Z+1	; 0x01
     748:	84 36       	cpi	r24, 0x64	; 100
     74a:	99 f0       	breq	.+38     	; 0x772 <rprintf1RamRom+0xaa>
     74c:	88 37       	cpi	r24, 0x78	; 120
     74e:	59 f0       	breq	.+22     	; 0x766 <rprintf1RamRom+0x9e>
     750:	83 36       	cpi	r24, 0x63	; 99
     752:	31 f4       	brne	.+12     	; 0x760 <rprintf1RamRom+0x98>
		{
			case 'c': format_flag = va_arg(ap,int);
     754:	f3 01       	movw	r30, r6
     756:	80 81       	ld	r24, Z
     758:	93 01       	movw	r18, r6
     75a:	2e 5f       	subi	r18, 0xFE	; 254
     75c:	3f 4f       	sbci	r19, 0xFF	; 255
     75e:	39 01       	movw	r6, r18
			default:  rprintfChar(format_flag); continue;
     760:	9b df       	rcall	.-202    	; 0x698 <rprintfChar>
     762:	63 01       	movw	r12, r6
     764:	db cf       	rjmp	.-74     	; 0x71c <rprintf1RamRom+0x54>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
     766:	20 e1       	ldi	r18, 0x10	; 16
     768:	82 2e       	mov	r8, r18
     76a:	91 2c       	mov	r9, r1
     76c:	00 e0       	ldi	r16, 0x00	; 0
     76e:	10 e1       	ldi	r17, 0x10	; 16
     770:	05 c0       	rjmp	.+10     	; 0x77c <rprintf1RamRom+0xb4>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
     772:	9a e0       	ldi	r25, 0x0A	; 10
     774:	89 2e       	mov	r8, r25
     776:	91 2c       	mov	r9, r1
     778:	00 e1       	ldi	r16, 0x10	; 16
     77a:	17 e2       	ldi	r17, 0x27	; 39
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
     77c:	63 01       	movw	r12, r6
     77e:	32 e0       	ldi	r19, 0x02	; 2
     780:	c3 0e       	add	r12, r19
     782:	d1 1c       	adc	r13, r1
     784:	f3 01       	movw	r30, r6
     786:	60 80       	ld	r6, Z
     788:	71 80       	ldd	r7, Z+1	; 0x01
			if (format_flag == 'd')
     78a:	84 36       	cpi	r24, 0x64	; 100
     78c:	91 f4       	brne	.+36     	; 0x7b2 <rprintf1RamRom+0xea>
			{
				if (((int)u_val) < 0)
     78e:	77 fe       	sbrs	r7, 7
     790:	0d c0       	rjmp	.+26     	; 0x7ac <rprintf1RamRom+0xe4>
				{
					u_val = - u_val;
     792:	71 94       	neg	r7
     794:	61 94       	neg	r6
     796:	71 08       	sbc	r7, r1
					rprintfChar('-');
     798:	8d e2       	ldi	r24, 0x2D	; 45
     79a:	7e df       	rcall	.-260    	; 0x698 <rprintfChar>
     79c:	07 c0       	rjmp	.+14     	; 0x7ac <rprintf1RamRom+0xe4>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     79e:	c8 01       	movw	r24, r16
     7a0:	b5 01       	movw	r22, r10
     7a2:	af d4       	rcall	.+2398   	; 0x1102 <__udivmodhi4>
     7a4:	8b 01       	movw	r16, r22
     7a6:	62 30       	cpi	r22, 0x02	; 2
     7a8:	71 05       	cpc	r23, r1
     7aa:	18 f0       	brcs	.+6      	; 0x7b2 <rprintf1RamRom+0xea>
     7ac:	60 16       	cp	r6, r16
     7ae:	71 06       	cpc	r7, r17
     7b0:	b0 f3       	brcs	.-20     	; 0x79e <rprintf1RamRom+0xd6>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
     7b2:	c3 01       	movw	r24, r6
     7b4:	b8 01       	movw	r22, r16
     7b6:	a5 d4       	rcall	.+2378   	; 0x1102 <__udivmodhi4>
     7b8:	58 2e       	mov	r5, r24
     7ba:	86 2f       	mov	r24, r22
     7bc:	99 83       	std	Y+1, r25	; 0x01
     7be:	7d df       	rcall	.-262    	; 0x6ba <rprintfu04>
				u_val %= div_val;
     7c0:	65 2c       	mov	r6, r5
     7c2:	99 81       	ldd	r25, Y+1	; 0x01
     7c4:	79 2e       	mov	r7, r25
				div_val /= base;
     7c6:	c8 01       	movw	r24, r16
     7c8:	b4 01       	movw	r22, r8
     7ca:	9b d4       	rcall	.+2358   	; 0x1102 <__udivmodhi4>
     7cc:	8b 01       	movw	r16, r22
			} while (div_val);
     7ce:	67 2b       	or	r22, r23
     7d0:	81 f7       	brne	.-32     	; 0x7b2 <rprintf1RamRom+0xea>
     7d2:	a4 cf       	rjmp	.-184    	; 0x71c <rprintf1RamRom+0x54>
		}
	}
	va_end(ap);
}
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0f 90       	pop	r0
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	ff 90       	pop	r15
     7e4:	ef 90       	pop	r14
     7e6:	df 90       	pop	r13
     7e8:	cf 90       	pop	r12
     7ea:	bf 90       	pop	r11
     7ec:	af 90       	pop	r10
     7ee:	9f 90       	pop	r9
     7f0:	8f 90       	pop	r8
     7f2:	7f 90       	pop	r7
     7f4:	6f 90       	pop	r6
     7f6:	5f 90       	pop	r5
     7f8:	08 95       	ret

000007fa <__vector_18>:
	OCR1B = pwmDuty;
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
     7fa:	1f 92       	push	r1
     7fc:	0f 92       	push	r0
     7fe:	0f b6       	in	r0, 0x3f	; 63
     800:	0f 92       	push	r0
     802:	11 24       	eor	r1, r1
     804:	2f 93       	push	r18
     806:	3f 93       	push	r19
     808:	4f 93       	push	r20
     80a:	5f 93       	push	r21
     80c:	6f 93       	push	r22
     80e:	7f 93       	push	r23
     810:	8f 93       	push	r24
     812:	9f 93       	push	r25
     814:	af 93       	push	r26
     816:	bf 93       	push	r27
     818:	ef 93       	push	r30
     81a:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
     81c:	80 91 0e 02 	lds	r24, 0x020E
     820:	90 91 0f 02 	lds	r25, 0x020F
     824:	a0 91 10 02 	lds	r26, 0x0210
     828:	b0 91 11 02 	lds	r27, 0x0211
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	a1 1d       	adc	r26, r1
     830:	b1 1d       	adc	r27, r1
     832:	80 93 0e 02 	sts	0x020E, r24
     836:	90 93 0f 02 	sts	0x020F, r25
     83a:	a0 93 10 02 	sts	0x0210, r26
     83e:	b0 93 11 02 	sts	0x0211, r27

	// increment pause counter
	TimerPauseReg++;
     842:	80 91 12 02 	lds	r24, 0x0212
     846:	90 91 13 02 	lds	r25, 0x0213
     84a:	a0 91 14 02 	lds	r26, 0x0214
     84e:	b0 91 15 02 	lds	r27, 0x0215
     852:	01 96       	adiw	r24, 0x01	; 1
     854:	a1 1d       	adc	r26, r1
     856:	b1 1d       	adc	r27, r1
     858:	80 93 12 02 	sts	0x0212, r24
     85c:	90 93 13 02 	sts	0x0213, r25
     860:	a0 93 14 02 	sts	0x0214, r26
     864:	b0 93 15 02 	sts	0x0215, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
     868:	80 91 78 01 	lds	r24, 0x0178
     86c:	90 91 79 01 	lds	r25, 0x0179
     870:	89 2b       	or	r24, r25
     872:	29 f0       	breq	.+10     	; 0x87e <__vector_18+0x84>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
     874:	e0 91 78 01 	lds	r30, 0x0178
     878:	f0 91 79 01 	lds	r31, 0x0179
     87c:	09 95       	icall
}
     87e:	ff 91       	pop	r31
     880:	ef 91       	pop	r30
     882:	bf 91       	pop	r27
     884:	af 91       	pop	r26
     886:	9f 91       	pop	r25
     888:	8f 91       	pop	r24
     88a:	7f 91       	pop	r23
     88c:	6f 91       	pop	r22
     88e:	5f 91       	pop	r21
     890:	4f 91       	pop	r20
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <__vector_15>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
     8a0:	1f 92       	push	r1
     8a2:	0f 92       	push	r0
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	0f 92       	push	r0
     8a8:	11 24       	eor	r1, r1
     8aa:	2f 93       	push	r18
     8ac:	3f 93       	push	r19
     8ae:	4f 93       	push	r20
     8b0:	5f 93       	push	r21
     8b2:	6f 93       	push	r22
     8b4:	7f 93       	push	r23
     8b6:	8f 93       	push	r24
     8b8:	9f 93       	push	r25
     8ba:	af 93       	push	r26
     8bc:	bf 93       	push	r27
     8be:	ef 93       	push	r30
     8c0:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
     8c2:	80 91 7a 01 	lds	r24, 0x017A
     8c6:	90 91 7b 01 	lds	r25, 0x017B
     8ca:	89 2b       	or	r24, r25
     8cc:	29 f0       	breq	.+10     	; 0x8d8 <__vector_15+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
     8ce:	e0 91 7a 01 	lds	r30, 0x017A
     8d2:	f0 91 7b 01 	lds	r31, 0x017B
     8d6:	09 95       	icall
}
     8d8:	ff 91       	pop	r31
     8da:	ef 91       	pop	r30
     8dc:	bf 91       	pop	r27
     8de:	af 91       	pop	r26
     8e0:	9f 91       	pop	r25
     8e2:	8f 91       	pop	r24
     8e4:	7f 91       	pop	r23
     8e6:	6f 91       	pop	r22
     8e8:	5f 91       	pop	r21
     8ea:	4f 91       	pop	r20
     8ec:	3f 91       	pop	r19
     8ee:	2f 91       	pop	r18
     8f0:	0f 90       	pop	r0
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	0f 90       	pop	r0
     8f6:	1f 90       	pop	r1
     8f8:	18 95       	reti

000008fa <__vector_11>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
     8fa:	1f 92       	push	r1
     8fc:	0f 92       	push	r0
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	0f 92       	push	r0
     902:	11 24       	eor	r1, r1
     904:	2f 93       	push	r18
     906:	3f 93       	push	r19
     908:	4f 93       	push	r20
     90a:	5f 93       	push	r21
     90c:	6f 93       	push	r22
     90e:	7f 93       	push	r23
     910:	8f 93       	push	r24
     912:	9f 93       	push	r25
     914:	af 93       	push	r26
     916:	bf 93       	push	r27
     918:	ef 93       	push	r30
     91a:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
     91c:	80 91 16 02 	lds	r24, 0x0216
     920:	90 91 17 02 	lds	r25, 0x0217
     924:	a0 91 18 02 	lds	r26, 0x0218
     928:	b0 91 19 02 	lds	r27, 0x0219
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	a1 1d       	adc	r26, r1
     930:	b1 1d       	adc	r27, r1
     932:	80 93 16 02 	sts	0x0216, r24
     936:	90 93 17 02 	sts	0x0217, r25
     93a:	a0 93 18 02 	sts	0x0218, r26
     93e:	b0 93 19 02 	sts	0x0219, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
     942:	80 91 82 01 	lds	r24, 0x0182
     946:	90 91 83 01 	lds	r25, 0x0183
     94a:	89 2b       	or	r24, r25
     94c:	29 f0       	breq	.+10     	; 0x958 <__vector_11+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
     94e:	e0 91 82 01 	lds	r30, 0x0182
     952:	f0 91 83 01 	lds	r31, 0x0183
     956:	09 95       	icall
}
     958:	ff 91       	pop	r31
     95a:	ef 91       	pop	r30
     95c:	bf 91       	pop	r27
     95e:	af 91       	pop	r26
     960:	9f 91       	pop	r25
     962:	8f 91       	pop	r24
     964:	7f 91       	pop	r23
     966:	6f 91       	pop	r22
     968:	5f 91       	pop	r21
     96a:	4f 91       	pop	r20
     96c:	3f 91       	pop	r19
     96e:	2f 91       	pop	r18
     970:	0f 90       	pop	r0
     972:	0f be       	out	0x3f, r0	; 63
     974:	0f 90       	pop	r0
     976:	1f 90       	pop	r1
     978:	18 95       	reti

0000097a <__vector_13>:
}
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
     97a:	1f 92       	push	r1
     97c:	0f 92       	push	r0
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	0f 92       	push	r0
     982:	11 24       	eor	r1, r1
     984:	2f 93       	push	r18
     986:	3f 93       	push	r19
     988:	4f 93       	push	r20
     98a:	5f 93       	push	r21
     98c:	6f 93       	push	r22
     98e:	7f 93       	push	r23
     990:	8f 93       	push	r24
     992:	9f 93       	push	r25
     994:	af 93       	push	r26
     996:	bf 93       	push	r27
     998:	ef 93       	push	r30
     99a:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
     99c:	80 91 7c 01 	lds	r24, 0x017C
     9a0:	90 91 7d 01 	lds	r25, 0x017D
     9a4:	89 2b       	or	r24, r25
     9a6:	29 f0       	breq	.+10     	; 0x9b2 <__vector_13+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
     9a8:	e0 91 7c 01 	lds	r30, 0x017C
     9ac:	f0 91 7d 01 	lds	r31, 0x017D
     9b0:	09 95       	icall
}
     9b2:	ff 91       	pop	r31
     9b4:	ef 91       	pop	r30
     9b6:	bf 91       	pop	r27
     9b8:	af 91       	pop	r26
     9ba:	9f 91       	pop	r25
     9bc:	8f 91       	pop	r24
     9be:	7f 91       	pop	r23
     9c0:	6f 91       	pop	r22
     9c2:	5f 91       	pop	r21
     9c4:	4f 91       	pop	r20
     9c6:	3f 91       	pop	r19
     9c8:	2f 91       	pop	r18
     9ca:	0f 90       	pop	r0
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	0f 90       	pop	r0
     9d0:	1f 90       	pop	r1
     9d2:	18 95       	reti

000009d4 <__vector_14>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
     9d4:	1f 92       	push	r1
     9d6:	0f 92       	push	r0
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	0f 92       	push	r0
     9dc:	11 24       	eor	r1, r1
     9de:	2f 93       	push	r18
     9e0:	3f 93       	push	r19
     9e2:	4f 93       	push	r20
     9e4:	5f 93       	push	r21
     9e6:	6f 93       	push	r22
     9e8:	7f 93       	push	r23
     9ea:	8f 93       	push	r24
     9ec:	9f 93       	push	r25
     9ee:	af 93       	push	r26
     9f0:	bf 93       	push	r27
     9f2:	ef 93       	push	r30
     9f4:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
     9f6:	80 91 7e 01 	lds	r24, 0x017E
     9fa:	90 91 7f 01 	lds	r25, 0x017F
     9fe:	89 2b       	or	r24, r25
     a00:	29 f0       	breq	.+10     	; 0xa0c <__vector_14+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
     a02:	e0 91 7e 01 	lds	r30, 0x017E
     a06:	f0 91 7f 01 	lds	r31, 0x017F
     a0a:	09 95       	icall
}
     a0c:	ff 91       	pop	r31
     a0e:	ef 91       	pop	r30
     a10:	bf 91       	pop	r27
     a12:	af 91       	pop	r26
     a14:	9f 91       	pop	r25
     a16:	8f 91       	pop	r24
     a18:	7f 91       	pop	r23
     a1a:	6f 91       	pop	r22
     a1c:	5f 91       	pop	r21
     a1e:	4f 91       	pop	r20
     a20:	3f 91       	pop	r19
     a22:	2f 91       	pop	r18
     a24:	0f 90       	pop	r0
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	0f 90       	pop	r0
     a2a:	1f 90       	pop	r1
     a2c:	18 95       	reti

00000a2e <__vector_12>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
     a2e:	1f 92       	push	r1
     a30:	0f 92       	push	r0
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	0f 92       	push	r0
     a36:	11 24       	eor	r1, r1
     a38:	2f 93       	push	r18
     a3a:	3f 93       	push	r19
     a3c:	4f 93       	push	r20
     a3e:	5f 93       	push	r21
     a40:	6f 93       	push	r22
     a42:	7f 93       	push	r23
     a44:	8f 93       	push	r24
     a46:	9f 93       	push	r25
     a48:	af 93       	push	r26
     a4a:	bf 93       	push	r27
     a4c:	ef 93       	push	r30
     a4e:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
     a50:	80 91 80 01 	lds	r24, 0x0180
     a54:	90 91 81 01 	lds	r25, 0x0181
     a58:	89 2b       	or	r24, r25
     a5a:	29 f0       	breq	.+10     	; 0xa66 <__vector_12+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
     a5c:	e0 91 80 01 	lds	r30, 0x0180
     a60:	f0 91 81 01 	lds	r31, 0x0181
     a64:	09 95       	icall
}
     a66:	ff 91       	pop	r31
     a68:	ef 91       	pop	r30
     a6a:	bf 91       	pop	r27
     a6c:	af 91       	pop	r26
     a6e:	9f 91       	pop	r25
     a70:	8f 91       	pop	r24
     a72:	7f 91       	pop	r23
     a74:	6f 91       	pop	r22
     a76:	5f 91       	pop	r21
     a78:	4f 91       	pop	r20
     a7a:	3f 91       	pop	r19
     a7c:	2f 91       	pop	r18
     a7e:	0f 90       	pop	r0
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	0f 90       	pop	r0
     a84:	1f 90       	pop	r1
     a86:	18 95       	reti

00000a88 <__vector_9>:

//! Interrupt handler for OutputCompare2A match (OC2A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMPA_vect)
{
     a88:	1f 92       	push	r1
     a8a:	0f 92       	push	r0
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	0f 92       	push	r0
     a90:	11 24       	eor	r1, r1
     a92:	2f 93       	push	r18
     a94:	3f 93       	push	r19
     a96:	4f 93       	push	r20
     a98:	5f 93       	push	r21
     a9a:	6f 93       	push	r22
     a9c:	7f 93       	push	r23
     a9e:	8f 93       	push	r24
     aa0:	9f 93       	push	r25
     aa2:	af 93       	push	r26
     aa4:	bf 93       	push	r27
     aa6:	ef 93       	push	r30
     aa8:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     aaa:	80 91 84 01 	lds	r24, 0x0184
     aae:	90 91 85 01 	lds	r25, 0x0185
     ab2:	89 2b       	or	r24, r25
     ab4:	29 f0       	breq	.+10     	; 0xac0 <__vector_9+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     ab6:	e0 91 84 01 	lds	r30, 0x0184
     aba:	f0 91 85 01 	lds	r31, 0x0185
     abe:	09 95       	icall
}
     ac0:	ff 91       	pop	r31
     ac2:	ef 91       	pop	r30
     ac4:	bf 91       	pop	r27
     ac6:	af 91       	pop	r26
     ac8:	9f 91       	pop	r25
     aca:	8f 91       	pop	r24
     acc:	7f 91       	pop	r23
     ace:	6f 91       	pop	r22
     ad0:	5f 91       	pop	r21
     ad2:	4f 91       	pop	r20
     ad4:	3f 91       	pop	r19
     ad6:	2f 91       	pop	r18
     ad8:	0f 90       	pop	r0
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	0f 90       	pop	r0
     ade:	1f 90       	pop	r1
     ae0:	18 95       	reti

00000ae2 <__vector_10>:

//! Interrupt handler for OutputCompare2B match (OC2B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMPB_vect)
{
     ae2:	1f 92       	push	r1
     ae4:	0f 92       	push	r0
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	0f 92       	push	r0
     aea:	11 24       	eor	r1, r1
     aec:	2f 93       	push	r18
     aee:	3f 93       	push	r19
     af0:	4f 93       	push	r20
     af2:	5f 93       	push	r21
     af4:	6f 93       	push	r22
     af6:	7f 93       	push	r23
     af8:	8f 93       	push	r24
     afa:	9f 93       	push	r25
     afc:	af 93       	push	r26
     afe:	bf 93       	push	r27
     b00:	ef 93       	push	r30
     b02:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     b04:	80 91 84 01 	lds	r24, 0x0184
     b08:	90 91 85 01 	lds	r25, 0x0185
     b0c:	89 2b       	or	r24, r25
     b0e:	29 f0       	breq	.+10     	; 0xb1a <__vector_10+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     b10:	e0 91 84 01 	lds	r30, 0x0184
     b14:	f0 91 85 01 	lds	r31, 0x0185
     b18:	09 95       	icall
}
     b1a:	ff 91       	pop	r31
     b1c:	ef 91       	pop	r30
     b1e:	bf 91       	pop	r27
     b20:	af 91       	pop	r26
     b22:	9f 91       	pop	r25
     b24:	8f 91       	pop	r24
     b26:	7f 91       	pop	r23
     b28:	6f 91       	pop	r22
     b2a:	5f 91       	pop	r21
     b2c:	4f 91       	pop	r20
     b2e:	3f 91       	pop	r19
     b30:	2f 91       	pop	r18
     b32:	0f 90       	pop	r0
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	0f 90       	pop	r0
     b38:	1f 90       	pop	r1
     b3a:	18 95       	reti

00000b3c <uartInitBuffers>:
void uartSendTxBuffer(void)
{
	// turn on buffered transmit
	uartBufferedTx = TRUE;
	// send the first byte to get things going by interrupts
	uartSendByte(bufferGetFromFront(&uartTxBuffer));
     b3c:	40 e4       	ldi	r20, 0x40	; 64
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	68 ec       	ldi	r22, 0xC8	; 200
     b42:	71 e0       	ldi	r23, 0x01	; 1
     b44:	8b e1       	ldi	r24, 0x1B	; 27
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	de db       	rcall	.-2116   	; 0x306 <bufferInit>
     b4a:	40 e4       	ldi	r20, 0x40	; 64
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	68 e8       	ldi	r22, 0x88	; 136
     b50:	71 e0       	ldi	r23, 0x01	; 1
     b52:	84 e2       	ldi	r24, 0x24	; 36
     b54:	92 e0       	ldi	r25, 0x02	; 2
     b56:	d7 cb       	rjmp	.-2130   	; 0x306 <bufferInit>

00000b58 <uartInit>:
     b58:	f1 df       	rcall	.-30     	; 0xb3c <uartInitBuffers>
     b5a:	10 92 87 01 	sts	0x0187, r1
     b5e:	10 92 86 01 	sts	0x0186, r1
     b62:	88 ed       	ldi	r24, 0xD8	; 216
     b64:	80 93 c1 00 	sts	0x00C1, r24
     b68:	83 e3       	ldi	r24, 0x33	; 51
     b6a:	80 93 c4 00 	sts	0x00C4, r24
     b6e:	10 92 c5 00 	sts	0x00C5, r1
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	80 93 1a 02 	sts	0x021A, r24
     b78:	10 92 23 02 	sts	0x0223, r1
     b7c:	10 92 2d 02 	sts	0x022D, r1
     b80:	10 92 2c 02 	sts	0x022C, r1
     b84:	78 94       	sei
     b86:	08 95       	ret

00000b88 <uartSetBaudRate>:
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	8b 01       	movw	r16, r22
     b8e:	9c 01       	movw	r18, r24
     b90:	dc 01       	movw	r26, r24
     b92:	cb 01       	movw	r24, r22
     b94:	80 5c       	subi	r24, 0xC0	; 192
     b96:	9d 4b       	sbci	r25, 0xBD	; 189
     b98:	a0 4f       	sbci	r26, 0xF0	; 240
     b9a:	bf 4f       	sbci	r27, 0xFF	; 255
     b9c:	bc 01       	movw	r22, r24
     b9e:	cd 01       	movw	r24, r26
     ba0:	43 e0       	ldi	r20, 0x03	; 3
     ba2:	66 0f       	add	r22, r22
     ba4:	77 1f       	adc	r23, r23
     ba6:	88 1f       	adc	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	4a 95       	dec	r20
     bac:	d1 f7       	brne	.-12     	; 0xba2 <uartSetBaudRate+0x1a>
     bae:	a9 01       	movw	r20, r18
     bb0:	98 01       	movw	r18, r16
     bb2:	e4 e0       	ldi	r30, 0x04	; 4
     bb4:	22 0f       	add	r18, r18
     bb6:	33 1f       	adc	r19, r19
     bb8:	44 1f       	adc	r20, r20
     bba:	55 1f       	adc	r21, r21
     bbc:	ea 95       	dec	r30
     bbe:	d1 f7       	brne	.-12     	; 0xbb4 <uartSetBaudRate+0x2c>
     bc0:	b4 d2       	rcall	.+1384   	; 0x112a <__udivmodsi4>
     bc2:	21 50       	subi	r18, 0x01	; 1
     bc4:	31 09       	sbc	r19, r1
     bc6:	20 93 c4 00 	sts	0x00C4, r18
     bca:	30 93 c5 00 	sts	0x00C5, r19
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	08 95       	ret

00000bd4 <uartSendByte>:
     bd4:	90 91 1a 02 	lds	r25, 0x021A
     bd8:	99 23       	and	r25, r25
     bda:	e1 f3       	breq	.-8      	; 0xbd4 <uartSendByte>
     bdc:	80 93 c6 00 	sts	0x00C6, r24
     be0:	10 92 1a 02 	sts	0x021A, r1
     be4:	08 95       	ret

00000be6 <__vector_22>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_TRANS)
{
     be6:	1f 92       	push	r1
     be8:	0f 92       	push	r0
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	0f 92       	push	r0
     bee:	11 24       	eor	r1, r1
     bf0:	2f 93       	push	r18
     bf2:	3f 93       	push	r19
     bf4:	4f 93       	push	r20
     bf6:	5f 93       	push	r21
     bf8:	6f 93       	push	r22
     bfa:	7f 93       	push	r23
     bfc:	8f 93       	push	r24
     bfe:	9f 93       	push	r25
     c00:	af 93       	push	r26
     c02:	bf 93       	push	r27
     c04:	ef 93       	push	r30
     c06:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
     c08:	80 91 23 02 	lds	r24, 0x0223
     c0c:	88 23       	and	r24, r24
     c0e:	71 f0       	breq	.+28     	; 0xc2c <__vector_22+0x46>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
     c10:	80 91 28 02 	lds	r24, 0x0228
     c14:	90 91 29 02 	lds	r25, 0x0229
     c18:	89 2b       	or	r24, r25
     c1a:	31 f0       	breq	.+12     	; 0xc28 <__vector_22+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
     c1c:	84 e2       	ldi	r24, 0x24	; 36
     c1e:	92 e0       	ldi	r25, 0x02	; 2
     c20:	7f db       	rcall	.-2306   	; 0x320 <bufferGetFromFront>
     c22:	80 93 c6 00 	sts	0x00C6, r24
     c26:	05 c0       	rjmp	.+10     	; 0xc32 <__vector_22+0x4c>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
     c28:	10 92 23 02 	sts	0x0223, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
     c2c:	8f ef       	ldi	r24, 0xFF	; 255
     c2e:	80 93 1a 02 	sts	0x021A, r24
	}
}
     c32:	ff 91       	pop	r31
     c34:	ef 91       	pop	r30
     c36:	bf 91       	pop	r27
     c38:	af 91       	pop	r26
     c3a:	9f 91       	pop	r25
     c3c:	8f 91       	pop	r24
     c3e:	7f 91       	pop	r23
     c40:	6f 91       	pop	r22
     c42:	5f 91       	pop	r21
     c44:	4f 91       	pop	r20
     c46:	3f 91       	pop	r19
     c48:	2f 91       	pop	r18
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <__vector_20>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_RECV)
{
     c54:	1f 92       	push	r1
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	0f 92       	push	r0
     c5c:	11 24       	eor	r1, r1
     c5e:	2f 93       	push	r18
     c60:	3f 93       	push	r19
     c62:	4f 93       	push	r20
     c64:	5f 93       	push	r21
     c66:	6f 93       	push	r22
     c68:	7f 93       	push	r23
     c6a:	8f 93       	push	r24
     c6c:	9f 93       	push	r25
     c6e:	af 93       	push	r26
     c70:	bf 93       	push	r27
     c72:	ef 93       	push	r30
     c74:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
     c76:	80 91 c6 00 	lds	r24, 0x00C6

	// if there's a user function to handle this receive event
	if(UartRxFunc)
     c7a:	20 91 86 01 	lds	r18, 0x0186
     c7e:	30 91 87 01 	lds	r19, 0x0187
     c82:	23 2b       	or	r18, r19
     c84:	31 f0       	breq	.+12     	; 0xc92 <__vector_20+0x3e>
	{
		// call it and pass the received data
		UartRxFunc(c);
     c86:	e0 91 86 01 	lds	r30, 0x0186
     c8a:	f0 91 87 01 	lds	r31, 0x0187
     c8e:	09 95       	icall
     c90:	0f c0       	rjmp	.+30     	; 0xcb0 <__vector_20+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
     c92:	68 2f       	mov	r22, r24
     c94:	8b e1       	ldi	r24, 0x1B	; 27
     c96:	92 e0       	ldi	r25, 0x02	; 2
     c98:	67 db       	rcall	.-2354   	; 0x368 <bufferAddToEnd>
     c9a:	81 11       	cpse	r24, r1
     c9c:	09 c0       	rjmp	.+18     	; 0xcb0 <__vector_20+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
     c9e:	80 91 2c 02 	lds	r24, 0x022C
     ca2:	90 91 2d 02 	lds	r25, 0x022D
     ca6:	01 96       	adiw	r24, 0x01	; 1
     ca8:	90 93 2d 02 	sts	0x022D, r25
     cac:	80 93 2c 02 	sts	0x022C, r24
		}
	}
}
     cb0:	ff 91       	pop	r31
     cb2:	ef 91       	pop	r30
     cb4:	bf 91       	pop	r27
     cb6:	af 91       	pop	r26
     cb8:	9f 91       	pop	r25
     cba:	8f 91       	pop	r24
     cbc:	7f 91       	pop	r23
     cbe:	6f 91       	pop	r22
     cc0:	5f 91       	pop	r21
     cc2:	4f 91       	pop	r20
     cc4:	3f 91       	pop	r19
     cc6:	2f 91       	pop	r18
     cc8:	0f 90       	pop	r0
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	0f 90       	pop	r0
     cce:	1f 90       	pop	r1
     cd0:	18 95       	reti

00000cd2 <ButtonInit>:
*********************************************************************************************************
*/

void ButtonInit(void)
{
	DDRD  &= ~((1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3));	/* Set PD6-PD3 as input */
     cd2:	8a b1       	in	r24, 0x0a	; 10
     cd4:	87 78       	andi	r24, 0x87	; 135
     cd6:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PD6) | (1<<PD5) | (1<<PD4) | (1<<PD3);			/* Set PD6-PD3 as internal pull up */
     cd8:	8b b1       	in	r24, 0x0b	; 11
     cda:	88 67       	ori	r24, 0x78	; 120
     cdc:	8b b9       	out	0x0b, r24	; 11
	
	/* 
	Set PC7-PC4 as input as internal pull up
	Set PC3-PC0 as Tri-state (Hi-Z) 
	*/
	DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
     cde:	17 b8       	out	0x07, r1	; 7
	PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
     ce0:	80 ef       	ldi	r24, 0xF0	; 240
     ce2:	88 b9       	out	0x08, r24	; 8
     ce4:	08 95       	ret

00000ce6 <ButtonCycleUpdate>:
*
*********************************************************************************************************
*/

void ButtonCycleUpdate(void)
{
     ce6:	cf 92       	push	r12
     ce8:	df 92       	push	r13
     cea:	ef 92       	push	r14
     cec:	ff 92       	push	r15
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
	ButtonDataType io_state = 0;
	ButtonDataType tempValue;
	ButtonDataType MatrixButtonValue;
	uint8_t Col;
	
	tempValue = (~PIND) & ((1<<PIND6) | (1<<PIND5) | (1<<PIND4) | (1<<PIND3));	/* Get PD6-PD3 IO state */
     cf6:	89 b1       	in	r24, 0x09	; 9
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	80 95       	com	r24
     cfc:	90 95       	com	r25
     cfe:	88 77       	andi	r24, 0x78	; 120
     d00:	99 27       	eor	r25, r25
     d02:	09 2e       	mov	r0, r25
     d04:	00 0c       	add	r0, r0
     d06:	aa 0b       	sbc	r26, r26
     d08:	bb 0b       	sbc	r27, r27
	tempValue >>= 3;	/* right rotate to low 4 bits location */
     d0a:	73 e0       	ldi	r23, 0x03	; 3
     d0c:	b6 95       	lsr	r27
     d0e:	a7 95       	ror	r26
     d10:	97 95       	ror	r25
     d12:	87 95       	ror	r24
     d14:	7a 95       	dec	r23
     d16:	d1 f7       	brne	.-12     	; 0xd0c <ButtonCycleUpdate+0x26>
     d18:	e0 e0       	ldi	r30, 0x00	; 0
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
	
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	ba 01       	movw	r22, r20
		/* 
		Set PC7-PC4 as input as internal pull up
		Set PC3-PC0 as Tri-state (Hi-Z)
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
     d22:	10 ef       	ldi	r17, 0xF0	; 240
	
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
     d24:	c8 e0       	ldi	r28, 0x08	; 8
     d26:	d0 e0       	ldi	r29, 0x00	; 0
	{
		/* 
		Set PC7-PC4 as input as internal pull up
		Set PC3-PC0 as Tri-state (Hi-Z)
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
     d28:	17 b8       	out	0x07, r1	; 7
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
     d2a:	18 b9       	out	0x08, r17	; 8
	
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
     d2c:	07 b1       	in	r16, 0x07	; 7
     d2e:	9e 01       	movw	r18, r28
     d30:	0e 2e       	mov	r0, r30
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <ButtonCycleUpdate+0x52>
     d34:	35 95       	asr	r19
     d36:	27 95       	ror	r18
     d38:	0a 94       	dec	r0
     d3a:	e2 f7       	brpl	.-8      	; 0xd34 <ButtonCycleUpdate+0x4e>
     d3c:	30 2f       	mov	r19, r16
     d3e:	32 2b       	or	r19, r18
     d40:	37 b9       	out	0x07, r19	; 7
		PORTC &= ~(0x08>>Col);		/* Set the column as low */
     d42:	38 b1       	in	r19, 0x08	; 8
     d44:	20 95       	com	r18
     d46:	23 23       	and	r18, r19
     d48:	28 b9       	out	0x08, r18	; 8
		
		/* read and save button state after the column which active as low */
		MatrixButtonValue <<= 4;	/* newer 4 button state store in lower four bits */
     d4a:	6a 01       	movw	r12, r20
     d4c:	7b 01       	movw	r14, r22
     d4e:	34 e0       	ldi	r19, 0x04	; 4
     d50:	cc 0c       	add	r12, r12
     d52:	dd 1c       	adc	r13, r13
     d54:	ee 1c       	adc	r14, r14
     d56:	ff 1c       	adc	r15, r15
     d58:	3a 95       	dec	r19
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <ButtonCycleUpdate+0x6a>
		MatrixButtonValue |= ((~PINC) & 0x00f0) >> 4;
     d5c:	26 b1       	in	r18, 0x06	; 6
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	20 95       	com	r18
     d62:	30 95       	com	r19
     d64:	20 7f       	andi	r18, 0xF0	; 240
     d66:	33 27       	eor	r19, r19
     d68:	a9 01       	movw	r20, r18
     d6a:	64 e0       	ldi	r22, 0x04	; 4
     d6c:	55 95       	asr	r21
     d6e:	47 95       	ror	r20
     d70:	6a 95       	dec	r22
     d72:	e1 f7       	brne	.-8      	; 0xd6c <ButtonCycleUpdate+0x86>
     d74:	05 2e       	mov	r0, r21
     d76:	00 0c       	add	r0, r0
     d78:	66 0b       	sbc	r22, r22
     d7a:	77 0b       	sbc	r23, r23
     d7c:	4c 29       	or	r20, r12
     d7e:	5d 29       	or	r21, r13
     d80:	6e 29       	or	r22, r14
     d82:	7f 29       	or	r23, r15
     d84:	31 96       	adiw	r30, 0x01	; 1
	uint8_t Col;
	
	tempValue = (~PIND) & ((1<<PIND6) | (1<<PIND5) | (1<<PIND4) | (1<<PIND3));	/* Get PD6-PD3 IO state */
	tempValue >>= 3;	/* right rotate to low 4 bits location */
	
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
     d86:	e4 30       	cpi	r30, 0x04	; 4
     d88:	f1 05       	cpc	r31, r1
     d8a:	71 f6       	brne	.-100    	; 0xd28 <ButtonCycleUpdate+0x42>
		/* read and save button state after the column which active as low */
		MatrixButtonValue <<= 4;	/* newer 4 button state store in lower four bits */
		MatrixButtonValue |= ((~PINC) & 0x00f0) >> 4;
	}
	
	io_state = (tempValue << 16) | MatrixButtonValue;
     d8c:	dc 01       	movw	r26, r24
     d8e:	99 27       	eor	r25, r25
     d90:	88 27       	eor	r24, r24
     d92:	00 91 2e 02 	lds	r16, 0x022E
     d96:	10 91 2f 02 	lds	r17, 0x022F
     d9a:	20 91 30 02 	lds	r18, 0x0230
     d9e:	30 91 31 02 	lds	r19, 0x0231
     da2:	80 2b       	or	r24, r16
     da4:	91 2b       	or	r25, r17
     da6:	a2 2b       	or	r26, r18
     da8:	b3 2b       	or	r27, r19
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
     daa:	48 2b       	or	r20, r24
     dac:	59 2b       	or	r21, r25
     dae:	6a 2b       	or	r22, r26
     db0:	7b 2b       	or	r23, r27
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
     db2:	10 92 2e 02 	sts	0x022E, r1
     db6:	10 92 2f 02 	sts	0x022F, r1
     dba:	10 92 30 02 	sts	0x0230, r1
     dbe:	10 92 31 02 	sts	0x0231, r1
	b = button.buttonsLastCycle.bVal;
     dc2:	80 91 32 02 	lds	r24, 0x0232
     dc6:	90 91 33 02 	lds	r25, 0x0233
     dca:	a0 91 34 02 	lds	r26, 0x0234
     dce:	b0 91 35 02 	lds	r27, 0x0235
	holdTime = button.buttonHoldTime;
     dd2:	20 91 46 02 	lds	r18, 0x0246
     dd6:	30 91 47 02 	lds	r19, 0x0247
	
	if (button.buttonsReleased.bVal != 0) {		
     dda:	c0 90 36 02 	lds	r12, 0x0236
     dde:	d0 90 37 02 	lds	r13, 0x0237
     de2:	e0 90 38 02 	lds	r14, 0x0238
     de6:	f0 90 39 02 	lds	r15, 0x0239
     dea:	c1 14       	cp	r12, r1
     dec:	d1 04       	cpc	r13, r1
     dee:	e1 04       	cpc	r14, r1
     df0:	f1 04       	cpc	r15, r1
     df2:	49 f0       	breq	.+18     	; 0xe06 <ButtonCycleUpdate+0x120>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
     df4:	c0 92 3e 02 	sts	0x023E, r12
     df8:	d0 92 3f 02 	sts	0x023F, r13
     dfc:	e0 92 40 02 	sts	0x0240, r14
     e00:	f0 92 41 02 	sts	0x0241, r15
     e04:	0b c0       	rjmp	.+22     	; 0xe1c <ButtonCycleUpdate+0x136>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
     e06:	2d 33       	cpi	r18, 0x3D	; 61
     e08:	31 05       	cpc	r19, r1
     e0a:	40 f0       	brcs	.+16     	; 0xe1c <ButtonCycleUpdate+0x136>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
     e0c:	10 92 3e 02 	sts	0x023E, r1
     e10:	10 92 3f 02 	sts	0x023F, r1
     e14:	10 92 40 02 	sts	0x0240, r1
     e18:	10 92 41 02 	sts	0x0241, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
     e1c:	10 92 36 02 	sts	0x0236, r1
     e20:	10 92 37 02 	sts	0x0237, r1
     e24:	10 92 38 02 	sts	0x0238, r1
     e28:	10 92 39 02 	sts	0x0239, r1
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
     e2c:	10 92 42 02 	sts	0x0242, r1
     e30:	10 92 43 02 	sts	0x0243, r1
     e34:	10 92 44 02 	sts	0x0244, r1
     e38:	10 92 45 02 	sts	0x0245, r1
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
     e3c:	48 17       	cp	r20, r24
     e3e:	59 07       	cpc	r21, r25
     e40:	6a 07       	cpc	r22, r26
     e42:	7b 07       	cpc	r23, r27
     e44:	d9 f4       	brne	.+54     	; 0xe7c <ButtonCycleUpdate+0x196>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
     e46:	2f 5f       	subi	r18, 0xFF	; 255
     e48:	3f 4f       	sbci	r19, 0xFF	; 255
     e4a:	24 32       	cpi	r18, 0x24	; 36
     e4c:	31 05       	cpc	r19, r1
     e4e:	48 f4       	brcc	.+18     	; 0xe62 <ButtonCycleUpdate+0x17c>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
     e50:	10 92 3a 02 	sts	0x023A, r1
     e54:	10 92 3b 02 	sts	0x023B, r1
     e58:	10 92 3c 02 	sts	0x023C, r1
     e5c:	10 92 3d 02 	sts	0x023D, r1
     e60:	08 c0       	rjmp	.+16     	; 0xe72 <ButtonCycleUpdate+0x18c>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
     e62:	40 93 3a 02 	sts	0x023A, r20
     e66:	50 93 3b 02 	sts	0x023B, r21
     e6a:	60 93 3c 02 	sts	0x023C, r22
     e6e:	70 93 3d 02 	sts	0x023D, r23
		}	
		button.buttonHoldTime = holdTime;
     e72:	30 93 47 02 	sts	0x0247, r19
     e76:	20 93 46 02 	sts	0x0246, r18
     e7a:	45 c0       	rjmp	.+138    	; 0xf06 <ButtonCycleUpdate+0x220>
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
     e7c:	40 93 32 02 	sts	0x0232, r20
     e80:	50 93 33 02 	sts	0x0233, r21
     e84:	60 93 34 02 	sts	0x0234, r22
     e88:	70 93 35 02 	sts	0x0235, r23
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
     e8c:	40 95       	com	r20
     e8e:	50 95       	com	r21
     e90:	60 95       	com	r22
     e92:	70 95       	com	r23
     e94:	48 23       	and	r20, r24
     e96:	59 23       	and	r21, r25
     e98:	6a 23       	and	r22, r26
     e9a:	7b 23       	and	r23, r27
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
     e9c:	80 91 3a 02 	lds	r24, 0x023A
     ea0:	90 91 3b 02 	lds	r25, 0x023B
     ea4:	a0 91 3c 02 	lds	r26, 0x023C
     ea8:	b0 91 3d 02 	lds	r27, 0x023D
     eac:	84 23       	and	r24, r20
     eae:	95 23       	and	r25, r21
     eb0:	a6 23       	and	r26, r22
     eb2:	b7 23       	and	r27, r23
     eb4:	89 2b       	or	r24, r25
     eb6:	8a 2b       	or	r24, r26
     eb8:	8b 2b       	or	r24, r27
     eba:	29 f5       	brne	.+74     	; 0xf06 <ButtonCycleUpdate+0x220>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
     ebc:	10 92 47 02 	sts	0x0247, r1
     ec0:	10 92 46 02 	sts	0x0246, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
     ec4:	23 50       	subi	r18, 0x03	; 3
     ec6:	31 09       	sbc	r19, r1
     ec8:	20 32       	cpi	r18, 0x20	; 32
     eca:	31 05       	cpc	r19, r1
     ecc:	e0 f4       	brcc	.+56     	; 0xf06 <ButtonCycleUpdate+0x220>
				button.buttonsReleased.bVal = buttons;	
     ece:	40 93 36 02 	sts	0x0236, r20
     ed2:	50 93 37 02 	sts	0x0237, r21
     ed6:	60 93 38 02 	sts	0x0238, r22
     eda:	70 93 39 02 	sts	0x0239, r23
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
     ede:	80 91 3e 02 	lds	r24, 0x023E
     ee2:	90 91 3f 02 	lds	r25, 0x023F
     ee6:	a0 91 40 02 	lds	r26, 0x0240
     eea:	b0 91 41 02 	lds	r27, 0x0241
     eee:	48 23       	and	r20, r24
     ef0:	59 23       	and	r21, r25
     ef2:	6a 23       	and	r22, r26
     ef4:	7b 23       	and	r23, r27
     ef6:	40 93 42 02 	sts	0x0242, r20
     efa:	50 93 43 02 	sts	0x0243, r21
     efe:	60 93 44 02 	sts	0x0244, r22
     f02:	70 93 45 02 	sts	0x0245, r23
													button.buttonsReleasedHistory.bVal;
			}       
		}
	}
}
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	1f 91       	pop	r17
     f0c:	0f 91       	pop	r16
     f0e:	ff 90       	pop	r15
     f10:	ef 90       	pop	r14
     f12:	df 90       	pop	r13
     f14:	cf 90       	pop	r12
     f16:	08 95       	ret

00000f18 <McuInit>:

void McuInit(void)
{
	// initialize our libraries
	// initialize the UART (serial port)
	uartInit();		/* sei() call in the function */
     f18:	1f de       	rcall	.-962    	; 0xb58 <uartInit>
	// set the baud rate of the UART for our debug/reporting output
	uartSetBaudRate(9600);
     f1a:	60 e8       	ldi	r22, 0x80	; 128
     f1c:	75 e2       	ldi	r23, 0x25	; 37
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	32 de       	rcall	.-924    	; 0xb88 <uartSetBaudRate>
	// initialize rprintf system
	rprintfInit(uartSendByte);
     f24:	8a ee       	ldi	r24, 0xEA	; 234
     f26:	95 e0       	ldi	r25, 0x05	; 5
     f28:	b2 cb       	rjmp	.-2204   	; 0x68e <rprintfInit>

00000f2a <ApplInit>:
*********************************************************************************************************
*/

void ApplInit(void)
{
	ButtonInit();
     f2a:	d3 de       	rcall	.-602    	; 0xcd2 <ButtonInit>
	
	glcdInit();	/* Need connect to LCD device because MCU will check lcd busy or not will cause waiting */
     f2c:	a7 db       	rcall	.-2226   	; 0x67c <glcdInit>
	
	glcdPutStr(&greeting[0]);
     f2e:	88 e4       	ldi	r24, 0x48	; 72
     f30:	92 e0       	ldi	r25, 0x02	; 2
     f32:	5b da       	rcall	.-2890   	; 0x3ea <glcdPutStr>
	// Just print message for debug.
	rprintf("RF remote start!\n" );	
     f34:	8b eb       	ldi	r24, 0xBB	; 187
     f36:	92 e0       	ldi	r25, 0x02	; 2
     f38:	9f 93       	push	r25
     f3a:	8f 93       	push	r24
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	8f 93       	push	r24
     f40:	c3 db       	rcall	.-2170   	; 0x6c8 <rprintf1RamRom>
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	08 95       	ret

00000f4a <AppCycleUpdate>:
*
* Returns    : none
*********************************************************************************************************
*/
void AppCycleUpdate(void)
{	
     f4a:	1f 93       	push	r17
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	64 97       	sbiw	r28, 0x14	; 20
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
	static cnt;
	//if(button.buttonsReleased.bVal) rprintf("rl=%x\n", button.buttonsReleased.bVal);
	if(button.buttonsReleased.bVal) 
     f60:	80 91 36 02 	lds	r24, 0x0236
     f64:	90 91 37 02 	lds	r25, 0x0237
     f68:	a0 91 38 02 	lds	r26, 0x0238
     f6c:	b0 91 39 02 	lds	r27, 0x0239
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	a1 05       	cpc	r26, r1
     f74:	b1 05       	cpc	r27, r1
     f76:	09 f4       	brne	.+2      	; 0xf7a <AppCycleUpdate+0x30>
     f78:	af c0       	rjmp	.+350    	; 0x10d8 <AppCycleUpdate+0x18e>
	{
		rprintf("rl=%x\n", button.buttonsReleased.bVal);
     f7a:	bf 93       	push	r27
     f7c:	af 93       	push	r26
     f7e:	9f 93       	push	r25
     f80:	8f 93       	push	r24
     f82:	84 eb       	ldi	r24, 0xB4	; 180
     f84:	92 e0       	ldi	r25, 0x02	; 2
     f86:	9f 93       	push	r25
     f88:	8f 93       	push	r24
     f8a:	11 e0       	ldi	r17, 0x01	; 1
     f8c:	1f 93       	push	r17
     f8e:	9c db       	rcall	.-2248   	; 0x6c8 <rprintf1RamRom>
		rprintf("rh=%x\n", button.buttonsReleased.bVal>>16);
     f90:	80 91 36 02 	lds	r24, 0x0236
     f94:	90 91 37 02 	lds	r25, 0x0237
     f98:	a0 91 38 02 	lds	r26, 0x0238
     f9c:	b0 91 39 02 	lds	r27, 0x0239
     fa0:	cd 01       	movw	r24, r26
     fa2:	aa 27       	eor	r26, r26
     fa4:	bb 27       	eor	r27, r27
     fa6:	bf 93       	push	r27
     fa8:	af 93       	push	r26
     faa:	9f 93       	push	r25
     fac:	8f 93       	push	r24
     fae:	8d ea       	ldi	r24, 0xAD	; 173
     fb0:	92 e0       	ldi	r25, 0x02	; 2
     fb2:	9f 93       	push	r25
     fb4:	8f 93       	push	r24
     fb6:	1f 93       	push	r17
     fb8:	87 db       	rcall	.-2290   	; 0x6c8 <rprintf1RamRom>
		
		if(button.buttonsReleased.PBtn13)
     fba:	80 91 37 02 	lds	r24, 0x0237
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	84 ff       	sbrs	r24, 4
     fca:	12 c0       	rjmp	.+36     	; 0xff0 <AppCycleUpdate+0xa6>
		{
			glcdSetAddress(0,0);
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	e5 da       	rcall	.-2614   	; 0x59c <glcdSetAddress>
			char greeting[] = "PBtn13,Hello World!";
     fd2:	84 e1       	ldi	r24, 0x14	; 20
     fd4:	e0 e0       	ldi	r30, 0x00	; 0
     fd6:	f1 e0       	ldi	r31, 0x01	; 1
     fd8:	de 01       	movw	r26, r28
     fda:	11 96       	adiw	r26, 0x01	; 1
     fdc:	01 90       	ld	r0, Z+
     fde:	0d 92       	st	X+, r0
     fe0:	8a 95       	dec	r24
     fe2:	e1 f7       	brne	.-8      	; 0xfdc <AppCycleUpdate+0x92>
			glcdPutStr(&greeting[0]);
     fe4:	ce 01       	movw	r24, r28
     fe6:	01 96       	adiw	r24, 0x01	; 1
     fe8:	00 da       	rcall	.-3072   	; 0x3ea <glcdPutStr>
			rprintf("PBtn13\n");
     fea:	85 ea       	ldi	r24, 0xA5	; 165
     fec:	92 e0       	ldi	r25, 0x02	; 2
     fee:	6d c0       	rjmp	.+218    	; 0x10ca <AppCycleUpdate+0x180>
		}
		else if(button.buttonsReleased.PBtn14)
     ff0:	80 ff       	sbrs	r24, 0
     ff2:	12 c0       	rjmp	.+36     	; 0x1018 <AppCycleUpdate+0xce>
		{
			glcdSetAddress(0,1);
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	d1 da       	rcall	.-2654   	; 0x59c <glcdSetAddress>
			char greeting[] = "PBtn14,Hello World!";
     ffa:	84 e1       	ldi	r24, 0x14	; 20
     ffc:	e4 e1       	ldi	r30, 0x14	; 20
     ffe:	f1 e0       	ldi	r31, 0x01	; 1
    1000:	de 01       	movw	r26, r28
    1002:	11 96       	adiw	r26, 0x01	; 1
    1004:	01 90       	ld	r0, Z+
    1006:	0d 92       	st	X+, r0
    1008:	8a 95       	dec	r24
    100a:	e1 f7       	brne	.-8      	; 0x1004 <AppCycleUpdate+0xba>
			glcdPutStr(&greeting[0]);
    100c:	ce 01       	movw	r24, r28
    100e:	01 96       	adiw	r24, 0x01	; 1
    1010:	ec d9       	rcall	.-3112   	; 0x3ea <glcdPutStr>
			rprintf("PBtn14\n");
    1012:	8d e9       	ldi	r24, 0x9D	; 157
    1014:	92 e0       	ldi	r25, 0x02	; 2
    1016:	59 c0       	rjmp	.+178    	; 0x10ca <AppCycleUpdate+0x180>
		}
		else if(button.buttonsReleased.PBtn15)
    1018:	90 91 36 02 	lds	r25, 0x0236
    101c:	94 ff       	sbrs	r25, 4
    101e:	12 c0       	rjmp	.+36     	; 0x1044 <AppCycleUpdate+0xfa>
		{
			glcdSetAddress(0,2);
    1020:	62 e0       	ldi	r22, 0x02	; 2
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	bb da       	rcall	.-2698   	; 0x59c <glcdSetAddress>
			char greeting[] = "PBtn15,Hello World!";
    1026:	84 e1       	ldi	r24, 0x14	; 20
    1028:	e8 e2       	ldi	r30, 0x28	; 40
    102a:	f1 e0       	ldi	r31, 0x01	; 1
    102c:	de 01       	movw	r26, r28
    102e:	11 96       	adiw	r26, 0x01	; 1
    1030:	01 90       	ld	r0, Z+
    1032:	0d 92       	st	X+, r0
    1034:	8a 95       	dec	r24
    1036:	e1 f7       	brne	.-8      	; 0x1030 <AppCycleUpdate+0xe6>
			glcdPutStr(&greeting[0]);
    1038:	ce 01       	movw	r24, r28
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	d6 d9       	rcall	.-3156   	; 0x3ea <glcdPutStr>
			rprintf("PBtn15\n");
    103e:	85 e9       	ldi	r24, 0x95	; 149
    1040:	92 e0       	ldi	r25, 0x02	; 2
    1042:	43 c0       	rjmp	.+134    	; 0x10ca <AppCycleUpdate+0x180>
		}
		else if(button.buttonsReleased.PBtn1)
    1044:	87 ff       	sbrs	r24, 7
    1046:	12 c0       	rjmp	.+36     	; 0x106c <AppCycleUpdate+0x122>
		{
			glcdSetAddress(0,3);
    1048:	63 e0       	ldi	r22, 0x03	; 3
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	a7 da       	rcall	.-2738   	; 0x59c <glcdSetAddress>
			char greeting[] = "PBtn1,Hello World!";
    104e:	83 e1       	ldi	r24, 0x13	; 19
    1050:	ec e3       	ldi	r30, 0x3C	; 60
    1052:	f1 e0       	ldi	r31, 0x01	; 1
    1054:	de 01       	movw	r26, r28
    1056:	11 96       	adiw	r26, 0x01	; 1
    1058:	01 90       	ld	r0, Z+
    105a:	0d 92       	st	X+, r0
    105c:	8a 95       	dec	r24
    105e:	e1 f7       	brne	.-8      	; 0x1058 <AppCycleUpdate+0x10e>
			glcdPutStr(&greeting[0]);
    1060:	ce 01       	movw	r24, r28
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	c2 d9       	rcall	.-3196   	; 0x3ea <glcdPutStr>
			rprintf("PBtn1\n");
    1066:	8e e8       	ldi	r24, 0x8E	; 142
    1068:	92 e0       	ldi	r25, 0x02	; 2
    106a:	2f c0       	rjmp	.+94     	; 0x10ca <AppCycleUpdate+0x180>
		}
		else if(button.buttonsReleased.PBtn5)
    106c:	86 ff       	sbrs	r24, 6
    106e:	12 c0       	rjmp	.+36     	; 0x1094 <AppCycleUpdate+0x14a>
		{
			glcdSetAddress(0,4);
    1070:	64 e0       	ldi	r22, 0x04	; 4
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	93 da       	rcall	.-2778   	; 0x59c <glcdSetAddress>
			char greeting[] = "PBtn5,Hello World!";
    1076:	83 e1       	ldi	r24, 0x13	; 19
    1078:	ef e4       	ldi	r30, 0x4F	; 79
    107a:	f1 e0       	ldi	r31, 0x01	; 1
    107c:	de 01       	movw	r26, r28
    107e:	11 96       	adiw	r26, 0x01	; 1
    1080:	01 90       	ld	r0, Z+
    1082:	0d 92       	st	X+, r0
    1084:	8a 95       	dec	r24
    1086:	e1 f7       	brne	.-8      	; 0x1080 <AppCycleUpdate+0x136>
			glcdPutStr(&greeting[0]);
    1088:	ce 01       	movw	r24, r28
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	ae d9       	rcall	.-3236   	; 0x3ea <glcdPutStr>
			rprintf("PBtn5\n");
    108e:	87 e8       	ldi	r24, 0x87	; 135
    1090:	92 e0       	ldi	r25, 0x02	; 2
    1092:	1b c0       	rjmp	.+54     	; 0x10ca <AppCycleUpdate+0x180>
		}
		else if(button.buttonsReleased.PBtn9)
    1094:	85 ff       	sbrs	r24, 5
    1096:	12 c0       	rjmp	.+36     	; 0x10bc <AppCycleUpdate+0x172>
		{
			glcdSetAddress(0,5);
    1098:	65 e0       	ldi	r22, 0x05	; 5
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	7f da       	rcall	.-2818   	; 0x59c <glcdSetAddress>
			char greeting[] = "PBtn9,Hello World!";
    109e:	83 e1       	ldi	r24, 0x13	; 19
    10a0:	e2 e6       	ldi	r30, 0x62	; 98
    10a2:	f1 e0       	ldi	r31, 0x01	; 1
    10a4:	de 01       	movw	r26, r28
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	01 90       	ld	r0, Z+
    10aa:	0d 92       	st	X+, r0
    10ac:	8a 95       	dec	r24
    10ae:	e1 f7       	brne	.-8      	; 0x10a8 <AppCycleUpdate+0x15e>
			glcdPutStr(&greeting[0]);
    10b0:	ce 01       	movw	r24, r28
    10b2:	01 96       	adiw	r24, 0x01	; 1
    10b4:	9a d9       	rcall	.-3276   	; 0x3ea <glcdPutStr>
			rprintf("PBtn9\n");
    10b6:	80 e8       	ldi	r24, 0x80	; 128
    10b8:	92 e0       	ldi	r25, 0x02	; 2
    10ba:	07 c0       	rjmp	.+14     	; 0x10ca <AppCycleUpdate+0x180>
		}
		else if(button.buttonsReleased.PBtn18)
    10bc:	80 91 38 02 	lds	r24, 0x0238
    10c0:	82 ff       	sbrs	r24, 2
    10c2:	0a c0       	rjmp	.+20     	; 0x10d8 <AppCycleUpdate+0x18e>
		{
			//glcdSetAddress(0,1);
			glcdClearScreen();
    10c4:	c9 da       	rcall	.-2670   	; 0x658 <glcdClearScreen>
			rprintf("PBtn18,Clear Home\n");
    10c6:	8d e6       	ldi	r24, 0x6D	; 109
    10c8:	92 e0       	ldi	r25, 0x02	; 2
    10ca:	9f 93       	push	r25
    10cc:	8f 93       	push	r24
    10ce:	1f 93       	push	r17
    10d0:	fb da       	rcall	.-2570   	; 0x6c8 <rprintf1RamRom>
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
		}
	}	
	//rprintfChar('a');
	//glcdWriteChar(cnt++/2);
}
    10d8:	64 96       	adiw	r28, 0x14	; 20
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	08 95       	ret

000010ec <main>:
int main(void)
{	
	/*
	Calll all initial function
	*/
	McuInit();
    10ec:	15 df       	rcall	.-470    	; 0xf18 <McuInit>
	ApplInit();
    10ee:	1d df       	rcall	.-454    	; 0xf2a <ApplInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10f0:	8f e3       	ldi	r24, 0x3F	; 63
    10f2:	9c e9       	ldi	r25, 0x9C	; 156
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	f1 f7       	brne	.-4      	; 0x10f4 <main+0x8>
    10f8:	00 c0       	rjmp	.+0      	; 0x10fa <main+0xe>
    10fa:	00 00       	nop
	
	while(1)
	{
		_delay_ms(20);
		ButtonCycleUpdate();
    10fc:	f4 dd       	rcall	.-1048   	; 0xce6 <ButtonCycleUpdate>
		AppCycleUpdate();
    10fe:	25 df       	rcall	.-438    	; 0xf4a <AppCycleUpdate>
	}
    1100:	f7 cf       	rjmp	.-18     	; 0x10f0 <main+0x4>

00001102 <__udivmodhi4>:
    1102:	aa 1b       	sub	r26, r26
    1104:	bb 1b       	sub	r27, r27
    1106:	51 e1       	ldi	r21, 0x11	; 17
    1108:	07 c0       	rjmp	.+14     	; 0x1118 <__udivmodhi4_ep>

0000110a <__udivmodhi4_loop>:
    110a:	aa 1f       	adc	r26, r26
    110c:	bb 1f       	adc	r27, r27
    110e:	a6 17       	cp	r26, r22
    1110:	b7 07       	cpc	r27, r23
    1112:	10 f0       	brcs	.+4      	; 0x1118 <__udivmodhi4_ep>
    1114:	a6 1b       	sub	r26, r22
    1116:	b7 0b       	sbc	r27, r23

00001118 <__udivmodhi4_ep>:
    1118:	88 1f       	adc	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	5a 95       	dec	r21
    111e:	a9 f7       	brne	.-22     	; 0x110a <__udivmodhi4_loop>
    1120:	80 95       	com	r24
    1122:	90 95       	com	r25
    1124:	bc 01       	movw	r22, r24
    1126:	cd 01       	movw	r24, r26
    1128:	08 95       	ret

0000112a <__udivmodsi4>:
    112a:	a1 e2       	ldi	r26, 0x21	; 33
    112c:	1a 2e       	mov	r1, r26
    112e:	aa 1b       	sub	r26, r26
    1130:	bb 1b       	sub	r27, r27
    1132:	fd 01       	movw	r30, r26
    1134:	0d c0       	rjmp	.+26     	; 0x1150 <__udivmodsi4_ep>

00001136 <__udivmodsi4_loop>:
    1136:	aa 1f       	adc	r26, r26
    1138:	bb 1f       	adc	r27, r27
    113a:	ee 1f       	adc	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	a2 17       	cp	r26, r18
    1140:	b3 07       	cpc	r27, r19
    1142:	e4 07       	cpc	r30, r20
    1144:	f5 07       	cpc	r31, r21
    1146:	20 f0       	brcs	.+8      	; 0x1150 <__udivmodsi4_ep>
    1148:	a2 1b       	sub	r26, r18
    114a:	b3 0b       	sbc	r27, r19
    114c:	e4 0b       	sbc	r30, r20
    114e:	f5 0b       	sbc	r31, r21

00001150 <__udivmodsi4_ep>:
    1150:	66 1f       	adc	r22, r22
    1152:	77 1f       	adc	r23, r23
    1154:	88 1f       	adc	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	1a 94       	dec	r1
    115a:	69 f7       	brne	.-38     	; 0x1136 <__udivmodsi4_loop>
    115c:	60 95       	com	r22
    115e:	70 95       	com	r23
    1160:	80 95       	com	r24
    1162:	90 95       	com	r25
    1164:	9b 01       	movw	r18, r22
    1166:	ac 01       	movw	r20, r24
    1168:	bd 01       	movw	r22, r26
    116a:	cf 01       	movw	r24, r30
    116c:	08 95       	ret

0000116e <_exit>:
    116e:	f8 94       	cli

00001170 <__stop_program>:
    1170:	ff cf       	rjmp	.-2      	; 0x1170 <__stop_program>
