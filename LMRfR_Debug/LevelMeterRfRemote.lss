
LevelMeterRfRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fd0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d2  00800100  00800100  00001044  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001074  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000438  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031ad  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000108e  00000000  00000000  00004699  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e9b  00000000  00000000  00005727  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d28  00000000  00000000  000075c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dd1  00000000  00000000  000082ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b49  00000000  00000000  000090bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c0  00000000  00000000  0000bc06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	57 c1       	rjmp	.+686    	; 0x2b0 <__ctors_end>
   2:	00 00       	nop
   4:	70 c1       	rjmp	.+736    	; 0x2e6 <__bad_interrupt>
   6:	00 00       	nop
   8:	6e c1       	rjmp	.+732    	; 0x2e6 <__bad_interrupt>
   a:	00 00       	nop
   c:	6c c1       	rjmp	.+728    	; 0x2e6 <__bad_interrupt>
   e:	00 00       	nop
  10:	6a c1       	rjmp	.+724    	; 0x2e6 <__bad_interrupt>
  12:	00 00       	nop
  14:	68 c1       	rjmp	.+720    	; 0x2e6 <__bad_interrupt>
  16:	00 00       	nop
  18:	66 c1       	rjmp	.+716    	; 0x2e6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	64 c1       	rjmp	.+712    	; 0x2e6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	62 c1       	rjmp	.+708    	; 0x2e6 <__bad_interrupt>
  22:	00 00       	nop
  24:	17 c5       	rjmp	.+2606   	; 0xa54 <__vector_9>
  26:	00 00       	nop
  28:	42 c5       	rjmp	.+2692   	; 0xaae <__vector_10>
  2a:	00 00       	nop
  2c:	4c c4       	rjmp	.+2200   	; 0x8c6 <__vector_11>
  2e:	00 00       	nop
  30:	e4 c4       	rjmp	.+2504   	; 0x9fa <__vector_12>
  32:	00 00       	nop
  34:	88 c4       	rjmp	.+2320   	; 0x946 <__vector_13>
  36:	00 00       	nop
  38:	b3 c4       	rjmp	.+2406   	; 0x9a0 <__vector_14>
  3a:	00 00       	nop
  3c:	17 c4       	rjmp	.+2094   	; 0x86c <__vector_15>
  3e:	00 00       	nop
  40:	52 c1       	rjmp	.+676    	; 0x2e6 <__bad_interrupt>
  42:	00 00       	nop
  44:	50 c1       	rjmp	.+672    	; 0x2e6 <__bad_interrupt>
  46:	00 00       	nop
  48:	be c3       	rjmp	.+1916   	; 0x7c6 <__vector_18>
  4a:	00 00       	nop
  4c:	4c c1       	rjmp	.+664    	; 0x2e6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e7 c5       	rjmp	.+3022   	; 0xc20 <__vector_20>
  52:	00 00       	nop
  54:	48 c1       	rjmp	.+656    	; 0x2e6 <__bad_interrupt>
  56:	00 00       	nop
  58:	ac c5       	rjmp	.+2904   	; 0xbb2 <__vector_22>
  5a:	00 00       	nop
  5c:	44 c1       	rjmp	.+648    	; 0x2e6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	42 c1       	rjmp	.+644    	; 0x2e6 <__bad_interrupt>
  62:	00 00       	nop
  64:	40 c1       	rjmp	.+640    	; 0x2e6 <__bad_interrupt>
  66:	00 00       	nop
  68:	3e c1       	rjmp	.+636    	; 0x2e6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3c c1       	rjmp	.+632    	; 0x2e6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3a c1       	rjmp	.+628    	; 0x2e6 <__bad_interrupt>
  72:	00 00       	nop
  74:	38 c1       	rjmp	.+624    	; 0x2e6 <__bad_interrupt>
  76:	00 00       	nop
  78:	36 c1       	rjmp	.+620    	; 0x2e6 <__bad_interrupt>
	...

0000007c <__trampolines_end>:
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 5f       	subi	r16, 0xF0	; 240
  84:	00 00       	nop
  86:	00 07       	cpc	r16, r16
  88:	00 07       	cpc	r16, r16
  8a:	00 14       	cp	r0, r0
  8c:	7f 14       	cp	r7, r15
  8e:	7f 14       	cp	r7, r15
  90:	24 2a       	or	r2, r20
  92:	7f 2a       	or	r7, r31
  94:	12 23       	and	r17, r18
  96:	13 08       	sbc	r1, r3
  98:	64 62       	ori	r22, 0x24	; 36
  9a:	36 49       	sbci	r19, 0x96	; 150
  9c:	55 22       	and	r5, r21
  9e:	50 00       	.word	0x0050	; ????
  a0:	05 03       	mulsu	r16, r21
  a2:	00 00       	nop
  a4:	00 1c       	adc	r0, r0
  a6:	22 41       	sbci	r18, 0x12	; 18
  a8:	00 00       	nop
  aa:	41 22       	and	r4, r17
  ac:	1c 00       	.word	0x001c	; ????
  ae:	08 2a       	or	r0, r24
  b0:	1c 2a       	or	r1, r28
  b2:	08 08       	sbc	r0, r8
  b4:	08 3e       	cpi	r16, 0xE8	; 232
  b6:	08 08       	sbc	r0, r8
  b8:	00 50       	subi	r16, 0x00	; 0
  ba:	30 00       	.word	0x0030	; ????
  bc:	00 08       	sbc	r0, r0
  be:	08 08       	sbc	r0, r8
  c0:	08 08       	sbc	r0, r8
  c2:	00 60       	ori	r16, 0x00	; 0
  c4:	60 00       	.word	0x0060	; ????
  c6:	00 20       	and	r0, r0
  c8:	10 08       	sbc	r1, r0
  ca:	04 02       	muls	r16, r20
  cc:	3e 51       	subi	r19, 0x1E	; 30
  ce:	49 45       	sbci	r20, 0x59	; 89
  d0:	3e 00       	.word	0x003e	; ????
  d2:	42 7f       	andi	r20, 0xF2	; 242
  d4:	40 00       	.word	0x0040	; ????
  d6:	42 61       	ori	r20, 0x12	; 18
  d8:	51 49       	sbci	r21, 0x91	; 145
  da:	46 21       	and	r20, r6
  dc:	41 45       	sbci	r20, 0x51	; 81
  de:	4b 31       	cpi	r20, 0x1B	; 27
  e0:	18 14       	cp	r1, r8
  e2:	12 7f       	andi	r17, 0xF2	; 242
  e4:	10 27       	eor	r17, r16
  e6:	45 45       	sbci	r20, 0x55	; 85
  e8:	45 39       	cpi	r20, 0x95	; 149
  ea:	3c 4a       	sbci	r19, 0xAC	; 172
  ec:	49 49       	sbci	r20, 0x99	; 153
  ee:	30 01       	movw	r6, r0
  f0:	71 09       	sbc	r23, r1
  f2:	05 03       	mulsu	r16, r21
  f4:	36 49       	sbci	r19, 0x96	; 150
  f6:	49 49       	sbci	r20, 0x99	; 153
  f8:	36 06       	cpc	r3, r22
  fa:	49 49       	sbci	r20, 0x99	; 153
  fc:	29 1e       	adc	r2, r25
  fe:	00 36       	cpi	r16, 0x60	; 96
 100:	36 00       	.word	0x0036	; ????
 102:	00 00       	nop
 104:	56 36       	cpi	r21, 0x66	; 102
 106:	00 00       	nop
 108:	00 08       	sbc	r0, r0
 10a:	14 22       	and	r1, r20
 10c:	41 14       	cp	r4, r1
 10e:	14 14       	cp	r1, r4
 110:	14 14       	cp	r1, r4
 112:	41 22       	and	r4, r17
 114:	14 08       	sbc	r1, r4
 116:	00 02       	muls	r16, r16
 118:	01 51       	subi	r16, 0x11	; 17
 11a:	09 06       	cpc	r0, r25
 11c:	32 49       	sbci	r19, 0x92	; 146
 11e:	79 41       	sbci	r23, 0x19	; 25
 120:	3e 7e       	andi	r19, 0xEE	; 238
 122:	11 11       	cpse	r17, r1
 124:	11 7e       	andi	r17, 0xE1	; 225
 126:	7f 49       	sbci	r23, 0x9F	; 159
 128:	49 49       	sbci	r20, 0x99	; 153
 12a:	36 3e       	cpi	r19, 0xE6	; 230
 12c:	41 41       	sbci	r20, 0x11	; 17
 12e:	41 22       	and	r4, r17
 130:	7f 41       	sbci	r23, 0x1F	; 31
 132:	41 22       	and	r4, r17
 134:	1c 7f       	andi	r17, 0xFC	; 252
 136:	49 49       	sbci	r20, 0x99	; 153
 138:	49 41       	sbci	r20, 0x19	; 25
 13a:	7f 09       	sbc	r23, r15
 13c:	09 01       	movw	r0, r18
 13e:	01 3e       	cpi	r16, 0xE1	; 225
 140:	41 41       	sbci	r20, 0x11	; 17
 142:	51 32       	cpi	r21, 0x21	; 33
 144:	7f 08       	sbc	r7, r15
 146:	08 08       	sbc	r0, r8
 148:	7f 00       	.word	0x007f	; ????
 14a:	41 7f       	andi	r20, 0xF1	; 241
 14c:	41 00       	.word	0x0041	; ????
 14e:	20 40       	sbci	r18, 0x00	; 0
 150:	41 3f       	cpi	r20, 0xF1	; 241
 152:	01 7f       	andi	r16, 0xF1	; 241
 154:	08 14       	cp	r0, r8
 156:	22 41       	sbci	r18, 0x12	; 18
 158:	7f 40       	sbci	r23, 0x0F	; 15
 15a:	40 40       	sbci	r20, 0x00	; 0
 15c:	40 7f       	andi	r20, 0xF0	; 240
 15e:	02 04       	cpc	r0, r2
 160:	02 7f       	andi	r16, 0xF2	; 242
 162:	7f 04       	cpc	r7, r15
 164:	08 10       	cpse	r0, r8
 166:	7f 3e       	cpi	r23, 0xEF	; 239
 168:	41 41       	sbci	r20, 0x11	; 17
 16a:	41 3e       	cpi	r20, 0xE1	; 225
 16c:	7f 09       	sbc	r23, r15
 16e:	09 09       	sbc	r16, r9
 170:	06 3e       	cpi	r16, 0xE6	; 230
 172:	41 51       	subi	r20, 0x11	; 17
 174:	21 5e       	subi	r18, 0xE1	; 225
 176:	7f 09       	sbc	r23, r15
 178:	19 29       	or	r17, r9
 17a:	46 46       	sbci	r20, 0x66	; 102
 17c:	49 49       	sbci	r20, 0x99	; 153
 17e:	49 31       	cpi	r20, 0x19	; 25
 180:	01 01       	movw	r0, r2
 182:	7f 01       	movw	r14, r30
 184:	01 3f       	cpi	r16, 0xF1	; 241
 186:	40 40       	sbci	r20, 0x00	; 0
 188:	40 3f       	cpi	r20, 0xF0	; 240
 18a:	1f 20       	and	r1, r15
 18c:	40 20       	and	r4, r0
 18e:	1f 7f       	andi	r17, 0xFF	; 255
 190:	20 18       	sub	r2, r0
 192:	20 7f       	andi	r18, 0xF0	; 240
 194:	63 14       	cp	r6, r3
 196:	08 14       	cp	r0, r8
 198:	63 03       	mulsu	r22, r19
 19a:	04 78       	andi	r16, 0x84	; 132
 19c:	04 03       	mulsu	r16, r20
 19e:	61 51       	subi	r22, 0x11	; 17
 1a0:	49 45       	sbci	r20, 0x59	; 89
 1a2:	43 00       	.word	0x0043	; ????
 1a4:	00 7f       	andi	r16, 0xF0	; 240
 1a6:	41 41       	sbci	r20, 0x11	; 17
 1a8:	02 04       	cpc	r0, r2
 1aa:	08 10       	cpse	r0, r8
 1ac:	20 41       	sbci	r18, 0x10	; 16
 1ae:	41 7f       	andi	r20, 0xF1	; 241
 1b0:	00 00       	nop
 1b2:	04 02       	muls	r16, r20
 1b4:	01 02       	muls	r16, r17
 1b6:	04 40       	sbci	r16, 0x04	; 4
 1b8:	40 40       	sbci	r20, 0x00	; 0
 1ba:	40 40       	sbci	r20, 0x00	; 0
 1bc:	00 01       	movw	r0, r0
 1be:	02 04       	cpc	r0, r2
 1c0:	00 20       	and	r0, r0
 1c2:	54 54       	subi	r21, 0x44	; 68
 1c4:	54 78       	andi	r21, 0x84	; 132
 1c6:	7f 48       	sbci	r23, 0x8F	; 143
 1c8:	44 44       	sbci	r20, 0x44	; 68
 1ca:	38 38       	cpi	r19, 0x88	; 136
 1cc:	44 44       	sbci	r20, 0x44	; 68
 1ce:	44 20       	and	r4, r4
 1d0:	38 44       	sbci	r19, 0x48	; 72
 1d2:	44 48       	sbci	r20, 0x84	; 132
 1d4:	7f 38       	cpi	r23, 0x8F	; 143
 1d6:	54 54       	subi	r21, 0x44	; 68
 1d8:	54 18       	sub	r5, r4
 1da:	08 7e       	andi	r16, 0xE8	; 232
 1dc:	09 01       	movw	r0, r18
 1de:	02 08       	sbc	r0, r2
 1e0:	14 54       	subi	r17, 0x44	; 68
 1e2:	54 3c       	cpi	r21, 0xC4	; 196
 1e4:	7f 08       	sbc	r7, r15
 1e6:	04 04       	cpc	r0, r4
 1e8:	78 00       	.word	0x0078	; ????
 1ea:	44 7d       	andi	r20, 0xD4	; 212
 1ec:	40 00       	.word	0x0040	; ????
 1ee:	20 40       	sbci	r18, 0x00	; 0
 1f0:	44 3d       	cpi	r20, 0xD4	; 212
 1f2:	00 00       	nop
 1f4:	7f 10       	cpse	r7, r15
 1f6:	28 44       	sbci	r18, 0x48	; 72
 1f8:	00 41       	sbci	r16, 0x10	; 16
 1fa:	7f 40       	sbci	r23, 0x0F	; 15
 1fc:	00 7c       	andi	r16, 0xC0	; 192
 1fe:	04 18       	sub	r0, r4
 200:	04 78       	andi	r16, 0x84	; 132
 202:	7c 08       	sbc	r7, r12
 204:	04 04       	cpc	r0, r4
 206:	78 38       	cpi	r23, 0x88	; 136
 208:	44 44       	sbci	r20, 0x44	; 68
 20a:	44 38       	cpi	r20, 0x84	; 132
 20c:	7c 14       	cp	r7, r12
 20e:	14 14       	cp	r1, r4
 210:	08 08       	sbc	r0, r8
 212:	14 14       	cp	r1, r4
 214:	18 7c       	andi	r17, 0xC8	; 200
 216:	7c 08       	sbc	r7, r12
 218:	04 04       	cpc	r0, r4
 21a:	08 48       	sbci	r16, 0x88	; 136
 21c:	54 54       	subi	r21, 0x44	; 68
 21e:	54 20       	and	r5, r4
 220:	04 3f       	cpi	r16, 0xF4	; 244
 222:	44 40       	sbci	r20, 0x04	; 4
 224:	20 3c       	cpi	r18, 0xC0	; 192
 226:	40 40       	sbci	r20, 0x00	; 0
 228:	20 7c       	andi	r18, 0xC0	; 192
 22a:	1c 20       	and	r1, r12
 22c:	40 20       	and	r4, r0
 22e:	1c 3c       	cpi	r17, 0xCC	; 204
 230:	40 30       	cpi	r20, 0x00	; 0
 232:	40 3c       	cpi	r20, 0xC0	; 192
 234:	44 28       	or	r4, r4
 236:	10 28       	or	r1, r0
 238:	44 0c       	add	r4, r4
 23a:	50 50       	subi	r21, 0x00	; 0
 23c:	50 3c       	cpi	r21, 0xC0	; 192
 23e:	44 64       	ori	r20, 0x44	; 68
 240:	54 4c       	sbci	r21, 0xC4	; 196
 242:	44 00       	.word	0x0044	; ????
 244:	08 36       	cpi	r16, 0x68	; 104
 246:	41 00       	.word	0x0041	; ????
 248:	00 00       	nop
 24a:	7f 00       	.word	0x007f	; ????
 24c:	00 00       	nop
 24e:	41 36       	cpi	r20, 0x61	; 97
 250:	08 00       	.word	0x0008	; ????
 252:	08 08       	sbc	r0, r8
 254:	2a 1c       	adc	r2, r10
 256:	08 08       	sbc	r0, r8
 258:	1c 2a       	or	r1, r28
 25a:	08 08       	sbc	r0, r8

0000025c <HexChars>:
 25c:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

0000026d <__c.2048>:
 26d:	0d 0a 0a 0a 57 65 6c 63 6f 6d 65 20 74 6f 20 74     ....Welcome to t
 27d:	68 65 20 74 69 6d 65 72 20 6c 69 62 72 61 72 79     he timer library
 28d:	20 74 65 73 74 20 70 72 6f 67 72 61 6d 21 0d 0a      test program!..
	...

0000029e <__c.2041>:
 29e:	52 46 20 72 65 6d 6f 74 65 20 73 74 61 72 74 21     RF remote start!
 2ae:	0a 00                                               ..

000002b0 <__ctors_end>:
 2b0:	11 24       	eor	r1, r1
 2b2:	1f be       	out	0x3f, r1	; 63
 2b4:	cf ef       	ldi	r28, 0xFF	; 255
 2b6:	d0 e1       	ldi	r29, 0x10	; 16
 2b8:	de bf       	out	0x3e, r29	; 62
 2ba:	cd bf       	out	0x3d, r28	; 61

000002bc <__do_copy_data>:
 2bc:	11 e0       	ldi	r17, 0x01	; 1
 2be:	a0 e0       	ldi	r26, 0x00	; 0
 2c0:	b1 e0       	ldi	r27, 0x01	; 1
 2c2:	e0 ed       	ldi	r30, 0xD0	; 208
 2c4:	ff e0       	ldi	r31, 0x0F	; 15
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <__do_copy_data+0x10>
 2c8:	05 90       	lpm	r0, Z+
 2ca:	0d 92       	st	X+, r0
 2cc:	a0 30       	cpi	r26, 0x00	; 0
 2ce:	b1 07       	cpc	r27, r17
 2d0:	d9 f7       	brne	.-10     	; 0x2c8 <__do_copy_data+0xc>

000002d2 <__do_clear_bss>:
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	a0 e0       	ldi	r26, 0x00	; 0
 2d6:	b1 e0       	ldi	r27, 0x01	; 1
 2d8:	01 c0       	rjmp	.+2      	; 0x2dc <.do_clear_bss_start>

000002da <.do_clear_bss_loop>:
 2da:	1d 92       	st	X+, r1

000002dc <.do_clear_bss_start>:
 2dc:	a2 3d       	cpi	r26, 0xD2	; 210
 2de:	b2 07       	cpc	r27, r18
 2e0:	e1 f7       	brne	.-8      	; 0x2da <.do_clear_bss_loop>
 2e2:	33 d6       	rcall	.+3174   	; 0xf4a <main>
 2e4:	73 c6       	rjmp	.+3302   	; 0xfcc <_exit>

000002e6 <__bad_interrupt>:
 2e6:	8c ce       	rjmp	.-744    	; 0x0 <__vectors>

000002e8 <bufferInit>:
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
	return data;
}
 2e8:	fc 01       	movw	r30, r24
 2ea:	8f b7       	in	r24, 0x3f	; 63
 2ec:	f8 94       	cli
 2ee:	71 83       	std	Z+1, r23	; 0x01
 2f0:	60 83       	st	Z, r22
 2f2:	53 83       	std	Z+3, r21	; 0x03
 2f4:	42 83       	std	Z+2, r20	; 0x02
 2f6:	17 82       	std	Z+7, r1	; 0x07
 2f8:	16 82       	std	Z+6, r1	; 0x06
 2fa:	15 82       	std	Z+5, r1	; 0x05
 2fc:	14 82       	std	Z+4, r1	; 0x04
 2fe:	8f bf       	out	0x3f, r24	; 63
 300:	08 95       	ret

00000302 <bufferGetFromFront>:
 302:	fc 01       	movw	r30, r24
 304:	9f b7       	in	r25, 0x3f	; 63
 306:	f8 94       	cli
 308:	44 81       	ldd	r20, Z+4	; 0x04
 30a:	55 81       	ldd	r21, Z+5	; 0x05
 30c:	41 15       	cp	r20, r1
 30e:	51 05       	cpc	r21, r1
 310:	c9 f0       	breq	.+50     	; 0x344 <bufferGetFromFront+0x42>
 312:	26 81       	ldd	r18, Z+6	; 0x06
 314:	37 81       	ldd	r19, Z+7	; 0x07
 316:	a0 81       	ld	r26, Z
 318:	b1 81       	ldd	r27, Z+1	; 0x01
 31a:	a2 0f       	add	r26, r18
 31c:	b3 1f       	adc	r27, r19
 31e:	8c 91       	ld	r24, X
 320:	2f 5f       	subi	r18, 0xFF	; 255
 322:	3f 4f       	sbci	r19, 0xFF	; 255
 324:	37 83       	std	Z+7, r19	; 0x07
 326:	26 83       	std	Z+6, r18	; 0x06
 328:	62 81       	ldd	r22, Z+2	; 0x02
 32a:	73 81       	ldd	r23, Z+3	; 0x03
 32c:	26 17       	cp	r18, r22
 32e:	37 07       	cpc	r19, r23
 330:	20 f0       	brcs	.+8      	; 0x33a <bufferGetFromFront+0x38>
 332:	26 1b       	sub	r18, r22
 334:	37 0b       	sbc	r19, r23
 336:	37 83       	std	Z+7, r19	; 0x07
 338:	26 83       	std	Z+6, r18	; 0x06
 33a:	41 50       	subi	r20, 0x01	; 1
 33c:	51 09       	sbc	r21, r1
 33e:	55 83       	std	Z+5, r21	; 0x05
 340:	44 83       	std	Z+4, r20	; 0x04
 342:	01 c0       	rjmp	.+2      	; 0x346 <bufferGetFromFront+0x44>
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	9f bf       	out	0x3f, r25	; 63
 348:	08 95       	ret

0000034a <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
 34a:	fc 01       	movw	r30, r24
 34c:	36 2f       	mov	r19, r22
	// begin critical section
	CRITICAL_SECTION_START;
 34e:	2f b7       	in	r18, 0x3f	; 63
 350:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
 352:	a4 81       	ldd	r26, Z+4	; 0x04
 354:	b5 81       	ldd	r27, Z+5	; 0x05
 356:	62 81       	ldd	r22, Z+2	; 0x02
 358:	73 81       	ldd	r23, Z+3	; 0x03
 35a:	a6 17       	cp	r26, r22
 35c:	b7 07       	cpc	r27, r23
 35e:	90 f4       	brcc	.+36     	; 0x384 <bufferAddToEnd+0x3a>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
 360:	86 81       	ldd	r24, Z+6	; 0x06
 362:	97 81       	ldd	r25, Z+7	; 0x07
 364:	8a 0f       	add	r24, r26
 366:	9b 1f       	adc	r25, r27
 368:	fb d5       	rcall	.+3062   	; 0xf60 <__udivmodhi4>
 36a:	a0 81       	ld	r26, Z
 36c:	b1 81       	ldd	r27, Z+1	; 0x01
 36e:	a8 0f       	add	r26, r24
 370:	b9 1f       	adc	r27, r25
 372:	3c 93       	st	X, r19
		// increment the length
		buffer->datalength++;
 374:	84 81       	ldd	r24, Z+4	; 0x04
 376:	95 81       	ldd	r25, Z+5	; 0x05
 378:	01 96       	adiw	r24, 0x01	; 1
 37a:	95 83       	std	Z+5, r25	; 0x05
 37c:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
 37e:	2f bf       	out	0x3f, r18	; 63
		// return success
		return -1;
 380:	8f ef       	ldi	r24, 0xFF	; 255
 382:	08 95       	ret
	}
	// end critical section
	CRITICAL_SECTION_END;
 384:	2f bf       	out	0x3f, r18	; 63
	// return failure
	return 0;
 386:	80 e0       	ldi	r24, 0x00	; 0
}
 388:	08 95       	ret

0000038a <glcdWriteChar>:

// text routines

// write a character at the current position
void glcdWriteChar(unsigned char c)
{
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
	u08 i = 0;

	for(i=0; i<5; i++)
	{
		glcdDataWrite(pgm_read_byte(&Font5x7[((c - 0x20) * 5) + i]));
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	80 97       	sbiw	r24, 0x20	; 32
 396:	25 e0       	ldi	r18, 0x05	; 5
 398:	28 9f       	mul	r18, r24
 39a:	80 01       	movw	r16, r0
 39c:	29 9f       	mul	r18, r25
 39e:	10 0d       	add	r17, r0
 3a0:	11 24       	eor	r1, r1
 3a2:	c0 e0       	ldi	r28, 0x00	; 0
 3a4:	d0 e0       	ldi	r29, 0x00	; 0
 3a6:	fe 01       	movw	r30, r28
 3a8:	e0 0f       	add	r30, r16
 3aa:	f1 1f       	adc	r31, r17
 3ac:	e4 58       	subi	r30, 0x84	; 132
 3ae:	ff 4f       	sbci	r31, 0xFF	; 255
 3b0:	84 91       	lpm	r24, Z
 3b2:	f7 d0       	rcall	.+494    	; 0x5a2 <glcdDataWrite>
 3b4:	21 96       	adiw	r28, 0x01	; 1
// write a character at the current position
void glcdWriteChar(unsigned char c)
{
	u08 i = 0;

	for(i=0; i<5; i++)
 3b6:	c5 30       	cpi	r28, 0x05	; 5
 3b8:	d1 05       	cpc	r29, r1
 3ba:	a9 f7       	brne	.-22     	; 0x3a6 <glcdWriteChar+0x1c>
	{
		glcdDataWrite(pgm_read_byte(&Font5x7[((c - 0x20) * 5) + i]));
	}

	// write a spacer line
	glcdDataWrite(0x00);
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	f1 d0       	rcall	.+482    	; 0x5a2 <glcdDataWrite>
	//else 
	//	glcdWriteData(0x00);

	//cbi(GLCD_Control, GLCD_CS1);
	//cbi(GLCD_Control, GLCD_CS2);
	glcdStartLine(0);
 3c0:	80 e0       	ldi	r24, 0x00	; 0
}
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	0f 91       	pop	r16
	//else 
	//	glcdWriteData(0x00);

	//cbi(GLCD_Control, GLCD_CS1);
	//cbi(GLCD_Control, GLCD_CS2);
	glcdStartLine(0);
 3ca:	d5 c0       	rjmp	.+426    	; 0x576 <glcdStartLine>

000003cc <outb_lcd_ddr_port.part.1>:
	glcdSetXAddress(x);
}

void glcdGotoChar(u08 line, u08 col)
{
	glcdSetAddress(col*6, line);
 3cc:	81 b1       	in	r24, 0x01	; 1
 3ce:	80 7f       	andi	r24, 0xF0	; 240
 3d0:	81 b9       	out	0x01, r24	; 1
 3d2:	84 b1       	in	r24, 0x04	; 4
 3d4:	80 7f       	andi	r24, 0xF0	; 240
 3d6:	84 b9       	out	0x04, r24	; 4
 3d8:	08 95       	ret

000003da <glcdControllerSelect>:
 3da:	14 98       	cbi	0x02, 4	; 2
 3dc:	15 98       	cbi	0x02, 5	; 2
 3de:	15 98       	cbi	0x02, 5	; 2
 3e0:	15 98       	cbi	0x02, 5	; 2
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	41 f0       	breq	.+16     	; 0x3f6 <glcdControllerSelect+0x1c>
 3e6:	28 f0       	brcs	.+10     	; 0x3f2 <glcdControllerSelect+0x18>
 3e8:	82 30       	cpi	r24, 0x02	; 2
 3ea:	29 f0       	breq	.+10     	; 0x3f6 <glcdControllerSelect+0x1c>
 3ec:	83 30       	cpi	r24, 0x03	; 3
 3ee:	19 f0       	breq	.+6      	; 0x3f6 <glcdControllerSelect+0x1c>
 3f0:	08 95       	ret
 3f2:	14 9a       	sbi	0x02, 4	; 2
 3f4:	08 95       	ret
 3f6:	15 9a       	sbi	0x02, 5	; 2
 3f8:	08 95       	ret

000003fa <outb_lcd_data_port>:
 3fa:	82 b1       	in	r24, 0x02	; 2
 3fc:	80 7f       	andi	r24, 0xF0	; 240
 3fe:	82 b9       	out	0x02, r24	; 2
 400:	82 b1       	in	r24, 0x02	; 2
 402:	96 2f       	mov	r25, r22
 404:	92 95       	swap	r25
 406:	9f 70       	andi	r25, 0x0F	; 15
 408:	89 2b       	or	r24, r25
 40a:	82 b9       	out	0x02, r24	; 2
 40c:	6f 70       	andi	r22, 0x0F	; 15
 40e:	94 e0       	ldi	r25, 0x04	; 4
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	26 2f       	mov	r18, r22
 414:	21 70       	andi	r18, 0x01	; 1
 416:	88 0f       	add	r24, r24
 418:	82 2b       	or	r24, r18
 41a:	66 95       	lsr	r22
 41c:	91 50       	subi	r25, 0x01	; 1
 41e:	c9 f7       	brne	.-14     	; 0x412 <outb_lcd_data_port+0x18>
 420:	95 b1       	in	r25, 0x05	; 5
 422:	90 7f       	andi	r25, 0xF0	; 240
 424:	95 b9       	out	0x05, r25	; 5
 426:	95 b1       	in	r25, 0x05	; 5
 428:	89 2b       	or	r24, r25
 42a:	85 b9       	out	0x05, r24	; 5
 42c:	08 95       	ret

0000042e <outb_lcd_ddr_port>:
 42e:	61 11       	cpse	r22, r1
 430:	01 c0       	rjmp	.+2      	; 0x434 <outb_lcd_ddr_port+0x6>
 432:	cc cf       	rjmp	.-104    	; 0x3cc <outb_lcd_ddr_port.part.1>
 434:	81 b1       	in	r24, 0x01	; 1
 436:	8f 60       	ori	r24, 0x0F	; 15
 438:	81 b9       	out	0x01, r24	; 1
 43a:	84 b1       	in	r24, 0x04	; 4
 43c:	8f 60       	ori	r24, 0x0F	; 15
 43e:	84 b9       	out	0x04, r24	; 4
 440:	08 95       	ret

00000442 <glcdInitHW>:
 442:	2f 98       	cbi	0x05, 7	; 5
 444:	2e 98       	cbi	0x05, 6	; 5
 446:	2d 98       	cbi	0x05, 5	; 5
 448:	2c 98       	cbi	0x05, 4	; 5
 44a:	14 98       	cbi	0x02, 4	; 2
 44c:	15 98       	cbi	0x02, 5	; 2
 44e:	15 98       	cbi	0x02, 5	; 2
 450:	15 98       	cbi	0x02, 5	; 2
 452:	27 9a       	sbi	0x04, 7	; 4
 454:	26 9a       	sbi	0x04, 6	; 4
 456:	25 9a       	sbi	0x04, 5	; 4
 458:	24 9a       	sbi	0x04, 4	; 4
 45a:	0c 9a       	sbi	0x01, 4	; 1
 45c:	0d 9a       	sbi	0x01, 5	; 1
 45e:	0d 9a       	sbi	0x01, 5	; 1
 460:	0d 9a       	sbi	0x01, 5	; 1
 462:	88 b1       	in	r24, 0x08	; 8
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	c9 df       	rcall	.-110    	; 0x3fa <outb_lcd_data_port>
 468:	87 b1       	in	r24, 0x07	; 7
 46a:	6f ef       	ldi	r22, 0xFF	; 255
 46c:	e0 cf       	rjmp	.-64     	; 0x42e <outb_lcd_ddr_port>

0000046e <inb_lcd_pin_port>:
 46e:	20 b1       	in	r18, 0x00	; 0
 470:	80 e1       	ldi	r24, 0x10	; 16
 472:	28 9f       	mul	r18, r24
 474:	90 01       	movw	r18, r0
 476:	11 24       	eor	r1, r1
 478:	43 b1       	in	r20, 0x03	; 3
 47a:	84 e0       	ldi	r24, 0x04	; 4
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	54 2f       	mov	r21, r20
 480:	51 70       	andi	r21, 0x01	; 1
 482:	99 0f       	add	r25, r25
 484:	95 2b       	or	r25, r21
 486:	46 95       	lsr	r20
 488:	81 50       	subi	r24, 0x01	; 1
 48a:	c9 f7       	brne	.-14     	; 0x47e <inb_lcd_pin_port+0x10>
 48c:	89 2f       	mov	r24, r25
 48e:	8f 70       	andi	r24, 0x0F	; 15
 490:	82 2b       	or	r24, r18
 492:	08 95       	ret

00000494 <glcdBusyWait>:
 494:	f8 94       	cli
 496:	a1 df       	rcall	.-190    	; 0x3da <glcdControllerSelect>
 498:	88 b1       	in	r24, 0x08	; 8
 49a:	6f ef       	ldi	r22, 0xFF	; 255
 49c:	ae df       	rcall	.-164    	; 0x3fa <outb_lcd_data_port>
 49e:	2f 98       	cbi	0x05, 7	; 5
 4a0:	87 b1       	in	r24, 0x07	; 7
 4a2:	94 df       	rcall	.-216    	; 0x3cc <outb_lcd_ddr_port.part.1>
 4a4:	2e 9a       	sbi	0x05, 6	; 5
 4a6:	2d 9a       	sbi	0x05, 5	; 5
 4a8:	00 00       	nop
 4aa:	00 00       	nop
 4ac:	86 b1       	in	r24, 0x06	; 6
 4ae:	df df       	rcall	.-66     	; 0x46e <inb_lcd_pin_port>
 4b0:	2d 98       	cbi	0x05, 5	; 5
 4b2:	87 ff       	sbrs	r24, 7
 4b4:	12 c0       	rjmp	.+36     	; 0x4da <glcdBusyWait+0x46>
	...
 4be:	82 e0       	ldi	r24, 0x02	; 2
 4c0:	8a 95       	dec	r24
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <glcdBusyWait+0x2c>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <glcdBusyWait+0x32>
 4c6:	2d 9a       	sbi	0x05, 5	; 5
	...
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	8a 95       	dec	r24
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <glcdBusyWait+0x3e>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <glcdBusyWait+0x44>
 4d8:	e9 cf       	rjmp	.-46     	; 0x4ac <glcdBusyWait+0x18>
 4da:	2e 98       	cbi	0x05, 6	; 5
 4dc:	87 b1       	in	r24, 0x07	; 7
 4de:	6f ef       	ldi	r22, 0xFF	; 255
 4e0:	a6 df       	rcall	.-180    	; 0x42e <outb_lcd_ddr_port>
 4e2:	78 94       	sei
 4e4:	08 95       	ret

000004e6 <glcdControlWrite>:
 4e6:	cf 93       	push	r28
 4e8:	c6 2f       	mov	r28, r22
 4ea:	f8 94       	cli
 4ec:	d3 df       	rcall	.-90     	; 0x494 <glcdBusyWait>
 4ee:	2f 98       	cbi	0x05, 7	; 5
 4f0:	2e 98       	cbi	0x05, 6	; 5
 4f2:	2d 9a       	sbi	0x05, 5	; 5
 4f4:	87 b1       	in	r24, 0x07	; 7
 4f6:	6f ef       	ldi	r22, 0xFF	; 255
 4f8:	9a df       	rcall	.-204    	; 0x42e <outb_lcd_ddr_port>
 4fa:	88 b1       	in	r24, 0x08	; 8
 4fc:	6c 2f       	mov	r22, r28
 4fe:	7d df       	rcall	.-262    	; 0x3fa <outb_lcd_data_port>
	...
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	8a 95       	dec	r24
 514:	f1 f7       	brne	.-4      	; 0x512 <glcdControlWrite+0x2c>
 516:	00 c0       	rjmp	.+0      	; 0x518 <glcdControlWrite+0x32>
 518:	2d 98       	cbi	0x05, 5	; 5
 51a:	78 94       	sei
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

00000520 <glcdSetXAddress>:
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	c2 e9       	ldi	r28, 0x92	; 146
 526:	d1 e0       	ldi	r29, 0x01	; 1
 528:	88 83       	st	Y, r24
 52a:	60 e4       	ldi	r22, 0x40	; 64
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	db df       	rcall	.-74     	; 0x4e6 <glcdControlWrite>
 530:	1a 82       	std	Y+2, r1	; 0x02
 532:	60 e4       	ldi	r22, 0x40	; 64
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	d7 df       	rcall	.-82     	; 0x4e6 <glcdControlWrite>
 538:	1c 82       	std	Y+4, r1	; 0x04
 53a:	88 81       	ld	r24, Y
 53c:	68 2f       	mov	r22, r24
 53e:	6f 73       	andi	r22, 0x3F	; 63
 540:	60 64       	ori	r22, 0x40	; 64
 542:	82 95       	swap	r24
 544:	86 95       	lsr	r24
 546:	86 95       	lsr	r24
 548:	83 70       	andi	r24, 0x03	; 3
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	cb cf       	rjmp	.-106    	; 0x4e6 <glcdControlWrite>

00000550 <glcdSetYAddress>:
 550:	cf 93       	push	r28
 552:	80 93 93 01 	sts	0x0193, r24
 556:	c8 2f       	mov	r28, r24
 558:	c8 6b       	ori	r28, 0xB8	; 184
 55a:	6c 2f       	mov	r22, r28
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	c3 df       	rcall	.-122    	; 0x4e6 <glcdControlWrite>
 560:	6c 2f       	mov	r22, r28
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	cf 91       	pop	r28
 566:	bf cf       	rjmp	.-130    	; 0x4e6 <glcdControlWrite>

00000568 <glcdSetAddress>:
 568:	cf 93       	push	r28
 56a:	c8 2f       	mov	r28, r24
 56c:	86 2f       	mov	r24, r22
 56e:	f0 df       	rcall	.-32     	; 0x550 <glcdSetYAddress>
 570:	8c 2f       	mov	r24, r28
 572:	cf 91       	pop	r28
 574:	d5 cf       	rjmp	.-86     	; 0x520 <glcdSetXAddress>

00000576 <glcdStartLine>:
		}
	}
}

void glcdStartLine(u08 start)
{
 576:	cf 93       	push	r28
	glcdControlWrite(0, GLCD_START_LINE | start);
 578:	c8 2f       	mov	r28, r24
 57a:	c0 6c       	ori	r28, 0xC0	; 192
 57c:	6c 2f       	mov	r22, r28
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	b2 df       	rcall	.-156    	; 0x4e6 <glcdControlWrite>
	glcdControlWrite(1, GLCD_START_LINE | start);
 582:	6c 2f       	mov	r22, r28
 584:	81 e0       	ldi	r24, 0x01	; 1
}
 586:	cf 91       	pop	r28
}

void glcdStartLine(u08 start)
{
	glcdControlWrite(0, GLCD_START_LINE | start);
	glcdControlWrite(1, GLCD_START_LINE | start);
 588:	ae cf       	rjmp	.-164    	; 0x4e6 <glcdControlWrite>

0000058a <glcdHome>:

void glcdHome(void)
{
	u08 i;
	// initialize addresses/positions
	glcdStartLine(0);
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	f4 df       	rcall	.-24     	; 0x576 <glcdStartLine>
	glcdSetAddress(0,0);
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	ea df       	rcall	.-44     	; 0x568 <glcdSetAddress>
	// initialize local data structures
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		GrLcdState.ctrlr[i].xAddr = 0;
 594:	e2 e9       	ldi	r30, 0x92	; 146
 596:	f1 e0       	ldi	r31, 0x01	; 1
 598:	12 82       	std	Z+2, r1	; 0x02
		GrLcdState.ctrlr[i].yAddr = 0;
 59a:	13 82       	std	Z+3, r1	; 0x03
	glcdStartLine(0);
	glcdSetAddress(0,0);
	// initialize local data structures
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		GrLcdState.ctrlr[i].xAddr = 0;
 59c:	14 82       	std	Z+4, r1	; 0x04
		GrLcdState.ctrlr[i].yAddr = 0;
 59e:	15 82       	std	Z+5, r1	; 0x05
 5a0:	08 95       	ret

000005a2 <glcdDataWrite>:
#endif
	return data;
}

void glcdDataWrite(u08 data)
{
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	d8 2f       	mov	r29, r24
	register u08 controller = (GrLcdState.lcdXAddr/GLCD_CONTROLLER_XPIXELS);
 5a8:	e0 91 92 01 	lds	r30, 0x0192
 5ac:	ce 2f       	mov	r28, r30
 5ae:	c2 95       	swap	r28
 5b0:	c6 95       	lsr	r28
 5b2:	c6 95       	lsr	r28
 5b4:	c3 70       	andi	r28, 0x03	; 3
#ifdef GLCD_PORT_INTERFACE
	cli();
 5b6:	f8 94       	cli
	glcdBusyWait(controller);		// wait until LCD not busy
 5b8:	8c 2f       	mov	r24, r28
 5ba:	6c df       	rcall	.-296    	; 0x494 <glcdBusyWait>
	sbi(GLCD_CTRL_PORT, GLCD_CTRL_RS);
 5bc:	2f 9a       	sbi	0x05, 7	; 5
	cbi(GLCD_CTRL_PORT, GLCD_CTRL_RW);
 5be:	2e 98       	cbi	0x05, 6	; 5
	sbi(GLCD_CTRL_PORT, GLCD_CTRL_E);
 5c0:	2d 9a       	sbi	0x05, 5	; 5
	outb_lcd_ddr_port(GLCD_DATA_DDR, 0xFF);
 5c2:	87 b1       	in	r24, 0x07	; 7
 5c4:	6f ef       	ldi	r22, 0xFF	; 255
 5c6:	33 df       	rcall	.-410    	; 0x42e <outb_lcd_ddr_port>
	outb_lcd_data_port(GLCD_DATA_PORT, data);
 5c8:	88 b1       	in	r24, 0x08	; 8
 5ca:	6d 2f       	mov	r22, r29
 5cc:	16 df       	rcall	.-468    	; 0x3fa <outb_lcd_data_port>
	...
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5de:	82 e0       	ldi	r24, 0x02	; 2
 5e0:	8a 95       	dec	r24
 5e2:	f1 f7       	brne	.-4      	; 0x5e0 <glcdDataWrite+0x3e>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <glcdDataWrite+0x44>
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	_delay_us(1);
	cbi(GLCD_CTRL_PORT, GLCD_CTRL_E);
 5e6:	2d 98       	cbi	0x05, 5	; 5
	sei();
 5e8:	78 94       	sei
	glcdBusyWait(controller);		// wait until LCD not busy
	*(volatile unsigned char *) (GLCD_CONTROLLER0_CTRL_ADDR + GLCD_CONTROLLER_ADDR_OFFSET*controller) = data;
	//cbi(MCUCR, SRW);				// disable RAM waitstate
#endif
	// increment our local address counter
	GrLcdState.ctrlr[controller].xAddr++;
 5ea:	ec 2f       	mov	r30, r28
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	ee 0f       	add	r30, r30
 5f0:	ff 1f       	adc	r31, r31
 5f2:	ec 56       	subi	r30, 0x6C	; 108
 5f4:	fe 4f       	sbci	r31, 0xFE	; 254
 5f6:	80 81       	ld	r24, Z
 5f8:	8f 5f       	subi	r24, 0xFF	; 255
 5fa:	80 83       	st	Z, r24
	GrLcdState.lcdXAddr++;
 5fc:	80 91 92 01 	lds	r24, 0x0192
 600:	8f 5f       	subi	r24, 0xFF	; 255
 602:	80 93 92 01 	sts	0x0192, r24
	if(GrLcdState.lcdXAddr >= GLCD_XPIXELS)
 606:	87 ff       	sbrs	r24, 7
 608:	0a c0       	rjmp	.+20     	; 0x61e <glcdDataWrite+0x7c>
	{
		GrLcdState.lcdYAddr++;
 60a:	80 91 93 01 	lds	r24, 0x0193
 60e:	8f 5f       	subi	r24, 0xFF	; 255
 610:	80 93 93 01 	sts	0x0193, r24
		glcdSetYAddress(GrLcdState.lcdYAddr);
 614:	9d df       	rcall	.-198    	; 0x550 <glcdSetYAddress>
		glcdSetXAddress(0);
 616:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
	GrLcdState.lcdXAddr++;
	if(GrLcdState.lcdXAddr >= GLCD_XPIXELS)
	{
		GrLcdState.lcdYAddr++;
		glcdSetYAddress(GrLcdState.lcdYAddr);
		glcdSetXAddress(0);
 61c:	81 cf       	rjmp	.-254    	; 0x520 <glcdSetXAddress>
	}
}
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	08 95       	ret

00000624 <glcdClearScreen>:
		GrLcdState.ctrlr[i].yAddr = 0;
	}
}

void glcdClearScreen(void)
{
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
	u08 pageAddr;
	u08 xAddr;

	// clear LCD
	// loop through all pages
	for(pageAddr=0; pageAddr<(GLCD_YPIXELS>>3); pageAddr++)
 628:	c0 e0       	ldi	r28, 0x00	; 0
	{
		// set page address
		glcdSetAddress(0, pageAddr);
 62a:	6c 2f       	mov	r22, r28
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	9c df       	rcall	.-200    	; 0x568 <glcdSetAddress>
		// clear all lines of this page of display memory
		for(xAddr=0; xAddr<GLCD_XPIXELS; xAddr++)
 630:	d0 e0       	ldi	r29, 0x00	; 0
		{
			glcdDataWrite(0x00);
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	b6 df       	rcall	.-148    	; 0x5a2 <glcdDataWrite>
	for(pageAddr=0; pageAddr<(GLCD_YPIXELS>>3); pageAddr++)
	{
		// set page address
		glcdSetAddress(0, pageAddr);
		// clear all lines of this page of display memory
		for(xAddr=0; xAddr<GLCD_XPIXELS; xAddr++)
 636:	df 5f       	subi	r29, 0xFF	; 255
 638:	d0 38       	cpi	r29, 0x80	; 128
 63a:	d9 f7       	brne	.-10     	; 0x632 <glcdClearScreen+0xe>
	u08 pageAddr;
	u08 xAddr;

	// clear LCD
	// loop through all pages
	for(pageAddr=0; pageAddr<(GLCD_YPIXELS>>3); pageAddr++)
 63c:	cf 5f       	subi	r28, 0xFF	; 255
 63e:	c8 30       	cpi	r28, 0x08	; 8
 640:	a1 f7       	brne	.-24     	; 0x62a <glcdClearScreen+0x6>
		for(xAddr=0; xAddr<GLCD_XPIXELS; xAddr++)
		{
			glcdDataWrite(0x00);
		}
	}
}
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	08 95       	ret

00000648 <glcdInit>:

void glcdInit()
{
	u08 i;
	// initialize hardware
	glcdInitHW();
 648:	fc de       	rcall	.-520    	; 0x442 <glcdInitHW>
	// bring lcd out of reset
	//glcdReset(FALSE);
	// Turn on LCD
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		glcdControlWrite(i, GLCD_ON_CTRL | GLCD_ON_DISPLAY);
 64a:	6f e3       	ldi	r22, 0x3F	; 63
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	4b df       	rcall	.-362    	; 0x4e6 <glcdControlWrite>
 650:	6f e3       	ldi	r22, 0x3F	; 63
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	48 df       	rcall	.-368    	; 0x4e6 <glcdControlWrite>
	}
	// clear lcd
	glcdClearScreen();
 656:	e6 df       	rcall	.-52     	; 0x624 <glcdClearScreen>
	// initialize positions
	glcdHome();
 658:	98 cf       	rjmp	.-208    	; 0x58a <glcdHome>

0000065a <rprintfInit>:
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
	}
}
 65a:	90 93 01 01 	sts	0x0101, r25
 65e:	80 93 00 01 	sts	0x0100, r24
 662:	08 95       	ret

00000664 <rprintfChar>:
 664:	cf 93       	push	r28
 666:	c8 2f       	mov	r28, r24
 668:	8a 30       	cpi	r24, 0x0A	; 10
 66a:	31 f4       	brne	.+12     	; 0x678 <rprintfChar+0x14>
 66c:	e0 91 00 01 	lds	r30, 0x0100
 670:	f0 91 01 01 	lds	r31, 0x0101
 674:	8d e0       	ldi	r24, 0x0D	; 13
 676:	09 95       	icall
 678:	e0 91 00 01 	lds	r30, 0x0100
 67c:	f0 91 01 01 	lds	r31, 0x0101
 680:	8c 2f       	mov	r24, r28
 682:	cf 91       	pop	r28
 684:	09 94       	ijmp

00000686 <rprintfu04>:
 686:	8f 70       	andi	r24, 0x0F	; 15
 688:	e8 2f       	mov	r30, r24
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	e4 5a       	subi	r30, 0xA4	; 164
 68e:	fd 4f       	sbci	r31, 0xFD	; 253
 690:	84 91       	lpm	r24, Z
 692:	e8 cf       	rjmp	.-48     	; 0x664 <rprintfChar>

00000694 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
 694:	5f 92       	push	r5
 696:	6f 92       	push	r6
 698:	7f 92       	push	r7
 69a:	8f 92       	push	r8
 69c:	9f 92       	push	r9
 69e:	af 92       	push	r10
 6a0:	bf 92       	push	r11
 6a2:	cf 92       	push	r12
 6a4:	df 92       	push	r13
 6a6:	ef 92       	push	r14
 6a8:	ff 92       	push	r15
 6aa:	0f 93       	push	r16
 6ac:	1f 93       	push	r17
 6ae:	cf 93       	push	r28
 6b0:	df 93       	push	r29
 6b2:	1f 92       	push	r1
 6b4:	cd b7       	in	r28, 0x3d	; 61
 6b6:	de b7       	in	r29, 0x3e	; 62
 6b8:	ec 89       	ldd	r30, Y+20	; 0x14
 6ba:	fd 89       	ldd	r31, Y+21	; 0x15
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
 6bc:	3e 01       	movw	r6, r28
 6be:	26 e1       	ldi	r18, 0x16	; 22
 6c0:	62 0e       	add	r6, r18
 6c2:	71 1c       	adc	r7, r1
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
					rprintfChar('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 6c4:	3a e0       	ldi	r19, 0x0A	; 10
 6c6:	a3 2e       	mov	r10, r19
 6c8:	b1 2c       	mov	r11, r1
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 6ca:	3b 89       	ldd	r19, Y+19	; 0x13
 6cc:	33 23       	and	r19, r19
 6ce:	79 f0       	breq	.+30     	; 0x6ee <rprintf1RamRom+0x5a>
 6d0:	8f 01       	movw	r16, r30
 6d2:	0f 5f       	subi	r16, 0xFF	; 255
 6d4:	1f 4f       	sbci	r17, 0xFF	; 255
 6d6:	84 91       	lpm	r24, Z
 6d8:	85 32       	cpi	r24, 0x25	; 37
 6da:	81 f0       	breq	.+32     	; 0x6fc <rprintf1RamRom+0x68>
		{	// Until '%' or '\0'
			if (!format_flag)
 6dc:	88 23       	and	r24, r24
 6de:	09 f4       	brne	.+2      	; 0x6e2 <rprintf1RamRom+0x4e>
 6e0:	5f c0       	rjmp	.+190    	; 0x7a0 <rprintf1RamRom+0x10c>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
 6e2:	c0 df       	rcall	.-128    	; 0x664 <rprintfChar>
 6e4:	63 01       	movw	r12, r6
 6e6:	78 01       	movw	r14, r16
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
 6e8:	36 01       	movw	r6, r12
 6ea:	f7 01       	movw	r30, r14
 6ec:	ee cf       	rjmp	.-36     	; 0x6ca <rprintf1RamRom+0x36>
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 6ee:	80 81       	ld	r24, Z
 6f0:	85 32       	cpi	r24, 0x25	; 37
 6f2:	59 f0       	breq	.+22     	; 0x70a <rprintf1RamRom+0x76>
 6f4:	8f 01       	movw	r16, r30
 6f6:	0f 5f       	subi	r16, 0xFF	; 255
 6f8:	1f 4f       	sbci	r17, 0xFF	; 255
 6fa:	f0 cf       	rjmp	.-32     	; 0x6dc <rprintf1RamRom+0x48>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
 6fc:	7f 01       	movw	r14, r30
 6fe:	82 e0       	ldi	r24, 0x02	; 2
 700:	e8 0e       	add	r14, r24
 702:	f1 1c       	adc	r15, r1
 704:	f8 01       	movw	r30, r16
 706:	84 91       	lpm	r24, Z
 708:	05 c0       	rjmp	.+10     	; 0x714 <rprintf1RamRom+0x80>
 70a:	7f 01       	movw	r14, r30
 70c:	22 e0       	ldi	r18, 0x02	; 2
 70e:	e2 0e       	add	r14, r18
 710:	f1 1c       	adc	r15, r1
 712:	81 81       	ldd	r24, Z+1	; 0x01
 714:	84 36       	cpi	r24, 0x64	; 100
 716:	99 f0       	breq	.+38     	; 0x73e <rprintf1RamRom+0xaa>
 718:	88 37       	cpi	r24, 0x78	; 120
 71a:	59 f0       	breq	.+22     	; 0x732 <rprintf1RamRom+0x9e>
 71c:	83 36       	cpi	r24, 0x63	; 99
 71e:	31 f4       	brne	.+12     	; 0x72c <rprintf1RamRom+0x98>
		{
			case 'c': format_flag = va_arg(ap,int);
 720:	f3 01       	movw	r30, r6
 722:	80 81       	ld	r24, Z
 724:	93 01       	movw	r18, r6
 726:	2e 5f       	subi	r18, 0xFE	; 254
 728:	3f 4f       	sbci	r19, 0xFF	; 255
 72a:	39 01       	movw	r6, r18
			default:  rprintfChar(format_flag); continue;
 72c:	9b df       	rcall	.-202    	; 0x664 <rprintfChar>
 72e:	63 01       	movw	r12, r6
 730:	db cf       	rjmp	.-74     	; 0x6e8 <rprintf1RamRom+0x54>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 732:	20 e1       	ldi	r18, 0x10	; 16
 734:	82 2e       	mov	r8, r18
 736:	91 2c       	mov	r9, r1
 738:	00 e0       	ldi	r16, 0x00	; 0
 73a:	10 e1       	ldi	r17, 0x10	; 16
 73c:	05 c0       	rjmp	.+10     	; 0x748 <rprintf1RamRom+0xb4>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 73e:	9a e0       	ldi	r25, 0x0A	; 10
 740:	89 2e       	mov	r8, r25
 742:	91 2c       	mov	r9, r1
 744:	00 e1       	ldi	r16, 0x10	; 16
 746:	17 e2       	ldi	r17, 0x27	; 39
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 748:	63 01       	movw	r12, r6
 74a:	32 e0       	ldi	r19, 0x02	; 2
 74c:	c3 0e       	add	r12, r19
 74e:	d1 1c       	adc	r13, r1
 750:	f3 01       	movw	r30, r6
 752:	60 80       	ld	r6, Z
 754:	71 80       	ldd	r7, Z+1	; 0x01
			if (format_flag == 'd')
 756:	84 36       	cpi	r24, 0x64	; 100
 758:	91 f4       	brne	.+36     	; 0x77e <rprintf1RamRom+0xea>
			{
				if (((int)u_val) < 0)
 75a:	77 fe       	sbrs	r7, 7
 75c:	0d c0       	rjmp	.+26     	; 0x778 <rprintf1RamRom+0xe4>
				{
					u_val = - u_val;
 75e:	71 94       	neg	r7
 760:	61 94       	neg	r6
 762:	71 08       	sbc	r7, r1
					rprintfChar('-');
 764:	8d e2       	ldi	r24, 0x2D	; 45
 766:	7e df       	rcall	.-260    	; 0x664 <rprintfChar>
 768:	07 c0       	rjmp	.+14     	; 0x778 <rprintf1RamRom+0xe4>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 76a:	c8 01       	movw	r24, r16
 76c:	b5 01       	movw	r22, r10
 76e:	f8 d3       	rcall	.+2032   	; 0xf60 <__udivmodhi4>
 770:	8b 01       	movw	r16, r22
 772:	62 30       	cpi	r22, 0x02	; 2
 774:	71 05       	cpc	r23, r1
 776:	18 f0       	brcs	.+6      	; 0x77e <rprintf1RamRom+0xea>
 778:	60 16       	cp	r6, r16
 77a:	71 06       	cpc	r7, r17
 77c:	b0 f3       	brcs	.-20     	; 0x76a <rprintf1RamRom+0xd6>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
 77e:	c3 01       	movw	r24, r6
 780:	b8 01       	movw	r22, r16
 782:	ee d3       	rcall	.+2012   	; 0xf60 <__udivmodhi4>
 784:	58 2e       	mov	r5, r24
 786:	86 2f       	mov	r24, r22
 788:	99 83       	std	Y+1, r25	; 0x01
 78a:	7d df       	rcall	.-262    	; 0x686 <rprintfu04>
				u_val %= div_val;
 78c:	65 2c       	mov	r6, r5
 78e:	99 81       	ldd	r25, Y+1	; 0x01
 790:	79 2e       	mov	r7, r25
				div_val /= base;
 792:	c8 01       	movw	r24, r16
 794:	b4 01       	movw	r22, r8
 796:	e4 d3       	rcall	.+1992   	; 0xf60 <__udivmodhi4>
 798:	8b 01       	movw	r16, r22
			} while (div_val);
 79a:	67 2b       	or	r22, r23
 79c:	81 f7       	brne	.-32     	; 0x77e <rprintf1RamRom+0xea>
 79e:	a4 cf       	rjmp	.-184    	; 0x6e8 <rprintf1RamRom+0x54>
		}
	}
	va_end(ap);
}
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	0f 90       	pop	r0
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	1f 91       	pop	r17
 7ac:	0f 91       	pop	r16
 7ae:	ff 90       	pop	r15
 7b0:	ef 90       	pop	r14
 7b2:	df 90       	pop	r13
 7b4:	cf 90       	pop	r12
 7b6:	bf 90       	pop	r11
 7b8:	af 90       	pop	r10
 7ba:	9f 90       	pop	r9
 7bc:	8f 90       	pop	r8
 7be:	7f 90       	pop	r7
 7c0:	6f 90       	pop	r6
 7c2:	5f 90       	pop	r5
 7c4:	08 95       	ret

000007c6 <__vector_18>:
	OCR1B = pwmDuty;
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
 7c6:	1f 92       	push	r1
 7c8:	0f 92       	push	r0
 7ca:	0f b6       	in	r0, 0x3f	; 63
 7cc:	0f 92       	push	r0
 7ce:	11 24       	eor	r1, r1
 7d0:	2f 93       	push	r18
 7d2:	3f 93       	push	r19
 7d4:	4f 93       	push	r20
 7d6:	5f 93       	push	r21
 7d8:	6f 93       	push	r22
 7da:	7f 93       	push	r23
 7dc:	8f 93       	push	r24
 7de:	9f 93       	push	r25
 7e0:	af 93       	push	r26
 7e2:	bf 93       	push	r27
 7e4:	ef 93       	push	r30
 7e6:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
 7e8:	80 91 98 01 	lds	r24, 0x0198
 7ec:	90 91 99 01 	lds	r25, 0x0199
 7f0:	a0 91 9a 01 	lds	r26, 0x019A
 7f4:	b0 91 9b 01 	lds	r27, 0x019B
 7f8:	01 96       	adiw	r24, 0x01	; 1
 7fa:	a1 1d       	adc	r26, r1
 7fc:	b1 1d       	adc	r27, r1
 7fe:	80 93 98 01 	sts	0x0198, r24
 802:	90 93 99 01 	sts	0x0199, r25
 806:	a0 93 9a 01 	sts	0x019A, r26
 80a:	b0 93 9b 01 	sts	0x019B, r27

	// increment pause counter
	TimerPauseReg++;
 80e:	80 91 9c 01 	lds	r24, 0x019C
 812:	90 91 9d 01 	lds	r25, 0x019D
 816:	a0 91 9e 01 	lds	r26, 0x019E
 81a:	b0 91 9f 01 	lds	r27, 0x019F
 81e:	01 96       	adiw	r24, 0x01	; 1
 820:	a1 1d       	adc	r26, r1
 822:	b1 1d       	adc	r27, r1
 824:	80 93 9c 01 	sts	0x019C, r24
 828:	90 93 9d 01 	sts	0x019D, r25
 82c:	a0 93 9e 01 	sts	0x019E, r26
 830:	b0 93 9f 01 	sts	0x019F, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
 834:	80 91 02 01 	lds	r24, 0x0102
 838:	90 91 03 01 	lds	r25, 0x0103
 83c:	89 2b       	or	r24, r25
 83e:	29 f0       	breq	.+10     	; 0x84a <__vector_18+0x84>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
 840:	e0 91 02 01 	lds	r30, 0x0102
 844:	f0 91 03 01 	lds	r31, 0x0103
 848:	09 95       	icall
}
 84a:	ff 91       	pop	r31
 84c:	ef 91       	pop	r30
 84e:	bf 91       	pop	r27
 850:	af 91       	pop	r26
 852:	9f 91       	pop	r25
 854:	8f 91       	pop	r24
 856:	7f 91       	pop	r23
 858:	6f 91       	pop	r22
 85a:	5f 91       	pop	r21
 85c:	4f 91       	pop	r20
 85e:	3f 91       	pop	r19
 860:	2f 91       	pop	r18
 862:	0f 90       	pop	r0
 864:	0f be       	out	0x3f, r0	; 63
 866:	0f 90       	pop	r0
 868:	1f 90       	pop	r1
 86a:	18 95       	reti

0000086c <__vector_15>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
 86c:	1f 92       	push	r1
 86e:	0f 92       	push	r0
 870:	0f b6       	in	r0, 0x3f	; 63
 872:	0f 92       	push	r0
 874:	11 24       	eor	r1, r1
 876:	2f 93       	push	r18
 878:	3f 93       	push	r19
 87a:	4f 93       	push	r20
 87c:	5f 93       	push	r21
 87e:	6f 93       	push	r22
 880:	7f 93       	push	r23
 882:	8f 93       	push	r24
 884:	9f 93       	push	r25
 886:	af 93       	push	r26
 888:	bf 93       	push	r27
 88a:	ef 93       	push	r30
 88c:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
 88e:	80 91 04 01 	lds	r24, 0x0104
 892:	90 91 05 01 	lds	r25, 0x0105
 896:	89 2b       	or	r24, r25
 898:	29 f0       	breq	.+10     	; 0x8a4 <__vector_15+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
 89a:	e0 91 04 01 	lds	r30, 0x0104
 89e:	f0 91 05 01 	lds	r31, 0x0105
 8a2:	09 95       	icall
}
 8a4:	ff 91       	pop	r31
 8a6:	ef 91       	pop	r30
 8a8:	bf 91       	pop	r27
 8aa:	af 91       	pop	r26
 8ac:	9f 91       	pop	r25
 8ae:	8f 91       	pop	r24
 8b0:	7f 91       	pop	r23
 8b2:	6f 91       	pop	r22
 8b4:	5f 91       	pop	r21
 8b6:	4f 91       	pop	r20
 8b8:	3f 91       	pop	r19
 8ba:	2f 91       	pop	r18
 8bc:	0f 90       	pop	r0
 8be:	0f be       	out	0x3f, r0	; 63
 8c0:	0f 90       	pop	r0
 8c2:	1f 90       	pop	r1
 8c4:	18 95       	reti

000008c6 <__vector_11>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
 8c6:	1f 92       	push	r1
 8c8:	0f 92       	push	r0
 8ca:	0f b6       	in	r0, 0x3f	; 63
 8cc:	0f 92       	push	r0
 8ce:	11 24       	eor	r1, r1
 8d0:	2f 93       	push	r18
 8d2:	3f 93       	push	r19
 8d4:	4f 93       	push	r20
 8d6:	5f 93       	push	r21
 8d8:	6f 93       	push	r22
 8da:	7f 93       	push	r23
 8dc:	8f 93       	push	r24
 8de:	9f 93       	push	r25
 8e0:	af 93       	push	r26
 8e2:	bf 93       	push	r27
 8e4:	ef 93       	push	r30
 8e6:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
 8e8:	80 91 a0 01 	lds	r24, 0x01A0
 8ec:	90 91 a1 01 	lds	r25, 0x01A1
 8f0:	a0 91 a2 01 	lds	r26, 0x01A2
 8f4:	b0 91 a3 01 	lds	r27, 0x01A3
 8f8:	01 96       	adiw	r24, 0x01	; 1
 8fa:	a1 1d       	adc	r26, r1
 8fc:	b1 1d       	adc	r27, r1
 8fe:	80 93 a0 01 	sts	0x01A0, r24
 902:	90 93 a1 01 	sts	0x01A1, r25
 906:	a0 93 a2 01 	sts	0x01A2, r26
 90a:	b0 93 a3 01 	sts	0x01A3, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
 90e:	80 91 0c 01 	lds	r24, 0x010C
 912:	90 91 0d 01 	lds	r25, 0x010D
 916:	89 2b       	or	r24, r25
 918:	29 f0       	breq	.+10     	; 0x924 <__vector_11+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
 91a:	e0 91 0c 01 	lds	r30, 0x010C
 91e:	f0 91 0d 01 	lds	r31, 0x010D
 922:	09 95       	icall
}
 924:	ff 91       	pop	r31
 926:	ef 91       	pop	r30
 928:	bf 91       	pop	r27
 92a:	af 91       	pop	r26
 92c:	9f 91       	pop	r25
 92e:	8f 91       	pop	r24
 930:	7f 91       	pop	r23
 932:	6f 91       	pop	r22
 934:	5f 91       	pop	r21
 936:	4f 91       	pop	r20
 938:	3f 91       	pop	r19
 93a:	2f 91       	pop	r18
 93c:	0f 90       	pop	r0
 93e:	0f be       	out	0x3f, r0	; 63
 940:	0f 90       	pop	r0
 942:	1f 90       	pop	r1
 944:	18 95       	reti

00000946 <__vector_13>:
}
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
 946:	1f 92       	push	r1
 948:	0f 92       	push	r0
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	0f 92       	push	r0
 94e:	11 24       	eor	r1, r1
 950:	2f 93       	push	r18
 952:	3f 93       	push	r19
 954:	4f 93       	push	r20
 956:	5f 93       	push	r21
 958:	6f 93       	push	r22
 95a:	7f 93       	push	r23
 95c:	8f 93       	push	r24
 95e:	9f 93       	push	r25
 960:	af 93       	push	r26
 962:	bf 93       	push	r27
 964:	ef 93       	push	r30
 966:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
 968:	80 91 06 01 	lds	r24, 0x0106
 96c:	90 91 07 01 	lds	r25, 0x0107
 970:	89 2b       	or	r24, r25
 972:	29 f0       	breq	.+10     	; 0x97e <__vector_13+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
 974:	e0 91 06 01 	lds	r30, 0x0106
 978:	f0 91 07 01 	lds	r31, 0x0107
 97c:	09 95       	icall
}
 97e:	ff 91       	pop	r31
 980:	ef 91       	pop	r30
 982:	bf 91       	pop	r27
 984:	af 91       	pop	r26
 986:	9f 91       	pop	r25
 988:	8f 91       	pop	r24
 98a:	7f 91       	pop	r23
 98c:	6f 91       	pop	r22
 98e:	5f 91       	pop	r21
 990:	4f 91       	pop	r20
 992:	3f 91       	pop	r19
 994:	2f 91       	pop	r18
 996:	0f 90       	pop	r0
 998:	0f be       	out	0x3f, r0	; 63
 99a:	0f 90       	pop	r0
 99c:	1f 90       	pop	r1
 99e:	18 95       	reti

000009a0 <__vector_14>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
 9a0:	1f 92       	push	r1
 9a2:	0f 92       	push	r0
 9a4:	0f b6       	in	r0, 0x3f	; 63
 9a6:	0f 92       	push	r0
 9a8:	11 24       	eor	r1, r1
 9aa:	2f 93       	push	r18
 9ac:	3f 93       	push	r19
 9ae:	4f 93       	push	r20
 9b0:	5f 93       	push	r21
 9b2:	6f 93       	push	r22
 9b4:	7f 93       	push	r23
 9b6:	8f 93       	push	r24
 9b8:	9f 93       	push	r25
 9ba:	af 93       	push	r26
 9bc:	bf 93       	push	r27
 9be:	ef 93       	push	r30
 9c0:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
 9c2:	80 91 08 01 	lds	r24, 0x0108
 9c6:	90 91 09 01 	lds	r25, 0x0109
 9ca:	89 2b       	or	r24, r25
 9cc:	29 f0       	breq	.+10     	; 0x9d8 <__vector_14+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
 9ce:	e0 91 08 01 	lds	r30, 0x0108
 9d2:	f0 91 09 01 	lds	r31, 0x0109
 9d6:	09 95       	icall
}
 9d8:	ff 91       	pop	r31
 9da:	ef 91       	pop	r30
 9dc:	bf 91       	pop	r27
 9de:	af 91       	pop	r26
 9e0:	9f 91       	pop	r25
 9e2:	8f 91       	pop	r24
 9e4:	7f 91       	pop	r23
 9e6:	6f 91       	pop	r22
 9e8:	5f 91       	pop	r21
 9ea:	4f 91       	pop	r20
 9ec:	3f 91       	pop	r19
 9ee:	2f 91       	pop	r18
 9f0:	0f 90       	pop	r0
 9f2:	0f be       	out	0x3f, r0	; 63
 9f4:	0f 90       	pop	r0
 9f6:	1f 90       	pop	r1
 9f8:	18 95       	reti

000009fa <__vector_12>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
 9fa:	1f 92       	push	r1
 9fc:	0f 92       	push	r0
 9fe:	0f b6       	in	r0, 0x3f	; 63
 a00:	0f 92       	push	r0
 a02:	11 24       	eor	r1, r1
 a04:	2f 93       	push	r18
 a06:	3f 93       	push	r19
 a08:	4f 93       	push	r20
 a0a:	5f 93       	push	r21
 a0c:	6f 93       	push	r22
 a0e:	7f 93       	push	r23
 a10:	8f 93       	push	r24
 a12:	9f 93       	push	r25
 a14:	af 93       	push	r26
 a16:	bf 93       	push	r27
 a18:	ef 93       	push	r30
 a1a:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
 a1c:	80 91 0a 01 	lds	r24, 0x010A
 a20:	90 91 0b 01 	lds	r25, 0x010B
 a24:	89 2b       	or	r24, r25
 a26:	29 f0       	breq	.+10     	; 0xa32 <__vector_12+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
 a28:	e0 91 0a 01 	lds	r30, 0x010A
 a2c:	f0 91 0b 01 	lds	r31, 0x010B
 a30:	09 95       	icall
}
 a32:	ff 91       	pop	r31
 a34:	ef 91       	pop	r30
 a36:	bf 91       	pop	r27
 a38:	af 91       	pop	r26
 a3a:	9f 91       	pop	r25
 a3c:	8f 91       	pop	r24
 a3e:	7f 91       	pop	r23
 a40:	6f 91       	pop	r22
 a42:	5f 91       	pop	r21
 a44:	4f 91       	pop	r20
 a46:	3f 91       	pop	r19
 a48:	2f 91       	pop	r18
 a4a:	0f 90       	pop	r0
 a4c:	0f be       	out	0x3f, r0	; 63
 a4e:	0f 90       	pop	r0
 a50:	1f 90       	pop	r1
 a52:	18 95       	reti

00000a54 <__vector_9>:

//! Interrupt handler for OutputCompare2A match (OC2A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMPA_vect)
{
 a54:	1f 92       	push	r1
 a56:	0f 92       	push	r0
 a58:	0f b6       	in	r0, 0x3f	; 63
 a5a:	0f 92       	push	r0
 a5c:	11 24       	eor	r1, r1
 a5e:	2f 93       	push	r18
 a60:	3f 93       	push	r19
 a62:	4f 93       	push	r20
 a64:	5f 93       	push	r21
 a66:	6f 93       	push	r22
 a68:	7f 93       	push	r23
 a6a:	8f 93       	push	r24
 a6c:	9f 93       	push	r25
 a6e:	af 93       	push	r26
 a70:	bf 93       	push	r27
 a72:	ef 93       	push	r30
 a74:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
 a76:	80 91 0e 01 	lds	r24, 0x010E
 a7a:	90 91 0f 01 	lds	r25, 0x010F
 a7e:	89 2b       	or	r24, r25
 a80:	29 f0       	breq	.+10     	; 0xa8c <__vector_9+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
 a82:	e0 91 0e 01 	lds	r30, 0x010E
 a86:	f0 91 0f 01 	lds	r31, 0x010F
 a8a:	09 95       	icall
}
 a8c:	ff 91       	pop	r31
 a8e:	ef 91       	pop	r30
 a90:	bf 91       	pop	r27
 a92:	af 91       	pop	r26
 a94:	9f 91       	pop	r25
 a96:	8f 91       	pop	r24
 a98:	7f 91       	pop	r23
 a9a:	6f 91       	pop	r22
 a9c:	5f 91       	pop	r21
 a9e:	4f 91       	pop	r20
 aa0:	3f 91       	pop	r19
 aa2:	2f 91       	pop	r18
 aa4:	0f 90       	pop	r0
 aa6:	0f be       	out	0x3f, r0	; 63
 aa8:	0f 90       	pop	r0
 aaa:	1f 90       	pop	r1
 aac:	18 95       	reti

00000aae <__vector_10>:

//! Interrupt handler for OutputCompare2B match (OC2B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMPB_vect)
{
 aae:	1f 92       	push	r1
 ab0:	0f 92       	push	r0
 ab2:	0f b6       	in	r0, 0x3f	; 63
 ab4:	0f 92       	push	r0
 ab6:	11 24       	eor	r1, r1
 ab8:	2f 93       	push	r18
 aba:	3f 93       	push	r19
 abc:	4f 93       	push	r20
 abe:	5f 93       	push	r21
 ac0:	6f 93       	push	r22
 ac2:	7f 93       	push	r23
 ac4:	8f 93       	push	r24
 ac6:	9f 93       	push	r25
 ac8:	af 93       	push	r26
 aca:	bf 93       	push	r27
 acc:	ef 93       	push	r30
 ace:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
 ad0:	80 91 0e 01 	lds	r24, 0x010E
 ad4:	90 91 0f 01 	lds	r25, 0x010F
 ad8:	89 2b       	or	r24, r25
 ada:	29 f0       	breq	.+10     	; 0xae6 <__vector_10+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
 adc:	e0 91 0e 01 	lds	r30, 0x010E
 ae0:	f0 91 0f 01 	lds	r31, 0x010F
 ae4:	09 95       	icall
}
 ae6:	ff 91       	pop	r31
 ae8:	ef 91       	pop	r30
 aea:	bf 91       	pop	r27
 aec:	af 91       	pop	r26
 aee:	9f 91       	pop	r25
 af0:	8f 91       	pop	r24
 af2:	7f 91       	pop	r23
 af4:	6f 91       	pop	r22
 af6:	5f 91       	pop	r21
 af8:	4f 91       	pop	r20
 afa:	3f 91       	pop	r19
 afc:	2f 91       	pop	r18
 afe:	0f 90       	pop	r0
 b00:	0f be       	out	0x3f, r0	; 63
 b02:	0f 90       	pop	r0
 b04:	1f 90       	pop	r1
 b06:	18 95       	reti

00000b08 <uartInitBuffers>:
void uartSendTxBuffer(void)
{
	// turn on buffered transmit
	uartBufferedTx = TRUE;
	// send the first byte to get things going by interrupts
	uartSendByte(bufferGetFromFront(&uartTxBuffer));
 b08:	40 e4       	ldi	r20, 0x40	; 64
 b0a:	50 e0       	ldi	r21, 0x00	; 0
 b0c:	62 e5       	ldi	r22, 0x52	; 82
 b0e:	71 e0       	ldi	r23, 0x01	; 1
 b10:	85 ea       	ldi	r24, 0xA5	; 165
 b12:	91 e0       	ldi	r25, 0x01	; 1
 b14:	e9 db       	rcall	.-2094   	; 0x2e8 <bufferInit>
 b16:	40 e4       	ldi	r20, 0x40	; 64
 b18:	50 e0       	ldi	r21, 0x00	; 0
 b1a:	62 e1       	ldi	r22, 0x12	; 18
 b1c:	71 e0       	ldi	r23, 0x01	; 1
 b1e:	8e ea       	ldi	r24, 0xAE	; 174
 b20:	91 e0       	ldi	r25, 0x01	; 1
 b22:	e2 cb       	rjmp	.-2108   	; 0x2e8 <bufferInit>

00000b24 <uartInit>:
 b24:	f1 df       	rcall	.-30     	; 0xb08 <uartInitBuffers>
 b26:	10 92 11 01 	sts	0x0111, r1
 b2a:	10 92 10 01 	sts	0x0110, r1
 b2e:	88 ed       	ldi	r24, 0xD8	; 216
 b30:	80 93 c1 00 	sts	0x00C1, r24
 b34:	83 e3       	ldi	r24, 0x33	; 51
 b36:	80 93 c4 00 	sts	0x00C4, r24
 b3a:	10 92 c5 00 	sts	0x00C5, r1
 b3e:	8f ef       	ldi	r24, 0xFF	; 255
 b40:	80 93 a4 01 	sts	0x01A4, r24
 b44:	10 92 ad 01 	sts	0x01AD, r1
 b48:	10 92 b7 01 	sts	0x01B7, r1
 b4c:	10 92 b6 01 	sts	0x01B6, r1
 b50:	78 94       	sei
 b52:	08 95       	ret

00000b54 <uartSetBaudRate>:
 b54:	0f 93       	push	r16
 b56:	1f 93       	push	r17
 b58:	8b 01       	movw	r16, r22
 b5a:	9c 01       	movw	r18, r24
 b5c:	dc 01       	movw	r26, r24
 b5e:	cb 01       	movw	r24, r22
 b60:	80 5c       	subi	r24, 0xC0	; 192
 b62:	9d 4b       	sbci	r25, 0xBD	; 189
 b64:	a0 4f       	sbci	r26, 0xF0	; 240
 b66:	bf 4f       	sbci	r27, 0xFF	; 255
 b68:	bc 01       	movw	r22, r24
 b6a:	cd 01       	movw	r24, r26
 b6c:	43 e0       	ldi	r20, 0x03	; 3
 b6e:	66 0f       	add	r22, r22
 b70:	77 1f       	adc	r23, r23
 b72:	88 1f       	adc	r24, r24
 b74:	99 1f       	adc	r25, r25
 b76:	4a 95       	dec	r20
 b78:	d1 f7       	brne	.-12     	; 0xb6e <uartSetBaudRate+0x1a>
 b7a:	a9 01       	movw	r20, r18
 b7c:	98 01       	movw	r18, r16
 b7e:	e4 e0       	ldi	r30, 0x04	; 4
 b80:	22 0f       	add	r18, r18
 b82:	33 1f       	adc	r19, r19
 b84:	44 1f       	adc	r20, r20
 b86:	55 1f       	adc	r21, r21
 b88:	ea 95       	dec	r30
 b8a:	d1 f7       	brne	.-12     	; 0xb80 <uartSetBaudRate+0x2c>
 b8c:	fd d1       	rcall	.+1018   	; 0xf88 <__udivmodsi4>
 b8e:	21 50       	subi	r18, 0x01	; 1
 b90:	31 09       	sbc	r19, r1
 b92:	20 93 c4 00 	sts	0x00C4, r18
 b96:	30 93 c5 00 	sts	0x00C5, r19
 b9a:	1f 91       	pop	r17
 b9c:	0f 91       	pop	r16
 b9e:	08 95       	ret

00000ba0 <uartSendByte>:
 ba0:	90 91 a4 01 	lds	r25, 0x01A4
 ba4:	99 23       	and	r25, r25
 ba6:	e1 f3       	breq	.-8      	; 0xba0 <uartSendByte>
 ba8:	80 93 c6 00 	sts	0x00C6, r24
 bac:	10 92 a4 01 	sts	0x01A4, r1
 bb0:	08 95       	ret

00000bb2 <__vector_22>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_TRANS)
{
 bb2:	1f 92       	push	r1
 bb4:	0f 92       	push	r0
 bb6:	0f b6       	in	r0, 0x3f	; 63
 bb8:	0f 92       	push	r0
 bba:	11 24       	eor	r1, r1
 bbc:	2f 93       	push	r18
 bbe:	3f 93       	push	r19
 bc0:	4f 93       	push	r20
 bc2:	5f 93       	push	r21
 bc4:	6f 93       	push	r22
 bc6:	7f 93       	push	r23
 bc8:	8f 93       	push	r24
 bca:	9f 93       	push	r25
 bcc:	af 93       	push	r26
 bce:	bf 93       	push	r27
 bd0:	ef 93       	push	r30
 bd2:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
 bd4:	80 91 ad 01 	lds	r24, 0x01AD
 bd8:	88 23       	and	r24, r24
 bda:	71 f0       	breq	.+28     	; 0xbf8 <__vector_22+0x46>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
 bdc:	80 91 b2 01 	lds	r24, 0x01B2
 be0:	90 91 b3 01 	lds	r25, 0x01B3
 be4:	89 2b       	or	r24, r25
 be6:	31 f0       	breq	.+12     	; 0xbf4 <__vector_22+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
 be8:	8e ea       	ldi	r24, 0xAE	; 174
 bea:	91 e0       	ldi	r25, 0x01	; 1
 bec:	8a db       	rcall	.-2284   	; 0x302 <bufferGetFromFront>
 bee:	80 93 c6 00 	sts	0x00C6, r24
 bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__vector_22+0x4c>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
 bf4:	10 92 ad 01 	sts	0x01AD, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
 bf8:	8f ef       	ldi	r24, 0xFF	; 255
 bfa:	80 93 a4 01 	sts	0x01A4, r24
	}
}
 bfe:	ff 91       	pop	r31
 c00:	ef 91       	pop	r30
 c02:	bf 91       	pop	r27
 c04:	af 91       	pop	r26
 c06:	9f 91       	pop	r25
 c08:	8f 91       	pop	r24
 c0a:	7f 91       	pop	r23
 c0c:	6f 91       	pop	r22
 c0e:	5f 91       	pop	r21
 c10:	4f 91       	pop	r20
 c12:	3f 91       	pop	r19
 c14:	2f 91       	pop	r18
 c16:	0f 90       	pop	r0
 c18:	0f be       	out	0x3f, r0	; 63
 c1a:	0f 90       	pop	r0
 c1c:	1f 90       	pop	r1
 c1e:	18 95       	reti

00000c20 <__vector_20>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_RECV)
{
 c20:	1f 92       	push	r1
 c22:	0f 92       	push	r0
 c24:	0f b6       	in	r0, 0x3f	; 63
 c26:	0f 92       	push	r0
 c28:	11 24       	eor	r1, r1
 c2a:	2f 93       	push	r18
 c2c:	3f 93       	push	r19
 c2e:	4f 93       	push	r20
 c30:	5f 93       	push	r21
 c32:	6f 93       	push	r22
 c34:	7f 93       	push	r23
 c36:	8f 93       	push	r24
 c38:	9f 93       	push	r25
 c3a:	af 93       	push	r26
 c3c:	bf 93       	push	r27
 c3e:	ef 93       	push	r30
 c40:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
 c42:	80 91 c6 00 	lds	r24, 0x00C6

	// if there's a user function to handle this receive event
	if(UartRxFunc)
 c46:	20 91 10 01 	lds	r18, 0x0110
 c4a:	30 91 11 01 	lds	r19, 0x0111
 c4e:	23 2b       	or	r18, r19
 c50:	31 f0       	breq	.+12     	; 0xc5e <__vector_20+0x3e>
	{
		// call it and pass the received data
		UartRxFunc(c);
 c52:	e0 91 10 01 	lds	r30, 0x0110
 c56:	f0 91 11 01 	lds	r31, 0x0111
 c5a:	09 95       	icall
 c5c:	0f c0       	rjmp	.+30     	; 0xc7c <__vector_20+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
 c5e:	68 2f       	mov	r22, r24
 c60:	85 ea       	ldi	r24, 0xA5	; 165
 c62:	91 e0       	ldi	r25, 0x01	; 1
 c64:	72 db       	rcall	.-2332   	; 0x34a <bufferAddToEnd>
 c66:	81 11       	cpse	r24, r1
 c68:	09 c0       	rjmp	.+18     	; 0xc7c <__vector_20+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
 c6a:	80 91 b6 01 	lds	r24, 0x01B6
 c6e:	90 91 b7 01 	lds	r25, 0x01B7
 c72:	01 96       	adiw	r24, 0x01	; 1
 c74:	90 93 b7 01 	sts	0x01B7, r25
 c78:	80 93 b6 01 	sts	0x01B6, r24
		}
	}
}
 c7c:	ff 91       	pop	r31
 c7e:	ef 91       	pop	r30
 c80:	bf 91       	pop	r27
 c82:	af 91       	pop	r26
 c84:	9f 91       	pop	r25
 c86:	8f 91       	pop	r24
 c88:	7f 91       	pop	r23
 c8a:	6f 91       	pop	r22
 c8c:	5f 91       	pop	r21
 c8e:	4f 91       	pop	r20
 c90:	3f 91       	pop	r19
 c92:	2f 91       	pop	r18
 c94:	0f 90       	pop	r0
 c96:	0f be       	out	0x3f, r0	; 63
 c98:	0f 90       	pop	r0
 c9a:	1f 90       	pop	r1
 c9c:	18 95       	reti

00000c9e <ButtonInit>:
*********************************************************************************************************
*/

void ButtonInit(void)
{
	DDRD  &= ~((1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3));	/* Set PD6-PD3 as input */
 c9e:	8a b1       	in	r24, 0x0a	; 10
 ca0:	87 78       	andi	r24, 0x87	; 135
 ca2:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PD6) | (1<<PD5) | (1<<PD4) | (1<<PD3);			/* Set PD6-PD3 as internal pull up */
 ca4:	8b b1       	in	r24, 0x0b	; 11
 ca6:	88 67       	ori	r24, 0x78	; 120
 ca8:	8b b9       	out	0x0b, r24	; 11
	
	/* 
	Set PC7-PC4 as input as internal pull up
	Set PC3-PC0 as Tri-state (Hi-Z) 
	*/
	DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 caa:	17 b8       	out	0x07, r1	; 7
	PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 cac:	80 ef       	ldi	r24, 0xF0	; 240
 cae:	88 b9       	out	0x08, r24	; 8
 cb0:	08 95       	ret

00000cb2 <ButtonCycleUpdate>:
*
*********************************************************************************************************
*/

void ButtonCycleUpdate(void)
{
 cb2:	cf 92       	push	r12
 cb4:	df 92       	push	r13
 cb6:	ef 92       	push	r14
 cb8:	ff 92       	push	r15
 cba:	0f 93       	push	r16
 cbc:	1f 93       	push	r17
 cbe:	cf 93       	push	r28
 cc0:	df 93       	push	r29
	ButtonDataType io_state = 0;
	ButtonDataType tempValue;
	ButtonDataType MatrixButtonValue;
	uint8_t Col;
	
	tempValue = (~PIND) & ((1<<PIND6) | (1<<PIND5) | (1<<PIND4) | (1<<PIND3));	/* Get PD6-PD3 IO state */
 cc2:	89 b1       	in	r24, 0x09	; 9
 cc4:	90 e0       	ldi	r25, 0x00	; 0
 cc6:	80 95       	com	r24
 cc8:	90 95       	com	r25
 cca:	88 77       	andi	r24, 0x78	; 120
 ccc:	99 27       	eor	r25, r25
 cce:	09 2e       	mov	r0, r25
 cd0:	00 0c       	add	r0, r0
 cd2:	aa 0b       	sbc	r26, r26
 cd4:	bb 0b       	sbc	r27, r27
	tempValue >>= 3;	/* right rotate to low 4 bits location */
 cd6:	73 e0       	ldi	r23, 0x03	; 3
 cd8:	b6 95       	lsr	r27
 cda:	a7 95       	ror	r26
 cdc:	97 95       	ror	r25
 cde:	87 95       	ror	r24
 ce0:	7a 95       	dec	r23
 ce2:	d1 f7       	brne	.-12     	; 0xcd8 <ButtonCycleUpdate+0x26>
 ce4:	e0 e0       	ldi	r30, 0x00	; 0
 ce6:	f0 e0       	ldi	r31, 0x00	; 0
	
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
 ce8:	40 e0       	ldi	r20, 0x00	; 0
 cea:	50 e0       	ldi	r21, 0x00	; 0
 cec:	ba 01       	movw	r22, r20
		/* 
		Set PC7-PC4 as input as internal pull up
		Set PC3-PC0 as Tri-state (Hi-Z)
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 cee:	10 ef       	ldi	r17, 0xF0	; 240
	
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
 cf0:	c8 e0       	ldi	r28, 0x08	; 8
 cf2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		/* 
		Set PC7-PC4 as input as internal pull up
		Set PC3-PC0 as Tri-state (Hi-Z)
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 cf4:	17 b8       	out	0x07, r1	; 7
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 cf6:	18 b9       	out	0x08, r17	; 8
	
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
 cf8:	07 b1       	in	r16, 0x07	; 7
 cfa:	9e 01       	movw	r18, r28
 cfc:	0e 2e       	mov	r0, r30
 cfe:	02 c0       	rjmp	.+4      	; 0xd04 <ButtonCycleUpdate+0x52>
 d00:	35 95       	asr	r19
 d02:	27 95       	ror	r18
 d04:	0a 94       	dec	r0
 d06:	e2 f7       	brpl	.-8      	; 0xd00 <ButtonCycleUpdate+0x4e>
 d08:	30 2f       	mov	r19, r16
 d0a:	32 2b       	or	r19, r18
 d0c:	37 b9       	out	0x07, r19	; 7
		PORTC &= ~(0x08>>Col);		/* Set the column as low */
 d0e:	38 b1       	in	r19, 0x08	; 8
 d10:	20 95       	com	r18
 d12:	23 23       	and	r18, r19
 d14:	28 b9       	out	0x08, r18	; 8
		
		/* read and save button state after the column which active as low */
		MatrixButtonValue <<= 4;	/* newer 4 button state store in lower four bits */
 d16:	6a 01       	movw	r12, r20
 d18:	7b 01       	movw	r14, r22
 d1a:	34 e0       	ldi	r19, 0x04	; 4
 d1c:	cc 0c       	add	r12, r12
 d1e:	dd 1c       	adc	r13, r13
 d20:	ee 1c       	adc	r14, r14
 d22:	ff 1c       	adc	r15, r15
 d24:	3a 95       	dec	r19
 d26:	d1 f7       	brne	.-12     	; 0xd1c <ButtonCycleUpdate+0x6a>
		MatrixButtonValue |= ((~PINC) & 0x00f0) >> 4;
 d28:	26 b1       	in	r18, 0x06	; 6
 d2a:	30 e0       	ldi	r19, 0x00	; 0
 d2c:	20 95       	com	r18
 d2e:	30 95       	com	r19
 d30:	20 7f       	andi	r18, 0xF0	; 240
 d32:	33 27       	eor	r19, r19
 d34:	a9 01       	movw	r20, r18
 d36:	64 e0       	ldi	r22, 0x04	; 4
 d38:	55 95       	asr	r21
 d3a:	47 95       	ror	r20
 d3c:	6a 95       	dec	r22
 d3e:	e1 f7       	brne	.-8      	; 0xd38 <ButtonCycleUpdate+0x86>
 d40:	05 2e       	mov	r0, r21
 d42:	00 0c       	add	r0, r0
 d44:	66 0b       	sbc	r22, r22
 d46:	77 0b       	sbc	r23, r23
 d48:	4c 29       	or	r20, r12
 d4a:	5d 29       	or	r21, r13
 d4c:	6e 29       	or	r22, r14
 d4e:	7f 29       	or	r23, r15
 d50:	31 96       	adiw	r30, 0x01	; 1
	uint8_t Col;
	
	tempValue = (~PIND) & ((1<<PIND6) | (1<<PIND5) | (1<<PIND4) | (1<<PIND3));	/* Get PD6-PD3 IO state */
	tempValue >>= 3;	/* right rotate to low 4 bits location */
	
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
 d52:	e4 30       	cpi	r30, 0x04	; 4
 d54:	f1 05       	cpc	r31, r1
 d56:	71 f6       	brne	.-100    	; 0xcf4 <ButtonCycleUpdate+0x42>
		/* read and save button state after the column which active as low */
		MatrixButtonValue <<= 4;	/* newer 4 button state store in lower four bits */
		MatrixButtonValue |= ((~PINC) & 0x00f0) >> 4;
	}
	
	io_state = (tempValue << 16) | MatrixButtonValue;
 d58:	dc 01       	movw	r26, r24
 d5a:	99 27       	eor	r25, r25
 d5c:	88 27       	eor	r24, r24
 d5e:	00 91 b8 01 	lds	r16, 0x01B8
 d62:	10 91 b9 01 	lds	r17, 0x01B9
 d66:	20 91 ba 01 	lds	r18, 0x01BA
 d6a:	30 91 bb 01 	lds	r19, 0x01BB
 d6e:	80 2b       	or	r24, r16
 d70:	91 2b       	or	r25, r17
 d72:	a2 2b       	or	r26, r18
 d74:	b3 2b       	or	r27, r19
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
 d76:	48 2b       	or	r20, r24
 d78:	59 2b       	or	r21, r25
 d7a:	6a 2b       	or	r22, r26
 d7c:	7b 2b       	or	r23, r27
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
 d7e:	10 92 b8 01 	sts	0x01B8, r1
 d82:	10 92 b9 01 	sts	0x01B9, r1
 d86:	10 92 ba 01 	sts	0x01BA, r1
 d8a:	10 92 bb 01 	sts	0x01BB, r1
	b = button.buttonsLastCycle.bVal;
 d8e:	80 91 bc 01 	lds	r24, 0x01BC
 d92:	90 91 bd 01 	lds	r25, 0x01BD
 d96:	a0 91 be 01 	lds	r26, 0x01BE
 d9a:	b0 91 bf 01 	lds	r27, 0x01BF
	holdTime = button.buttonHoldTime;
 d9e:	20 91 d0 01 	lds	r18, 0x01D0
 da2:	30 91 d1 01 	lds	r19, 0x01D1
	
	if (button.buttonsReleased.bVal != 0) {		
 da6:	c0 90 c0 01 	lds	r12, 0x01C0
 daa:	d0 90 c1 01 	lds	r13, 0x01C1
 dae:	e0 90 c2 01 	lds	r14, 0x01C2
 db2:	f0 90 c3 01 	lds	r15, 0x01C3
 db6:	c1 14       	cp	r12, r1
 db8:	d1 04       	cpc	r13, r1
 dba:	e1 04       	cpc	r14, r1
 dbc:	f1 04       	cpc	r15, r1
 dbe:	49 f0       	breq	.+18     	; 0xdd2 <ButtonCycleUpdate+0x120>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
 dc0:	c0 92 c8 01 	sts	0x01C8, r12
 dc4:	d0 92 c9 01 	sts	0x01C9, r13
 dc8:	e0 92 ca 01 	sts	0x01CA, r14
 dcc:	f0 92 cb 01 	sts	0x01CB, r15
 dd0:	0b c0       	rjmp	.+22     	; 0xde8 <ButtonCycleUpdate+0x136>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
 dd2:	2d 33       	cpi	r18, 0x3D	; 61
 dd4:	31 05       	cpc	r19, r1
 dd6:	40 f0       	brcs	.+16     	; 0xde8 <ButtonCycleUpdate+0x136>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
 dd8:	10 92 c8 01 	sts	0x01C8, r1
 ddc:	10 92 c9 01 	sts	0x01C9, r1
 de0:	10 92 ca 01 	sts	0x01CA, r1
 de4:	10 92 cb 01 	sts	0x01CB, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
 de8:	10 92 c0 01 	sts	0x01C0, r1
 dec:	10 92 c1 01 	sts	0x01C1, r1
 df0:	10 92 c2 01 	sts	0x01C2, r1
 df4:	10 92 c3 01 	sts	0x01C3, r1
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
 df8:	10 92 cc 01 	sts	0x01CC, r1
 dfc:	10 92 cd 01 	sts	0x01CD, r1
 e00:	10 92 ce 01 	sts	0x01CE, r1
 e04:	10 92 cf 01 	sts	0x01CF, r1
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
 e08:	48 17       	cp	r20, r24
 e0a:	59 07       	cpc	r21, r25
 e0c:	6a 07       	cpc	r22, r26
 e0e:	7b 07       	cpc	r23, r27
 e10:	d9 f4       	brne	.+54     	; 0xe48 <ButtonCycleUpdate+0x196>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
 e12:	2f 5f       	subi	r18, 0xFF	; 255
 e14:	3f 4f       	sbci	r19, 0xFF	; 255
 e16:	24 32       	cpi	r18, 0x24	; 36
 e18:	31 05       	cpc	r19, r1
 e1a:	48 f4       	brcc	.+18     	; 0xe2e <ButtonCycleUpdate+0x17c>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
 e1c:	10 92 c4 01 	sts	0x01C4, r1
 e20:	10 92 c5 01 	sts	0x01C5, r1
 e24:	10 92 c6 01 	sts	0x01C6, r1
 e28:	10 92 c7 01 	sts	0x01C7, r1
 e2c:	08 c0       	rjmp	.+16     	; 0xe3e <ButtonCycleUpdate+0x18c>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
 e2e:	40 93 c4 01 	sts	0x01C4, r20
 e32:	50 93 c5 01 	sts	0x01C5, r21
 e36:	60 93 c6 01 	sts	0x01C6, r22
 e3a:	70 93 c7 01 	sts	0x01C7, r23
		}	
		button.buttonHoldTime = holdTime;
 e3e:	30 93 d1 01 	sts	0x01D1, r19
 e42:	20 93 d0 01 	sts	0x01D0, r18
 e46:	45 c0       	rjmp	.+138    	; 0xed2 <ButtonCycleUpdate+0x220>
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
 e48:	40 93 bc 01 	sts	0x01BC, r20
 e4c:	50 93 bd 01 	sts	0x01BD, r21
 e50:	60 93 be 01 	sts	0x01BE, r22
 e54:	70 93 bf 01 	sts	0x01BF, r23
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
 e58:	40 95       	com	r20
 e5a:	50 95       	com	r21
 e5c:	60 95       	com	r22
 e5e:	70 95       	com	r23
 e60:	48 23       	and	r20, r24
 e62:	59 23       	and	r21, r25
 e64:	6a 23       	and	r22, r26
 e66:	7b 23       	and	r23, r27
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
 e68:	80 91 c4 01 	lds	r24, 0x01C4
 e6c:	90 91 c5 01 	lds	r25, 0x01C5
 e70:	a0 91 c6 01 	lds	r26, 0x01C6
 e74:	b0 91 c7 01 	lds	r27, 0x01C7
 e78:	84 23       	and	r24, r20
 e7a:	95 23       	and	r25, r21
 e7c:	a6 23       	and	r26, r22
 e7e:	b7 23       	and	r27, r23
 e80:	89 2b       	or	r24, r25
 e82:	8a 2b       	or	r24, r26
 e84:	8b 2b       	or	r24, r27
 e86:	29 f5       	brne	.+74     	; 0xed2 <ButtonCycleUpdate+0x220>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
 e88:	10 92 d1 01 	sts	0x01D1, r1
 e8c:	10 92 d0 01 	sts	0x01D0, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
 e90:	23 50       	subi	r18, 0x03	; 3
 e92:	31 09       	sbc	r19, r1
 e94:	20 32       	cpi	r18, 0x20	; 32
 e96:	31 05       	cpc	r19, r1
 e98:	e0 f4       	brcc	.+56     	; 0xed2 <ButtonCycleUpdate+0x220>
				button.buttonsReleased.bVal = buttons;	
 e9a:	40 93 c0 01 	sts	0x01C0, r20
 e9e:	50 93 c1 01 	sts	0x01C1, r21
 ea2:	60 93 c2 01 	sts	0x01C2, r22
 ea6:	70 93 c3 01 	sts	0x01C3, r23
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
 eaa:	80 91 c8 01 	lds	r24, 0x01C8
 eae:	90 91 c9 01 	lds	r25, 0x01C9
 eb2:	a0 91 ca 01 	lds	r26, 0x01CA
 eb6:	b0 91 cb 01 	lds	r27, 0x01CB
 eba:	48 23       	and	r20, r24
 ebc:	59 23       	and	r21, r25
 ebe:	6a 23       	and	r22, r26
 ec0:	7b 23       	and	r23, r27
 ec2:	40 93 cc 01 	sts	0x01CC, r20
 ec6:	50 93 cd 01 	sts	0x01CD, r21
 eca:	60 93 ce 01 	sts	0x01CE, r22
 ece:	70 93 cf 01 	sts	0x01CF, r23
													button.buttonsReleasedHistory.bVal;
			}       
		}
	}
}
 ed2:	df 91       	pop	r29
 ed4:	cf 91       	pop	r28
 ed6:	1f 91       	pop	r17
 ed8:	0f 91       	pop	r16
 eda:	ff 90       	pop	r15
 edc:	ef 90       	pop	r14
 ede:	df 90       	pop	r13
 ee0:	cf 90       	pop	r12
 ee2:	08 95       	ret

00000ee4 <McuInit>:

void McuInit(void)
{
	// initialize our libraries
	// initialize the UART (serial port)
	uartInit();		/* sei() call in the function */
 ee4:	1f de       	rcall	.-962    	; 0xb24 <uartInit>
	// set the baud rate of the UART for our debug/reporting output
	uartSetBaudRate(9600);
 ee6:	60 e8       	ldi	r22, 0x80	; 128
 ee8:	75 e2       	ldi	r23, 0x25	; 37
 eea:	80 e0       	ldi	r24, 0x00	; 0
 eec:	90 e0       	ldi	r25, 0x00	; 0
 eee:	32 de       	rcall	.-924    	; 0xb54 <uartSetBaudRate>
	// initialize rprintf system
	rprintfInit(uartSendByte);
 ef0:	80 ed       	ldi	r24, 0xD0	; 208
 ef2:	95 e0       	ldi	r25, 0x05	; 5
 ef4:	b2 cb       	rjmp	.-2204   	; 0x65a <rprintfInit>

00000ef6 <ApplInit>:
*********************************************************************************************************
*/

void ApplInit(void)
{
	ButtonInit();
 ef6:	d3 de       	rcall	.-602    	; 0xc9e <ButtonInit>
	
	glcdInit();	/* Need connect to LCD device because MCU will check lcd busy or not will cause waiting */
 ef8:	a7 db       	rcall	.-2226   	; 0x648 <glcdInit>
	
	glcdWriteChar('H');
 efa:	88 e4       	ldi	r24, 0x48	; 72
 efc:	90 e0       	ldi	r25, 0x00	; 0
 efe:	45 da       	rcall	.-2934   	; 0x38a <glcdWriteChar>
	glcdWriteChar('E');
 f00:	85 e4       	ldi	r24, 0x45	; 69
 f02:	90 e0       	ldi	r25, 0x00	; 0
 f04:	42 da       	rcall	.-2940   	; 0x38a <glcdWriteChar>
	glcdWriteChar('L');
 f06:	8c e4       	ldi	r24, 0x4C	; 76
 f08:	90 e0       	ldi	r25, 0x00	; 0
 f0a:	3f da       	rcall	.-2946   	; 0x38a <glcdWriteChar>
	glcdWriteChar('L');
 f0c:	8c e4       	ldi	r24, 0x4C	; 76
 f0e:	90 e0       	ldi	r25, 0x00	; 0
 f10:	3c da       	rcall	.-2952   	; 0x38a <glcdWriteChar>
	glcdWriteChar('O');
 f12:	8f e4       	ldi	r24, 0x4F	; 79
 f14:	90 e0       	ldi	r25, 0x00	; 0
 f16:	39 da       	rcall	.-2958   	; 0x38a <glcdWriteChar>

	// Just print message for debug.
	rprintf("RF remote start!\n" );	
 f18:	8e e9       	ldi	r24, 0x9E	; 158
 f1a:	92 e0       	ldi	r25, 0x02	; 2
 f1c:	9f 93       	push	r25
 f1e:	8f 93       	push	r24
 f20:	81 e0       	ldi	r24, 0x01	; 1
 f22:	8f 93       	push	r24
 f24:	b7 db       	rcall	.-2194   	; 0x694 <rprintf1RamRom>
 f26:	0f 90       	pop	r0
 f28:	0f 90       	pop	r0
 f2a:	0f 90       	pop	r0
 f2c:	08 95       	ret

00000f2e <AppCycleUpdate>:
		//rputchar("\n");
		
	}
	
	//rprintfChar('a');
	glcdWriteChar('A');
 f2e:	81 e4       	ldi	r24, 0x41	; 65
 f30:	90 e0       	ldi	r25, 0x00	; 0
 f32:	2b da       	rcall	.-2986   	; 0x38a <glcdWriteChar>
	rprintf("\r\n\n\nWelcome to the timer library test program!\r\n");
 f34:	8d e6       	ldi	r24, 0x6D	; 109
 f36:	92 e0       	ldi	r25, 0x02	; 2
 f38:	9f 93       	push	r25
 f3a:	8f 93       	push	r24
 f3c:	81 e0       	ldi	r24, 0x01	; 1
 f3e:	8f 93       	push	r24
 f40:	a9 db       	rcall	.-2222   	; 0x694 <rprintf1RamRom>
 f42:	0f 90       	pop	r0
 f44:	0f 90       	pop	r0
 f46:	0f 90       	pop	r0
 f48:	08 95       	ret

00000f4a <main>:
int main(void)
{	
	/*
	Calll all initial function
	*/
	McuInit();
 f4a:	cc df       	rcall	.-104    	; 0xee4 <McuInit>
	ApplInit();
 f4c:	d4 df       	rcall	.-88     	; 0xef6 <ApplInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 f4e:	8f e3       	ldi	r24, 0x3F	; 63
 f50:	9c e9       	ldi	r25, 0x9C	; 156
 f52:	01 97       	sbiw	r24, 0x01	; 1
 f54:	f1 f7       	brne	.-4      	; 0xf52 <main+0x8>
 f56:	00 c0       	rjmp	.+0      	; 0xf58 <main+0xe>
 f58:	00 00       	nop
	
	while(1)
	{
		_delay_ms(20);
		ButtonCycleUpdate();
 f5a:	ab de       	rcall	.-682    	; 0xcb2 <ButtonCycleUpdate>
		AppCycleUpdate();
 f5c:	e8 df       	rcall	.-48     	; 0xf2e <AppCycleUpdate>
	}
 f5e:	f7 cf       	rjmp	.-18     	; 0xf4e <main+0x4>

00000f60 <__udivmodhi4>:
 f60:	aa 1b       	sub	r26, r26
 f62:	bb 1b       	sub	r27, r27
 f64:	51 e1       	ldi	r21, 0x11	; 17
 f66:	07 c0       	rjmp	.+14     	; 0xf76 <__udivmodhi4_ep>

00000f68 <__udivmodhi4_loop>:
 f68:	aa 1f       	adc	r26, r26
 f6a:	bb 1f       	adc	r27, r27
 f6c:	a6 17       	cp	r26, r22
 f6e:	b7 07       	cpc	r27, r23
 f70:	10 f0       	brcs	.+4      	; 0xf76 <__udivmodhi4_ep>
 f72:	a6 1b       	sub	r26, r22
 f74:	b7 0b       	sbc	r27, r23

00000f76 <__udivmodhi4_ep>:
 f76:	88 1f       	adc	r24, r24
 f78:	99 1f       	adc	r25, r25
 f7a:	5a 95       	dec	r21
 f7c:	a9 f7       	brne	.-22     	; 0xf68 <__udivmodhi4_loop>
 f7e:	80 95       	com	r24
 f80:	90 95       	com	r25
 f82:	bc 01       	movw	r22, r24
 f84:	cd 01       	movw	r24, r26
 f86:	08 95       	ret

00000f88 <__udivmodsi4>:
 f88:	a1 e2       	ldi	r26, 0x21	; 33
 f8a:	1a 2e       	mov	r1, r26
 f8c:	aa 1b       	sub	r26, r26
 f8e:	bb 1b       	sub	r27, r27
 f90:	fd 01       	movw	r30, r26
 f92:	0d c0       	rjmp	.+26     	; 0xfae <__udivmodsi4_ep>

00000f94 <__udivmodsi4_loop>:
 f94:	aa 1f       	adc	r26, r26
 f96:	bb 1f       	adc	r27, r27
 f98:	ee 1f       	adc	r30, r30
 f9a:	ff 1f       	adc	r31, r31
 f9c:	a2 17       	cp	r26, r18
 f9e:	b3 07       	cpc	r27, r19
 fa0:	e4 07       	cpc	r30, r20
 fa2:	f5 07       	cpc	r31, r21
 fa4:	20 f0       	brcs	.+8      	; 0xfae <__udivmodsi4_ep>
 fa6:	a2 1b       	sub	r26, r18
 fa8:	b3 0b       	sbc	r27, r19
 faa:	e4 0b       	sbc	r30, r20
 fac:	f5 0b       	sbc	r31, r21

00000fae <__udivmodsi4_ep>:
 fae:	66 1f       	adc	r22, r22
 fb0:	77 1f       	adc	r23, r23
 fb2:	88 1f       	adc	r24, r24
 fb4:	99 1f       	adc	r25, r25
 fb6:	1a 94       	dec	r1
 fb8:	69 f7       	brne	.-38     	; 0xf94 <__udivmodsi4_loop>
 fba:	60 95       	com	r22
 fbc:	70 95       	com	r23
 fbe:	80 95       	com	r24
 fc0:	90 95       	com	r25
 fc2:	9b 01       	movw	r18, r22
 fc4:	ac 01       	movw	r20, r24
 fc6:	bd 01       	movw	r22, r26
 fc8:	cf 01       	movw	r24, r30
 fca:	08 95       	ret

00000fcc <_exit>:
 fcc:	f8 94       	cli

00000fce <__stop_program>:
 fce:	ff cf       	rjmp	.-2      	; 0xfce <__stop_program>
