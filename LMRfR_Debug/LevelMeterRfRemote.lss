
LevelMeterRfRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000015c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001554  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b2  00800100  00800100  000015c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014d1  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000627  00000000  00000000  00002db9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a74  00000000  00000000  000033e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c58  00000000  00000000  00003e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088f  00000000  00000000  00004aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a73  00000000  00000000  0000533b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00006dae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__ctors_end>
       4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
       8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
       c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      24:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__vector_9>
      28:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__vector_10>
      2c:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__vector_11>
      30:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__vector_12>
      34:	0c 94 04 07 	jmp	0xe08	; 0xe08 <__vector_13>
      38:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__vector_14>
      3c:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <__vector_15>
      40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      48:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__vector_18>
      4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      50:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <__vector_20>
      54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      58:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__vector_22>
      5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	30 31       	cpi	r19, 0x10	; 16
      7e:	32 33       	cpi	r19, 0x32	; 50
      80:	34 35       	cpi	r19, 0x54	; 84
      82:	36 37       	cpi	r19, 0x76	; 118
      84:	38 39       	cpi	r19, 0x98	; 152
      86:	41 42       	sbci	r20, 0x21	; 33
      88:	43 44       	sbci	r20, 0x43	; 67
      8a:	45 46       	sbci	r20, 0x65	; 101
	...

0000008d <TimerPrescaleFactor>:
      8d:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

00000099 <__c.1811>:
      99:	0d 0a 0a 0a 57 65 6c 63 6f 6d 65 20 74 6f 20 74     ....Welcome to t
      a9:	68 65 20 74 69 6d 65 72 20 6c 69 62 72 61 72 79     he timer library
      b9:	20 74 65 73 74 20 70 72 6f 67 72 61 6d 21 0d 0a      test program!..
	...

000000ca <__c.1813>:
      ca:	0d 0a 54 65 73 74 20 6f 66 20 74 69 6d 65 72 50     ..Test of timerP
      da:	61 75 73 65 28 29 20 66 75 6e 63 74 69 6f 6e 0d     ause() function.
      ea:	0a 00                                               ..

000000ec <__c.1815>:
      ec:	48 65 72 65 20 63 6f 6d 65 73 20 61 20 31 2f 32     Here comes a 1/2
      fc:	2d 73 65 63 6f 6e 64 20 64 65 6c 61 79 2e 2e 2e     -second delay...
     10c:	0d 0a 00                                            ...

0000010f <__c.1817>:
     10f:	44 6f 6e 65 21 0d 0a 00                             Done!...

00000117 <__c.1819>:
     117:	0d 0a 54 65 73 74 20 6f 66 20 74 69 6d 65 72 31     ..Test of timer1
     127:	20 50 57 4d 20 6f 75 74 70 75 74 0d 0a 00            PWM output...

00000135 <__c.1821>:
     135:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 74 69 6d     Initializing tim
     145:	65 72 31 20 66 6f 72 20 50 57 4d 0d 0a 00           er1 for PWM...

00000153 <__c.1823>:
     153:	54 75 72 6e 69 6e 67 20 6f 6e 20 74 69 6d 65 72     Turning on timer
     163:	31 20 63 68 61 6e 6e 65 6c 20 41 20 50 57 4d 20     1 channel A PWM 
     173:	6f 75 74 70 75 74 0d 0a 00                          output...

0000017c <__c.1825>:
     17c:	53 65 74 74 69 6e 67 20 64 75 74 79 20 63 79 63     Setting duty cyc
     18c:	6c 65 20 74 6f 20 32 35 25 25 0d 0a 00              le to 25%%...

00000199 <__c.1827>:
     199:	54 75 72 6e 69 6e 67 20 6f 6e 20 63 68 61 6e 6e     Turning on chann
     1a9:	65 6c 20 42 20 74 6f 6f 2c 20 77 69 74 68 20 37     el B too, with 7
     1b9:	35 25 25 20 64 75 74 79 0d 0a 00                    5%% duty...

000001c4 <__c.1829>:
     1c4:	50 61 75 73 65 20 66 6f 72 20 35 20 73 65 63 6f     Pause for 5 seco
     1d4:	6e 64 73 2e 2e 2e 0d 0a 00                          nds......

000001dd <__c.1831>:
     1dd:	54 75 72 6e 69 6e 67 20 6f 66 66 20 61 6c 6c 20     Turning off all 
     1ed:	50 57 4d 20 6f 6e 20 74 69 6d 65 72 31 0d 0a 00     PWM on timer1...
	...

000001fe <__ctors_end>:
     1fe:	11 24       	eor	r1, r1
     200:	1f be       	out	0x3f, r1	; 63
     202:	cf ef       	ldi	r28, 0xFF	; 255
     204:	d0 e1       	ldi	r29, 0x10	; 16
     206:	de bf       	out	0x3e, r29	; 62
     208:	cd bf       	out	0x3d, r28	; 61

0000020a <__do_copy_data>:
     20a:	11 e0       	ldi	r17, 0x01	; 1
     20c:	a0 e0       	ldi	r26, 0x00	; 0
     20e:	b1 e0       	ldi	r27, 0x01	; 1
     210:	e4 e5       	ldi	r30, 0x54	; 84
     212:	f5 e1       	ldi	r31, 0x15	; 21
     214:	02 c0       	rjmp	.+4      	; 0x21a <__do_copy_data+0x10>
     216:	05 90       	lpm	r0, Z+
     218:	0d 92       	st	X+, r0
     21a:	a0 30       	cpi	r26, 0x00	; 0
     21c:	b1 07       	cpc	r27, r17
     21e:	d9 f7       	brne	.-10     	; 0x216 <__do_copy_data+0xc>

00000220 <__do_clear_bss>:
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	a0 e0       	ldi	r26, 0x00	; 0
     224:	b1 e0       	ldi	r27, 0x01	; 1
     226:	01 c0       	rjmp	.+2      	; 0x22a <.do_clear_bss_start>

00000228 <.do_clear_bss_loop>:
     228:	1d 92       	st	X+, r1

0000022a <.do_clear_bss_start>:
     22a:	a2 3b       	cpi	r26, 0xB2	; 178
     22c:	b2 07       	cpc	r27, r18
     22e:	e1 f7       	brne	.-8      	; 0x228 <.do_clear_bss_loop>
     230:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <main>
     234:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <_exit>

00000238 <__bad_interrupt>:
     238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
     244:	27 97       	sbiw	r28, 0x07	; 7
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	f8 94       	cli
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	0f be       	out	0x3f, r0	; 63
     24e:	cd bf       	out	0x3d, r28	; 61
     250:	9b 83       	std	Y+3, r25	; 0x03
     252:	8a 83       	std	Y+2, r24	; 0x02
     254:	7d 83       	std	Y+5, r23	; 0x05
     256:	6c 83       	std	Y+4, r22	; 0x04
     258:	5f 83       	std	Y+7, r21	; 0x07
     25a:	4e 83       	std	Y+6, r20	; 0x06
	// begin critical section
	CRITICAL_SECTION_START;
     25c:	8f e5       	ldi	r24, 0x5F	; 95
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	fc 01       	movw	r30, r24
     262:	80 81       	ld	r24, Z
     264:	89 83       	std	Y+1, r24	; 0x01
     266:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
     268:	8a 81       	ldd	r24, Y+2	; 0x02
     26a:	9b 81       	ldd	r25, Y+3	; 0x03
     26c:	2c 81       	ldd	r18, Y+4	; 0x04
     26e:	3d 81       	ldd	r19, Y+5	; 0x05
     270:	fc 01       	movw	r30, r24
     272:	31 83       	std	Z+1, r19	; 0x01
     274:	20 83       	st	Z, r18
	buffer->size = size;
     276:	8a 81       	ldd	r24, Y+2	; 0x02
     278:	9b 81       	ldd	r25, Y+3	; 0x03
     27a:	2e 81       	ldd	r18, Y+6	; 0x06
     27c:	3f 81       	ldd	r19, Y+7	; 0x07
     27e:	fc 01       	movw	r30, r24
     280:	33 83       	std	Z+3, r19	; 0x03
     282:	22 83       	std	Z+2, r18	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
     284:	8a 81       	ldd	r24, Y+2	; 0x02
     286:	9b 81       	ldd	r25, Y+3	; 0x03
     288:	fc 01       	movw	r30, r24
     28a:	17 82       	std	Z+7, r1	; 0x07
     28c:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
     28e:	8a 81       	ldd	r24, Y+2	; 0x02
     290:	9b 81       	ldd	r25, Y+3	; 0x03
     292:	fc 01       	movw	r30, r24
     294:	15 82       	std	Z+5, r1	; 0x05
     296:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
     298:	8f e5       	ldi	r24, 0x5F	; 95
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	29 81       	ldd	r18, Y+1	; 0x01
     29e:	fc 01       	movw	r30, r24
     2a0:	20 83       	st	Z, r18
}
     2a2:	27 96       	adiw	r28, 0x07	; 7
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	f8 94       	cli
     2a8:	de bf       	out	0x3e, r29	; 62
     2aa:	0f be       	out	0x3f, r0	; 63
     2ac:	cd bf       	out	0x3d, r28	; 61
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret

000002b4 <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	00 d0       	rcall	.+0      	; 0x2ba <bufferGetFromFront+0x6>
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <bufferGetFromFront+0x8>
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	9c 83       	std	Y+4, r25	; 0x04
     2c2:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char data = 0;
     2c4:	19 82       	std	Y+1, r1	; 0x01
	// begin critical section
	CRITICAL_SECTION_START;
     2c6:	8f e5       	ldi	r24, 0x5F	; 95
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	fc 01       	movw	r30, r24
     2cc:	80 81       	ld	r24, Z
     2ce:	8a 83       	std	Y+2, r24	; 0x02
     2d0:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
     2d2:	8b 81       	ldd	r24, Y+3	; 0x03
     2d4:	9c 81       	ldd	r25, Y+4	; 0x04
     2d6:	fc 01       	movw	r30, r24
     2d8:	84 81       	ldd	r24, Z+4	; 0x04
     2da:	95 81       	ldd	r25, Z+5	; 0x05
     2dc:	89 2b       	or	r24, r25
     2de:	09 f4       	brne	.+2      	; 0x2e2 <bufferGetFromFront+0x2e>
     2e0:	47 c0       	rjmp	.+142    	; 0x370 <bufferGetFromFront+0xbc>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
     2e2:	8b 81       	ldd	r24, Y+3	; 0x03
     2e4:	9c 81       	ldd	r25, Y+4	; 0x04
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 81       	ld	r18, Z
     2ea:	31 81       	ldd	r19, Z+1	; 0x01
     2ec:	8b 81       	ldd	r24, Y+3	; 0x03
     2ee:	9c 81       	ldd	r25, Y+4	; 0x04
     2f0:	fc 01       	movw	r30, r24
     2f2:	86 81       	ldd	r24, Z+6	; 0x06
     2f4:	97 81       	ldd	r25, Z+7	; 0x07
     2f6:	82 0f       	add	r24, r18
     2f8:	93 1f       	adc	r25, r19
     2fa:	fc 01       	movw	r30, r24
     2fc:	80 81       	ld	r24, Z
     2fe:	89 83       	std	Y+1, r24	; 0x01
		// move index down and decrement length
		buffer->dataindex++;
     300:	8b 81       	ldd	r24, Y+3	; 0x03
     302:	9c 81       	ldd	r25, Y+4	; 0x04
     304:	fc 01       	movw	r30, r24
     306:	86 81       	ldd	r24, Z+6	; 0x06
     308:	97 81       	ldd	r25, Z+7	; 0x07
     30a:	9c 01       	movw	r18, r24
     30c:	2f 5f       	subi	r18, 0xFF	; 255
     30e:	3f 4f       	sbci	r19, 0xFF	; 255
     310:	8b 81       	ldd	r24, Y+3	; 0x03
     312:	9c 81       	ldd	r25, Y+4	; 0x04
     314:	fc 01       	movw	r30, r24
     316:	37 83       	std	Z+7, r19	; 0x07
     318:	26 83       	std	Z+6, r18	; 0x06
		if(buffer->dataindex >= buffer->size)
     31a:	8b 81       	ldd	r24, Y+3	; 0x03
     31c:	9c 81       	ldd	r25, Y+4	; 0x04
     31e:	fc 01       	movw	r30, r24
     320:	26 81       	ldd	r18, Z+6	; 0x06
     322:	37 81       	ldd	r19, Z+7	; 0x07
     324:	8b 81       	ldd	r24, Y+3	; 0x03
     326:	9c 81       	ldd	r25, Y+4	; 0x04
     328:	fc 01       	movw	r30, r24
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	28 17       	cp	r18, r24
     330:	39 07       	cpc	r19, r25
     332:	88 f0       	brcs	.+34     	; 0x356 <bufferGetFromFront+0xa2>
		{
			buffer->dataindex -= buffer->size;
     334:	8b 81       	ldd	r24, Y+3	; 0x03
     336:	9c 81       	ldd	r25, Y+4	; 0x04
     338:	fc 01       	movw	r30, r24
     33a:	26 81       	ldd	r18, Z+6	; 0x06
     33c:	37 81       	ldd	r19, Z+7	; 0x07
     33e:	8b 81       	ldd	r24, Y+3	; 0x03
     340:	9c 81       	ldd	r25, Y+4	; 0x04
     342:	fc 01       	movw	r30, r24
     344:	82 81       	ldd	r24, Z+2	; 0x02
     346:	93 81       	ldd	r25, Z+3	; 0x03
     348:	28 1b       	sub	r18, r24
     34a:	39 0b       	sbc	r19, r25
     34c:	8b 81       	ldd	r24, Y+3	; 0x03
     34e:	9c 81       	ldd	r25, Y+4	; 0x04
     350:	fc 01       	movw	r30, r24
     352:	37 83       	std	Z+7, r19	; 0x07
     354:	26 83       	std	Z+6, r18	; 0x06
		}
		buffer->datalength--;
     356:	8b 81       	ldd	r24, Y+3	; 0x03
     358:	9c 81       	ldd	r25, Y+4	; 0x04
     35a:	fc 01       	movw	r30, r24
     35c:	84 81       	ldd	r24, Z+4	; 0x04
     35e:	95 81       	ldd	r25, Z+5	; 0x05
     360:	9c 01       	movw	r18, r24
     362:	21 50       	subi	r18, 0x01	; 1
     364:	31 09       	sbc	r19, r1
     366:	8b 81       	ldd	r24, Y+3	; 0x03
     368:	9c 81       	ldd	r25, Y+4	; 0x04
     36a:	fc 01       	movw	r30, r24
     36c:	35 83       	std	Z+5, r19	; 0x05
     36e:	24 83       	std	Z+4, r18	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
     370:	8f e5       	ldi	r24, 0x5F	; 95
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	2a 81       	ldd	r18, Y+2	; 0x02
     376:	fc 01       	movw	r30, r24
     378:	20 83       	st	Z, r18
	// return
	return data;
     37a:	89 81       	ldd	r24, Y+1	; 0x01
}
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	00 d0       	rcall	.+0      	; 0x390 <bufferAddToEnd+0x6>
     390:	00 d0       	rcall	.+0      	; 0x392 <bufferAddToEnd+0x8>
     392:	00 d0       	rcall	.+0      	; 0x394 <bufferAddToEnd+0xa>
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
     398:	9b 83       	std	Y+3, r25	; 0x03
     39a:	8a 83       	std	Y+2, r24	; 0x02
     39c:	6c 83       	std	Y+4, r22	; 0x04
	// begin critical section
	CRITICAL_SECTION_START;
     39e:	8f e5       	ldi	r24, 0x5F	; 95
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	fc 01       	movw	r30, r24
     3a4:	80 81       	ld	r24, Z
     3a6:	89 83       	std	Y+1, r24	; 0x01
     3a8:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     3aa:	8a 81       	ldd	r24, Y+2	; 0x02
     3ac:	9b 81       	ldd	r25, Y+3	; 0x03
     3ae:	fc 01       	movw	r30, r24
     3b0:	24 81       	ldd	r18, Z+4	; 0x04
     3b2:	35 81       	ldd	r19, Z+5	; 0x05
     3b4:	8a 81       	ldd	r24, Y+2	; 0x02
     3b6:	9b 81       	ldd	r25, Y+3	; 0x03
     3b8:	fc 01       	movw	r30, r24
     3ba:	82 81       	ldd	r24, Z+2	; 0x02
     3bc:	93 81       	ldd	r25, Z+3	; 0x03
     3be:	28 17       	cp	r18, r24
     3c0:	39 07       	cpc	r19, r25
     3c2:	a0 f5       	brcc	.+104    	; 0x42c <bufferAddToEnd+0xa2>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     3c4:	8a 81       	ldd	r24, Y+2	; 0x02
     3c6:	9b 81       	ldd	r25, Y+3	; 0x03
     3c8:	fc 01       	movw	r30, r24
     3ca:	20 81       	ld	r18, Z
     3cc:	31 81       	ldd	r19, Z+1	; 0x01
     3ce:	8a 81       	ldd	r24, Y+2	; 0x02
     3d0:	9b 81       	ldd	r25, Y+3	; 0x03
     3d2:	fc 01       	movw	r30, r24
     3d4:	46 81       	ldd	r20, Z+6	; 0x06
     3d6:	57 81       	ldd	r21, Z+7	; 0x07
     3d8:	8a 81       	ldd	r24, Y+2	; 0x02
     3da:	9b 81       	ldd	r25, Y+3	; 0x03
     3dc:	fc 01       	movw	r30, r24
     3de:	84 81       	ldd	r24, Z+4	; 0x04
     3e0:	95 81       	ldd	r25, Z+5	; 0x05
     3e2:	ba 01       	movw	r22, r20
     3e4:	68 0f       	add	r22, r24
     3e6:	79 1f       	adc	r23, r25
     3e8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ea:	9b 81       	ldd	r25, Y+3	; 0x03
     3ec:	fc 01       	movw	r30, r24
     3ee:	42 81       	ldd	r20, Z+2	; 0x02
     3f0:	53 81       	ldd	r21, Z+3	; 0x03
     3f2:	cb 01       	movw	r24, r22
     3f4:	ba 01       	movw	r22, r20
     3f6:	0e 94 39 0a 	call	0x1472	; 0x1472 <__udivmodhi4>
     3fa:	82 0f       	add	r24, r18
     3fc:	93 1f       	adc	r25, r19
     3fe:	2c 81       	ldd	r18, Y+4	; 0x04
     400:	fc 01       	movw	r30, r24
     402:	20 83       	st	Z, r18
		// increment the length
		buffer->datalength++;
     404:	8a 81       	ldd	r24, Y+2	; 0x02
     406:	9b 81       	ldd	r25, Y+3	; 0x03
     408:	fc 01       	movw	r30, r24
     40a:	84 81       	ldd	r24, Z+4	; 0x04
     40c:	95 81       	ldd	r25, Z+5	; 0x05
     40e:	9c 01       	movw	r18, r24
     410:	2f 5f       	subi	r18, 0xFF	; 255
     412:	3f 4f       	sbci	r19, 0xFF	; 255
     414:	8a 81       	ldd	r24, Y+2	; 0x02
     416:	9b 81       	ldd	r25, Y+3	; 0x03
     418:	fc 01       	movw	r30, r24
     41a:	35 83       	std	Z+5, r19	; 0x05
     41c:	24 83       	std	Z+4, r18	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     41e:	8f e5       	ldi	r24, 0x5F	; 95
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	29 81       	ldd	r18, Y+1	; 0x01
     424:	fc 01       	movw	r30, r24
     426:	20 83       	st	Z, r18
		// return success
		return -1;
     428:	8f ef       	ldi	r24, 0xFF	; 255
     42a:	06 c0       	rjmp	.+12     	; 0x438 <bufferAddToEnd+0xae>
	}
	// end critical section
	CRITICAL_SECTION_END;
     42c:	8f e5       	ldi	r24, 0x5F	; 95
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	29 81       	ldd	r18, Y+1	; 0x01
     432:	fc 01       	movw	r30, r24
     434:	20 83       	st	Z, r18
	// return failure
	return 0;
     436:	80 e0       	ldi	r24, 0x00	; 0
}
     438:	26 96       	adiw	r28, 0x06	; 6
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	08 95       	ret

0000044a <rprintfInit>:

// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	00 d0       	rcall	.+0      	; 0x450 <rprintfInit+0x6>
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	9a 83       	std	Y+2, r25	; 0x02
     456:	89 83       	std	Y+1, r24	; 0x01
	rputchar = putchar_func;
     458:	89 81       	ldd	r24, Y+1	; 0x01
     45a:	9a 81       	ldd	r25, Y+2	; 0x02
     45c:	90 93 01 01 	sts	0x0101, r25
     460:	80 93 00 01 	sts	0x0100, r24
}
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	1f 92       	push	r1
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	89 83       	std	Y+1, r24	; 0x01
	// do LF -> CR/LF translation
	if(c == '\n')
     47a:	89 81       	ldd	r24, Y+1	; 0x01
     47c:	8a 30       	cpi	r24, 0x0A	; 10
     47e:	39 f4       	brne	.+14     	; 0x48e <rprintfChar+0x20>
		rputchar('\r');
     480:	20 91 00 01 	lds	r18, 0x0100
     484:	30 91 01 01 	lds	r19, 0x0101
     488:	8d e0       	ldi	r24, 0x0D	; 13
     48a:	f9 01       	movw	r30, r18
     48c:	09 95       	icall
	// send character
	rputchar(c);
     48e:	20 91 00 01 	lds	r18, 0x0100
     492:	30 91 01 01 	lds	r19, 0x0101
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	f9 01       	movw	r30, r18
     49a:	09 95       	icall
}
     49c:	0f 90       	pop	r0
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	08 95       	ret

000004a4 <rprintfu04>:
}

// *** rprintfu04 ***
// prints an unsigned 4-bit number in hex (1 digit)
void rprintfu04(unsigned char data)
{
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	00 d0       	rcall	.+0      	; 0x4aa <rprintfu04+0x6>
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <rprintfu04+0x8>
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
     4b0:	8c 83       	std	Y+4, r24	; 0x04
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
     4b2:	8c 81       	ldd	r24, Y+4	; 0x04
     4b4:	88 2f       	mov	r24, r24
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	8f 70       	andi	r24, 0x0F	; 15
     4ba:	99 27       	eor	r25, r25
     4bc:	84 58       	subi	r24, 0x84	; 132
     4be:	9f 4f       	sbci	r25, 0xFF	; 255
     4c0:	9a 83       	std	Y+2, r25	; 0x02
     4c2:	89 83       	std	Y+1, r24	; 0x01
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	9a 81       	ldd	r25, Y+2	; 0x02
     4c8:	fc 01       	movw	r30, r24
     4ca:	84 91       	lpm	r24, Z
     4cc:	8b 83       	std	Y+3, r24	; 0x03
     4ce:	8b 81       	ldd	r24, Y+3	; 0x03
     4d0:	0e 94 37 02 	call	0x46e	; 0x46e <rprintfChar>
}
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	08 95       	ret

000004e2 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	65 97       	sbiw	r28, 0x15	; 21
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	f8 94       	cli
     4f0:	de bf       	out	0x3e, r29	; 62
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	cd bf       	out	0x3d, r28	; 61
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
     4f6:	ce 01       	movw	r24, r28
     4f8:	4d 96       	adiw	r24, 0x1d	; 29
     4fa:	9f 87       	std	Y+15, r25	; 0x0f
     4fc:	8e 87       	std	Y+14, r24	; 0x0e
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     4fe:	09 c0       	rjmp	.+18     	; 0x512 <rprintf1RamRom+0x30>
		{	// Until '%' or '\0'
			if (!format_flag)
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	88 23       	and	r24, r24
     504:	19 f4       	brne	.+6      	; 0x50c <rprintf1RamRom+0x2a>
			{
				va_end(ap);
				return(0);
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	c6 c0       	rjmp	.+396    	; 0x698 <rprintf1RamRom+0x1b6>
			}
			rprintfChar(format_flag);
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	0e 94 37 02 	call	0x46e	; 0x46e <rprintfChar>
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
     512:	8a 8d       	ldd	r24, Y+26	; 0x1a
     514:	88 23       	and	r24, r24
     516:	81 f0       	breq	.+32     	; 0x538 <rprintf1RamRom+0x56>
     518:	8b 8d       	ldd	r24, Y+27	; 0x1b
     51a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     51c:	9c 01       	movw	r18, r24
     51e:	2f 5f       	subi	r18, 0xFF	; 255
     520:	3f 4f       	sbci	r19, 0xFF	; 255
     522:	3c 8f       	std	Y+28, r19	; 0x1c
     524:	2b 8f       	std	Y+27, r18	; 0x1b
     526:	99 87       	std	Y+9, r25	; 0x09
     528:	88 87       	std	Y+8, r24	; 0x08
     52a:	88 85       	ldd	r24, Y+8	; 0x08
     52c:	99 85       	ldd	r25, Y+9	; 0x09
     52e:	fc 01       	movw	r30, r24
     530:	84 91       	lpm	r24, Z
     532:	8a 87       	std	Y+10, r24	; 0x0a
     534:	8a 85       	ldd	r24, Y+10	; 0x0a
     536:	09 c0       	rjmp	.+18     	; 0x54a <rprintf1RamRom+0x68>
     538:	8b 8d       	ldd	r24, Y+27	; 0x1b
     53a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     53c:	9c 01       	movw	r18, r24
     53e:	2f 5f       	subi	r18, 0xFF	; 255
     540:	3f 4f       	sbci	r19, 0xFF	; 255
     542:	3c 8f       	std	Y+28, r19	; 0x1c
     544:	2b 8f       	std	Y+27, r18	; 0x1b
     546:	fc 01       	movw	r30, r24
     548:	80 81       	ld	r24, Z
     54a:	89 83       	std	Y+1, r24	; 0x01
     54c:	89 81       	ldd	r24, Y+1	; 0x01
     54e:	85 32       	cpi	r24, 0x25	; 37
     550:	b9 f6       	brne	.-82     	; 0x500 <rprintf1RamRom+0x1e>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
     552:	8a 8d       	ldd	r24, Y+26	; 0x1a
     554:	88 23       	and	r24, r24
     556:	81 f0       	breq	.+32     	; 0x578 <rprintf1RamRom+0x96>
     558:	8b 8d       	ldd	r24, Y+27	; 0x1b
     55a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     55c:	9c 01       	movw	r18, r24
     55e:	2f 5f       	subi	r18, 0xFF	; 255
     560:	3f 4f       	sbci	r19, 0xFF	; 255
     562:	3c 8f       	std	Y+28, r19	; 0x1c
     564:	2b 8f       	std	Y+27, r18	; 0x1b
     566:	9c 87       	std	Y+12, r25	; 0x0c
     568:	8b 87       	std	Y+11, r24	; 0x0b
     56a:	8b 85       	ldd	r24, Y+11	; 0x0b
     56c:	9c 85       	ldd	r25, Y+12	; 0x0c
     56e:	fc 01       	movw	r30, r24
     570:	84 91       	lpm	r24, Z
     572:	8d 87       	std	Y+13, r24	; 0x0d
     574:	8d 85       	ldd	r24, Y+13	; 0x0d
     576:	09 c0       	rjmp	.+18     	; 0x58a <rprintf1RamRom+0xa8>
     578:	8b 8d       	ldd	r24, Y+27	; 0x1b
     57a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     57c:	9c 01       	movw	r18, r24
     57e:	2f 5f       	subi	r18, 0xFF	; 255
     580:	3f 4f       	sbci	r19, 0xFF	; 255
     582:	3c 8f       	std	Y+28, r19	; 0x1c
     584:	2b 8f       	std	Y+27, r18	; 0x1b
     586:	fc 01       	movw	r30, r24
     588:	80 81       	ld	r24, Z
     58a:	89 83       	std	Y+1, r24	; 0x01
     58c:	89 81       	ldd	r24, Y+1	; 0x01
     58e:	88 2f       	mov	r24, r24
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	84 36       	cpi	r24, 0x64	; 100
     594:	91 05       	cpc	r25, r1
     596:	a9 f0       	breq	.+42     	; 0x5c2 <rprintf1RamRom+0xe0>
     598:	88 37       	cpi	r24, 0x78	; 120
     59a:	91 05       	cpc	r25, r1
     59c:	d9 f0       	breq	.+54     	; 0x5d4 <rprintf1RamRom+0xf2>
     59e:	83 36       	cpi	r24, 0x63	; 99
     5a0:	91 05       	cpc	r25, r1
     5a2:	59 f4       	brne	.+22     	; 0x5ba <rprintf1RamRom+0xd8>
		{
			case 'c': format_flag = va_arg(ap,int);
     5a4:	8e 85       	ldd	r24, Y+14	; 0x0e
     5a6:	9f 85       	ldd	r25, Y+15	; 0x0f
     5a8:	9c 01       	movw	r18, r24
     5aa:	2e 5f       	subi	r18, 0xFE	; 254
     5ac:	3f 4f       	sbci	r19, 0xFF	; 255
     5ae:	3f 87       	std	Y+15, r19	; 0x0f
     5b0:	2e 87       	std	Y+14, r18	; 0x0e
     5b2:	fc 01       	movw	r30, r24
     5b4:	80 81       	ld	r24, Z
     5b6:	91 81       	ldd	r25, Z+1	; 0x01
     5b8:	89 83       	std	Y+1, r24	; 0x01
			default:  rprintfChar(format_flag); continue;
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	0e 94 37 02 	call	0x46e	; 0x46e <rprintfChar>
     5c0:	6a c0       	rjmp	.+212    	; 0x696 <rprintf1RamRom+0x1b4>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
     5c2:	8a e0       	ldi	r24, 0x0A	; 10
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	9f 83       	std	Y+7, r25	; 0x07
     5c8:	8e 83       	std	Y+6, r24	; 0x06
     5ca:	80 e1       	ldi	r24, 0x10	; 16
     5cc:	97 e2       	ldi	r25, 0x27	; 39
     5ce:	9d 83       	std	Y+5, r25	; 0x05
     5d0:	8c 83       	std	Y+4, r24	; 0x04
     5d2:	08 c0       	rjmp	.+16     	; 0x5e4 <rprintf1RamRom+0x102>
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
     5d4:	80 e1       	ldi	r24, 0x10	; 16
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	9f 83       	std	Y+7, r25	; 0x07
     5da:	8e 83       	std	Y+6, r24	; 0x06
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e1       	ldi	r25, 0x10	; 16
     5e0:	9d 83       	std	Y+5, r25	; 0x05
     5e2:	8c 83       	std	Y+4, r24	; 0x04

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
     5e4:	8e 85       	ldd	r24, Y+14	; 0x0e
     5e6:	9f 85       	ldd	r25, Y+15	; 0x0f
     5e8:	9c 01       	movw	r18, r24
     5ea:	2e 5f       	subi	r18, 0xFE	; 254
     5ec:	3f 4f       	sbci	r19, 0xFF	; 255
     5ee:	3f 87       	std	Y+15, r19	; 0x0f
     5f0:	2e 87       	std	Y+14, r18	; 0x0e
     5f2:	fc 01       	movw	r30, r24
     5f4:	80 81       	ld	r24, Z
     5f6:	91 81       	ldd	r25, Z+1	; 0x01
     5f8:	9b 83       	std	Y+3, r25	; 0x03
     5fa:	8a 83       	std	Y+2, r24	; 0x02
			if (format_flag == 'd')
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	84 36       	cpi	r24, 0x64	; 100
     600:	49 f5       	brne	.+82     	; 0x654 <rprintf1RamRom+0x172>
			{
				if (((int)u_val) < 0)
     602:	8a 81       	ldd	r24, Y+2	; 0x02
     604:	9b 81       	ldd	r25, Y+3	; 0x03
     606:	99 23       	and	r25, r25
     608:	54 f4       	brge	.+20     	; 0x61e <rprintf1RamRom+0x13c>
				{
					u_val = - u_val;
     60a:	8a 81       	ldd	r24, Y+2	; 0x02
     60c:	9b 81       	ldd	r25, Y+3	; 0x03
     60e:	91 95       	neg	r25
     610:	81 95       	neg	r24
     612:	91 09       	sbc	r25, r1
     614:	9b 83       	std	Y+3, r25	; 0x03
     616:	8a 83       	std	Y+2, r24	; 0x02
					rprintfChar('-');
     618:	8d e2       	ldi	r24, 0x2D	; 45
     61a:	0e 94 37 02 	call	0x46e	; 0x46e <rprintfChar>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
     61e:	0f c0       	rjmp	.+30     	; 0x63e <rprintf1RamRom+0x15c>
     620:	8c 81       	ldd	r24, Y+4	; 0x04
     622:	9d 81       	ldd	r25, Y+5	; 0x05
     624:	9c 01       	movw	r18, r24
     626:	ad ec       	ldi	r26, 0xCD	; 205
     628:	bc ec       	ldi	r27, 0xCC	; 204
     62a:	0e 94 8e 0a 	call	0x151c	; 0x151c <__umulhisi3>
     62e:	96 95       	lsr	r25
     630:	87 95       	ror	r24
     632:	96 95       	lsr	r25
     634:	87 95       	ror	r24
     636:	96 95       	lsr	r25
     638:	87 95       	ror	r24
     63a:	9d 83       	std	Y+5, r25	; 0x05
     63c:	8c 83       	std	Y+4, r24	; 0x04
     63e:	8c 81       	ldd	r24, Y+4	; 0x04
     640:	9d 81       	ldd	r25, Y+5	; 0x05
     642:	02 97       	sbiw	r24, 0x02	; 2
     644:	38 f0       	brcs	.+14     	; 0x654 <rprintf1RamRom+0x172>
     646:	2c 81       	ldd	r18, Y+4	; 0x04
     648:	3d 81       	ldd	r19, Y+5	; 0x05
     64a:	8a 81       	ldd	r24, Y+2	; 0x02
     64c:	9b 81       	ldd	r25, Y+3	; 0x03
     64e:	82 17       	cp	r24, r18
     650:	93 07       	cpc	r25, r19
     652:	30 f3       	brcs	.-52     	; 0x620 <rprintf1RamRom+0x13e>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
     654:	8a 81       	ldd	r24, Y+2	; 0x02
     656:	9b 81       	ldd	r25, Y+3	; 0x03
     658:	2c 81       	ldd	r18, Y+4	; 0x04
     65a:	3d 81       	ldd	r19, Y+5	; 0x05
     65c:	b9 01       	movw	r22, r18
     65e:	0e 94 39 0a 	call	0x1472	; 0x1472 <__udivmodhi4>
     662:	cb 01       	movw	r24, r22
     664:	0e 94 52 02 	call	0x4a4	; 0x4a4 <rprintfu04>
				u_val %= div_val;
     668:	8a 81       	ldd	r24, Y+2	; 0x02
     66a:	9b 81       	ldd	r25, Y+3	; 0x03
     66c:	2c 81       	ldd	r18, Y+4	; 0x04
     66e:	3d 81       	ldd	r19, Y+5	; 0x05
     670:	b9 01       	movw	r22, r18
     672:	0e 94 39 0a 	call	0x1472	; 0x1472 <__udivmodhi4>
     676:	9b 83       	std	Y+3, r25	; 0x03
     678:	8a 83       	std	Y+2, r24	; 0x02
				div_val /= base;
     67a:	8c 81       	ldd	r24, Y+4	; 0x04
     67c:	9d 81       	ldd	r25, Y+5	; 0x05
     67e:	2e 81       	ldd	r18, Y+6	; 0x06
     680:	3f 81       	ldd	r19, Y+7	; 0x07
     682:	b9 01       	movw	r22, r18
     684:	0e 94 39 0a 	call	0x1472	; 0x1472 <__udivmodhi4>
     688:	cb 01       	movw	r24, r22
     68a:	9d 83       	std	Y+5, r25	; 0x05
     68c:	8c 83       	std	Y+4, r24	; 0x04
			} while (div_val);
     68e:	8c 81       	ldd	r24, Y+4	; 0x04
     690:	9d 81       	ldd	r25, Y+5	; 0x05
     692:	89 2b       	or	r24, r25
     694:	f9 f6       	brne	.-66     	; 0x654 <rprintf1RamRom+0x172>
		}
	}
     696:	33 cf       	rjmp	.-410    	; 0x4fe <rprintf1RamRom+0x1c>
	va_end(ap);
}
     698:	65 96       	adiw	r28, 0x15	; 21
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	f8 94       	cli
     69e:	de bf       	out	0x3e, r29	; 62
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	cd bf       	out	0x3d, r28	; 61
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	08 95       	ret

000006aa <timerInit>:
                  :"r"(time_ms), "r"((unsigned short) (delay_count))
	);
}
*/
void timerInit(void)
{
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	1f 92       	push	r1
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
     6b4:	19 82       	std	Y+1, r1	; 0x01
     6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <timerInit+0x1a>
		timerDetach(intNum);
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	0e 94 23 04 	call	0x846	; 0x846 <timerDetach>
*/
void timerInit(void)
{
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	8f 5f       	subi	r24, 0xFF	; 255
     6c2:	89 83       	std	Y+1, r24	; 0x01
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	87 30       	cpi	r24, 0x07	; 7
     6c8:	b8 f3       	brcs	.-18     	; 0x6b8 <timerInit+0xe>
		timerDetach(intNum);

	// initialize all timers
	timer0Init();
     6ca:	0e 94 70 03 	call	0x6e0	; 0x6e0 <timer0Init>
	timer1Init();
     6ce:	0e 94 89 03 	call	0x712	; 0x712 <timer1Init>
	#ifdef TCNT2	// support timer2 only if it exists
	timer2Init();
     6d2:	0e 94 a1 03 	call	0x742	; 0x742 <timer2Init>
	#endif
	// enable interrupts
	sei();
     6d6:	78 94       	sei
}
     6d8:	0f 90       	pop	r0
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	08 95       	ret

000006e0 <timer0Init>:

void timer0Init()
{
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
	// initialize timer 0
	timer0SetPrescaler( TIMER0PRESCALE );	// set prescaler
     6e8:	82 e0       	ldi	r24, 0x02	; 2
     6ea:	0e 94 ba 03 	call	0x774	; 0x774 <timer0SetPrescaler>
	TCNT0 = 0;								// reset TCNT0
     6ee:	86 e4       	ldi	r24, 0x46	; 70
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	fc 01       	movw	r30, r24
     6f4:	10 82       	st	Z, r1
	sbi(TIMSK0, TOIE0);						// enable TCNT0 overflow interrupt
     6f6:	8e e6       	ldi	r24, 0x6E	; 110
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	2e e6       	ldi	r18, 0x6E	; 110
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	f9 01       	movw	r30, r18
     700:	20 81       	ld	r18, Z
     702:	21 60       	ori	r18, 0x01	; 1
     704:	fc 01       	movw	r30, r24
     706:	20 83       	st	Z, r18

	timer0ClearOverflowCount();				// initialize time registers
     708:	0e 94 12 05 	call	0xa24	; 0xa24 <timer0ClearOverflowCount>
}
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <timer1Init>:

void timer1Init(void)
{
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
	// initialize timer 1
	timer1SetPrescaler( TIMER1PRESCALE );	// set prescaler
     71a:	83 e0       	ldi	r24, 0x03	; 3
     71c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <timer1SetPrescaler>
	TCNT1 = 0;								// reset TCNT1
     720:	84 e8       	ldi	r24, 0x84	; 132
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	fc 01       	movw	r30, r24
     726:	11 82       	std	Z+1, r1	; 0x01
     728:	10 82       	st	Z, r1
	sbi(TIMSK1, TOIE1);						// enable TCNT1 overflow
     72a:	8f e6       	ldi	r24, 0x6F	; 111
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	2f e6       	ldi	r18, 0x6F	; 111
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	f9 01       	movw	r30, r18
     734:	20 81       	ld	r18, Z
     736:	21 60       	ori	r18, 0x01	; 1
     738:	fc 01       	movw	r30, r24
     73a:	20 83       	st	Z, r18
}
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	08 95       	ret

00000742 <timer2Init>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2Init(void)
{
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	cd b7       	in	r28, 0x3d	; 61
     748:	de b7       	in	r29, 0x3e	; 62
	// initialize timer 2
	timer2SetPrescaler( TIMER2PRESCALE );	// set prescaler
     74a:	84 e0       	ldi	r24, 0x04	; 4
     74c:	0e 94 e6 03 	call	0x7cc	; 0x7cc <timer2SetPrescaler>
	TCNT2 = 0;								// reset TCNT2
     750:	82 eb       	ldi	r24, 0xB2	; 178
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	fc 01       	movw	r30, r24
     756:	10 82       	st	Z, r1
	sbi(TIMSK2, TOIE2);						// enable TCNT2 overflow
     758:	80 e7       	ldi	r24, 0x70	; 112
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	20 e7       	ldi	r18, 0x70	; 112
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	f9 01       	movw	r30, r18
     762:	20 81       	ld	r18, Z
     764:	21 60       	ori	r18, 0x01	; 1
     766:	fc 01       	movw	r30, r24
     768:	20 83       	st	Z, r18

	timer2ClearOverflowCount();				// initialize time registers
     76a:	0e 94 21 05 	call	0xa42	; 0xa42 <timer2ClearOverflowCount>
}
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	08 95       	ret

00000774 <timer0SetPrescaler>:
#endif

void timer0SetPrescaler(u08 prescale)
{
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	1f 92       	push	r1
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	89 83       	std	Y+1, r24	; 0x01
	// set prescaler on timer 0
	TCCR0B = ((TCCR0B & ~TIMER_PRESCALE_MASK) | prescale);
     780:	85 e4       	ldi	r24, 0x45	; 69
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	25 e4       	ldi	r18, 0x45	; 69
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	f9 01       	movw	r30, r18
     78a:	20 81       	ld	r18, Z
     78c:	32 2f       	mov	r19, r18
     78e:	38 7f       	andi	r19, 0xF8	; 248
     790:	29 81       	ldd	r18, Y+1	; 0x01
     792:	23 2b       	or	r18, r19
     794:	fc 01       	movw	r30, r24
     796:	20 83       	st	Z, r18
}
     798:	0f 90       	pop	r0
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	08 95       	ret

000007a0 <timer1SetPrescaler>:

void timer1SetPrescaler(u08 prescale)
{
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	1f 92       	push	r1
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	89 83       	std	Y+1, r24	; 0x01
	// set prescaler on timer 1
	TCCR1B = ((TCCR1B & ~TIMER_PRESCALE_MASK) | prescale);
     7ac:	81 e8       	ldi	r24, 0x81	; 129
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	21 e8       	ldi	r18, 0x81	; 129
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	f9 01       	movw	r30, r18
     7b6:	20 81       	ld	r18, Z
     7b8:	32 2f       	mov	r19, r18
     7ba:	38 7f       	andi	r19, 0xF8	; 248
     7bc:	29 81       	ldd	r18, Y+1	; 0x01
     7be:	23 2b       	or	r18, r19
     7c0:	fc 01       	movw	r30, r24
     7c2:	20 83       	st	Z, r18
}
     7c4:	0f 90       	pop	r0
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	08 95       	ret

000007cc <timer2SetPrescaler>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2SetPrescaler(u08 prescale)
{
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	1f 92       	push	r1
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	89 83       	std	Y+1, r24	; 0x01
	// set prescaler on timer 2
	TCCR2B = ((TCCR2B & ~TIMER_PRESCALE_MASK) | prescale);
     7d8:	81 eb       	ldi	r24, 0xB1	; 177
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	21 eb       	ldi	r18, 0xB1	; 177
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	f9 01       	movw	r30, r18
     7e2:	20 81       	ld	r18, Z
     7e4:	32 2f       	mov	r19, r18
     7e6:	38 7f       	andi	r19, 0xF8	; 248
     7e8:	29 81       	ldd	r18, Y+1	; 0x01
     7ea:	23 2b       	or	r18, r19
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 83       	st	Z, r18
}
     7f0:	0f 90       	pop	r0
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	08 95       	ret

000007f8 <timer0GetPrescaler>:
#endif

u16 timer0GetPrescaler(void)
{
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <timer0GetPrescaler+0x6>
     7fe:	00 d0       	rcall	.+0      	; 0x800 <timer0GetPrescaler+0x8>
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
	// get the current prescaler setting
	return (pgm_read_word(TimerPrescaleFactor+(TCCR0B & TIMER_PRESCALE_MASK)));
     804:	85 e4       	ldi	r24, 0x45	; 69
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	fc 01       	movw	r30, r24
     80a:	80 81       	ld	r24, Z
     80c:	88 2f       	mov	r24, r24
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	87 70       	andi	r24, 0x07	; 7
     812:	99 27       	eor	r25, r25
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	83 57       	subi	r24, 0x73	; 115
     81a:	9f 4f       	sbci	r25, 0xFF	; 255
     81c:	9a 83       	std	Y+2, r25	; 0x02
     81e:	89 83       	std	Y+1, r24	; 0x01
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	9a 81       	ldd	r25, Y+2	; 0x02
     824:	fc 01       	movw	r30, r24
     826:	25 91       	lpm	r18, Z+
     828:	34 91       	lpm	r19, Z
     82a:	cf 01       	movw	r24, r30
     82c:	3c 83       	std	Y+4, r19	; 0x04
     82e:	2b 83       	std	Y+3, r18	; 0x03
     830:	9a 83       	std	Y+2, r25	; 0x02
     832:	89 83       	std	Y+1, r24	; 0x01
     834:	8b 81       	ldd	r24, Y+3	; 0x03
     836:	9c 81       	ldd	r25, Y+4	; 0x04
}
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	08 95       	ret

00000846 <timerDetach>:
		TimerIntFunc[interruptNum] = userFunc;
	}
}

void timerDetach(u08 interruptNum)
{
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	1f 92       	push	r1
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
     850:	89 83       	std	Y+1, r24	; 0x01
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	87 30       	cpi	r24, 0x07	; 7
     856:	50 f4       	brcc	.+20     	; 0x86c <timerDetach+0x26>
	{
		// set the interrupt function to run nothing
		TimerIntFunc[interruptNum] = 0;
     858:	89 81       	ldd	r24, Y+1	; 0x01
     85a:	88 2f       	mov	r24, r24
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	8e 5f       	subi	r24, 0xFE	; 254
     864:	9e 4f       	sbci	r25, 0xFE	; 254
     866:	fc 01       	movw	r30, r24
     868:	11 82       	std	Z+1, r1	; 0x01
     86a:	10 82       	st	Z, r1
	}
}
     86c:	0f 90       	pop	r0
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <timerPause>:
	// calculate the number of milliseconds in x timer tics
	return (tics*1000*(prescaleDiv*256))/F_CPU;
}
*/
void timerPause(unsigned short pause_ms)
{
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	67 97       	sbiw	r28, 0x17	; 23
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	de bf       	out	0x3e, r29	; 62
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	cd bf       	out	0x3d, r28	; 61
     890:	9b 87       	std	Y+11, r25	; 0x0b
     892:	8a 87       	std	Y+10, r24	; 0x0a
	u08 timerThres;
	u32 ticRateHz;
	u32 pause;

	// capture current pause timer value
	timerThres = TCNT0;
     894:	86 e4       	ldi	r24, 0x46	; 70
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	fc 01       	movw	r30, r24
     89a:	80 81       	ld	r24, Z
     89c:	8d 83       	std	Y+5, r24	; 0x05
	// reset pause timer overflow count
	TimerPauseReg = 0;
     89e:	10 92 96 01 	sts	0x0196, r1
     8a2:	10 92 97 01 	sts	0x0197, r1
     8a6:	10 92 98 01 	sts	0x0198, r1
     8aa:	10 92 99 01 	sts	0x0199, r1
	// calculate delay for [pause_ms] milliseconds
	// prescaler division = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)))
	ticRateHz = F_CPU/timer0GetPrescaler();
     8ae:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <timer0GetPrescaler>
     8b2:	9c 01       	movw	r18, r24
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e8       	ldi	r25, 0x80	; 128
     8bc:	a0 e7       	ldi	r26, 0x70	; 112
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	bc 01       	movw	r22, r24
     8c2:	cd 01       	movw	r24, r26
     8c4:	0e 94 6f 0a 	call	0x14de	; 0x14de <__divmodsi4>
     8c8:	da 01       	movw	r26, r20
     8ca:	c9 01       	movw	r24, r18
     8cc:	8e 83       	std	Y+6, r24	; 0x06
     8ce:	9f 83       	std	Y+7, r25	; 0x07
     8d0:	a8 87       	std	Y+8, r26	; 0x08
     8d2:	b9 87       	std	Y+9, r27	; 0x09
	// precision management
	// prevent overflow and precision underflow
	//	-could add more conditions to improve accuracy
	if( ((ticRateHz < 429497) && (pause_ms <= 10000)) )
     8d4:	8e 81       	ldd	r24, Y+6	; 0x06
     8d6:	9f 81       	ldd	r25, Y+7	; 0x07
     8d8:	a8 85       	ldd	r26, Y+8	; 0x08
     8da:	b9 85       	ldd	r27, Y+9	; 0x09
     8dc:	89 3b       	cpi	r24, 0xB9	; 185
     8de:	9d 48       	sbci	r25, 0x8D	; 141
     8e0:	a6 40       	sbci	r26, 0x06	; 6
     8e2:	b1 05       	cpc	r27, r1
     8e4:	18 f5       	brcc	.+70     	; 0x92c <timerPause+0xb8>
     8e6:	8a 85       	ldd	r24, Y+10	; 0x0a
     8e8:	9b 85       	ldd	r25, Y+11	; 0x0b
     8ea:	81 31       	cpi	r24, 0x11	; 17
     8ec:	97 42       	sbci	r25, 0x27	; 39
     8ee:	f0 f4       	brcc	.+60     	; 0x92c <timerPause+0xb8>
		pause = (pause_ms*ticRateHz)/1000;
     8f0:	8a 85       	ldd	r24, Y+10	; 0x0a
     8f2:	9b 85       	ldd	r25, Y+11	; 0x0b
     8f4:	9c 01       	movw	r18, r24
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	8e 81       	ldd	r24, Y+6	; 0x06
     8fc:	9f 81       	ldd	r25, Y+7	; 0x07
     8fe:	a8 85       	ldd	r26, Y+8	; 0x08
     900:	b9 85       	ldd	r27, Y+9	; 0x09
     902:	bc 01       	movw	r22, r24
     904:	cd 01       	movw	r24, r26
     906:	0e 94 29 0a 	call	0x1452	; 0x1452 <__mulsi3>
     90a:	dc 01       	movw	r26, r24
     90c:	cb 01       	movw	r24, r22
     90e:	28 ee       	ldi	r18, 0xE8	; 232
     910:	33 e0       	ldi	r19, 0x03	; 3
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	bc 01       	movw	r22, r24
     918:	cd 01       	movw	r24, r26
     91a:	0e 94 4d 0a 	call	0x149a	; 0x149a <__udivmodsi4>
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	89 83       	std	Y+1, r24	; 0x01
     924:	9a 83       	std	Y+2, r25	; 0x02
     926:	ab 83       	std	Y+3, r26	; 0x03
     928:	bc 83       	std	Y+4, r27	; 0x04
     92a:	1f c0       	rjmp	.+62     	; 0x96a <timerPause+0xf6>
	else
		pause = pause_ms*(ticRateHz/1000);
     92c:	8a 85       	ldd	r24, Y+10	; 0x0a
     92e:	9b 85       	ldd	r25, Y+11	; 0x0b
     930:	7c 01       	movw	r14, r24
     932:	00 e0       	ldi	r16, 0x00	; 0
     934:	10 e0       	ldi	r17, 0x00	; 0
     936:	8e 81       	ldd	r24, Y+6	; 0x06
     938:	9f 81       	ldd	r25, Y+7	; 0x07
     93a:	a8 85       	ldd	r26, Y+8	; 0x08
     93c:	b9 85       	ldd	r27, Y+9	; 0x09
     93e:	28 ee       	ldi	r18, 0xE8	; 232
     940:	33 e0       	ldi	r19, 0x03	; 3
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	bc 01       	movw	r22, r24
     948:	cd 01       	movw	r24, r26
     94a:	0e 94 4d 0a 	call	0x149a	; 0x149a <__udivmodsi4>
     94e:	da 01       	movw	r26, r20
     950:	c9 01       	movw	r24, r18
     952:	a8 01       	movw	r20, r16
     954:	97 01       	movw	r18, r14
     956:	bc 01       	movw	r22, r24
     958:	cd 01       	movw	r24, r26
     95a:	0e 94 29 0a 	call	0x1452	; 0x1452 <__mulsi3>
     95e:	dc 01       	movw	r26, r24
     960:	cb 01       	movw	r24, r22
     962:	89 83       	std	Y+1, r24	; 0x01
     964:	9a 83       	std	Y+2, r25	; 0x02
     966:	ab 83       	std	Y+3, r26	; 0x03
     968:	bc 83       	std	Y+4, r27	; 0x04

	// loop until time expires
	while( ((TimerPauseReg<<8) | (TCNT0)) < (pause+timerThres) )
     96a:	24 c0       	rjmp	.+72     	; 0x9b4 <timerPause+0x140>
	{
		if( TimerPauseReg < (pause>>8));
     96c:	80 91 96 01 	lds	r24, 0x0196
     970:	90 91 97 01 	lds	r25, 0x0197
     974:	a0 91 98 01 	lds	r26, 0x0198
     978:	b0 91 99 01 	lds	r27, 0x0199
		{
			// save power by idling the processor
			set_sleep_mode(SLEEP_MODE_IDLE);
     97c:	83 e5       	ldi	r24, 0x53	; 83
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	23 e5       	ldi	r18, 0x53	; 83
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	f9 01       	movw	r30, r18
     986:	20 81       	ld	r18, Z
     988:	21 7f       	andi	r18, 0xF1	; 241
     98a:	fc 01       	movw	r30, r24
     98c:	20 83       	st	Z, r18
			sleep_mode();
     98e:	83 e5       	ldi	r24, 0x53	; 83
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	23 e5       	ldi	r18, 0x53	; 83
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	f9 01       	movw	r30, r18
     998:	20 81       	ld	r18, Z
     99a:	21 60       	ori	r18, 0x01	; 1
     99c:	fc 01       	movw	r30, r24
     99e:	20 83       	st	Z, r18
     9a0:	88 95       	sleep
     9a2:	83 e5       	ldi	r24, 0x53	; 83
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	23 e5       	ldi	r18, 0x53	; 83
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	f9 01       	movw	r30, r18
     9ac:	20 81       	ld	r18, Z
     9ae:	2e 7f       	andi	r18, 0xFE	; 254
     9b0:	fc 01       	movw	r30, r24
     9b2:	20 83       	st	Z, r18
		pause = (pause_ms*ticRateHz)/1000;
	else
		pause = pause_ms*(ticRateHz/1000);

	// loop until time expires
	while( ((TimerPauseReg<<8) | (TCNT0)) < (pause+timerThres) )
     9b4:	80 91 96 01 	lds	r24, 0x0196
     9b8:	90 91 97 01 	lds	r25, 0x0197
     9bc:	a0 91 98 01 	lds	r26, 0x0198
     9c0:	b0 91 99 01 	lds	r27, 0x0199
     9c4:	22 27       	eor	r18, r18
     9c6:	38 2f       	mov	r19, r24
     9c8:	49 2f       	mov	r20, r25
     9ca:	5a 2f       	mov	r21, r26
     9cc:	86 e4       	ldi	r24, 0x46	; 70
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	fc 01       	movw	r30, r24
     9d2:	80 81       	ld	r24, Z
     9d4:	88 2f       	mov	r24, r24
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	a0 e0       	ldi	r26, 0x00	; 0
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	28 2b       	or	r18, r24
     9de:	39 2b       	or	r19, r25
     9e0:	4a 2b       	or	r20, r26
     9e2:	5b 2b       	or	r21, r27
     9e4:	8d 81       	ldd	r24, Y+5	; 0x05
     9e6:	e8 2e       	mov	r14, r24
     9e8:	f1 2c       	mov	r15, r1
     9ea:	00 e0       	ldi	r16, 0x00	; 0
     9ec:	10 e0       	ldi	r17, 0x00	; 0
     9ee:	89 81       	ldd	r24, Y+1	; 0x01
     9f0:	9a 81       	ldd	r25, Y+2	; 0x02
     9f2:	ab 81       	ldd	r26, Y+3	; 0x03
     9f4:	bc 81       	ldd	r27, Y+4	; 0x04
     9f6:	8e 0d       	add	r24, r14
     9f8:	9f 1d       	adc	r25, r15
     9fa:	a0 1f       	adc	r26, r16
     9fc:	b1 1f       	adc	r27, r17
     9fe:	28 17       	cp	r18, r24
     a00:	39 07       	cpc	r19, r25
     a02:	4a 07       	cpc	r20, r26
     a04:	5b 07       	cpc	r21, r27
     a06:	08 f4       	brcc	.+2      	; 0xa0a <timerPause+0x196>
     a08:	b1 cf       	rjmp	.-158    	; 0x96c <timerPause+0xf8>
	
	TimerPauseReg = 0;
	while(TimerPauseReg < pause);

	*/
}
     a0a:	67 96       	adiw	r28, 0x17	; 23
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
     a10:	de bf       	out	0x3e, r29	; 62
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	cd bf       	out	0x3d, r28	; 61
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	ff 90       	pop	r15
     a20:	ef 90       	pop	r14
     a22:	08 95       	ret

00000a24 <timer0ClearOverflowCount>:

void timer0ClearOverflowCount(void)
{
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
	// clear the timer overflow counter registers
	Timer0Reg0 = 0;	// initialize time registers
     a2c:	10 92 92 01 	sts	0x0192, r1
     a30:	10 92 93 01 	sts	0x0193, r1
     a34:	10 92 94 01 	sts	0x0194, r1
     a38:	10 92 95 01 	sts	0x0195, r1
}
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	08 95       	ret

00000a42 <timer2ClearOverflowCount>:
	return Timer0Reg0;
}

#ifdef TCNT2	// support timer2 only if it exists
void timer2ClearOverflowCount(void)
{
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
	// clear the timer overflow counter registers
	Timer2Reg0 = 0;	// initialize time registers
     a4a:	10 92 9a 01 	sts	0x019A, r1
     a4e:	10 92 9b 01 	sts	0x019B, r1
     a52:	10 92 9c 01 	sts	0x019C, r1
     a56:	10 92 9d 01 	sts	0x019D, r1
}
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <timer1PWMInit>:
	return Timer2Reg0;
}
#endif

void timer1PWMInit(u08 bitRes)
{
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	1f 92       	push	r1
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
     a6a:	89 83       	std	Y+1, r24	; 0x01
	// configures timer1 for use with PWM output
	// on OC1A and OC1B pins

	// enable timer1 as 8,9,10bit PWM
	if(bitRes == 9)
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	89 30       	cpi	r24, 0x09	; 9
     a70:	99 f4       	brne	.+38     	; 0xa98 <timer1PWMInit+0x38>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
     a72:	80 e8       	ldi	r24, 0x80	; 128
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	20 e8       	ldi	r18, 0x80	; 128
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	f9 01       	movw	r30, r18
     a7c:	20 81       	ld	r18, Z
     a7e:	22 60       	ori	r18, 0x02	; 2
     a80:	fc 01       	movw	r30, r24
     a82:	20 83       	st	Z, r18
		cbi(TCCR1A,PWM10);
     a84:	80 e8       	ldi	r24, 0x80	; 128
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	20 e8       	ldi	r18, 0x80	; 128
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	f9 01       	movw	r30, r18
     a8e:	20 81       	ld	r18, Z
     a90:	2e 7f       	andi	r18, 0xFE	; 254
     a92:	fc 01       	movw	r30, r24
     a94:	20 83       	st	Z, r18
     a96:	28 c0       	rjmp	.+80     	; 0xae8 <timer1PWMInit+0x88>
	}
	else if( bitRes == 10 )
     a98:	89 81       	ldd	r24, Y+1	; 0x01
     a9a:	8a 30       	cpi	r24, 0x0A	; 10
     a9c:	99 f4       	brne	.+38     	; 0xac4 <timer1PWMInit+0x64>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
     a9e:	80 e8       	ldi	r24, 0x80	; 128
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	20 e8       	ldi	r18, 0x80	; 128
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	f9 01       	movw	r30, r18
     aa8:	20 81       	ld	r18, Z
     aaa:	22 60       	ori	r18, 0x02	; 2
     aac:	fc 01       	movw	r30, r24
     aae:	20 83       	st	Z, r18
		sbi(TCCR1A,PWM10);
     ab0:	80 e8       	ldi	r24, 0x80	; 128
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	20 e8       	ldi	r18, 0x80	; 128
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	f9 01       	movw	r30, r18
     aba:	20 81       	ld	r18, Z
     abc:	21 60       	ori	r18, 0x01	; 1
     abe:	fc 01       	movw	r30, r24
     ac0:	20 83       	st	Z, r18
     ac2:	12 c0       	rjmp	.+36     	; 0xae8 <timer1PWMInit+0x88>
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
     ac4:	80 e8       	ldi	r24, 0x80	; 128
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	20 e8       	ldi	r18, 0x80	; 128
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	f9 01       	movw	r30, r18
     ace:	20 81       	ld	r18, Z
     ad0:	2d 7f       	andi	r18, 0xFD	; 253
     ad2:	fc 01       	movw	r30, r24
     ad4:	20 83       	st	Z, r18
		sbi(TCCR1A,PWM10);
     ad6:	80 e8       	ldi	r24, 0x80	; 128
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	20 e8       	ldi	r18, 0x80	; 128
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	f9 01       	movw	r30, r18
     ae0:	20 81       	ld	r18, Z
     ae2:	21 60       	ori	r18, 0x01	; 1
     ae4:	fc 01       	movw	r30, r24
     ae6:	20 83       	st	Z, r18
	}

	// clear output compare value A
	OCR1A = 0;
     ae8:	88 e8       	ldi	r24, 0x88	; 136
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	fc 01       	movw	r30, r24
     aee:	11 82       	std	Z+1, r1	; 0x01
     af0:	10 82       	st	Z, r1
	// clear output compare value B
	OCR1B = 0;
     af2:	8a e8       	ldi	r24, 0x8A	; 138
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	fc 01       	movw	r30, r24
     af8:	11 82       	std	Z+1, r1	; 0x01
     afa:	10 82       	st	Z, r1
}
     afc:	0f 90       	pop	r0
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <timer1PWMOff>:

}
#endif

void timer1PWMOff(void)
{
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	cd b7       	in	r28, 0x3d	; 61
     b0a:	de b7       	in	r29, 0x3e	; 62
	// turn off timer1 PWM mode
	cbi(TCCR1A,PWM11);
     b0c:	80 e8       	ldi	r24, 0x80	; 128
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	20 e8       	ldi	r18, 0x80	; 128
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	f9 01       	movw	r30, r18
     b16:	20 81       	ld	r18, Z
     b18:	2d 7f       	andi	r18, 0xFD	; 253
     b1a:	fc 01       	movw	r30, r24
     b1c:	20 83       	st	Z, r18
	cbi(TCCR1A,PWM10);
     b1e:	80 e8       	ldi	r24, 0x80	; 128
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	20 e8       	ldi	r18, 0x80	; 128
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	f9 01       	movw	r30, r18
     b28:	20 81       	ld	r18, Z
     b2a:	2e 7f       	andi	r18, 0xFE	; 254
     b2c:	fc 01       	movw	r30, r24
     b2e:	20 83       	st	Z, r18
	// set PWM1A/B (OutputCompare action) to none
	timer1PWMAOff();
     b30:	0e 94 d1 05 	call	0xba2	; 0xba2 <timer1PWMAOff>
	timer1PWMBOff();
     b34:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <timer1PWMBOff>
}
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	08 95       	ret

00000b3e <timer1PWMAOn>:

void timer1PWMAOn(void)
{
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
	// turn on channel A (OC1A) PWM output
	// set OC1A as non-inverted PWM
	sbi(TCCR1A,COM1A1);
     b46:	80 e8       	ldi	r24, 0x80	; 128
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	20 e8       	ldi	r18, 0x80	; 128
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	f9 01       	movw	r30, r18
     b50:	20 81       	ld	r18, Z
     b52:	20 68       	ori	r18, 0x80	; 128
     b54:	fc 01       	movw	r30, r24
     b56:	20 83       	st	Z, r18
	cbi(TCCR1A,COM1A0);
     b58:	80 e8       	ldi	r24, 0x80	; 128
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	20 e8       	ldi	r18, 0x80	; 128
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	f9 01       	movw	r30, r18
     b62:	20 81       	ld	r18, Z
     b64:	2f 7b       	andi	r18, 0xBF	; 191
     b66:	fc 01       	movw	r30, r24
     b68:	20 83       	st	Z, r18
}
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	08 95       	ret

00000b70 <timer1PWMBOn>:

void timer1PWMBOn(void)
{
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
	// turn on channel B (OC1B) PWM output
	// set OC1B as non-inverted PWM
	sbi(TCCR1A,COM1B1);
     b78:	80 e8       	ldi	r24, 0x80	; 128
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	20 e8       	ldi	r18, 0x80	; 128
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	f9 01       	movw	r30, r18
     b82:	20 81       	ld	r18, Z
     b84:	20 62       	ori	r18, 0x20	; 32
     b86:	fc 01       	movw	r30, r24
     b88:	20 83       	st	Z, r18
	cbi(TCCR1A,COM1B0);
     b8a:	80 e8       	ldi	r24, 0x80	; 128
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	20 e8       	ldi	r18, 0x80	; 128
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	f9 01       	movw	r30, r18
     b94:	20 81       	ld	r18, Z
     b96:	2f 7e       	andi	r18, 0xEF	; 239
     b98:	fc 01       	movw	r30, r24
     b9a:	20 83       	st	Z, r18
}
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	08 95       	ret

00000ba2 <timer1PWMAOff>:

void timer1PWMAOff(void)
{
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
	// turn off channel A (OC1A) PWM output
	// set OC1A (OutputCompare action) to none
	cbi(TCCR1A,COM1A1);
     baa:	80 e8       	ldi	r24, 0x80	; 128
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	20 e8       	ldi	r18, 0x80	; 128
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	f9 01       	movw	r30, r18
     bb4:	20 81       	ld	r18, Z
     bb6:	2f 77       	andi	r18, 0x7F	; 127
     bb8:	fc 01       	movw	r30, r24
     bba:	20 83       	st	Z, r18
	cbi(TCCR1A,COM1A0);
     bbc:	80 e8       	ldi	r24, 0x80	; 128
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	20 e8       	ldi	r18, 0x80	; 128
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	f9 01       	movw	r30, r18
     bc6:	20 81       	ld	r18, Z
     bc8:	2f 7b       	andi	r18, 0xBF	; 191
     bca:	fc 01       	movw	r30, r24
     bcc:	20 83       	st	Z, r18
}
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <timer1PWMBOff>:

void timer1PWMBOff(void)
{
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
	// turn off channel B (OC1B) PWM output
	// set OC1B (OutputCompare action) to none
	cbi(TCCR1A,COM1B1);
     bdc:	80 e8       	ldi	r24, 0x80	; 128
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	20 e8       	ldi	r18, 0x80	; 128
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	f9 01       	movw	r30, r18
     be6:	20 81       	ld	r18, Z
     be8:	2f 7d       	andi	r18, 0xDF	; 223
     bea:	fc 01       	movw	r30, r24
     bec:	20 83       	st	Z, r18
	cbi(TCCR1A,COM1B0);
     bee:	80 e8       	ldi	r24, 0x80	; 128
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	20 e8       	ldi	r18, 0x80	; 128
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	f9 01       	movw	r30, r18
     bf8:	20 81       	ld	r18, Z
     bfa:	2f 7e       	andi	r18, 0xEF	; 239
     bfc:	fc 01       	movw	r30, r24
     bfe:	20 83       	st	Z, r18
}
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <timer1PWMASet>:

void timer1PWMASet(u16 pwmDuty)
{
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <timer1PWMASet+0x6>
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1AH);		// set the high 8bits of OCR1A
	//outp( (pwmDuty&0x00FF), OCR1AL);	// set the low 8bits of OCR1A
	OCR1A = pwmDuty;
     c14:	88 e8       	ldi	r24, 0x88	; 136
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	29 81       	ldd	r18, Y+1	; 0x01
     c1a:	3a 81       	ldd	r19, Y+2	; 0x02
     c1c:	fc 01       	movw	r30, r24
     c1e:	31 83       	std	Z+1, r19	; 0x01
     c20:	20 83       	st	Z, r18
}
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	08 95       	ret

00000c2c <timer1PWMBSet>:

void timer1PWMBSet(u16 pwmDuty)
{
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	00 d0       	rcall	.+0      	; 0xc32 <timer1PWMBSet+0x6>
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	9a 83       	std	Y+2, r25	; 0x02
     c38:	89 83       	std	Y+1, r24	; 0x01
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
     c3a:	8a e8       	ldi	r24, 0x8A	; 138
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	29 81       	ldd	r18, Y+1	; 0x01
     c40:	3a 81       	ldd	r19, Y+2	; 0x02
     c42:	fc 01       	movw	r30, r24
     c44:	31 83       	std	Z+1, r19	; 0x01
     c46:	20 83       	st	Z, r18
}
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <__vector_18>:

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
     c52:	1f 92       	push	r1
     c54:	0f 92       	push	r0
     c56:	00 90 5f 00 	lds	r0, 0x005F
     c5a:	0f 92       	push	r0
     c5c:	11 24       	eor	r1, r1
     c5e:	2f 93       	push	r18
     c60:	3f 93       	push	r19
     c62:	4f 93       	push	r20
     c64:	5f 93       	push	r21
     c66:	6f 93       	push	r22
     c68:	7f 93       	push	r23
     c6a:	8f 93       	push	r24
     c6c:	9f 93       	push	r25
     c6e:	af 93       	push	r26
     c70:	bf 93       	push	r27
     c72:	ef 93       	push	r30
     c74:	ff 93       	push	r31
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
	Timer0Reg0++;			// increment low-order counter
     c7e:	80 91 92 01 	lds	r24, 0x0192
     c82:	90 91 93 01 	lds	r25, 0x0193
     c86:	a0 91 94 01 	lds	r26, 0x0194
     c8a:	b0 91 95 01 	lds	r27, 0x0195
     c8e:	01 96       	adiw	r24, 0x01	; 1
     c90:	a1 1d       	adc	r26, r1
     c92:	b1 1d       	adc	r27, r1
     c94:	80 93 92 01 	sts	0x0192, r24
     c98:	90 93 93 01 	sts	0x0193, r25
     c9c:	a0 93 94 01 	sts	0x0194, r26
     ca0:	b0 93 95 01 	sts	0x0195, r27

	// increment pause counter
	TimerPauseReg++;
     ca4:	80 91 96 01 	lds	r24, 0x0196
     ca8:	90 91 97 01 	lds	r25, 0x0197
     cac:	a0 91 98 01 	lds	r26, 0x0198
     cb0:	b0 91 99 01 	lds	r27, 0x0199
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	a1 1d       	adc	r26, r1
     cb8:	b1 1d       	adc	r27, r1
     cba:	80 93 96 01 	sts	0x0196, r24
     cbe:	90 93 97 01 	sts	0x0197, r25
     cc2:	a0 93 98 01 	sts	0x0198, r26
     cc6:	b0 93 99 01 	sts	0x0199, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
     cca:	80 91 02 01 	lds	r24, 0x0102
     cce:	90 91 03 01 	lds	r25, 0x0103
     cd2:	89 2b       	or	r24, r25
     cd4:	31 f0       	breq	.+12     	; 0xce2 <__vector_18+0x90>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
     cd6:	80 91 02 01 	lds	r24, 0x0102
     cda:	90 91 03 01 	lds	r25, 0x0103
     cde:	fc 01       	movw	r30, r24
     ce0:	09 95       	icall
}
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	ff 91       	pop	r31
     ce8:	ef 91       	pop	r30
     cea:	bf 91       	pop	r27
     cec:	af 91       	pop	r26
     cee:	9f 91       	pop	r25
     cf0:	8f 91       	pop	r24
     cf2:	7f 91       	pop	r23
     cf4:	6f 91       	pop	r22
     cf6:	5f 91       	pop	r21
     cf8:	4f 91       	pop	r20
     cfa:	3f 91       	pop	r19
     cfc:	2f 91       	pop	r18
     cfe:	0f 90       	pop	r0
     d00:	00 92 5f 00 	sts	0x005F, r0
     d04:	0f 90       	pop	r0
     d06:	1f 90       	pop	r1
     d08:	18 95       	reti

00000d0a <__vector_15>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
     d0a:	1f 92       	push	r1
     d0c:	0f 92       	push	r0
     d0e:	00 90 5f 00 	lds	r0, 0x005F
     d12:	0f 92       	push	r0
     d14:	11 24       	eor	r1, r1
     d16:	2f 93       	push	r18
     d18:	3f 93       	push	r19
     d1a:	4f 93       	push	r20
     d1c:	5f 93       	push	r21
     d1e:	6f 93       	push	r22
     d20:	7f 93       	push	r23
     d22:	8f 93       	push	r24
     d24:	9f 93       	push	r25
     d26:	af 93       	push	r26
     d28:	bf 93       	push	r27
     d2a:	ef 93       	push	r30
     d2c:	ff 93       	push	r31
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
     d36:	80 91 04 01 	lds	r24, 0x0104
     d3a:	90 91 05 01 	lds	r25, 0x0105
     d3e:	89 2b       	or	r24, r25
     d40:	31 f0       	breq	.+12     	; 0xd4e <__vector_15+0x44>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
     d42:	80 91 04 01 	lds	r24, 0x0104
     d46:	90 91 05 01 	lds	r25, 0x0105
     d4a:	fc 01       	movw	r30, r24
     d4c:	09 95       	icall
}
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	ff 91       	pop	r31
     d54:	ef 91       	pop	r30
     d56:	bf 91       	pop	r27
     d58:	af 91       	pop	r26
     d5a:	9f 91       	pop	r25
     d5c:	8f 91       	pop	r24
     d5e:	7f 91       	pop	r23
     d60:	6f 91       	pop	r22
     d62:	5f 91       	pop	r21
     d64:	4f 91       	pop	r20
     d66:	3f 91       	pop	r19
     d68:	2f 91       	pop	r18
     d6a:	0f 90       	pop	r0
     d6c:	00 92 5f 00 	sts	0x005F, r0
     d70:	0f 90       	pop	r0
     d72:	1f 90       	pop	r1
     d74:	18 95       	reti

00000d76 <__vector_11>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
     d76:	1f 92       	push	r1
     d78:	0f 92       	push	r0
     d7a:	00 90 5f 00 	lds	r0, 0x005F
     d7e:	0f 92       	push	r0
     d80:	11 24       	eor	r1, r1
     d82:	2f 93       	push	r18
     d84:	3f 93       	push	r19
     d86:	4f 93       	push	r20
     d88:	5f 93       	push	r21
     d8a:	6f 93       	push	r22
     d8c:	7f 93       	push	r23
     d8e:	8f 93       	push	r24
     d90:	9f 93       	push	r25
     d92:	af 93       	push	r26
     d94:	bf 93       	push	r27
     d96:	ef 93       	push	r30
     d98:	ff 93       	push	r31
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
	Timer2Reg0++;			// increment low-order counter
     da2:	80 91 9a 01 	lds	r24, 0x019A
     da6:	90 91 9b 01 	lds	r25, 0x019B
     daa:	a0 91 9c 01 	lds	r26, 0x019C
     dae:	b0 91 9d 01 	lds	r27, 0x019D
     db2:	01 96       	adiw	r24, 0x01	; 1
     db4:	a1 1d       	adc	r26, r1
     db6:	b1 1d       	adc	r27, r1
     db8:	80 93 9a 01 	sts	0x019A, r24
     dbc:	90 93 9b 01 	sts	0x019B, r25
     dc0:	a0 93 9c 01 	sts	0x019C, r26
     dc4:	b0 93 9d 01 	sts	0x019D, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
     dc8:	80 91 0c 01 	lds	r24, 0x010C
     dcc:	90 91 0d 01 	lds	r25, 0x010D
     dd0:	89 2b       	or	r24, r25
     dd2:	31 f0       	breq	.+12     	; 0xde0 <__vector_11+0x6a>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
     dd4:	80 91 0c 01 	lds	r24, 0x010C
     dd8:	90 91 0d 01 	lds	r25, 0x010D
     ddc:	fc 01       	movw	r30, r24
     dde:	09 95       	icall
}
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	ff 91       	pop	r31
     de6:	ef 91       	pop	r30
     de8:	bf 91       	pop	r27
     dea:	af 91       	pop	r26
     dec:	9f 91       	pop	r25
     dee:	8f 91       	pop	r24
     df0:	7f 91       	pop	r23
     df2:	6f 91       	pop	r22
     df4:	5f 91       	pop	r21
     df6:	4f 91       	pop	r20
     df8:	3f 91       	pop	r19
     dfa:	2f 91       	pop	r18
     dfc:	0f 90       	pop	r0
     dfe:	00 92 5f 00 	sts	0x005F, r0
     e02:	0f 90       	pop	r0
     e04:	1f 90       	pop	r1
     e06:	18 95       	reti

00000e08 <__vector_13>:
}
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
     e08:	1f 92       	push	r1
     e0a:	0f 92       	push	r0
     e0c:	00 90 5f 00 	lds	r0, 0x005F
     e10:	0f 92       	push	r0
     e12:	11 24       	eor	r1, r1
     e14:	2f 93       	push	r18
     e16:	3f 93       	push	r19
     e18:	4f 93       	push	r20
     e1a:	5f 93       	push	r21
     e1c:	6f 93       	push	r22
     e1e:	7f 93       	push	r23
     e20:	8f 93       	push	r24
     e22:	9f 93       	push	r25
     e24:	af 93       	push	r26
     e26:	bf 93       	push	r27
     e28:	ef 93       	push	r30
     e2a:	ff 93       	push	r31
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
     e34:	80 91 06 01 	lds	r24, 0x0106
     e38:	90 91 07 01 	lds	r25, 0x0107
     e3c:	89 2b       	or	r24, r25
     e3e:	31 f0       	breq	.+12     	; 0xe4c <__vector_13+0x44>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
     e40:	80 91 06 01 	lds	r24, 0x0106
     e44:	90 91 07 01 	lds	r25, 0x0107
     e48:	fc 01       	movw	r30, r24
     e4a:	09 95       	icall
}
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	ff 91       	pop	r31
     e52:	ef 91       	pop	r30
     e54:	bf 91       	pop	r27
     e56:	af 91       	pop	r26
     e58:	9f 91       	pop	r25
     e5a:	8f 91       	pop	r24
     e5c:	7f 91       	pop	r23
     e5e:	6f 91       	pop	r22
     e60:	5f 91       	pop	r21
     e62:	4f 91       	pop	r20
     e64:	3f 91       	pop	r19
     e66:	2f 91       	pop	r18
     e68:	0f 90       	pop	r0
     e6a:	00 92 5f 00 	sts	0x005F, r0
     e6e:	0f 90       	pop	r0
     e70:	1f 90       	pop	r1
     e72:	18 95       	reti

00000e74 <__vector_14>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
     e74:	1f 92       	push	r1
     e76:	0f 92       	push	r0
     e78:	00 90 5f 00 	lds	r0, 0x005F
     e7c:	0f 92       	push	r0
     e7e:	11 24       	eor	r1, r1
     e80:	2f 93       	push	r18
     e82:	3f 93       	push	r19
     e84:	4f 93       	push	r20
     e86:	5f 93       	push	r21
     e88:	6f 93       	push	r22
     e8a:	7f 93       	push	r23
     e8c:	8f 93       	push	r24
     e8e:	9f 93       	push	r25
     e90:	af 93       	push	r26
     e92:	bf 93       	push	r27
     e94:	ef 93       	push	r30
     e96:	ff 93       	push	r31
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
     ea0:	80 91 08 01 	lds	r24, 0x0108
     ea4:	90 91 09 01 	lds	r25, 0x0109
     ea8:	89 2b       	or	r24, r25
     eaa:	31 f0       	breq	.+12     	; 0xeb8 <__vector_14+0x44>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
     eac:	80 91 08 01 	lds	r24, 0x0108
     eb0:	90 91 09 01 	lds	r25, 0x0109
     eb4:	fc 01       	movw	r30, r24
     eb6:	09 95       	icall
}
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	ff 91       	pop	r31
     ebe:	ef 91       	pop	r30
     ec0:	bf 91       	pop	r27
     ec2:	af 91       	pop	r26
     ec4:	9f 91       	pop	r25
     ec6:	8f 91       	pop	r24
     ec8:	7f 91       	pop	r23
     eca:	6f 91       	pop	r22
     ecc:	5f 91       	pop	r21
     ece:	4f 91       	pop	r20
     ed0:	3f 91       	pop	r19
     ed2:	2f 91       	pop	r18
     ed4:	0f 90       	pop	r0
     ed6:	00 92 5f 00 	sts	0x005F, r0
     eda:	0f 90       	pop	r0
     edc:	1f 90       	pop	r1
     ede:	18 95       	reti

00000ee0 <__vector_12>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
     ee0:	1f 92       	push	r1
     ee2:	0f 92       	push	r0
     ee4:	00 90 5f 00 	lds	r0, 0x005F
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	2f 93       	push	r18
     eee:	3f 93       	push	r19
     ef0:	4f 93       	push	r20
     ef2:	5f 93       	push	r21
     ef4:	6f 93       	push	r22
     ef6:	7f 93       	push	r23
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
     f0c:	80 91 0a 01 	lds	r24, 0x010A
     f10:	90 91 0b 01 	lds	r25, 0x010B
     f14:	89 2b       	or	r24, r25
     f16:	31 f0       	breq	.+12     	; 0xf24 <__vector_12+0x44>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
     f18:	80 91 0a 01 	lds	r24, 0x010A
     f1c:	90 91 0b 01 	lds	r25, 0x010B
     f20:	fc 01       	movw	r30, r24
     f22:	09 95       	icall
}
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	ff 91       	pop	r31
     f2a:	ef 91       	pop	r30
     f2c:	bf 91       	pop	r27
     f2e:	af 91       	pop	r26
     f30:	9f 91       	pop	r25
     f32:	8f 91       	pop	r24
     f34:	7f 91       	pop	r23
     f36:	6f 91       	pop	r22
     f38:	5f 91       	pop	r21
     f3a:	4f 91       	pop	r20
     f3c:	3f 91       	pop	r19
     f3e:	2f 91       	pop	r18
     f40:	0f 90       	pop	r0
     f42:	00 92 5f 00 	sts	0x005F, r0
     f46:	0f 90       	pop	r0
     f48:	1f 90       	pop	r1
     f4a:	18 95       	reti

00000f4c <__vector_9>:

//! Interrupt handler for OutputCompare2A match (OC2A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMPA_vect)
{
     f4c:	1f 92       	push	r1
     f4e:	0f 92       	push	r0
     f50:	00 90 5f 00 	lds	r0, 0x005F
     f54:	0f 92       	push	r0
     f56:	11 24       	eor	r1, r1
     f58:	2f 93       	push	r18
     f5a:	3f 93       	push	r19
     f5c:	4f 93       	push	r20
     f5e:	5f 93       	push	r21
     f60:	6f 93       	push	r22
     f62:	7f 93       	push	r23
     f64:	8f 93       	push	r24
     f66:	9f 93       	push	r25
     f68:	af 93       	push	r26
     f6a:	bf 93       	push	r27
     f6c:	ef 93       	push	r30
     f6e:	ff 93       	push	r31
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     f78:	80 91 0e 01 	lds	r24, 0x010E
     f7c:	90 91 0f 01 	lds	r25, 0x010F
     f80:	89 2b       	or	r24, r25
     f82:	31 f0       	breq	.+12     	; 0xf90 <__vector_9+0x44>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     f84:	80 91 0e 01 	lds	r24, 0x010E
     f88:	90 91 0f 01 	lds	r25, 0x010F
     f8c:	fc 01       	movw	r30, r24
     f8e:	09 95       	icall
}
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	ff 91       	pop	r31
     f96:	ef 91       	pop	r30
     f98:	bf 91       	pop	r27
     f9a:	af 91       	pop	r26
     f9c:	9f 91       	pop	r25
     f9e:	8f 91       	pop	r24
     fa0:	7f 91       	pop	r23
     fa2:	6f 91       	pop	r22
     fa4:	5f 91       	pop	r21
     fa6:	4f 91       	pop	r20
     fa8:	3f 91       	pop	r19
     faa:	2f 91       	pop	r18
     fac:	0f 90       	pop	r0
     fae:	00 92 5f 00 	sts	0x005F, r0
     fb2:	0f 90       	pop	r0
     fb4:	1f 90       	pop	r1
     fb6:	18 95       	reti

00000fb8 <__vector_10>:

//! Interrupt handler for OutputCompare2B match (OC2B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMPB_vect)
{
     fb8:	1f 92       	push	r1
     fba:	0f 92       	push	r0
     fbc:	00 90 5f 00 	lds	r0, 0x005F
     fc0:	0f 92       	push	r0
     fc2:	11 24       	eor	r1, r1
     fc4:	2f 93       	push	r18
     fc6:	3f 93       	push	r19
     fc8:	4f 93       	push	r20
     fca:	5f 93       	push	r21
     fcc:	6f 93       	push	r22
     fce:	7f 93       	push	r23
     fd0:	8f 93       	push	r24
     fd2:	9f 93       	push	r25
     fd4:	af 93       	push	r26
     fd6:	bf 93       	push	r27
     fd8:	ef 93       	push	r30
     fda:	ff 93       	push	r31
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     fe4:	80 91 0e 01 	lds	r24, 0x010E
     fe8:	90 91 0f 01 	lds	r25, 0x010F
     fec:	89 2b       	or	r24, r25
     fee:	31 f0       	breq	.+12     	; 0xffc <__vector_10+0x44>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     ff0:	80 91 0e 01 	lds	r24, 0x010E
     ff4:	90 91 0f 01 	lds	r25, 0x010F
     ff8:	fc 01       	movw	r30, r24
     ffa:	09 95       	icall
}
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	ff 91       	pop	r31
    1002:	ef 91       	pop	r30
    1004:	bf 91       	pop	r27
    1006:	af 91       	pop	r26
    1008:	9f 91       	pop	r25
    100a:	8f 91       	pop	r24
    100c:	7f 91       	pop	r23
    100e:	6f 91       	pop	r22
    1010:	5f 91       	pop	r21
    1012:	4f 91       	pop	r20
    1014:	3f 91       	pop	r19
    1016:	2f 91       	pop	r18
    1018:	0f 90       	pop	r0
    101a:	00 92 5f 00 	sts	0x005F, r0
    101e:	0f 90       	pop	r0
    1020:	1f 90       	pop	r1
    1022:	18 95       	reti

00001024 <uartInit>:
typedef void (*voidFuncPtru08)(unsigned char);
volatile static voidFuncPtru08 UartRxFunc;

// enable and initialize the uart
void uartInit(void)
{
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
	// initialize the buffers
	uartInitBuffers();
    102c:	0e 94 34 08 	call	0x1068	; 0x1068 <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
    1030:	10 92 91 01 	sts	0x0191, r1
    1034:	10 92 90 01 	sts	0x0190, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    1038:	81 ec       	ldi	r24, 0xC1	; 193
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	28 ed       	ldi	r18, 0xD8	; 216
    103e:	fc 01       	movw	r30, r24
    1040:	20 83       	st	Z, r18

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
    1042:	60 e8       	ldi	r22, 0x80	; 128
    1044:	75 e2       	ldi	r23, 0x25	; 37
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 4b 08 	call	0x1096	; 0x1096 <uartSetBaudRate>
	// initialize states
	uartReadyTx = TRUE;
    104e:	8f ef       	ldi	r24, 0xFF	; 255
    1050:	80 93 9e 01 	sts	0x019E, r24
	uartBufferedTx = FALSE;
    1054:	10 92 a7 01 	sts	0x01A7, r1
	// clear overflow count
	uartRxOverflow = 0;
    1058:	10 92 b1 01 	sts	0x01B1, r1
    105c:	10 92 b0 01 	sts	0x01B0, r1
	// enable interrupts
	sei();
    1060:	78 94       	sei
}
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	08 95       	ret

00001068 <uartInitBuffers>:

// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (unsigned char *)uartRxData, UART_RX_BUFFER_SIZE);
    1070:	40 e4       	ldi	r20, 0x40	; 64
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	60 e1       	ldi	r22, 0x10	; 16
    1076:	71 e0       	ldi	r23, 0x01	; 1
    1078:	8f e9       	ldi	r24, 0x9F	; 159
    107a:	91 e0       	ldi	r25, 0x01	; 1
    107c:	0e 94 1e 01 	call	0x23c	; 0x23c <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (unsigned char *)uartTxData, UART_TX_BUFFER_SIZE);
    1080:	40 e4       	ldi	r20, 0x40	; 64
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	60 e5       	ldi	r22, 0x50	; 80
    1086:	71 e0       	ldi	r23, 0x01	; 1
    1088:	88 ea       	ldi	r24, 0xA8	; 168
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	0e 94 1e 01 	call	0x23c	; 0x23c <bufferInit>
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (u08*) UART_RX_BUFFER_ADDR, UART_RX_BUFFER_SIZE);
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (u08*) UART_TX_BUFFER_ADDR, UART_TX_BUFFER_SIZE);
	#endif
}
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	08 95       	ret

00001096 <uartSetBaudRate>:
	UartRxFunc = rx_func;
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
    1096:	ef 92       	push	r14
    1098:	ff 92       	push	r15
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	2a 97       	sbiw	r28, 0x0a	; 10
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	6b 83       	std	Y+3, r22	; 0x03
    10b4:	7c 83       	std	Y+4, r23	; 0x04
    10b6:	8d 83       	std	Y+5, r24	; 0x05
    10b8:	9e 83       	std	Y+6, r25	; 0x06
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	9c 81       	ldd	r25, Y+4	; 0x04
    10be:	ad 81       	ldd	r26, Y+5	; 0x05
    10c0:	be 81       	ldd	r27, Y+6	; 0x06
    10c2:	90 5f       	subi	r25, 0xF0	; 240
    10c4:	a1 4f       	sbci	r26, 0xF1	; 241
    10c6:	bf 4f       	sbci	r27, 0xFF	; 255
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	aa 1f       	adc	r26, r26
    10ce:	bb 1f       	adc	r27, r27
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	aa 1f       	adc	r26, r26
    10d6:	bb 1f       	adc	r27, r27
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	aa 1f       	adc	r26, r26
    10de:	bb 1f       	adc	r27, r27
    10e0:	7c 01       	movw	r14, r24
    10e2:	8d 01       	movw	r16, r26
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	ad 81       	ldd	r26, Y+5	; 0x05
    10ea:	be 81       	ldd	r27, Y+6	; 0x06
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	aa 1f       	adc	r26, r26
    10f2:	bb 1f       	adc	r27, r27
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	aa 1f       	adc	r26, r26
    10fa:	bb 1f       	adc	r27, r27
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	aa 1f       	adc	r26, r26
    1102:	bb 1f       	adc	r27, r27
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	aa 1f       	adc	r26, r26
    110a:	bb 1f       	adc	r27, r27
    110c:	9c 01       	movw	r18, r24
    110e:	ad 01       	movw	r20, r26
    1110:	c8 01       	movw	r24, r16
    1112:	b7 01       	movw	r22, r14
    1114:	0e 94 4d 0a 	call	0x149a	; 0x149a <__udivmodsi4>
    1118:	da 01       	movw	r26, r20
    111a:	c9 01       	movw	r24, r18
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	9a 83       	std	Y+2, r25	; 0x02
    1120:	89 83       	std	Y+1, r24	; 0x01
	outb(UBRRL, bauddiv);
    1122:	84 ec       	ldi	r24, 0xC4	; 196
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	29 81       	ldd	r18, Y+1	; 0x01
    1128:	fc 01       	movw	r30, r24
    112a:	20 83       	st	Z, r18
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
    112c:	85 ec       	ldi	r24, 0xC5	; 197
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	29 81       	ldd	r18, Y+1	; 0x01
    1132:	3a 81       	ldd	r19, Y+2	; 0x02
    1134:	23 2f       	mov	r18, r19
    1136:	33 27       	eor	r19, r19
    1138:	fc 01       	movw	r30, r24
    113a:	20 83       	st	Z, r18
	#endif
}
    113c:	2a 96       	adiw	r28, 0x0a	; 10
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	ff 90       	pop	r15
    1152:	ef 90       	pop	r14
    1154:	08 95       	ret

00001156 <uartSendByte>:
	return &uartTxBuffer;
}

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	1f 92       	push	r1
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	89 83       	std	Y+1, r24	; 0x01
	// wait for the transmitter to be ready
	while(!uartReadyTx);
    1162:	00 00       	nop
    1164:	80 91 9e 01 	lds	r24, 0x019E
    1168:	88 23       	and	r24, r24
    116a:	e1 f3       	breq	.-8      	; 0x1164 <uartSendByte+0xe>
	// send byte
	outb(UDR, txData);
    116c:	86 ec       	ldi	r24, 0xC6	; 198
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	29 81       	ldd	r18, Y+1	; 0x01
    1172:	fc 01       	movw	r30, r24
    1174:	20 83       	st	Z, r18
	// set ready state to FALSE
	uartReadyTx = FALSE;
    1176:	10 92 9e 01 	sts	0x019E, r1
}
    117a:	0f 90       	pop	r0
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <__vector_22>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_TRANS)
{
    1182:	1f 92       	push	r1
    1184:	0f 92       	push	r0
    1186:	00 90 5f 00 	lds	r0, 0x005F
    118a:	0f 92       	push	r0
    118c:	11 24       	eor	r1, r1
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
    1192:	2f 93       	push	r18
    1194:	3f 93       	push	r19
    1196:	4f 93       	push	r20
    1198:	5f 93       	push	r21
    119a:	6f 93       	push	r22
    119c:	7f 93       	push	r23
    119e:	8f 93       	push	r24
    11a0:	9f 93       	push	r25
    11a2:	af 93       	push	r26
    11a4:	bf 93       	push	r27
    11a6:	ef 93       	push	r30
    11a8:	ff 93       	push	r31
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
	// check if buffered tx is enabled
	if(uartBufferedTx)
    11b2:	80 91 a7 01 	lds	r24, 0x01A7
    11b6:	88 23       	and	r24, r24
    11b8:	a9 f0       	breq	.+42     	; 0x11e4 <__vector_22+0x62>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
    11ba:	80 91 ac 01 	lds	r24, 0x01AC
    11be:	90 91 ad 01 	lds	r25, 0x01AD
    11c2:	89 2b       	or	r24, r25
    11c4:	49 f0       	breq	.+18     	; 0x11d8 <__vector_22+0x56>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
    11c6:	06 ec       	ldi	r16, 0xC6	; 198
    11c8:	10 e0       	ldi	r17, 0x00	; 0
    11ca:	88 ea       	ldi	r24, 0xA8	; 168
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <bufferGetFromFront>
    11d2:	f8 01       	movw	r30, r16
    11d4:	80 83       	st	Z, r24
    11d6:	09 c0       	rjmp	.+18     	; 0x11ea <__vector_22+0x68>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
    11d8:	10 92 a7 01 	sts	0x01A7, r1
			// return to ready state
			uartReadyTx = TRUE;
    11dc:	8f ef       	ldi	r24, 0xFF	; 255
    11de:	80 93 9e 01 	sts	0x019E, r24
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <__vector_22+0x68>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
    11e4:	8f ef       	ldi	r24, 0xFF	; 255
    11e6:	80 93 9e 01 	sts	0x019E, r24
	}
}
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	ff 91       	pop	r31
    11f0:	ef 91       	pop	r30
    11f2:	bf 91       	pop	r27
    11f4:	af 91       	pop	r26
    11f6:	9f 91       	pop	r25
    11f8:	8f 91       	pop	r24
    11fa:	7f 91       	pop	r23
    11fc:	6f 91       	pop	r22
    11fe:	5f 91       	pop	r21
    1200:	4f 91       	pop	r20
    1202:	3f 91       	pop	r19
    1204:	2f 91       	pop	r18
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	0f 90       	pop	r0
    120c:	00 92 5f 00 	sts	0x005F, r0
    1210:	0f 90       	pop	r0
    1212:	1f 90       	pop	r1
    1214:	18 95       	reti

00001216 <__vector_20>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_RECV)
{
    1216:	1f 92       	push	r1
    1218:	0f 92       	push	r0
    121a:	00 90 5f 00 	lds	r0, 0x005F
    121e:	0f 92       	push	r0
    1220:	11 24       	eor	r1, r1
    1222:	2f 93       	push	r18
    1224:	3f 93       	push	r19
    1226:	4f 93       	push	r20
    1228:	5f 93       	push	r21
    122a:	6f 93       	push	r22
    122c:	7f 93       	push	r23
    122e:	8f 93       	push	r24
    1230:	9f 93       	push	r25
    1232:	af 93       	push	r26
    1234:	bf 93       	push	r27
    1236:	ef 93       	push	r30
    1238:	ff 93       	push	r31
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	1f 92       	push	r1
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
	u08 c;
	
	// get received char
	c = inb(UDR);
    1244:	86 ec       	ldi	r24, 0xC6	; 198
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	fc 01       	movw	r30, r24
    124a:	80 81       	ld	r24, Z
    124c:	89 83       	std	Y+1, r24	; 0x01

	// if there's a user function to handle this receive event
	if(UartRxFunc)
    124e:	80 91 90 01 	lds	r24, 0x0190
    1252:	90 91 91 01 	lds	r25, 0x0191
    1256:	89 2b       	or	r24, r25
    1258:	41 f0       	breq	.+16     	; 0x126a <__vector_20+0x54>
	{
		// call it and pass the received data
		UartRxFunc(c);
    125a:	20 91 90 01 	lds	r18, 0x0190
    125e:	30 91 91 01 	lds	r19, 0x0191
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	f9 01       	movw	r30, r18
    1266:	09 95       	icall
    1268:	10 c0       	rjmp	.+32     	; 0x128a <__vector_20+0x74>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
    126a:	69 81       	ldd	r22, Y+1	; 0x01
    126c:	8f e9       	ldi	r24, 0x9F	; 159
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	0e 94 c5 01 	call	0x38a	; 0x38a <bufferAddToEnd>
    1274:	88 23       	and	r24, r24
    1276:	49 f4       	brne	.+18     	; 0x128a <__vector_20+0x74>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
    1278:	80 91 b0 01 	lds	r24, 0x01B0
    127c:	90 91 b1 01 	lds	r25, 0x01B1
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	90 93 b1 01 	sts	0x01B1, r25
    1286:	80 93 b0 01 	sts	0x01B0, r24
		}
	}
}
    128a:	0f 90       	pop	r0
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	ff 91       	pop	r31
    1292:	ef 91       	pop	r30
    1294:	bf 91       	pop	r27
    1296:	af 91       	pop	r26
    1298:	9f 91       	pop	r25
    129a:	8f 91       	pop	r24
    129c:	7f 91       	pop	r23
    129e:	6f 91       	pop	r22
    12a0:	5f 91       	pop	r21
    12a2:	4f 91       	pop	r20
    12a4:	3f 91       	pop	r19
    12a6:	2f 91       	pop	r18
    12a8:	0f 90       	pop	r0
    12aa:	00 92 5f 00 	sts	0x005F, r0
    12ae:	0f 90       	pop	r0
    12b0:	1f 90       	pop	r1
    12b2:	18 95       	reti

000012b4 <main>:

void timerTest(void);

//----- Begin Code ------------------------------------------------------------
int main(void)
{
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
	// initialize our libraries
	// initialize the UART (serial port)
	uartInit();
    12bc:	0e 94 12 08 	call	0x1024	; 0x1024 <uartInit>
	// set the baud rate of the UART for our debug/reporting output
	uartSetBaudRate(9600);
    12c0:	60 e8       	ldi	r22, 0x80	; 128
    12c2:	75 e2       	ldi	r23, 0x25	; 37
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 4b 08 	call	0x1096	; 0x1096 <uartSetBaudRate>
	// initialize rprintf system
	rprintfInit(uartSendByte);
    12cc:	8b ea       	ldi	r24, 0xAB	; 171
    12ce:	98 e0       	ldi	r25, 0x08	; 8
    12d0:	0e 94 25 02 	call	0x44a	; 0x44a <rprintfInit>
	
	// run the test
	timerTest();
    12d4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <timerTest>

	return 0;
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
}
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	08 95       	ret

000012e2 <timerTest>:

void timerTest(void)
{
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
	// print a little intro message so we know things are working
	rprintf("\r\n\n\nWelcome to the timer library test program!\r\n");
    12ea:	89 e9       	ldi	r24, 0x99	; 153
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	29 2f       	mov	r18, r25
    12f0:	2f 93       	push	r18
    12f2:	8f 93       	push	r24
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	8f 93       	push	r24
    12f8:	0e 94 71 02 	call	0x4e2	; 0x4e2 <rprintf1RamRom>
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0

	// initialize the timer system
	timerInit();
    1302:	0e 94 55 03 	call	0x6aa	; 0x6aa <timerInit>
	// to use the internal timers to produce a calibrated delay,
	// use the timerPause() function.  timerPause takes a 16-bit
	// integer argument in milliseconds

	// example: wait for 1/2 of a second, or 500ms
	rprintf("\r\nTest of timerPause() function\r\n");
    1306:	8a ec       	ldi	r24, 0xCA	; 202
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	29 2f       	mov	r18, r25
    130c:	2f 93       	push	r18
    130e:	8f 93       	push	r24
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	8f 93       	push	r24
    1314:	0e 94 71 02 	call	0x4e2	; 0x4e2 <rprintf1RamRom>
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
	rprintf("Here comes a 1/2-second delay...\r\n");
    131e:	8c ee       	ldi	r24, 0xEC	; 236
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	29 2f       	mov	r18, r25
    1324:	2f 93       	push	r18
    1326:	8f 93       	push	r24
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	8f 93       	push	r24
    132c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <rprintf1RamRom>
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
	timerPause(500);
    1336:	84 ef       	ldi	r24, 0xF4	; 244
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	0e 94 3a 04 	call	0x874	; 0x874 <timerPause>
	rprintf("Done!\r\n");
    133e:	8f e0       	ldi	r24, 0x0F	; 15
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	29 2f       	mov	r18, r25
    1344:	2f 93       	push	r18
    1346:	8f 93       	push	r24
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	8f 93       	push	r24
    134c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <rprintf1RamRom>
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
	// here's an example of using the timer library to do
	// pulse-width modulation or PWM.  PWM signals can be created on
	// any output compare (OCx) pin.  See your processor's data sheet
	// for more information on which I/O pins have output compare
	// capability.
	rprintf("\r\nTest of timer1 PWM output\r\n");
    1356:	87 e1       	ldi	r24, 0x17	; 23
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	29 2f       	mov	r18, r25
    135c:	2f 93       	push	r18
    135e:	8f 93       	push	r24
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	8f 93       	push	r24
    1364:	0e 94 71 02 	call	0x4e2	; 0x4e2 <rprintf1RamRom>
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0

	// set the OC1x port pins to output
	// We need to do this so we can see and use the PWM signal
	// ** these settings are correct for most processors, but not for all
	sbi(DDRD, PD4);
    136e:	8a e2       	ldi	r24, 0x2A	; 42
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	2a e2       	ldi	r18, 0x2A	; 42
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	f9 01       	movw	r30, r18
    1378:	20 81       	ld	r18, Z
    137a:	20 61       	ori	r18, 0x10	; 16
    137c:	fc 01       	movw	r30, r24
    137e:	20 83       	st	Z, r18
	sbi(DDRD, PD5);
    1380:	8a e2       	ldi	r24, 0x2A	; 42
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	2a e2       	ldi	r18, 0x2A	; 42
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	f9 01       	movw	r30, r18
    138a:	20 81       	ld	r18, Z
    138c:	20 62       	ori	r18, 0x20	; 32
    138e:	fc 01       	movw	r30, r24
    1390:	20 83       	st	Z, r18

	// initialize timer1 for PWM output
	// - you may use 8,9, or 10 bit PWM resolution
	rprintf("Initializing timer1 for PWM\r\n");
    1392:	85 e3       	ldi	r24, 0x35	; 53
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	29 2f       	mov	r18, r25
    1398:	2f 93       	push	r18
    139a:	8f 93       	push	r24
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	8f 93       	push	r24
    13a0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <rprintf1RamRom>
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
	timer1PWMInit(8);
    13aa:	88 e0       	ldi	r24, 0x08	; 8
    13ac:	0e 94 30 05 	call	0xa60	; 0xa60 <timer1PWMInit>

	// turn on the channel A PWM output of timer1
	// - this signal will come out on the OC1A I/O pin
	rprintf("Turning on timer1 channel A PWM output\r\n");
    13b0:	83 e5       	ldi	r24, 0x53	; 83
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	29 2f       	mov	r18, r25
    13b6:	2f 93       	push	r18
    13b8:	8f 93       	push	r24
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	8f 93       	push	r24
    13be:	0e 94 71 02 	call	0x4e2	; 0x4e2 <rprintf1RamRom>
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
	timer1PWMAOn();
    13c8:	0e 94 9f 05 	call	0xb3e	; 0xb3e <timer1PWMAOn>

	// set the duty cycle of the channel A output
	// - let's try 25% duty, or 256*25% = 64
	rprintf("Setting duty cycle to 25%%\r\n");
    13cc:	8c e7       	ldi	r24, 0x7C	; 124
    13ce:	91 e0       	ldi	r25, 0x01	; 1
    13d0:	29 2f       	mov	r18, r25
    13d2:	2f 93       	push	r18
    13d4:	8f 93       	push	r24
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	8f 93       	push	r24
    13da:	0e 94 71 02 	call	0x4e2	; 0x4e2 <rprintf1RamRom>
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
	timer1PWMASet(64);
    13e4:	80 e4       	ldi	r24, 0x40	; 64
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0e 94 03 06 	call	0xc06	; 0xc06 <timer1PWMASet>

	// turn on channel B and set it to 75% duty cycle
	rprintf("Turning on channel B too, with 75%% duty\r\n");
    13ec:	89 e9       	ldi	r24, 0x99	; 153
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	29 2f       	mov	r18, r25
    13f2:	2f 93       	push	r18
    13f4:	8f 93       	push	r24
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	8f 93       	push	r24
    13fa:	0e 94 71 02 	call	0x4e2	; 0x4e2 <rprintf1RamRom>
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
	timer1PWMBOn();
    1404:	0e 94 b8 05 	call	0xb70	; 0xb70 <timer1PWMBOn>
	timer1PWMBSet(192);
    1408:	80 ec       	ldi	r24, 0xC0	; 192
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 16 06 	call	0xc2c	; 0xc2c <timer1PWMBSet>

	// wait for 5 seconds
	rprintf("Pause for 5 seconds...\r\n");
    1410:	84 ec       	ldi	r24, 0xC4	; 196
    1412:	91 e0       	ldi	r25, 0x01	; 1
    1414:	29 2f       	mov	r18, r25
    1416:	2f 93       	push	r18
    1418:	8f 93       	push	r24
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	8f 93       	push	r24
    141e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <rprintf1RamRom>
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
	timerPause(5000);
    1428:	88 e8       	ldi	r24, 0x88	; 136
    142a:	93 e1       	ldi	r25, 0x13	; 19
    142c:	0e 94 3a 04 	call	0x874	; 0x874 <timerPause>

	// now turn off all PWM on timer1
	rprintf("Turning off all PWM on timer1\r\n");
    1430:	8d ed       	ldi	r24, 0xDD	; 221
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	29 2f       	mov	r18, r25
    1436:	2f 93       	push	r18
    1438:	8f 93       	push	r24
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	8f 93       	push	r24
    143e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <rprintf1RamRom>
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
	timer1PWMOff();
    1448:	0e 94 82 05 	call	0xb04	; 0xb04 <timer1PWMOff>
}
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <__mulsi3>:
    1452:	db 01       	movw	r26, r22
    1454:	8f 93       	push	r24
    1456:	9f 93       	push	r25
    1458:	0e 94 9d 0a 	call	0x153a	; 0x153a <__muluhisi3>
    145c:	bf 91       	pop	r27
    145e:	af 91       	pop	r26
    1460:	a2 9f       	mul	r26, r18
    1462:	80 0d       	add	r24, r0
    1464:	91 1d       	adc	r25, r1
    1466:	a3 9f       	mul	r26, r19
    1468:	90 0d       	add	r25, r0
    146a:	b2 9f       	mul	r27, r18
    146c:	90 0d       	add	r25, r0
    146e:	11 24       	eor	r1, r1
    1470:	08 95       	ret

00001472 <__udivmodhi4>:
    1472:	aa 1b       	sub	r26, r26
    1474:	bb 1b       	sub	r27, r27
    1476:	51 e1       	ldi	r21, 0x11	; 17
    1478:	07 c0       	rjmp	.+14     	; 0x1488 <__udivmodhi4_ep>

0000147a <__udivmodhi4_loop>:
    147a:	aa 1f       	adc	r26, r26
    147c:	bb 1f       	adc	r27, r27
    147e:	a6 17       	cp	r26, r22
    1480:	b7 07       	cpc	r27, r23
    1482:	10 f0       	brcs	.+4      	; 0x1488 <__udivmodhi4_ep>
    1484:	a6 1b       	sub	r26, r22
    1486:	b7 0b       	sbc	r27, r23

00001488 <__udivmodhi4_ep>:
    1488:	88 1f       	adc	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	5a 95       	dec	r21
    148e:	a9 f7       	brne	.-22     	; 0x147a <__udivmodhi4_loop>
    1490:	80 95       	com	r24
    1492:	90 95       	com	r25
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	08 95       	ret

0000149a <__udivmodsi4>:
    149a:	a1 e2       	ldi	r26, 0x21	; 33
    149c:	1a 2e       	mov	r1, r26
    149e:	aa 1b       	sub	r26, r26
    14a0:	bb 1b       	sub	r27, r27
    14a2:	fd 01       	movw	r30, r26
    14a4:	0d c0       	rjmp	.+26     	; 0x14c0 <__udivmodsi4_ep>

000014a6 <__udivmodsi4_loop>:
    14a6:	aa 1f       	adc	r26, r26
    14a8:	bb 1f       	adc	r27, r27
    14aa:	ee 1f       	adc	r30, r30
    14ac:	ff 1f       	adc	r31, r31
    14ae:	a2 17       	cp	r26, r18
    14b0:	b3 07       	cpc	r27, r19
    14b2:	e4 07       	cpc	r30, r20
    14b4:	f5 07       	cpc	r31, r21
    14b6:	20 f0       	brcs	.+8      	; 0x14c0 <__udivmodsi4_ep>
    14b8:	a2 1b       	sub	r26, r18
    14ba:	b3 0b       	sbc	r27, r19
    14bc:	e4 0b       	sbc	r30, r20
    14be:	f5 0b       	sbc	r31, r21

000014c0 <__udivmodsi4_ep>:
    14c0:	66 1f       	adc	r22, r22
    14c2:	77 1f       	adc	r23, r23
    14c4:	88 1f       	adc	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	1a 94       	dec	r1
    14ca:	69 f7       	brne	.-38     	; 0x14a6 <__udivmodsi4_loop>
    14cc:	60 95       	com	r22
    14ce:	70 95       	com	r23
    14d0:	80 95       	com	r24
    14d2:	90 95       	com	r25
    14d4:	9b 01       	movw	r18, r22
    14d6:	ac 01       	movw	r20, r24
    14d8:	bd 01       	movw	r22, r26
    14da:	cf 01       	movw	r24, r30
    14dc:	08 95       	ret

000014de <__divmodsi4>:
    14de:	05 2e       	mov	r0, r21
    14e0:	97 fb       	bst	r25, 7
    14e2:	1e f4       	brtc	.+6      	; 0x14ea <__divmodsi4+0xc>
    14e4:	00 94       	com	r0
    14e6:	0e 94 86 0a 	call	0x150c	; 0x150c <__negsi2>
    14ea:	57 fd       	sbrc	r21, 7
    14ec:	07 d0       	rcall	.+14     	; 0x14fc <__divmodsi4_neg2>
    14ee:	0e 94 4d 0a 	call	0x149a	; 0x149a <__udivmodsi4>
    14f2:	07 fc       	sbrc	r0, 7
    14f4:	03 d0       	rcall	.+6      	; 0x14fc <__divmodsi4_neg2>
    14f6:	4e f4       	brtc	.+18     	; 0x150a <__divmodsi4_exit>
    14f8:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__negsi2>

000014fc <__divmodsi4_neg2>:
    14fc:	50 95       	com	r21
    14fe:	40 95       	com	r20
    1500:	30 95       	com	r19
    1502:	21 95       	neg	r18
    1504:	3f 4f       	sbci	r19, 0xFF	; 255
    1506:	4f 4f       	sbci	r20, 0xFF	; 255
    1508:	5f 4f       	sbci	r21, 0xFF	; 255

0000150a <__divmodsi4_exit>:
    150a:	08 95       	ret

0000150c <__negsi2>:
    150c:	90 95       	com	r25
    150e:	80 95       	com	r24
    1510:	70 95       	com	r23
    1512:	61 95       	neg	r22
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	8f 4f       	sbci	r24, 0xFF	; 255
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	08 95       	ret

0000151c <__umulhisi3>:
    151c:	a2 9f       	mul	r26, r18
    151e:	b0 01       	movw	r22, r0
    1520:	b3 9f       	mul	r27, r19
    1522:	c0 01       	movw	r24, r0
    1524:	a3 9f       	mul	r26, r19
    1526:	70 0d       	add	r23, r0
    1528:	81 1d       	adc	r24, r1
    152a:	11 24       	eor	r1, r1
    152c:	91 1d       	adc	r25, r1
    152e:	b2 9f       	mul	r27, r18
    1530:	70 0d       	add	r23, r0
    1532:	81 1d       	adc	r24, r1
    1534:	11 24       	eor	r1, r1
    1536:	91 1d       	adc	r25, r1
    1538:	08 95       	ret

0000153a <__muluhisi3>:
    153a:	0e 94 8e 0a 	call	0x151c	; 0x151c <__umulhisi3>
    153e:	a5 9f       	mul	r26, r21
    1540:	90 0d       	add	r25, r0
    1542:	b4 9f       	mul	r27, r20
    1544:	90 0d       	add	r25, r0
    1546:	a4 9f       	mul	r26, r20
    1548:	80 0d       	add	r24, r0
    154a:	91 1d       	adc	r25, r1
    154c:	11 24       	eor	r1, r1
    154e:	08 95       	ret

00001550 <_exit>:
    1550:	f8 94       	cli

00001552 <__stop_program>:
    1552:	ff cf       	rjmp	.-2      	; 0x1552 <__stop_program>
