
LevelMeterRfRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000be4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b70  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cc  00800100  00800100  00000be4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ef8  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b65  00000000  00000000  00002e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c2e  00000000  00000000  000039a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a54  00000000  00000000  000045d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ace  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e1b  00000000  00000000  00005afa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  00007915  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 57 00 	jmp	0xae	; 0xae <__ctors_end>
   4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
   8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
   c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  24:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__vector_9>
  28:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__vector_10>
  2c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_11>
  30:	0c 94 a0 02 	jmp	0x540	; 0x540 <__vector_12>
  34:	0c 94 46 02 	jmp	0x48c	; 0x48c <__vector_13>
  38:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__vector_14>
  3c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__vector_15>
  40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  48:	0c 94 86 01 	jmp	0x30c	; 0x30c <__vector_18>
  4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  50:	0c 94 b8 03 	jmp	0x770	; 0x770 <__vector_20>
  54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  58:	0c 94 80 03 	jmp	0x700	; 0x700 <__vector_22>
  5c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>

0000007c <__trampolines_end>:
  7c:	30 31       	cpi	r19, 0x10	; 16
  7e:	32 33       	cpi	r19, 0x32	; 50
  80:	34 35       	cpi	r19, 0x54	; 84
  82:	36 37       	cpi	r19, 0x76	; 118
  84:	38 39       	cpi	r19, 0x98	; 152
  86:	41 42       	sbci	r20, 0x21	; 33
  88:	43 44       	sbci	r20, 0x43	; 67
  8a:	45 46       	sbci	r20, 0x65	; 101
	...

0000008d <__c.2043>:
  8d:	72 68 3d 25 78 0a 00                                rh=%x..

00000094 <__c.2041>:
  94:	72 6c 3d 25 78 0a 00                                rl=%x..

0000009b <__c.2039>:
  9b:	52 46 20 72 65 6d 6f 74 65 20 73 74 61 72 74 21     RF remote start!
  ab:	0a 00 00                                            ...

000000ae <__ctors_end>:
  ae:	11 24       	eor	r1, r1
  b0:	1f be       	out	0x3f, r1	; 63
  b2:	cf ef       	ldi	r28, 0xFF	; 255
  b4:	d0 e1       	ldi	r29, 0x10	; 16
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	e0 e7       	ldi	r30, 0x70	; 112
  c2:	fb e0       	ldi	r31, 0x0B	; 11
  c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x10>
  c6:	05 90       	lpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	a0 30       	cpi	r26, 0x00	; 0
  cc:	b1 07       	cpc	r27, r17
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0xc>

000000d0 <__do_clear_bss>:
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
  d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
  da:	ac 3c       	cpi	r26, 0xCC	; 204
  dc:	b2 07       	cpc	r27, r18
  de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
  e0:	0e 94 1b 05 	call	0xa36	; 0xa36 <main>
  e4:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <_exit>

000000e8 <__bad_interrupt>:
  e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
  ec:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
  ee:	8f b7       	in	r24, 0x3f	; 63
  f0:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
  f2:	71 83       	std	Z+1, r23	; 0x01
  f4:	60 83       	st	Z, r22
	buffer->size = size;
  f6:	53 83       	std	Z+3, r21	; 0x03
  f8:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
  fa:	17 82       	std	Z+7, r1	; 0x07
  fc:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
  fe:	15 82       	std	Z+5, r1	; 0x05
 100:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
 102:	8f bf       	out	0x3f, r24	; 63
 104:	08 95       	ret

00000106 <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
 106:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
 108:	9f b7       	in	r25, 0x3f	; 63
 10a:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
 10c:	44 81       	ldd	r20, Z+4	; 0x04
 10e:	55 81       	ldd	r21, Z+5	; 0x05
 110:	41 15       	cp	r20, r1
 112:	51 05       	cpc	r21, r1
 114:	c9 f0       	breq	.+50     	; 0x148 <bufferGetFromFront+0x42>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
 116:	26 81       	ldd	r18, Z+6	; 0x06
 118:	37 81       	ldd	r19, Z+7	; 0x07
 11a:	a0 81       	ld	r26, Z
 11c:	b1 81       	ldd	r27, Z+1	; 0x01
 11e:	a2 0f       	add	r26, r18
 120:	b3 1f       	adc	r27, r19
 122:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
 124:	2f 5f       	subi	r18, 0xFF	; 255
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	37 83       	std	Z+7, r19	; 0x07
 12a:	26 83       	std	Z+6, r18	; 0x06
		if(buffer->dataindex >= buffer->size)
 12c:	62 81       	ldd	r22, Z+2	; 0x02
 12e:	73 81       	ldd	r23, Z+3	; 0x03
 130:	26 17       	cp	r18, r22
 132:	37 07       	cpc	r19, r23
 134:	20 f0       	brcs	.+8      	; 0x13e <bufferGetFromFront+0x38>
		{
			buffer->dataindex -= buffer->size;
 136:	26 1b       	sub	r18, r22
 138:	37 0b       	sbc	r19, r23
 13a:	37 83       	std	Z+7, r19	; 0x07
 13c:	26 83       	std	Z+6, r18	; 0x06
		}
		buffer->datalength--;
 13e:	41 50       	subi	r20, 0x01	; 1
 140:	51 09       	sbc	r21, r1
 142:	55 83       	std	Z+5, r21	; 0x05
 144:	44 83       	std	Z+4, r20	; 0x04
 146:	01 c0       	rjmp	.+2      	; 0x14a <bufferGetFromFront+0x44>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
 148:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
 14a:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
 14c:	08 95       	ret

0000014e <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
 14e:	fc 01       	movw	r30, r24
 150:	36 2f       	mov	r19, r22
	// begin critical section
	CRITICAL_SECTION_START;
 152:	2f b7       	in	r18, 0x3f	; 63
 154:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
 156:	a4 81       	ldd	r26, Z+4	; 0x04
 158:	b5 81       	ldd	r27, Z+5	; 0x05
 15a:	62 81       	ldd	r22, Z+2	; 0x02
 15c:	73 81       	ldd	r23, Z+3	; 0x03
 15e:	a6 17       	cp	r26, r22
 160:	b7 07       	cpc	r27, r23
 162:	98 f4       	brcc	.+38     	; 0x18a <bufferAddToEnd+0x3c>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
 164:	86 81       	ldd	r24, Z+6	; 0x06
 166:	97 81       	ldd	r25, Z+7	; 0x07
 168:	8a 0f       	add	r24, r26
 16a:	9b 1f       	adc	r25, r27
 16c:	0e 94 80 05 	call	0xb00	; 0xb00 <__udivmodhi4>
 170:	a0 81       	ld	r26, Z
 172:	b1 81       	ldd	r27, Z+1	; 0x01
 174:	a8 0f       	add	r26, r24
 176:	b9 1f       	adc	r27, r25
 178:	3c 93       	st	X, r19
		// increment the length
		buffer->datalength++;
 17a:	84 81       	ldd	r24, Z+4	; 0x04
 17c:	95 81       	ldd	r25, Z+5	; 0x05
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	95 83       	std	Z+5, r25	; 0x05
 182:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
 184:	2f bf       	out	0x3f, r18	; 63
		// return success
		return -1;
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	08 95       	ret
	}
	// end critical section
	CRITICAL_SECTION_END;
 18a:	2f bf       	out	0x3f, r18	; 63
	// return failure
	return 0;
 18c:	80 e0       	ldi	r24, 0x00	; 0
}
 18e:	08 95       	ret

00000190 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
 190:	90 93 01 01 	sts	0x0101, r25
 194:	80 93 00 01 	sts	0x0100, r24
 198:	08 95       	ret

0000019a <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
 19a:	cf 93       	push	r28
 19c:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
 19e:	8a 30       	cpi	r24, 0x0A	; 10
 1a0:	31 f4       	brne	.+12     	; 0x1ae <rprintfChar+0x14>
		rputchar('\r');
 1a2:	e0 91 00 01 	lds	r30, 0x0100
 1a6:	f0 91 01 01 	lds	r31, 0x0101
 1aa:	8d e0       	ldi	r24, 0x0D	; 13
 1ac:	09 95       	icall
	// send character
	rputchar(c);
 1ae:	e0 91 00 01 	lds	r30, 0x0100
 1b2:	f0 91 01 01 	lds	r31, 0x0101
 1b6:	8c 2f       	mov	r24, r28
}
 1b8:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
 1ba:	09 94       	ijmp

000001bc <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
 1bc:	8f 70       	andi	r24, 0x0F	; 15
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	e4 58       	subi	r30, 0x84	; 132
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	84 91       	lpm	r24, Z
 1c8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <rprintfChar>

000001cc <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
 1cc:	5f 92       	push	r5
 1ce:	6f 92       	push	r6
 1d0:	7f 92       	push	r7
 1d2:	8f 92       	push	r8
 1d4:	9f 92       	push	r9
 1d6:	af 92       	push	r10
 1d8:	bf 92       	push	r11
 1da:	cf 92       	push	r12
 1dc:	df 92       	push	r13
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	1f 92       	push	r1
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	ec 89       	ldd	r30, Y+20	; 0x14
 1f2:	fd 89       	ldd	r31, Y+21	; 0x15
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
 1f4:	3e 01       	movw	r6, r28
 1f6:	26 e1       	ldi	r18, 0x16	; 22
 1f8:	62 0e       	add	r6, r18
 1fa:	71 1c       	adc	r7, r1
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
					rprintfChar('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 1fc:	3a e0       	ldi	r19, 0x0A	; 10
 1fe:	a3 2e       	mov	r10, r19
 200:	b1 2c       	mov	r11, r1
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 202:	3b 89       	ldd	r19, Y+19	; 0x13
 204:	33 23       	and	r19, r19
 206:	81 f0       	breq	.+32     	; 0x228 <rprintf1RamRom+0x5c>
 208:	8f 01       	movw	r16, r30
 20a:	0f 5f       	subi	r16, 0xFF	; 255
 20c:	1f 4f       	sbci	r17, 0xFF	; 255
 20e:	84 91       	lpm	r24, Z
 210:	85 32       	cpi	r24, 0x25	; 37
 212:	89 f0       	breq	.+34     	; 0x236 <rprintf1RamRom+0x6a>
		{	// Until '%' or '\0'
			if (!format_flag)
 214:	88 23       	and	r24, r24
 216:	09 f4       	brne	.+2      	; 0x21a <rprintf1RamRom+0x4e>
 218:	66 c0       	rjmp	.+204    	; 0x2e6 <rprintf1RamRom+0x11a>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
 21a:	0e 94 cd 00 	call	0x19a	; 0x19a <rprintfChar>
 21e:	63 01       	movw	r12, r6
 220:	78 01       	movw	r14, r16
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
 222:	36 01       	movw	r6, r12
 224:	f7 01       	movw	r30, r14
 226:	ed cf       	rjmp	.-38     	; 0x202 <rprintf1RamRom+0x36>
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 228:	80 81       	ld	r24, Z
 22a:	85 32       	cpi	r24, 0x25	; 37
 22c:	59 f0       	breq	.+22     	; 0x244 <rprintf1RamRom+0x78>
 22e:	8f 01       	movw	r16, r30
 230:	0f 5f       	subi	r16, 0xFF	; 255
 232:	1f 4f       	sbci	r17, 0xFF	; 255
 234:	ef cf       	rjmp	.-34     	; 0x214 <rprintf1RamRom+0x48>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
 236:	7f 01       	movw	r14, r30
 238:	82 e0       	ldi	r24, 0x02	; 2
 23a:	e8 0e       	add	r14, r24
 23c:	f1 1c       	adc	r15, r1
 23e:	f8 01       	movw	r30, r16
 240:	84 91       	lpm	r24, Z
 242:	05 c0       	rjmp	.+10     	; 0x24e <rprintf1RamRom+0x82>
 244:	7f 01       	movw	r14, r30
 246:	22 e0       	ldi	r18, 0x02	; 2
 248:	e2 0e       	add	r14, r18
 24a:	f1 1c       	adc	r15, r1
 24c:	81 81       	ldd	r24, Z+1	; 0x01
 24e:	84 36       	cpi	r24, 0x64	; 100
 250:	a1 f0       	breq	.+40     	; 0x27a <rprintf1RamRom+0xae>
 252:	88 37       	cpi	r24, 0x78	; 120
 254:	61 f0       	breq	.+24     	; 0x26e <rprintf1RamRom+0xa2>
 256:	83 36       	cpi	r24, 0x63	; 99
 258:	31 f4       	brne	.+12     	; 0x266 <rprintf1RamRom+0x9a>
		{
			case 'c': format_flag = va_arg(ap,int);
 25a:	f3 01       	movw	r30, r6
 25c:	80 81       	ld	r24, Z
 25e:	93 01       	movw	r18, r6
 260:	2e 5f       	subi	r18, 0xFE	; 254
 262:	3f 4f       	sbci	r19, 0xFF	; 255
 264:	39 01       	movw	r6, r18
			default:  rprintfChar(format_flag); continue;
 266:	0e 94 cd 00 	call	0x19a	; 0x19a <rprintfChar>
 26a:	63 01       	movw	r12, r6
 26c:	da cf       	rjmp	.-76     	; 0x222 <rprintf1RamRom+0x56>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 26e:	20 e1       	ldi	r18, 0x10	; 16
 270:	82 2e       	mov	r8, r18
 272:	91 2c       	mov	r9, r1
 274:	00 e0       	ldi	r16, 0x00	; 0
 276:	10 e1       	ldi	r17, 0x10	; 16
 278:	05 c0       	rjmp	.+10     	; 0x284 <rprintf1RamRom+0xb8>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 27a:	9a e0       	ldi	r25, 0x0A	; 10
 27c:	89 2e       	mov	r8, r25
 27e:	91 2c       	mov	r9, r1
 280:	00 e1       	ldi	r16, 0x10	; 16
 282:	17 e2       	ldi	r17, 0x27	; 39
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 284:	63 01       	movw	r12, r6
 286:	32 e0       	ldi	r19, 0x02	; 2
 288:	c3 0e       	add	r12, r19
 28a:	d1 1c       	adc	r13, r1
 28c:	f3 01       	movw	r30, r6
 28e:	60 80       	ld	r6, Z
 290:	71 80       	ldd	r7, Z+1	; 0x01
			if (format_flag == 'd')
 292:	84 36       	cpi	r24, 0x64	; 100
 294:	a1 f4       	brne	.+40     	; 0x2be <rprintf1RamRom+0xf2>
			{
				if (((int)u_val) < 0)
 296:	77 fe       	sbrs	r7, 7
 298:	0f c0       	rjmp	.+30     	; 0x2b8 <rprintf1RamRom+0xec>
				{
					u_val = - u_val;
 29a:	71 94       	neg	r7
 29c:	61 94       	neg	r6
 29e:	71 08       	sbc	r7, r1
					rprintfChar('-');
 2a0:	8d e2       	ldi	r24, 0x2D	; 45
 2a2:	0e 94 cd 00 	call	0x19a	; 0x19a <rprintfChar>
 2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <rprintf1RamRom+0xec>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 2a8:	c8 01       	movw	r24, r16
 2aa:	b5 01       	movw	r22, r10
 2ac:	0e 94 80 05 	call	0xb00	; 0xb00 <__udivmodhi4>
 2b0:	8b 01       	movw	r16, r22
 2b2:	62 30       	cpi	r22, 0x02	; 2
 2b4:	71 05       	cpc	r23, r1
 2b6:	18 f0       	brcs	.+6      	; 0x2be <rprintf1RamRom+0xf2>
 2b8:	60 16       	cp	r6, r16
 2ba:	71 06       	cpc	r7, r17
 2bc:	a8 f3       	brcs	.-22     	; 0x2a8 <rprintf1RamRom+0xdc>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
 2be:	c3 01       	movw	r24, r6
 2c0:	b8 01       	movw	r22, r16
 2c2:	0e 94 80 05 	call	0xb00	; 0xb00 <__udivmodhi4>
 2c6:	58 2e       	mov	r5, r24
 2c8:	86 2f       	mov	r24, r22
 2ca:	99 83       	std	Y+1, r25	; 0x01
 2cc:	0e 94 de 00 	call	0x1bc	; 0x1bc <rprintfu04>
				u_val %= div_val;
 2d0:	65 2c       	mov	r6, r5
 2d2:	99 81       	ldd	r25, Y+1	; 0x01
 2d4:	79 2e       	mov	r7, r25
				div_val /= base;
 2d6:	c8 01       	movw	r24, r16
 2d8:	b4 01       	movw	r22, r8
 2da:	0e 94 80 05 	call	0xb00	; 0xb00 <__udivmodhi4>
 2de:	8b 01       	movw	r16, r22
			} while (div_val);
 2e0:	67 2b       	or	r22, r23
 2e2:	69 f7       	brne	.-38     	; 0x2be <rprintf1RamRom+0xf2>
 2e4:	9e cf       	rjmp	.-196    	; 0x222 <rprintf1RamRom+0x56>
		}
	}
	va_end(ap);
}
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0f 90       	pop	r0
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	df 90       	pop	r13
 2fa:	cf 90       	pop	r12
 2fc:	bf 90       	pop	r11
 2fe:	af 90       	pop	r10
 300:	9f 90       	pop	r9
 302:	8f 90       	pop	r8
 304:	7f 90       	pop	r7
 306:	6f 90       	pop	r6
 308:	5f 90       	pop	r5
 30a:	08 95       	ret

0000030c <__vector_18>:
	OCR1B = pwmDuty;
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
 30c:	1f 92       	push	r1
 30e:	0f 92       	push	r0
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	0f 92       	push	r0
 314:	11 24       	eor	r1, r1
 316:	2f 93       	push	r18
 318:	3f 93       	push	r19
 31a:	4f 93       	push	r20
 31c:	5f 93       	push	r21
 31e:	6f 93       	push	r22
 320:	7f 93       	push	r23
 322:	8f 93       	push	r24
 324:	9f 93       	push	r25
 326:	af 93       	push	r26
 328:	bf 93       	push	r27
 32a:	ef 93       	push	r30
 32c:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
 32e:	80 91 92 01 	lds	r24, 0x0192
 332:	90 91 93 01 	lds	r25, 0x0193
 336:	a0 91 94 01 	lds	r26, 0x0194
 33a:	b0 91 95 01 	lds	r27, 0x0195
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	a1 1d       	adc	r26, r1
 342:	b1 1d       	adc	r27, r1
 344:	80 93 92 01 	sts	0x0192, r24
 348:	90 93 93 01 	sts	0x0193, r25
 34c:	a0 93 94 01 	sts	0x0194, r26
 350:	b0 93 95 01 	sts	0x0195, r27

	// increment pause counter
	TimerPauseReg++;
 354:	80 91 96 01 	lds	r24, 0x0196
 358:	90 91 97 01 	lds	r25, 0x0197
 35c:	a0 91 98 01 	lds	r26, 0x0198
 360:	b0 91 99 01 	lds	r27, 0x0199
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	a1 1d       	adc	r26, r1
 368:	b1 1d       	adc	r27, r1
 36a:	80 93 96 01 	sts	0x0196, r24
 36e:	90 93 97 01 	sts	0x0197, r25
 372:	a0 93 98 01 	sts	0x0198, r26
 376:	b0 93 99 01 	sts	0x0199, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
 37a:	80 91 02 01 	lds	r24, 0x0102
 37e:	90 91 03 01 	lds	r25, 0x0103
 382:	89 2b       	or	r24, r25
 384:	29 f0       	breq	.+10     	; 0x390 <__vector_18+0x84>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
 386:	e0 91 02 01 	lds	r30, 0x0102
 38a:	f0 91 03 01 	lds	r31, 0x0103
 38e:	09 95       	icall
}
 390:	ff 91       	pop	r31
 392:	ef 91       	pop	r30
 394:	bf 91       	pop	r27
 396:	af 91       	pop	r26
 398:	9f 91       	pop	r25
 39a:	8f 91       	pop	r24
 39c:	7f 91       	pop	r23
 39e:	6f 91       	pop	r22
 3a0:	5f 91       	pop	r21
 3a2:	4f 91       	pop	r20
 3a4:	3f 91       	pop	r19
 3a6:	2f 91       	pop	r18
 3a8:	0f 90       	pop	r0
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	0f 90       	pop	r0
 3ae:	1f 90       	pop	r1
 3b0:	18 95       	reti

000003b2 <__vector_15>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
 3b2:	1f 92       	push	r1
 3b4:	0f 92       	push	r0
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	0f 92       	push	r0
 3ba:	11 24       	eor	r1, r1
 3bc:	2f 93       	push	r18
 3be:	3f 93       	push	r19
 3c0:	4f 93       	push	r20
 3c2:	5f 93       	push	r21
 3c4:	6f 93       	push	r22
 3c6:	7f 93       	push	r23
 3c8:	8f 93       	push	r24
 3ca:	9f 93       	push	r25
 3cc:	af 93       	push	r26
 3ce:	bf 93       	push	r27
 3d0:	ef 93       	push	r30
 3d2:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
 3d4:	80 91 04 01 	lds	r24, 0x0104
 3d8:	90 91 05 01 	lds	r25, 0x0105
 3dc:	89 2b       	or	r24, r25
 3de:	29 f0       	breq	.+10     	; 0x3ea <__vector_15+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
 3e0:	e0 91 04 01 	lds	r30, 0x0104
 3e4:	f0 91 05 01 	lds	r31, 0x0105
 3e8:	09 95       	icall
}
 3ea:	ff 91       	pop	r31
 3ec:	ef 91       	pop	r30
 3ee:	bf 91       	pop	r27
 3f0:	af 91       	pop	r26
 3f2:	9f 91       	pop	r25
 3f4:	8f 91       	pop	r24
 3f6:	7f 91       	pop	r23
 3f8:	6f 91       	pop	r22
 3fa:	5f 91       	pop	r21
 3fc:	4f 91       	pop	r20
 3fe:	3f 91       	pop	r19
 400:	2f 91       	pop	r18
 402:	0f 90       	pop	r0
 404:	0f be       	out	0x3f, r0	; 63
 406:	0f 90       	pop	r0
 408:	1f 90       	pop	r1
 40a:	18 95       	reti

0000040c <__vector_11>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
 40c:	1f 92       	push	r1
 40e:	0f 92       	push	r0
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	0f 92       	push	r0
 414:	11 24       	eor	r1, r1
 416:	2f 93       	push	r18
 418:	3f 93       	push	r19
 41a:	4f 93       	push	r20
 41c:	5f 93       	push	r21
 41e:	6f 93       	push	r22
 420:	7f 93       	push	r23
 422:	8f 93       	push	r24
 424:	9f 93       	push	r25
 426:	af 93       	push	r26
 428:	bf 93       	push	r27
 42a:	ef 93       	push	r30
 42c:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
 42e:	80 91 9a 01 	lds	r24, 0x019A
 432:	90 91 9b 01 	lds	r25, 0x019B
 436:	a0 91 9c 01 	lds	r26, 0x019C
 43a:	b0 91 9d 01 	lds	r27, 0x019D
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	a1 1d       	adc	r26, r1
 442:	b1 1d       	adc	r27, r1
 444:	80 93 9a 01 	sts	0x019A, r24
 448:	90 93 9b 01 	sts	0x019B, r25
 44c:	a0 93 9c 01 	sts	0x019C, r26
 450:	b0 93 9d 01 	sts	0x019D, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
 454:	80 91 0c 01 	lds	r24, 0x010C
 458:	90 91 0d 01 	lds	r25, 0x010D
 45c:	89 2b       	or	r24, r25
 45e:	29 f0       	breq	.+10     	; 0x46a <__vector_11+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
 460:	e0 91 0c 01 	lds	r30, 0x010C
 464:	f0 91 0d 01 	lds	r31, 0x010D
 468:	09 95       	icall
}
 46a:	ff 91       	pop	r31
 46c:	ef 91       	pop	r30
 46e:	bf 91       	pop	r27
 470:	af 91       	pop	r26
 472:	9f 91       	pop	r25
 474:	8f 91       	pop	r24
 476:	7f 91       	pop	r23
 478:	6f 91       	pop	r22
 47a:	5f 91       	pop	r21
 47c:	4f 91       	pop	r20
 47e:	3f 91       	pop	r19
 480:	2f 91       	pop	r18
 482:	0f 90       	pop	r0
 484:	0f be       	out	0x3f, r0	; 63
 486:	0f 90       	pop	r0
 488:	1f 90       	pop	r1
 48a:	18 95       	reti

0000048c <__vector_13>:
}
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
 48c:	1f 92       	push	r1
 48e:	0f 92       	push	r0
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	0f 92       	push	r0
 494:	11 24       	eor	r1, r1
 496:	2f 93       	push	r18
 498:	3f 93       	push	r19
 49a:	4f 93       	push	r20
 49c:	5f 93       	push	r21
 49e:	6f 93       	push	r22
 4a0:	7f 93       	push	r23
 4a2:	8f 93       	push	r24
 4a4:	9f 93       	push	r25
 4a6:	af 93       	push	r26
 4a8:	bf 93       	push	r27
 4aa:	ef 93       	push	r30
 4ac:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
 4ae:	80 91 06 01 	lds	r24, 0x0106
 4b2:	90 91 07 01 	lds	r25, 0x0107
 4b6:	89 2b       	or	r24, r25
 4b8:	29 f0       	breq	.+10     	; 0x4c4 <__vector_13+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
 4ba:	e0 91 06 01 	lds	r30, 0x0106
 4be:	f0 91 07 01 	lds	r31, 0x0107
 4c2:	09 95       	icall
}
 4c4:	ff 91       	pop	r31
 4c6:	ef 91       	pop	r30
 4c8:	bf 91       	pop	r27
 4ca:	af 91       	pop	r26
 4cc:	9f 91       	pop	r25
 4ce:	8f 91       	pop	r24
 4d0:	7f 91       	pop	r23
 4d2:	6f 91       	pop	r22
 4d4:	5f 91       	pop	r21
 4d6:	4f 91       	pop	r20
 4d8:	3f 91       	pop	r19
 4da:	2f 91       	pop	r18
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <__vector_14>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
 4e6:	1f 92       	push	r1
 4e8:	0f 92       	push	r0
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	0f 92       	push	r0
 4ee:	11 24       	eor	r1, r1
 4f0:	2f 93       	push	r18
 4f2:	3f 93       	push	r19
 4f4:	4f 93       	push	r20
 4f6:	5f 93       	push	r21
 4f8:	6f 93       	push	r22
 4fa:	7f 93       	push	r23
 4fc:	8f 93       	push	r24
 4fe:	9f 93       	push	r25
 500:	af 93       	push	r26
 502:	bf 93       	push	r27
 504:	ef 93       	push	r30
 506:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
 508:	80 91 08 01 	lds	r24, 0x0108
 50c:	90 91 09 01 	lds	r25, 0x0109
 510:	89 2b       	or	r24, r25
 512:	29 f0       	breq	.+10     	; 0x51e <__vector_14+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
 514:	e0 91 08 01 	lds	r30, 0x0108
 518:	f0 91 09 01 	lds	r31, 0x0109
 51c:	09 95       	icall
}
 51e:	ff 91       	pop	r31
 520:	ef 91       	pop	r30
 522:	bf 91       	pop	r27
 524:	af 91       	pop	r26
 526:	9f 91       	pop	r25
 528:	8f 91       	pop	r24
 52a:	7f 91       	pop	r23
 52c:	6f 91       	pop	r22
 52e:	5f 91       	pop	r21
 530:	4f 91       	pop	r20
 532:	3f 91       	pop	r19
 534:	2f 91       	pop	r18
 536:	0f 90       	pop	r0
 538:	0f be       	out	0x3f, r0	; 63
 53a:	0f 90       	pop	r0
 53c:	1f 90       	pop	r1
 53e:	18 95       	reti

00000540 <__vector_12>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
 540:	1f 92       	push	r1
 542:	0f 92       	push	r0
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	0f 92       	push	r0
 548:	11 24       	eor	r1, r1
 54a:	2f 93       	push	r18
 54c:	3f 93       	push	r19
 54e:	4f 93       	push	r20
 550:	5f 93       	push	r21
 552:	6f 93       	push	r22
 554:	7f 93       	push	r23
 556:	8f 93       	push	r24
 558:	9f 93       	push	r25
 55a:	af 93       	push	r26
 55c:	bf 93       	push	r27
 55e:	ef 93       	push	r30
 560:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
 562:	80 91 0a 01 	lds	r24, 0x010A
 566:	90 91 0b 01 	lds	r25, 0x010B
 56a:	89 2b       	or	r24, r25
 56c:	29 f0       	breq	.+10     	; 0x578 <__vector_12+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
 56e:	e0 91 0a 01 	lds	r30, 0x010A
 572:	f0 91 0b 01 	lds	r31, 0x010B
 576:	09 95       	icall
}
 578:	ff 91       	pop	r31
 57a:	ef 91       	pop	r30
 57c:	bf 91       	pop	r27
 57e:	af 91       	pop	r26
 580:	9f 91       	pop	r25
 582:	8f 91       	pop	r24
 584:	7f 91       	pop	r23
 586:	6f 91       	pop	r22
 588:	5f 91       	pop	r21
 58a:	4f 91       	pop	r20
 58c:	3f 91       	pop	r19
 58e:	2f 91       	pop	r18
 590:	0f 90       	pop	r0
 592:	0f be       	out	0x3f, r0	; 63
 594:	0f 90       	pop	r0
 596:	1f 90       	pop	r1
 598:	18 95       	reti

0000059a <__vector_9>:

//! Interrupt handler for OutputCompare2A match (OC2A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMPA_vect)
{
 59a:	1f 92       	push	r1
 59c:	0f 92       	push	r0
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	0f 92       	push	r0
 5a2:	11 24       	eor	r1, r1
 5a4:	2f 93       	push	r18
 5a6:	3f 93       	push	r19
 5a8:	4f 93       	push	r20
 5aa:	5f 93       	push	r21
 5ac:	6f 93       	push	r22
 5ae:	7f 93       	push	r23
 5b0:	8f 93       	push	r24
 5b2:	9f 93       	push	r25
 5b4:	af 93       	push	r26
 5b6:	bf 93       	push	r27
 5b8:	ef 93       	push	r30
 5ba:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
 5bc:	80 91 0e 01 	lds	r24, 0x010E
 5c0:	90 91 0f 01 	lds	r25, 0x010F
 5c4:	89 2b       	or	r24, r25
 5c6:	29 f0       	breq	.+10     	; 0x5d2 <__vector_9+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
 5c8:	e0 91 0e 01 	lds	r30, 0x010E
 5cc:	f0 91 0f 01 	lds	r31, 0x010F
 5d0:	09 95       	icall
}
 5d2:	ff 91       	pop	r31
 5d4:	ef 91       	pop	r30
 5d6:	bf 91       	pop	r27
 5d8:	af 91       	pop	r26
 5da:	9f 91       	pop	r25
 5dc:	8f 91       	pop	r24
 5de:	7f 91       	pop	r23
 5e0:	6f 91       	pop	r22
 5e2:	5f 91       	pop	r21
 5e4:	4f 91       	pop	r20
 5e6:	3f 91       	pop	r19
 5e8:	2f 91       	pop	r18
 5ea:	0f 90       	pop	r0
 5ec:	0f be       	out	0x3f, r0	; 63
 5ee:	0f 90       	pop	r0
 5f0:	1f 90       	pop	r1
 5f2:	18 95       	reti

000005f4 <__vector_10>:

//! Interrupt handler for OutputCompare2B match (OC2B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMPB_vect)
{
 5f4:	1f 92       	push	r1
 5f6:	0f 92       	push	r0
 5f8:	0f b6       	in	r0, 0x3f	; 63
 5fa:	0f 92       	push	r0
 5fc:	11 24       	eor	r1, r1
 5fe:	2f 93       	push	r18
 600:	3f 93       	push	r19
 602:	4f 93       	push	r20
 604:	5f 93       	push	r21
 606:	6f 93       	push	r22
 608:	7f 93       	push	r23
 60a:	8f 93       	push	r24
 60c:	9f 93       	push	r25
 60e:	af 93       	push	r26
 610:	bf 93       	push	r27
 612:	ef 93       	push	r30
 614:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
 616:	80 91 0e 01 	lds	r24, 0x010E
 61a:	90 91 0f 01 	lds	r25, 0x010F
 61e:	89 2b       	or	r24, r25
 620:	29 f0       	breq	.+10     	; 0x62c <__vector_10+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
 622:	e0 91 0e 01 	lds	r30, 0x010E
 626:	f0 91 0f 01 	lds	r31, 0x010F
 62a:	09 95       	icall
}
 62c:	ff 91       	pop	r31
 62e:	ef 91       	pop	r30
 630:	bf 91       	pop	r27
 632:	af 91       	pop	r26
 634:	9f 91       	pop	r25
 636:	8f 91       	pop	r24
 638:	7f 91       	pop	r23
 63a:	6f 91       	pop	r22
 63c:	5f 91       	pop	r21
 63e:	4f 91       	pop	r20
 640:	3f 91       	pop	r19
 642:	2f 91       	pop	r18
 644:	0f 90       	pop	r0
 646:	0f be       	out	0x3f, r0	; 63
 648:	0f 90       	pop	r0
 64a:	1f 90       	pop	r1
 64c:	18 95       	reti

0000064e <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (unsigned char *)uartRxData, UART_RX_BUFFER_SIZE);
 64e:	40 e4       	ldi	r20, 0x40	; 64
 650:	50 e0       	ldi	r21, 0x00	; 0
 652:	62 e5       	ldi	r22, 0x52	; 82
 654:	71 e0       	ldi	r23, 0x01	; 1
 656:	8f e9       	ldi	r24, 0x9F	; 159
 658:	91 e0       	ldi	r25, 0x01	; 1
 65a:	0e 94 76 00 	call	0xec	; 0xec <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (unsigned char *)uartTxData, UART_TX_BUFFER_SIZE);
 65e:	40 e4       	ldi	r20, 0x40	; 64
 660:	50 e0       	ldi	r21, 0x00	; 0
 662:	62 e1       	ldi	r22, 0x12	; 18
 664:	71 e0       	ldi	r23, 0x01	; 1
 666:	88 ea       	ldi	r24, 0xA8	; 168
 668:	91 e0       	ldi	r25, 0x01	; 1
 66a:	0c 94 76 00 	jmp	0xec	; 0xec <bufferInit>

0000066e <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
 66e:	0e 94 27 03 	call	0x64e	; 0x64e <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
 672:	10 92 11 01 	sts	0x0111, r1
 676:	10 92 10 01 	sts	0x0110, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
 67a:	88 ed       	ldi	r24, 0xD8	; 216
 67c:	80 93 c1 00 	sts	0x00C1, r24
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
 680:	83 e3       	ldi	r24, 0x33	; 51
 682:	80 93 c4 00 	sts	0x00C4, r24
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 686:	10 92 c5 00 	sts	0x00C5, r1
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
 68a:	8f ef       	ldi	r24, 0xFF	; 255
 68c:	80 93 9e 01 	sts	0x019E, r24
	uartBufferedTx = FALSE;
 690:	10 92 a7 01 	sts	0x01A7, r1
	// clear overflow count
	uartRxOverflow = 0;
 694:	10 92 b1 01 	sts	0x01B1, r1
 698:	10 92 b0 01 	sts	0x01B0, r1
	// enable interrupts
	sei();
 69c:	78 94       	sei
 69e:	08 95       	ret

000006a0 <uartSetBaudRate>:
	UartRxFunc = rx_func;
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
 6a0:	0f 93       	push	r16
 6a2:	1f 93       	push	r17
 6a4:	8b 01       	movw	r16, r22
 6a6:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
 6a8:	dc 01       	movw	r26, r24
 6aa:	cb 01       	movw	r24, r22
 6ac:	80 5c       	subi	r24, 0xC0	; 192
 6ae:	9d 4b       	sbci	r25, 0xBD	; 189
 6b0:	a0 4f       	sbci	r26, 0xF0	; 240
 6b2:	bf 4f       	sbci	r27, 0xFF	; 255
 6b4:	bc 01       	movw	r22, r24
 6b6:	cd 01       	movw	r24, r26
 6b8:	43 e0       	ldi	r20, 0x03	; 3
 6ba:	66 0f       	add	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	88 1f       	adc	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	4a 95       	dec	r20
 6c4:	d1 f7       	brne	.-12     	; 0x6ba <uartSetBaudRate+0x1a>
 6c6:	a9 01       	movw	r20, r18
 6c8:	98 01       	movw	r18, r16
 6ca:	e4 e0       	ldi	r30, 0x04	; 4
 6cc:	22 0f       	add	r18, r18
 6ce:	33 1f       	adc	r19, r19
 6d0:	44 1f       	adc	r20, r20
 6d2:	55 1f       	adc	r21, r21
 6d4:	ea 95       	dec	r30
 6d6:	d1 f7       	brne	.-12     	; 0x6cc <uartSetBaudRate+0x2c>
 6d8:	0e 94 94 05 	call	0xb28	; 0xb28 <__udivmodsi4>
 6dc:	21 50       	subi	r18, 0x01	; 1
 6de:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
 6e0:	20 93 c4 00 	sts	0x00C4, r18
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 6e4:	30 93 c5 00 	sts	0x00C5, r19
	#endif
}
 6e8:	1f 91       	pop	r17
 6ea:	0f 91       	pop	r16
 6ec:	08 95       	ret

000006ee <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
 6ee:	90 91 9e 01 	lds	r25, 0x019E
 6f2:	99 23       	and	r25, r25
 6f4:	e1 f3       	breq	.-8      	; 0x6ee <uartSendByte>
	// send byte
	outb(UDR, txData);
 6f6:	80 93 c6 00 	sts	0x00C6, r24
	// set ready state to FALSE
	uartReadyTx = FALSE;
 6fa:	10 92 9e 01 	sts	0x019E, r1
 6fe:	08 95       	ret

00000700 <__vector_22>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_TRANS)
{
 700:	1f 92       	push	r1
 702:	0f 92       	push	r0
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	0f 92       	push	r0
 708:	11 24       	eor	r1, r1
 70a:	2f 93       	push	r18
 70c:	3f 93       	push	r19
 70e:	4f 93       	push	r20
 710:	5f 93       	push	r21
 712:	6f 93       	push	r22
 714:	7f 93       	push	r23
 716:	8f 93       	push	r24
 718:	9f 93       	push	r25
 71a:	af 93       	push	r26
 71c:	bf 93       	push	r27
 71e:	ef 93       	push	r30
 720:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
 722:	80 91 a7 01 	lds	r24, 0x01A7
 726:	88 23       	and	r24, r24
 728:	79 f0       	breq	.+30     	; 0x748 <__vector_22+0x48>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
 72a:	80 91 ac 01 	lds	r24, 0x01AC
 72e:	90 91 ad 01 	lds	r25, 0x01AD
 732:	89 2b       	or	r24, r25
 734:	39 f0       	breq	.+14     	; 0x744 <__vector_22+0x44>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
 736:	88 ea       	ldi	r24, 0xA8	; 168
 738:	91 e0       	ldi	r25, 0x01	; 1
 73a:	0e 94 83 00 	call	0x106	; 0x106 <bufferGetFromFront>
 73e:	80 93 c6 00 	sts	0x00C6, r24
 742:	05 c0       	rjmp	.+10     	; 0x74e <__vector_22+0x4e>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
 744:	10 92 a7 01 	sts	0x01A7, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
 748:	8f ef       	ldi	r24, 0xFF	; 255
 74a:	80 93 9e 01 	sts	0x019E, r24
	}
}
 74e:	ff 91       	pop	r31
 750:	ef 91       	pop	r30
 752:	bf 91       	pop	r27
 754:	af 91       	pop	r26
 756:	9f 91       	pop	r25
 758:	8f 91       	pop	r24
 75a:	7f 91       	pop	r23
 75c:	6f 91       	pop	r22
 75e:	5f 91       	pop	r21
 760:	4f 91       	pop	r20
 762:	3f 91       	pop	r19
 764:	2f 91       	pop	r18
 766:	0f 90       	pop	r0
 768:	0f be       	out	0x3f, r0	; 63
 76a:	0f 90       	pop	r0
 76c:	1f 90       	pop	r1
 76e:	18 95       	reti

00000770 <__vector_20>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_RECV)
{
 770:	1f 92       	push	r1
 772:	0f 92       	push	r0
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	0f 92       	push	r0
 778:	11 24       	eor	r1, r1
 77a:	2f 93       	push	r18
 77c:	3f 93       	push	r19
 77e:	4f 93       	push	r20
 780:	5f 93       	push	r21
 782:	6f 93       	push	r22
 784:	7f 93       	push	r23
 786:	8f 93       	push	r24
 788:	9f 93       	push	r25
 78a:	af 93       	push	r26
 78c:	bf 93       	push	r27
 78e:	ef 93       	push	r30
 790:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
 792:	80 91 c6 00 	lds	r24, 0x00C6

	// if there's a user function to handle this receive event
	if(UartRxFunc)
 796:	20 91 10 01 	lds	r18, 0x0110
 79a:	30 91 11 01 	lds	r19, 0x0111
 79e:	23 2b       	or	r18, r19
 7a0:	31 f0       	breq	.+12     	; 0x7ae <__vector_20+0x3e>
	{
		// call it and pass the received data
		UartRxFunc(c);
 7a2:	e0 91 10 01 	lds	r30, 0x0110
 7a6:	f0 91 11 01 	lds	r31, 0x0111
 7aa:	09 95       	icall
 7ac:	10 c0       	rjmp	.+32     	; 0x7ce <__vector_20+0x5e>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
 7ae:	68 2f       	mov	r22, r24
 7b0:	8f e9       	ldi	r24, 0x9F	; 159
 7b2:	91 e0       	ldi	r25, 0x01	; 1
 7b4:	0e 94 a7 00 	call	0x14e	; 0x14e <bufferAddToEnd>
 7b8:	81 11       	cpse	r24, r1
 7ba:	09 c0       	rjmp	.+18     	; 0x7ce <__vector_20+0x5e>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
 7bc:	80 91 b0 01 	lds	r24, 0x01B0
 7c0:	90 91 b1 01 	lds	r25, 0x01B1
 7c4:	01 96       	adiw	r24, 0x01	; 1
 7c6:	90 93 b1 01 	sts	0x01B1, r25
 7ca:	80 93 b0 01 	sts	0x01B0, r24
		}
	}
}
 7ce:	ff 91       	pop	r31
 7d0:	ef 91       	pop	r30
 7d2:	bf 91       	pop	r27
 7d4:	af 91       	pop	r26
 7d6:	9f 91       	pop	r25
 7d8:	8f 91       	pop	r24
 7da:	7f 91       	pop	r23
 7dc:	6f 91       	pop	r22
 7de:	5f 91       	pop	r21
 7e0:	4f 91       	pop	r20
 7e2:	3f 91       	pop	r19
 7e4:	2f 91       	pop	r18
 7e6:	0f 90       	pop	r0
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	0f 90       	pop	r0
 7ec:	1f 90       	pop	r1
 7ee:	18 95       	reti

000007f0 <ButtonInit>:
*********************************************************************************************************
*/

void ButtonInit(void)
{
	DDRD  &= ~((1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3));	/* Set PD6-PD3 as input */
 7f0:	8a b1       	in	r24, 0x0a	; 10
 7f2:	87 78       	andi	r24, 0x87	; 135
 7f4:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PD6) | (1<<PD5) | (1<<PD4) | (1<<PD3);			/* Set PD6-PD3 as internal pull up */
 7f6:	8b b1       	in	r24, 0x0b	; 11
 7f8:	88 67       	ori	r24, 0x78	; 120
 7fa:	8b b9       	out	0x0b, r24	; 11
	
	/* 
	Set PC7-PC4 as input as internal pull up
	Set PC3-PC0 as Tri-state (Hi-Z) 
	*/
	DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 7fc:	17 b8       	out	0x07, r1	; 7
	PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 7fe:	80 ef       	ldi	r24, 0xF0	; 240
 800:	88 b9       	out	0x08, r24	; 8
 802:	08 95       	ret

00000804 <ButtonCycleUpdate>:
*
*********************************************************************************************************
*/

void ButtonCycleUpdate(void)
{
 804:	cf 92       	push	r12
 806:	df 92       	push	r13
 808:	ef 92       	push	r14
 80a:	ff 92       	push	r15
 80c:	0f 93       	push	r16
 80e:	1f 93       	push	r17
 810:	cf 93       	push	r28
 812:	df 93       	push	r29
	ButtonDataType io_state = 0;
	ButtonDataType tempValue;
	ButtonDataType MatrixButtonValue;
	uint8_t Col;
	
	tempValue = (~PIND) & ((1<<PIND6) | (1<<PIND5) | (1<<PIND4) | (1<<PIND3));	/* Get PD6-PD3 IO state */
 814:	89 b1       	in	r24, 0x09	; 9
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	80 95       	com	r24
 81a:	90 95       	com	r25
 81c:	88 77       	andi	r24, 0x78	; 120
 81e:	99 27       	eor	r25, r25
 820:	09 2e       	mov	r0, r25
 822:	00 0c       	add	r0, r0
 824:	aa 0b       	sbc	r26, r26
 826:	bb 0b       	sbc	r27, r27
	tempValue >>= 3;	/* right rotate to low 4 bits location */
 828:	73 e0       	ldi	r23, 0x03	; 3
 82a:	b6 95       	lsr	r27
 82c:	a7 95       	ror	r26
 82e:	97 95       	ror	r25
 830:	87 95       	ror	r24
 832:	7a 95       	dec	r23
 834:	d1 f7       	brne	.-12     	; 0x82a <ButtonCycleUpdate+0x26>
 836:	e0 e0       	ldi	r30, 0x00	; 0
 838:	f0 e0       	ldi	r31, 0x00	; 0
	
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
 83a:	40 e0       	ldi	r20, 0x00	; 0
 83c:	50 e0       	ldi	r21, 0x00	; 0
 83e:	ba 01       	movw	r22, r20
		/* 
		Set PC7-PC4 as input as internal pull up
		Set PC3-PC0 as Tri-state (Hi-Z)
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 840:	10 ef       	ldi	r17, 0xF0	; 240
	
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
 842:	c8 e0       	ldi	r28, 0x08	; 8
 844:	d0 e0       	ldi	r29, 0x00	; 0
	{
		/* 
		Set PC7-PC4 as input as internal pull up
		Set PC3-PC0 as Tri-state (Hi-Z)
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 846:	17 b8       	out	0x07, r1	; 7
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 848:	18 b9       	out	0x08, r17	; 8
	
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
 84a:	07 b1       	in	r16, 0x07	; 7
 84c:	9e 01       	movw	r18, r28
 84e:	0e 2e       	mov	r0, r30
 850:	02 c0       	rjmp	.+4      	; 0x856 <ButtonCycleUpdate+0x52>
 852:	35 95       	asr	r19
 854:	27 95       	ror	r18
 856:	0a 94       	dec	r0
 858:	e2 f7       	brpl	.-8      	; 0x852 <ButtonCycleUpdate+0x4e>
 85a:	30 2f       	mov	r19, r16
 85c:	32 2b       	or	r19, r18
 85e:	37 b9       	out	0x07, r19	; 7
		PORTC &= ~(0x08>>Col);		/* Set the column as low */
 860:	38 b1       	in	r19, 0x08	; 8
 862:	20 95       	com	r18
 864:	23 23       	and	r18, r19
 866:	28 b9       	out	0x08, r18	; 8
		
		/* read and save button state after the column which active as low */
		MatrixButtonValue <<= 4;	/* newer 4 button state store in lower four bits */
 868:	6a 01       	movw	r12, r20
 86a:	7b 01       	movw	r14, r22
 86c:	34 e0       	ldi	r19, 0x04	; 4
 86e:	cc 0c       	add	r12, r12
 870:	dd 1c       	adc	r13, r13
 872:	ee 1c       	adc	r14, r14
 874:	ff 1c       	adc	r15, r15
 876:	3a 95       	dec	r19
 878:	d1 f7       	brne	.-12     	; 0x86e <ButtonCycleUpdate+0x6a>
		MatrixButtonValue |= ((~PINC) & 0x00f0) >> 4;
 87a:	26 b1       	in	r18, 0x06	; 6
 87c:	30 e0       	ldi	r19, 0x00	; 0
 87e:	20 95       	com	r18
 880:	30 95       	com	r19
 882:	20 7f       	andi	r18, 0xF0	; 240
 884:	33 27       	eor	r19, r19
 886:	a9 01       	movw	r20, r18
 888:	64 e0       	ldi	r22, 0x04	; 4
 88a:	55 95       	asr	r21
 88c:	47 95       	ror	r20
 88e:	6a 95       	dec	r22
 890:	e1 f7       	brne	.-8      	; 0x88a <ButtonCycleUpdate+0x86>
 892:	05 2e       	mov	r0, r21
 894:	00 0c       	add	r0, r0
 896:	66 0b       	sbc	r22, r22
 898:	77 0b       	sbc	r23, r23
 89a:	4c 29       	or	r20, r12
 89c:	5d 29       	or	r21, r13
 89e:	6e 29       	or	r22, r14
 8a0:	7f 29       	or	r23, r15
 8a2:	31 96       	adiw	r30, 0x01	; 1
	uint8_t Col;
	
	tempValue = (~PIND) & ((1<<PIND6) | (1<<PIND5) | (1<<PIND4) | (1<<PIND3));	/* Get PD6-PD3 IO state */
	tempValue >>= 3;	/* right rotate to low 4 bits location */
	
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
 8a4:	e4 30       	cpi	r30, 0x04	; 4
 8a6:	f1 05       	cpc	r31, r1
 8a8:	71 f6       	brne	.-100    	; 0x846 <ButtonCycleUpdate+0x42>
		/* read and save button state after the column which active as low */
		MatrixButtonValue <<= 4;	/* newer 4 button state store in lower four bits */
		MatrixButtonValue |= ((~PINC) & 0x00f0) >> 4;
	}
	
	io_state = (tempValue << 16) | MatrixButtonValue;
 8aa:	dc 01       	movw	r26, r24
 8ac:	99 27       	eor	r25, r25
 8ae:	88 27       	eor	r24, r24
 8b0:	00 91 b2 01 	lds	r16, 0x01B2
 8b4:	10 91 b3 01 	lds	r17, 0x01B3
 8b8:	20 91 b4 01 	lds	r18, 0x01B4
 8bc:	30 91 b5 01 	lds	r19, 0x01B5
 8c0:	80 2b       	or	r24, r16
 8c2:	91 2b       	or	r25, r17
 8c4:	a2 2b       	or	r26, r18
 8c6:	b3 2b       	or	r27, r19
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
 8c8:	48 2b       	or	r20, r24
 8ca:	59 2b       	or	r21, r25
 8cc:	6a 2b       	or	r22, r26
 8ce:	7b 2b       	or	r23, r27
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
 8d0:	10 92 b2 01 	sts	0x01B2, r1
 8d4:	10 92 b3 01 	sts	0x01B3, r1
 8d8:	10 92 b4 01 	sts	0x01B4, r1
 8dc:	10 92 b5 01 	sts	0x01B5, r1
	b = button.buttonsLastCycle.bVal;
 8e0:	80 91 b6 01 	lds	r24, 0x01B6
 8e4:	90 91 b7 01 	lds	r25, 0x01B7
 8e8:	a0 91 b8 01 	lds	r26, 0x01B8
 8ec:	b0 91 b9 01 	lds	r27, 0x01B9
	holdTime = button.buttonHoldTime;
 8f0:	20 91 ca 01 	lds	r18, 0x01CA
 8f4:	30 91 cb 01 	lds	r19, 0x01CB
	
	if (button.buttonsReleased.bVal != 0) {		
 8f8:	c0 90 ba 01 	lds	r12, 0x01BA
 8fc:	d0 90 bb 01 	lds	r13, 0x01BB
 900:	e0 90 bc 01 	lds	r14, 0x01BC
 904:	f0 90 bd 01 	lds	r15, 0x01BD
 908:	c1 14       	cp	r12, r1
 90a:	d1 04       	cpc	r13, r1
 90c:	e1 04       	cpc	r14, r1
 90e:	f1 04       	cpc	r15, r1
 910:	49 f0       	breq	.+18     	; 0x924 <ButtonCycleUpdate+0x120>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
 912:	c0 92 c2 01 	sts	0x01C2, r12
 916:	d0 92 c3 01 	sts	0x01C3, r13
 91a:	e0 92 c4 01 	sts	0x01C4, r14
 91e:	f0 92 c5 01 	sts	0x01C5, r15
 922:	0b c0       	rjmp	.+22     	; 0x93a <ButtonCycleUpdate+0x136>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
 924:	2d 33       	cpi	r18, 0x3D	; 61
 926:	31 05       	cpc	r19, r1
 928:	40 f0       	brcs	.+16     	; 0x93a <ButtonCycleUpdate+0x136>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
 92a:	10 92 c2 01 	sts	0x01C2, r1
 92e:	10 92 c3 01 	sts	0x01C3, r1
 932:	10 92 c4 01 	sts	0x01C4, r1
 936:	10 92 c5 01 	sts	0x01C5, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
 93a:	10 92 ba 01 	sts	0x01BA, r1
 93e:	10 92 bb 01 	sts	0x01BB, r1
 942:	10 92 bc 01 	sts	0x01BC, r1
 946:	10 92 bd 01 	sts	0x01BD, r1
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
 94a:	10 92 c6 01 	sts	0x01C6, r1
 94e:	10 92 c7 01 	sts	0x01C7, r1
 952:	10 92 c8 01 	sts	0x01C8, r1
 956:	10 92 c9 01 	sts	0x01C9, r1
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
 95a:	48 17       	cp	r20, r24
 95c:	59 07       	cpc	r21, r25
 95e:	6a 07       	cpc	r22, r26
 960:	7b 07       	cpc	r23, r27
 962:	d9 f4       	brne	.+54     	; 0x99a <ButtonCycleUpdate+0x196>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
		if ( ++holdTime > BTN_MIN_HOLD_60) {
 964:	2f 5f       	subi	r18, 0xFF	; 255
 966:	3f 4f       	sbci	r19, 0xFF	; 255
 968:	24 32       	cpi	r18, 0x24	; 36
 96a:	31 05       	cpc	r19, r1
 96c:	48 f4       	brcc	.+18     	; 0x980 <ButtonCycleUpdate+0x17c>

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
 96e:	10 92 be 01 	sts	0x01BE, r1
 972:	10 92 bf 01 	sts	0x01BF, r1
 976:	10 92 c0 01 	sts	0x01C0, r1
 97a:	10 92 c1 01 	sts	0x01C1, r1
 97e:	08 c0       	rjmp	.+16     	; 0x990 <ButtonCycleUpdate+0x18c>
		if ( ++holdTime > BTN_MIN_HOLD_60) {
			button.buttonsHeld.bVal = buttons;
 980:	40 93 be 01 	sts	0x01BE, r20
 984:	50 93 bf 01 	sts	0x01BF, r21
 988:	60 93 c0 01 	sts	0x01C0, r22
 98c:	70 93 c1 01 	sts	0x01C1, r23
		}	
		button.buttonHoldTime = holdTime;
 990:	30 93 cb 01 	sts	0x01CB, r19
 994:	20 93 ca 01 	sts	0x01CA, r18
 998:	45 c0       	rjmp	.+138    	; 0xa24 <ButtonCycleUpdate+0x220>
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
 99a:	40 93 b6 01 	sts	0x01B6, r20
 99e:	50 93 b7 01 	sts	0x01B7, r21
 9a2:	60 93 b8 01 	sts	0x01B8, r22
 9a6:	70 93 b9 01 	sts	0x01B9, r23
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
 9aa:	40 95       	com	r20
 9ac:	50 95       	com	r21
 9ae:	60 95       	com	r22
 9b0:	70 95       	com	r23
 9b2:	48 23       	and	r20, r24
 9b4:	59 23       	and	r21, r25
 9b6:	6a 23       	and	r22, r26
 9b8:	7b 23       	and	r23, r27
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
 9ba:	80 91 be 01 	lds	r24, 0x01BE
 9be:	90 91 bf 01 	lds	r25, 0x01BF
 9c2:	a0 91 c0 01 	lds	r26, 0x01C0
 9c6:	b0 91 c1 01 	lds	r27, 0x01C1
 9ca:	84 23       	and	r24, r20
 9cc:	95 23       	and	r25, r21
 9ce:	a6 23       	and	r26, r22
 9d0:	b7 23       	and	r27, r23
 9d2:	89 2b       	or	r24, r25
 9d4:	8a 2b       	or	r24, r26
 9d6:	8b 2b       	or	r24, r27
 9d8:	29 f5       	brne	.+74     	; 0xa24 <ButtonCycleUpdate+0x220>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
 9da:	10 92 cb 01 	sts	0x01CB, r1
 9de:	10 92 ca 01 	sts	0x01CA, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
 9e2:	23 50       	subi	r18, 0x03	; 3
 9e4:	31 09       	sbc	r19, r1
 9e6:	20 32       	cpi	r18, 0x20	; 32
 9e8:	31 05       	cpc	r19, r1
 9ea:	e0 f4       	brcc	.+56     	; 0xa24 <ButtonCycleUpdate+0x220>
				button.buttonsReleased.bVal = buttons;	
 9ec:	40 93 ba 01 	sts	0x01BA, r20
 9f0:	50 93 bb 01 	sts	0x01BB, r21
 9f4:	60 93 bc 01 	sts	0x01BC, r22
 9f8:	70 93 bd 01 	sts	0x01BD, r23
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
 9fc:	80 91 c2 01 	lds	r24, 0x01C2
 a00:	90 91 c3 01 	lds	r25, 0x01C3
 a04:	a0 91 c4 01 	lds	r26, 0x01C4
 a08:	b0 91 c5 01 	lds	r27, 0x01C5
 a0c:	48 23       	and	r20, r24
 a0e:	59 23       	and	r21, r25
 a10:	6a 23       	and	r22, r26
 a12:	7b 23       	and	r23, r27
 a14:	40 93 c6 01 	sts	0x01C6, r20
 a18:	50 93 c7 01 	sts	0x01C7, r21
 a1c:	60 93 c8 01 	sts	0x01C8, r22
 a20:	70 93 c9 01 	sts	0x01C9, r23
													button.buttonsReleasedHistory.bVal;
			}       
		}
	}
}
 a24:	df 91       	pop	r29
 a26:	cf 91       	pop	r28
 a28:	1f 91       	pop	r17
 a2a:	0f 91       	pop	r16
 a2c:	ff 90       	pop	r15
 a2e:	ef 90       	pop	r14
 a30:	df 90       	pop	r13
 a32:	cf 90       	pop	r12
 a34:	08 95       	ret

00000a36 <main>:
//----- Begin Code ------------------------------------------------------------
int main(void)
{
	// initialize our libraries
	// initialize the UART (serial port)
	uartInit();
 a36:	0e 94 37 03 	call	0x66e	; 0x66e <uartInit>
	// set the baud rate of the UART for our debug/reporting output
	uartSetBaudRate(9600);
 a3a:	60 e8       	ldi	r22, 0x80	; 128
 a3c:	75 e2       	ldi	r23, 0x25	; 37
 a3e:	80 e0       	ldi	r24, 0x00	; 0
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	0e 94 50 03 	call	0x6a0	; 0x6a0 <uartSetBaudRate>
	// initialize rprintf system
	rprintfInit(uartSendByte);
 a46:	87 e7       	ldi	r24, 0x77	; 119
 a48:	93 e0       	ldi	r25, 0x03	; 3
 a4a:	0e 94 c8 00 	call	0x190	; 0x190 <rprintfInit>
	//timerTest();
	
	/*
	Calll all initial function
	*/
	rprintf("RF remote start!\n");
 a4e:	8b e9       	ldi	r24, 0x9B	; 155
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	9f 93       	push	r25
 a54:	8f 93       	push	r24
 a56:	81 e0       	ldi	r24, 0x01	; 1
 a58:	8f 93       	push	r24
 a5a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <rprintf1RamRom>
	ButtonInit();
 a5e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <ButtonInit>
 a62:	0f 90       	pop	r0
 a64:	0f 90       	pop	r0
 a66:	0f 90       	pop	r0
	{
		_delay_ms(20);
		ButtonCycleUpdate();
		
		//rprintf("t=%x\n", button.buttonHoldTime);
		if(button.buttonsReleased.bVal) rprintf("rl=%x\n", button.buttonsReleased.bVal);
 a68:	04 e9       	ldi	r16, 0x94	; 148
 a6a:	10 e0       	ldi	r17, 0x00	; 0
 a6c:	ff 24       	eor	r15, r15
 a6e:	f3 94       	inc	r15
		if(button.buttonsReleased.bVal) rprintf("rh=%x\n", button.buttonsReleased.bVal>>16);
 a70:	cd e8       	ldi	r28, 0x8D	; 141
 a72:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a74:	8f e3       	ldi	r24, 0x3F	; 63
 a76:	9c e9       	ldi	r25, 0x9C	; 156
 a78:	01 97       	sbiw	r24, 0x01	; 1
 a7a:	f1 f7       	brne	.-4      	; 0xa78 <main+0x42>
 a7c:	00 c0       	rjmp	.+0      	; 0xa7e <main+0x48>
 a7e:	00 00       	nop
	ButtonInit();
	//glcdInit();	/* Need connect to LCD device because MCU will check lcd busy or not will cause waiting */
	while(1)
	{
		_delay_ms(20);
		ButtonCycleUpdate();
 a80:	0e 94 02 04 	call	0x804	; 0x804 <ButtonCycleUpdate>
		
		//rprintf("t=%x\n", button.buttonHoldTime);
		if(button.buttonsReleased.bVal) rprintf("rl=%x\n", button.buttonsReleased.bVal);
 a84:	80 91 ba 01 	lds	r24, 0x01BA
 a88:	90 91 bb 01 	lds	r25, 0x01BB
 a8c:	a0 91 bc 01 	lds	r26, 0x01BC
 a90:	b0 91 bd 01 	lds	r27, 0x01BD
 a94:	00 97       	sbiw	r24, 0x00	; 0
 a96:	a1 05       	cpc	r26, r1
 a98:	b1 05       	cpc	r27, r1
 a9a:	89 f0       	breq	.+34     	; 0xabe <main+0x88>
 a9c:	bf 93       	push	r27
 a9e:	af 93       	push	r26
 aa0:	9f 93       	push	r25
 aa2:	8f 93       	push	r24
 aa4:	1f 93       	push	r17
 aa6:	0f 93       	push	r16
 aa8:	ff 92       	push	r15
 aaa:	0e 94 e6 00 	call	0x1cc	; 0x1cc <rprintf1RamRom>
 aae:	8d b7       	in	r24, 0x3d	; 61
 ab0:	9e b7       	in	r25, 0x3e	; 62
 ab2:	07 96       	adiw	r24, 0x07	; 7
 ab4:	0f b6       	in	r0, 0x3f	; 63
 ab6:	f8 94       	cli
 ab8:	9e bf       	out	0x3e, r25	; 62
 aba:	0f be       	out	0x3f, r0	; 63
 abc:	8d bf       	out	0x3d, r24	; 61
		if(button.buttonsReleased.bVal) rprintf("rh=%x\n", button.buttonsReleased.bVal>>16);
 abe:	80 91 ba 01 	lds	r24, 0x01BA
 ac2:	90 91 bb 01 	lds	r25, 0x01BB
 ac6:	a0 91 bc 01 	lds	r26, 0x01BC
 aca:	b0 91 bd 01 	lds	r27, 0x01BD
 ace:	00 97       	sbiw	r24, 0x00	; 0
 ad0:	a1 05       	cpc	r26, r1
 ad2:	b1 05       	cpc	r27, r1
 ad4:	79 f2       	breq	.-98     	; 0xa74 <main+0x3e>
 ad6:	cd 01       	movw	r24, r26
 ad8:	aa 27       	eor	r26, r26
 ada:	bb 27       	eor	r27, r27
 adc:	bf 93       	push	r27
 ade:	af 93       	push	r26
 ae0:	9f 93       	push	r25
 ae2:	8f 93       	push	r24
 ae4:	df 93       	push	r29
 ae6:	cf 93       	push	r28
 ae8:	ff 92       	push	r15
 aea:	0e 94 e6 00 	call	0x1cc	; 0x1cc <rprintf1RamRom>
 aee:	8d b7       	in	r24, 0x3d	; 61
 af0:	9e b7       	in	r25, 0x3e	; 62
 af2:	07 96       	adiw	r24, 0x07	; 7
 af4:	0f b6       	in	r0, 0x3f	; 63
 af6:	f8 94       	cli
 af8:	9e bf       	out	0x3e, r25	; 62
 afa:	0f be       	out	0x3f, r0	; 63
 afc:	8d bf       	out	0x3d, r24	; 61
 afe:	ba cf       	rjmp	.-140    	; 0xa74 <main+0x3e>

00000b00 <__udivmodhi4>:
 b00:	aa 1b       	sub	r26, r26
 b02:	bb 1b       	sub	r27, r27
 b04:	51 e1       	ldi	r21, 0x11	; 17
 b06:	07 c0       	rjmp	.+14     	; 0xb16 <__udivmodhi4_ep>

00000b08 <__udivmodhi4_loop>:
 b08:	aa 1f       	adc	r26, r26
 b0a:	bb 1f       	adc	r27, r27
 b0c:	a6 17       	cp	r26, r22
 b0e:	b7 07       	cpc	r27, r23
 b10:	10 f0       	brcs	.+4      	; 0xb16 <__udivmodhi4_ep>
 b12:	a6 1b       	sub	r26, r22
 b14:	b7 0b       	sbc	r27, r23

00000b16 <__udivmodhi4_ep>:
 b16:	88 1f       	adc	r24, r24
 b18:	99 1f       	adc	r25, r25
 b1a:	5a 95       	dec	r21
 b1c:	a9 f7       	brne	.-22     	; 0xb08 <__udivmodhi4_loop>
 b1e:	80 95       	com	r24
 b20:	90 95       	com	r25
 b22:	bc 01       	movw	r22, r24
 b24:	cd 01       	movw	r24, r26
 b26:	08 95       	ret

00000b28 <__udivmodsi4>:
 b28:	a1 e2       	ldi	r26, 0x21	; 33
 b2a:	1a 2e       	mov	r1, r26
 b2c:	aa 1b       	sub	r26, r26
 b2e:	bb 1b       	sub	r27, r27
 b30:	fd 01       	movw	r30, r26
 b32:	0d c0       	rjmp	.+26     	; 0xb4e <__udivmodsi4_ep>

00000b34 <__udivmodsi4_loop>:
 b34:	aa 1f       	adc	r26, r26
 b36:	bb 1f       	adc	r27, r27
 b38:	ee 1f       	adc	r30, r30
 b3a:	ff 1f       	adc	r31, r31
 b3c:	a2 17       	cp	r26, r18
 b3e:	b3 07       	cpc	r27, r19
 b40:	e4 07       	cpc	r30, r20
 b42:	f5 07       	cpc	r31, r21
 b44:	20 f0       	brcs	.+8      	; 0xb4e <__udivmodsi4_ep>
 b46:	a2 1b       	sub	r26, r18
 b48:	b3 0b       	sbc	r27, r19
 b4a:	e4 0b       	sbc	r30, r20
 b4c:	f5 0b       	sbc	r31, r21

00000b4e <__udivmodsi4_ep>:
 b4e:	66 1f       	adc	r22, r22
 b50:	77 1f       	adc	r23, r23
 b52:	88 1f       	adc	r24, r24
 b54:	99 1f       	adc	r25, r25
 b56:	1a 94       	dec	r1
 b58:	69 f7       	brne	.-38     	; 0xb34 <__udivmodsi4_loop>
 b5a:	60 95       	com	r22
 b5c:	70 95       	com	r23
 b5e:	80 95       	com	r24
 b60:	90 95       	com	r25
 b62:	9b 01       	movw	r18, r22
 b64:	ac 01       	movw	r20, r24
 b66:	bd 01       	movw	r22, r26
 b68:	cf 01       	movw	r24, r30
 b6a:	08 95       	ret

00000b6c <_exit>:
 b6c:	f8 94       	cli

00000b6e <__stop_program>:
 b6e:	ff cf       	rjmp	.-2      	; 0xb6e <__stop_program>
