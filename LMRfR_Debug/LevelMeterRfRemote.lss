
LevelMeterRfRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000012e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000126c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cc  00800100  00800100  000012e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ded  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000955  00000000  00000000  000034dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fad  00000000  00000000  00003e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f98  00000000  00000000  00004de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c63  00000000  00000000  00005d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002116  00000000  00000000  000069db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  00008af1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 93 03 	jmp	0x726	; 0x726 <__vector_9>
      28:	0c 94 c9 03 	jmp	0x792	; 0x792 <__vector_10>
      2c:	0c 94 a8 02 	jmp	0x550	; 0x550 <__vector_11>
      30:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__vector_12>
      34:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__vector_13>
      38:	0c 94 27 03 	jmp	0x64e	; 0x64e <__vector_14>
      3c:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__vector_15>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 16 02 	jmp	0x42c	; 0x42c <__vector_18>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__vector_20>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 af 04 	jmp	0x95e	; 0x95e <__vector_22>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d0 e1       	ldi	r29, 0x10	; 16
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ec e6       	ldi	r30, 0x6C	; 108
      90:	f2 e1       	ldi	r31, 0x12	; 18
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a0 30       	cpi	r26, 0x00	; 0
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ac 3c       	cpi	r26, 0xCC	; 204
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 54 07 	call	0xea8	; 0xea8 <main>
      b2:	0c 94 34 09 	jmp	0x1268	; 0x1268 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <bufferInit>:
	{
		// flush the whole buffer
		buffer->datalength = 0;
	}
	// end critical section
	CRITICAL_SECTION_END;
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	cd b7       	in	r28, 0x3d	; 61
}
      c0:	de b7       	in	r29, 0x3e	; 62
      c2:	27 97       	sbiw	r28, 0x07	; 7
      c4:	0f b6       	in	r0, 0x3f	; 63
      c6:	f8 94       	cli
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	0f be       	out	0x3f, r0	; 63
      cc:	cd bf       	out	0x3d, r28	; 61
      ce:	9b 83       	std	Y+3, r25	; 0x03
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
      d0:	8a 83       	std	Y+2, r24	; 0x02
      d2:	7d 83       	std	Y+5, r23	; 0x05
      d4:	6c 83       	std	Y+4, r22	; 0x04
      d6:	5f 83       	std	Y+7, r21	; 0x07
      d8:	4e 83       	std	Y+6, r20	; 0x06
	// begin critical section
	CRITICAL_SECTION_START;
      da:	8f e5       	ldi	r24, 0x5F	; 95
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	fc 01       	movw	r30, r24
      e0:	80 81       	ld	r24, Z
      e2:	89 83       	std	Y+1, r24	; 0x01
      e4:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
      e6:	8a 81       	ldd	r24, Y+2	; 0x02
      e8:	9b 81       	ldd	r25, Y+3	; 0x03
      ea:	2c 81       	ldd	r18, Y+4	; 0x04
      ec:	3d 81       	ldd	r19, Y+5	; 0x05
      ee:	fc 01       	movw	r30, r24
      f0:	31 83       	std	Z+1, r19	; 0x01
      f2:	20 83       	st	Z, r18
	buffer->size = size;
      f4:	8a 81       	ldd	r24, Y+2	; 0x02
      f6:	9b 81       	ldd	r25, Y+3	; 0x03
      f8:	2e 81       	ldd	r18, Y+6	; 0x06
      fa:	3f 81       	ldd	r19, Y+7	; 0x07
      fc:	fc 01       	movw	r30, r24
      fe:	33 83       	std	Z+3, r19	; 0x03
     100:	22 83       	std	Z+2, r18	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
     102:	8a 81       	ldd	r24, Y+2	; 0x02
     104:	9b 81       	ldd	r25, Y+3	; 0x03
     106:	fc 01       	movw	r30, r24
     108:	17 82       	std	Z+7, r1	; 0x07
     10a:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
     10c:	8a 81       	ldd	r24, Y+2	; 0x02
     10e:	9b 81       	ldd	r25, Y+3	; 0x03
     110:	fc 01       	movw	r30, r24
     112:	15 82       	std	Z+5, r1	; 0x05
     114:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
     116:	8f e5       	ldi	r24, 0x5F	; 95
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	29 81       	ldd	r18, Y+1	; 0x01
     11c:	fc 01       	movw	r30, r24
     11e:	20 83       	st	Z, r18
}
     120:	27 96       	adiw	r28, 0x07	; 7
     122:	0f b6       	in	r0, 0x3f	; 63
     124:	f8 94       	cli
     126:	de bf       	out	0x3e, r29	; 62
     128:	0f be       	out	0x3f, r0	; 63
     12a:	cd bf       	out	0x3d, r28	; 61
     12c:	df 91       	pop	r29
     12e:	cf 91       	pop	r28
     130:	08 95       	ret

00000132 <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	00 d0       	rcall	.+0      	; 0x138 <bufferGetFromFront+0x6>
     138:	00 d0       	rcall	.+0      	; 0x13a <bufferGetFromFront+0x8>
     13a:	cd b7       	in	r28, 0x3d	; 61
     13c:	de b7       	in	r29, 0x3e	; 62
     13e:	9c 83       	std	Y+4, r25	; 0x04
     140:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char data = 0;
     142:	19 82       	std	Y+1, r1	; 0x01
	// begin critical section
	CRITICAL_SECTION_START;
     144:	8f e5       	ldi	r24, 0x5F	; 95
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	fc 01       	movw	r30, r24
     14a:	80 81       	ld	r24, Z
     14c:	8a 83       	std	Y+2, r24	; 0x02
     14e:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
     150:	8b 81       	ldd	r24, Y+3	; 0x03
     152:	9c 81       	ldd	r25, Y+4	; 0x04
     154:	fc 01       	movw	r30, r24
     156:	84 81       	ldd	r24, Z+4	; 0x04
     158:	95 81       	ldd	r25, Z+5	; 0x05
     15a:	89 2b       	or	r24, r25
     15c:	09 f4       	brne	.+2      	; 0x160 <bufferGetFromFront+0x2e>
     15e:	47 c0       	rjmp	.+142    	; 0x1ee <bufferGetFromFront+0xbc>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
     160:	8b 81       	ldd	r24, Y+3	; 0x03
     162:	9c 81       	ldd	r25, Y+4	; 0x04
     164:	fc 01       	movw	r30, r24
     166:	20 81       	ld	r18, Z
     168:	31 81       	ldd	r19, Z+1	; 0x01
     16a:	8b 81       	ldd	r24, Y+3	; 0x03
     16c:	9c 81       	ldd	r25, Y+4	; 0x04
     16e:	fc 01       	movw	r30, r24
     170:	86 81       	ldd	r24, Z+6	; 0x06
     172:	97 81       	ldd	r25, Z+7	; 0x07
     174:	82 0f       	add	r24, r18
     176:	93 1f       	adc	r25, r19
     178:	fc 01       	movw	r30, r24
     17a:	80 81       	ld	r24, Z
     17c:	89 83       	std	Y+1, r24	; 0x01
		// move index down and decrement length
		buffer->dataindex++;
     17e:	8b 81       	ldd	r24, Y+3	; 0x03
     180:	9c 81       	ldd	r25, Y+4	; 0x04
     182:	fc 01       	movw	r30, r24
     184:	86 81       	ldd	r24, Z+6	; 0x06
     186:	97 81       	ldd	r25, Z+7	; 0x07
     188:	9c 01       	movw	r18, r24
     18a:	2f 5f       	subi	r18, 0xFF	; 255
     18c:	3f 4f       	sbci	r19, 0xFF	; 255
     18e:	8b 81       	ldd	r24, Y+3	; 0x03
     190:	9c 81       	ldd	r25, Y+4	; 0x04
     192:	fc 01       	movw	r30, r24
     194:	37 83       	std	Z+7, r19	; 0x07
     196:	26 83       	std	Z+6, r18	; 0x06
		if(buffer->dataindex >= buffer->size)
     198:	8b 81       	ldd	r24, Y+3	; 0x03
     19a:	9c 81       	ldd	r25, Y+4	; 0x04
     19c:	fc 01       	movw	r30, r24
     19e:	26 81       	ldd	r18, Z+6	; 0x06
     1a0:	37 81       	ldd	r19, Z+7	; 0x07
     1a2:	8b 81       	ldd	r24, Y+3	; 0x03
     1a4:	9c 81       	ldd	r25, Y+4	; 0x04
     1a6:	fc 01       	movw	r30, r24
     1a8:	82 81       	ldd	r24, Z+2	; 0x02
     1aa:	93 81       	ldd	r25, Z+3	; 0x03
     1ac:	28 17       	cp	r18, r24
     1ae:	39 07       	cpc	r19, r25
     1b0:	88 f0       	brcs	.+34     	; 0x1d4 <bufferGetFromFront+0xa2>
		{
			buffer->dataindex -= buffer->size;
     1b2:	8b 81       	ldd	r24, Y+3	; 0x03
     1b4:	9c 81       	ldd	r25, Y+4	; 0x04
     1b6:	fc 01       	movw	r30, r24
     1b8:	26 81       	ldd	r18, Z+6	; 0x06
     1ba:	37 81       	ldd	r19, Z+7	; 0x07
     1bc:	8b 81       	ldd	r24, Y+3	; 0x03
     1be:	9c 81       	ldd	r25, Y+4	; 0x04
     1c0:	fc 01       	movw	r30, r24
     1c2:	82 81       	ldd	r24, Z+2	; 0x02
     1c4:	93 81       	ldd	r25, Z+3	; 0x03
     1c6:	28 1b       	sub	r18, r24
     1c8:	39 0b       	sbc	r19, r25
     1ca:	8b 81       	ldd	r24, Y+3	; 0x03
     1cc:	9c 81       	ldd	r25, Y+4	; 0x04
     1ce:	fc 01       	movw	r30, r24
     1d0:	37 83       	std	Z+7, r19	; 0x07
     1d2:	26 83       	std	Z+6, r18	; 0x06
		}
		buffer->datalength--;
     1d4:	8b 81       	ldd	r24, Y+3	; 0x03
     1d6:	9c 81       	ldd	r25, Y+4	; 0x04
     1d8:	fc 01       	movw	r30, r24
     1da:	84 81       	ldd	r24, Z+4	; 0x04
     1dc:	95 81       	ldd	r25, Z+5	; 0x05
     1de:	9c 01       	movw	r18, r24
     1e0:	21 50       	subi	r18, 0x01	; 1
     1e2:	31 09       	sbc	r19, r1
     1e4:	8b 81       	ldd	r24, Y+3	; 0x03
     1e6:	9c 81       	ldd	r25, Y+4	; 0x04
     1e8:	fc 01       	movw	r30, r24
     1ea:	35 83       	std	Z+5, r19	; 0x05
     1ec:	24 83       	std	Z+4, r18	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
     1ee:	8f e5       	ldi	r24, 0x5F	; 95
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	2a 81       	ldd	r18, Y+2	; 0x02
     1f4:	fc 01       	movw	r30, r24
     1f6:	20 83       	st	Z, r18
	// return
	return data;
     1f8:	89 81       	ldd	r24, Y+1	; 0x01
}
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	08 95       	ret

00000208 <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	00 d0       	rcall	.+0      	; 0x20e <bufferAddToEnd+0x6>
     20e:	00 d0       	rcall	.+0      	; 0x210 <bufferAddToEnd+0x8>
     210:	00 d0       	rcall	.+0      	; 0x212 <bufferAddToEnd+0xa>
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	9b 83       	std	Y+3, r25	; 0x03
     218:	8a 83       	std	Y+2, r24	; 0x02
     21a:	6c 83       	std	Y+4, r22	; 0x04
	// begin critical section
	CRITICAL_SECTION_START;
     21c:	8f e5       	ldi	r24, 0x5F	; 95
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	fc 01       	movw	r30, r24
     222:	80 81       	ld	r24, Z
     224:	89 83       	std	Y+1, r24	; 0x01
     226:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     228:	8a 81       	ldd	r24, Y+2	; 0x02
     22a:	9b 81       	ldd	r25, Y+3	; 0x03
     22c:	fc 01       	movw	r30, r24
     22e:	24 81       	ldd	r18, Z+4	; 0x04
     230:	35 81       	ldd	r19, Z+5	; 0x05
     232:	8a 81       	ldd	r24, Y+2	; 0x02
     234:	9b 81       	ldd	r25, Y+3	; 0x03
     236:	fc 01       	movw	r30, r24
     238:	82 81       	ldd	r24, Z+2	; 0x02
     23a:	93 81       	ldd	r25, Z+3	; 0x03
     23c:	28 17       	cp	r18, r24
     23e:	39 07       	cpc	r19, r25
     240:	a0 f5       	brcc	.+104    	; 0x2aa <bufferAddToEnd+0xa2>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     242:	8a 81       	ldd	r24, Y+2	; 0x02
     244:	9b 81       	ldd	r25, Y+3	; 0x03
     246:	fc 01       	movw	r30, r24
     248:	20 81       	ld	r18, Z
     24a:	31 81       	ldd	r19, Z+1	; 0x01
     24c:	8a 81       	ldd	r24, Y+2	; 0x02
     24e:	9b 81       	ldd	r25, Y+3	; 0x03
     250:	fc 01       	movw	r30, r24
     252:	46 81       	ldd	r20, Z+6	; 0x06
     254:	57 81       	ldd	r21, Z+7	; 0x07
     256:	8a 81       	ldd	r24, Y+2	; 0x02
     258:	9b 81       	ldd	r25, Y+3	; 0x03
     25a:	fc 01       	movw	r30, r24
     25c:	84 81       	ldd	r24, Z+4	; 0x04
     25e:	95 81       	ldd	r25, Z+5	; 0x05
     260:	ba 01       	movw	r22, r20
     262:	68 0f       	add	r22, r24
     264:	79 1f       	adc	r23, r25
     266:	8a 81       	ldd	r24, Y+2	; 0x02
     268:	9b 81       	ldd	r25, Y+3	; 0x03
     26a:	fc 01       	movw	r30, r24
     26c:	42 81       	ldd	r20, Z+2	; 0x02
     26e:	53 81       	ldd	r21, Z+3	; 0x03
     270:	cb 01       	movw	r24, r22
     272:	ba 01       	movw	r22, r20
     274:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__udivmodhi4>
     278:	82 0f       	add	r24, r18
     27a:	93 1f       	adc	r25, r19
     27c:	2c 81       	ldd	r18, Y+4	; 0x04
     27e:	fc 01       	movw	r30, r24
     280:	20 83       	st	Z, r18
		// increment the length
		buffer->datalength++;
     282:	8a 81       	ldd	r24, Y+2	; 0x02
     284:	9b 81       	ldd	r25, Y+3	; 0x03
     286:	fc 01       	movw	r30, r24
     288:	84 81       	ldd	r24, Z+4	; 0x04
     28a:	95 81       	ldd	r25, Z+5	; 0x05
     28c:	9c 01       	movw	r18, r24
     28e:	2f 5f       	subi	r18, 0xFF	; 255
     290:	3f 4f       	sbci	r19, 0xFF	; 255
     292:	8a 81       	ldd	r24, Y+2	; 0x02
     294:	9b 81       	ldd	r25, Y+3	; 0x03
     296:	fc 01       	movw	r30, r24
     298:	35 83       	std	Z+5, r19	; 0x05
     29a:	24 83       	std	Z+4, r18	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     29c:	8f e5       	ldi	r24, 0x5F	; 95
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	29 81       	ldd	r18, Y+1	; 0x01
     2a2:	fc 01       	movw	r30, r24
     2a4:	20 83       	st	Z, r18
		// return success
		return -1;
     2a6:	8f ef       	ldi	r24, 0xFF	; 255
     2a8:	06 c0       	rjmp	.+12     	; 0x2b6 <bufferAddToEnd+0xae>
	}
	// end critical section
	CRITICAL_SECTION_END;
     2aa:	8f e5       	ldi	r24, 0x5F	; 95
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	29 81       	ldd	r18, Y+1	; 0x01
     2b0:	fc 01       	movw	r30, r24
     2b2:	20 83       	st	Z, r18
	// return failure
	return 0;
     2b4:	80 e0       	ldi	r24, 0x00	; 0
}
     2b6:	26 96       	adiw	r28, 0x06	; 6
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <glcdInitHW>:
/*************************************************************/
/********************** LOCAL FUNCTIONS **********************/
/*************************************************************/

void glcdInitHW(void)
{
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62

	//TODO: make setup of chip select lines contingent on how
	// many controllers are actually in the display
	
	// initialize LCD control lines levels
	cbi(GLCD_CTRL_PORT, GLCD_CTRL_RS);
     2d0:	85 e2       	ldi	r24, 0x25	; 37
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	25 e2       	ldi	r18, 0x25	; 37
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	f9 01       	movw	r30, r18
     2da:	20 81       	ld	r18, Z
     2dc:	2e 7f       	andi	r18, 0xFE	; 254
     2de:	fc 01       	movw	r30, r24
     2e0:	20 83       	st	Z, r18
	cbi(GLCD_CTRL_PORT, GLCD_CTRL_RW);
     2e2:	85 e2       	ldi	r24, 0x25	; 37
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	25 e2       	ldi	r18, 0x25	; 37
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	f9 01       	movw	r30, r18
     2ec:	20 81       	ld	r18, Z
     2ee:	2d 7f       	andi	r18, 0xFD	; 253
     2f0:	fc 01       	movw	r30, r24
     2f2:	20 83       	st	Z, r18
	cbi(GLCD_CTRL_PORT, GLCD_CTRL_E);
     2f4:	85 e2       	ldi	r24, 0x25	; 37
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	25 e2       	ldi	r18, 0x25	; 37
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	f9 01       	movw	r30, r18
     2fe:	20 81       	ld	r18, Z
     300:	2b 7f       	andi	r18, 0xFB	; 251
     302:	fc 01       	movw	r30, r24
     304:	20 83       	st	Z, r18
	cbi(GLCD_CTRL_PORT, GLCD_CTRL_CS0);
     306:	85 e2       	ldi	r24, 0x25	; 37
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	25 e2       	ldi	r18, 0x25	; 37
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	f9 01       	movw	r30, r18
     310:	20 81       	ld	r18, Z
     312:	27 7f       	andi	r18, 0xF7	; 247
     314:	fc 01       	movw	r30, r24
     316:	20 83       	st	Z, r18
	cbi(GLCD_CTRL_PORT, GLCD_CTRL_CS1);
     318:	85 e2       	ldi	r24, 0x25	; 37
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	25 e2       	ldi	r18, 0x25	; 37
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	f9 01       	movw	r30, r18
     322:	20 81       	ld	r18, Z
     324:	2f 7e       	andi	r18, 0xEF	; 239
     326:	fc 01       	movw	r30, r24
     328:	20 83       	st	Z, r18
	cbi(GLCD_CTRL_PORT, GLCD_CTRL_CS2);
     32a:	85 e2       	ldi	r24, 0x25	; 37
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	25 e2       	ldi	r18, 0x25	; 37
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	f9 01       	movw	r30, r18
     334:	20 81       	ld	r18, Z
     336:	2f 7b       	andi	r18, 0xBF	; 191
     338:	fc 01       	movw	r30, r24
     33a:	20 83       	st	Z, r18
	cbi(GLCD_CTRL_PORT, GLCD_CTRL_CS3);
     33c:	85 e2       	ldi	r24, 0x25	; 37
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	25 e2       	ldi	r18, 0x25	; 37
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	f9 01       	movw	r30, r18
     346:	20 81       	ld	r18, Z
     348:	2f 77       	andi	r18, 0x7F	; 127
     34a:	fc 01       	movw	r30, r24
     34c:	20 83       	st	Z, r18
	cbi(GLCD_CTRL_PORT, GLCD_CTRL_RESET);
     34e:	85 e2       	ldi	r24, 0x25	; 37
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	25 e2       	ldi	r18, 0x25	; 37
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	f9 01       	movw	r30, r18
     358:	20 81       	ld	r18, Z
     35a:	2f 7d       	andi	r18, 0xDF	; 223
     35c:	fc 01       	movw	r30, r24
     35e:	20 83       	st	Z, r18
	// initialize LCD control port to output
	sbi(GLCD_CTRL_DDR, GLCD_CTRL_RS);
     360:	84 e2       	ldi	r24, 0x24	; 36
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	24 e2       	ldi	r18, 0x24	; 36
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	f9 01       	movw	r30, r18
     36a:	20 81       	ld	r18, Z
     36c:	21 60       	ori	r18, 0x01	; 1
     36e:	fc 01       	movw	r30, r24
     370:	20 83       	st	Z, r18
	sbi(GLCD_CTRL_DDR, GLCD_CTRL_RW);
     372:	84 e2       	ldi	r24, 0x24	; 36
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	24 e2       	ldi	r18, 0x24	; 36
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	f9 01       	movw	r30, r18
     37c:	20 81       	ld	r18, Z
     37e:	22 60       	ori	r18, 0x02	; 2
     380:	fc 01       	movw	r30, r24
     382:	20 83       	st	Z, r18
	sbi(GLCD_CTRL_DDR, GLCD_CTRL_E);
     384:	84 e2       	ldi	r24, 0x24	; 36
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	24 e2       	ldi	r18, 0x24	; 36
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	f9 01       	movw	r30, r18
     38e:	20 81       	ld	r18, Z
     390:	24 60       	ori	r18, 0x04	; 4
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
	sbi(GLCD_CTRL_DDR, GLCD_CTRL_CS0);
     396:	84 e2       	ldi	r24, 0x24	; 36
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	24 e2       	ldi	r18, 0x24	; 36
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	f9 01       	movw	r30, r18
     3a0:	20 81       	ld	r18, Z
     3a2:	28 60       	ori	r18, 0x08	; 8
     3a4:	fc 01       	movw	r30, r24
     3a6:	20 83       	st	Z, r18
	sbi(GLCD_CTRL_DDR, GLCD_CTRL_CS1);
     3a8:	84 e2       	ldi	r24, 0x24	; 36
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	24 e2       	ldi	r18, 0x24	; 36
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	f9 01       	movw	r30, r18
     3b2:	20 81       	ld	r18, Z
     3b4:	20 61       	ori	r18, 0x10	; 16
     3b6:	fc 01       	movw	r30, r24
     3b8:	20 83       	st	Z, r18
	sbi(GLCD_CTRL_DDR, GLCD_CTRL_CS2);
     3ba:	84 e2       	ldi	r24, 0x24	; 36
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	24 e2       	ldi	r18, 0x24	; 36
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	f9 01       	movw	r30, r18
     3c4:	20 81       	ld	r18, Z
     3c6:	20 64       	ori	r18, 0x40	; 64
     3c8:	fc 01       	movw	r30, r24
     3ca:	20 83       	st	Z, r18
	sbi(GLCD_CTRL_DDR, GLCD_CTRL_CS3);
     3cc:	84 e2       	ldi	r24, 0x24	; 36
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	24 e2       	ldi	r18, 0x24	; 36
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	f9 01       	movw	r30, r18
     3d6:	20 81       	ld	r18, Z
     3d8:	20 68       	ori	r18, 0x80	; 128
     3da:	fc 01       	movw	r30, r24
     3dc:	20 83       	st	Z, r18
	sbi(GLCD_CTRL_DDR, GLCD_CTRL_RESET);
     3de:	84 e2       	ldi	r24, 0x24	; 36
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	24 e2       	ldi	r18, 0x24	; 36
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	f9 01       	movw	r30, r18
     3e8:	20 81       	ld	r18, Z
     3ea:	20 62       	ori	r18, 0x20	; 32
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18
	// initialize LCD data
	outb(GLCD_DATA_PORT, 0x00);
     3f0:	88 e2       	ldi	r24, 0x28	; 40
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	fc 01       	movw	r30, r24
     3f6:	10 82       	st	Z, r1
	// initialize LCD data port to output
	outb(GLCD_DATA_DDR, 0xFF);
     3f8:	87 e2       	ldi	r24, 0x27	; 39
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	2f ef       	ldi	r18, 0xFF	; 255
     3fe:	fc 01       	movw	r30, r24
     400:	20 83       	st	Z, r18
#endif
}
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	08 95       	ret

00000408 <rprintfInit>:

// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	00 d0       	rcall	.+0      	; 0x40e <rprintfInit+0x6>
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	9a 83       	std	Y+2, r25	; 0x02
     414:	89 83       	std	Y+1, r24	; 0x01
	rputchar = putchar_func;
     416:	89 81       	ldd	r24, Y+1	; 0x01
     418:	9a 81       	ldd	r25, Y+2	; 0x02
     41a:	90 93 01 01 	sts	0x0101, r25
     41e:	80 93 00 01 	sts	0x0100, r24
}
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	08 95       	ret

0000042c <__vector_18>:
	OCR1B = pwmDuty;
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
     42c:	1f 92       	push	r1
     42e:	0f 92       	push	r0
     430:	00 90 5f 00 	lds	r0, 0x005F
     434:	0f 92       	push	r0
     436:	11 24       	eor	r1, r1
     438:	2f 93       	push	r18
     43a:	3f 93       	push	r19
     43c:	4f 93       	push	r20
     43e:	5f 93       	push	r21
     440:	6f 93       	push	r22
     442:	7f 93       	push	r23
     444:	8f 93       	push	r24
     446:	9f 93       	push	r25
     448:	af 93       	push	r26
     44a:	bf 93       	push	r27
     44c:	ef 93       	push	r30
     44e:	ff 93       	push	r31
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
	Timer0Reg0++;			// increment low-order counter
     458:	80 91 92 01 	lds	r24, 0x0192
     45c:	90 91 93 01 	lds	r25, 0x0193
     460:	a0 91 94 01 	lds	r26, 0x0194
     464:	b0 91 95 01 	lds	r27, 0x0195
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	a1 1d       	adc	r26, r1
     46c:	b1 1d       	adc	r27, r1
     46e:	80 93 92 01 	sts	0x0192, r24
     472:	90 93 93 01 	sts	0x0193, r25
     476:	a0 93 94 01 	sts	0x0194, r26
     47a:	b0 93 95 01 	sts	0x0195, r27

	// increment pause counter
	TimerPauseReg++;
     47e:	80 91 96 01 	lds	r24, 0x0196
     482:	90 91 97 01 	lds	r25, 0x0197
     486:	a0 91 98 01 	lds	r26, 0x0198
     48a:	b0 91 99 01 	lds	r27, 0x0199
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	a1 1d       	adc	r26, r1
     492:	b1 1d       	adc	r27, r1
     494:	80 93 96 01 	sts	0x0196, r24
     498:	90 93 97 01 	sts	0x0197, r25
     49c:	a0 93 98 01 	sts	0x0198, r26
     4a0:	b0 93 99 01 	sts	0x0199, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
     4a4:	80 91 02 01 	lds	r24, 0x0102
     4a8:	90 91 03 01 	lds	r25, 0x0103
     4ac:	89 2b       	or	r24, r25
     4ae:	31 f0       	breq	.+12     	; 0x4bc <__vector_18+0x90>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
     4b0:	80 91 02 01 	lds	r24, 0x0102
     4b4:	90 91 03 01 	lds	r25, 0x0103
     4b8:	fc 01       	movw	r30, r24
     4ba:	09 95       	icall
}
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	ff 91       	pop	r31
     4c2:	ef 91       	pop	r30
     4c4:	bf 91       	pop	r27
     4c6:	af 91       	pop	r26
     4c8:	9f 91       	pop	r25
     4ca:	8f 91       	pop	r24
     4cc:	7f 91       	pop	r23
     4ce:	6f 91       	pop	r22
     4d0:	5f 91       	pop	r21
     4d2:	4f 91       	pop	r20
     4d4:	3f 91       	pop	r19
     4d6:	2f 91       	pop	r18
     4d8:	0f 90       	pop	r0
     4da:	00 92 5f 00 	sts	0x005F, r0
     4de:	0f 90       	pop	r0
     4e0:	1f 90       	pop	r1
     4e2:	18 95       	reti

000004e4 <__vector_15>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
     4e4:	1f 92       	push	r1
     4e6:	0f 92       	push	r0
     4e8:	00 90 5f 00 	lds	r0, 0x005F
     4ec:	0f 92       	push	r0
     4ee:	11 24       	eor	r1, r1
     4f0:	2f 93       	push	r18
     4f2:	3f 93       	push	r19
     4f4:	4f 93       	push	r20
     4f6:	5f 93       	push	r21
     4f8:	6f 93       	push	r22
     4fa:	7f 93       	push	r23
     4fc:	8f 93       	push	r24
     4fe:	9f 93       	push	r25
     500:	af 93       	push	r26
     502:	bf 93       	push	r27
     504:	ef 93       	push	r30
     506:	ff 93       	push	r31
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
     510:	80 91 04 01 	lds	r24, 0x0104
     514:	90 91 05 01 	lds	r25, 0x0105
     518:	89 2b       	or	r24, r25
     51a:	31 f0       	breq	.+12     	; 0x528 <__vector_15+0x44>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
     51c:	80 91 04 01 	lds	r24, 0x0104
     520:	90 91 05 01 	lds	r25, 0x0105
     524:	fc 01       	movw	r30, r24
     526:	09 95       	icall
}
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	ff 91       	pop	r31
     52e:	ef 91       	pop	r30
     530:	bf 91       	pop	r27
     532:	af 91       	pop	r26
     534:	9f 91       	pop	r25
     536:	8f 91       	pop	r24
     538:	7f 91       	pop	r23
     53a:	6f 91       	pop	r22
     53c:	5f 91       	pop	r21
     53e:	4f 91       	pop	r20
     540:	3f 91       	pop	r19
     542:	2f 91       	pop	r18
     544:	0f 90       	pop	r0
     546:	00 92 5f 00 	sts	0x005F, r0
     54a:	0f 90       	pop	r0
     54c:	1f 90       	pop	r1
     54e:	18 95       	reti

00000550 <__vector_11>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_OVF_vect)
{
     550:	1f 92       	push	r1
     552:	0f 92       	push	r0
     554:	00 90 5f 00 	lds	r0, 0x005F
     558:	0f 92       	push	r0
     55a:	11 24       	eor	r1, r1
     55c:	2f 93       	push	r18
     55e:	3f 93       	push	r19
     560:	4f 93       	push	r20
     562:	5f 93       	push	r21
     564:	6f 93       	push	r22
     566:	7f 93       	push	r23
     568:	8f 93       	push	r24
     56a:	9f 93       	push	r25
     56c:	af 93       	push	r26
     56e:	bf 93       	push	r27
     570:	ef 93       	push	r30
     572:	ff 93       	push	r31
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
	Timer2Reg0++;			// increment low-order counter
     57c:	80 91 9a 01 	lds	r24, 0x019A
     580:	90 91 9b 01 	lds	r25, 0x019B
     584:	a0 91 9c 01 	lds	r26, 0x019C
     588:	b0 91 9d 01 	lds	r27, 0x019D
     58c:	01 96       	adiw	r24, 0x01	; 1
     58e:	a1 1d       	adc	r26, r1
     590:	b1 1d       	adc	r27, r1
     592:	80 93 9a 01 	sts	0x019A, r24
     596:	90 93 9b 01 	sts	0x019B, r25
     59a:	a0 93 9c 01 	sts	0x019C, r26
     59e:	b0 93 9d 01 	sts	0x019D, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
     5a2:	80 91 0c 01 	lds	r24, 0x010C
     5a6:	90 91 0d 01 	lds	r25, 0x010D
     5aa:	89 2b       	or	r24, r25
     5ac:	31 f0       	breq	.+12     	; 0x5ba <__vector_11+0x6a>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
     5ae:	80 91 0c 01 	lds	r24, 0x010C
     5b2:	90 91 0d 01 	lds	r25, 0x010D
     5b6:	fc 01       	movw	r30, r24
     5b8:	09 95       	icall
}
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	ff 91       	pop	r31
     5c0:	ef 91       	pop	r30
     5c2:	bf 91       	pop	r27
     5c4:	af 91       	pop	r26
     5c6:	9f 91       	pop	r25
     5c8:	8f 91       	pop	r24
     5ca:	7f 91       	pop	r23
     5cc:	6f 91       	pop	r22
     5ce:	5f 91       	pop	r21
     5d0:	4f 91       	pop	r20
     5d2:	3f 91       	pop	r19
     5d4:	2f 91       	pop	r18
     5d6:	0f 90       	pop	r0
     5d8:	00 92 5f 00 	sts	0x005F, r0
     5dc:	0f 90       	pop	r0
     5de:	1f 90       	pop	r1
     5e0:	18 95       	reti

000005e2 <__vector_13>:
}
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
     5e2:	1f 92       	push	r1
     5e4:	0f 92       	push	r0
     5e6:	00 90 5f 00 	lds	r0, 0x005F
     5ea:	0f 92       	push	r0
     5ec:	11 24       	eor	r1, r1
     5ee:	2f 93       	push	r18
     5f0:	3f 93       	push	r19
     5f2:	4f 93       	push	r20
     5f4:	5f 93       	push	r21
     5f6:	6f 93       	push	r22
     5f8:	7f 93       	push	r23
     5fa:	8f 93       	push	r24
     5fc:	9f 93       	push	r25
     5fe:	af 93       	push	r26
     600:	bf 93       	push	r27
     602:	ef 93       	push	r30
     604:	ff 93       	push	r31
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
     60e:	80 91 06 01 	lds	r24, 0x0106
     612:	90 91 07 01 	lds	r25, 0x0107
     616:	89 2b       	or	r24, r25
     618:	31 f0       	breq	.+12     	; 0x626 <__vector_13+0x44>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
     61a:	80 91 06 01 	lds	r24, 0x0106
     61e:	90 91 07 01 	lds	r25, 0x0107
     622:	fc 01       	movw	r30, r24
     624:	09 95       	icall
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	ff 91       	pop	r31
     62c:	ef 91       	pop	r30
     62e:	bf 91       	pop	r27
     630:	af 91       	pop	r26
     632:	9f 91       	pop	r25
     634:	8f 91       	pop	r24
     636:	7f 91       	pop	r23
     638:	6f 91       	pop	r22
     63a:	5f 91       	pop	r21
     63c:	4f 91       	pop	r20
     63e:	3f 91       	pop	r19
     640:	2f 91       	pop	r18
     642:	0f 90       	pop	r0
     644:	00 92 5f 00 	sts	0x005F, r0
     648:	0f 90       	pop	r0
     64a:	1f 90       	pop	r1
     64c:	18 95       	reti

0000064e <__vector_14>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
     64e:	1f 92       	push	r1
     650:	0f 92       	push	r0
     652:	00 90 5f 00 	lds	r0, 0x005F
     656:	0f 92       	push	r0
     658:	11 24       	eor	r1, r1
     65a:	2f 93       	push	r18
     65c:	3f 93       	push	r19
     65e:	4f 93       	push	r20
     660:	5f 93       	push	r21
     662:	6f 93       	push	r22
     664:	7f 93       	push	r23
     666:	8f 93       	push	r24
     668:	9f 93       	push	r25
     66a:	af 93       	push	r26
     66c:	bf 93       	push	r27
     66e:	ef 93       	push	r30
     670:	ff 93       	push	r31
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	cd b7       	in	r28, 0x3d	; 61
     678:	de b7       	in	r29, 0x3e	; 62
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
     67a:	80 91 08 01 	lds	r24, 0x0108
     67e:	90 91 09 01 	lds	r25, 0x0109
     682:	89 2b       	or	r24, r25
     684:	31 f0       	breq	.+12     	; 0x692 <__vector_14+0x44>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
     686:	80 91 08 01 	lds	r24, 0x0108
     68a:	90 91 09 01 	lds	r25, 0x0109
     68e:	fc 01       	movw	r30, r24
     690:	09 95       	icall
}
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	ff 91       	pop	r31
     698:	ef 91       	pop	r30
     69a:	bf 91       	pop	r27
     69c:	af 91       	pop	r26
     69e:	9f 91       	pop	r25
     6a0:	8f 91       	pop	r24
     6a2:	7f 91       	pop	r23
     6a4:	6f 91       	pop	r22
     6a6:	5f 91       	pop	r21
     6a8:	4f 91       	pop	r20
     6aa:	3f 91       	pop	r19
     6ac:	2f 91       	pop	r18
     6ae:	0f 90       	pop	r0
     6b0:	00 92 5f 00 	sts	0x005F, r0
     6b4:	0f 90       	pop	r0
     6b6:	1f 90       	pop	r1
     6b8:	18 95       	reti

000006ba <__vector_12>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
     6ba:	1f 92       	push	r1
     6bc:	0f 92       	push	r0
     6be:	00 90 5f 00 	lds	r0, 0x005F
     6c2:	0f 92       	push	r0
     6c4:	11 24       	eor	r1, r1
     6c6:	2f 93       	push	r18
     6c8:	3f 93       	push	r19
     6ca:	4f 93       	push	r20
     6cc:	5f 93       	push	r21
     6ce:	6f 93       	push	r22
     6d0:	7f 93       	push	r23
     6d2:	8f 93       	push	r24
     6d4:	9f 93       	push	r25
     6d6:	af 93       	push	r26
     6d8:	bf 93       	push	r27
     6da:	ef 93       	push	r30
     6dc:	ff 93       	push	r31
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
     6e6:	80 91 0a 01 	lds	r24, 0x010A
     6ea:	90 91 0b 01 	lds	r25, 0x010B
     6ee:	89 2b       	or	r24, r25
     6f0:	31 f0       	breq	.+12     	; 0x6fe <__vector_12+0x44>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
     6f2:	80 91 0a 01 	lds	r24, 0x010A
     6f6:	90 91 0b 01 	lds	r25, 0x010B
     6fa:	fc 01       	movw	r30, r24
     6fc:	09 95       	icall
}
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	ff 91       	pop	r31
     704:	ef 91       	pop	r30
     706:	bf 91       	pop	r27
     708:	af 91       	pop	r26
     70a:	9f 91       	pop	r25
     70c:	8f 91       	pop	r24
     70e:	7f 91       	pop	r23
     710:	6f 91       	pop	r22
     712:	5f 91       	pop	r21
     714:	4f 91       	pop	r20
     716:	3f 91       	pop	r19
     718:	2f 91       	pop	r18
     71a:	0f 90       	pop	r0
     71c:	00 92 5f 00 	sts	0x005F, r0
     720:	0f 90       	pop	r0
     722:	1f 90       	pop	r1
     724:	18 95       	reti

00000726 <__vector_9>:

//! Interrupt handler for OutputCompare2A match (OC2A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMPA_vect)
{
     726:	1f 92       	push	r1
     728:	0f 92       	push	r0
     72a:	00 90 5f 00 	lds	r0, 0x005F
     72e:	0f 92       	push	r0
     730:	11 24       	eor	r1, r1
     732:	2f 93       	push	r18
     734:	3f 93       	push	r19
     736:	4f 93       	push	r20
     738:	5f 93       	push	r21
     73a:	6f 93       	push	r22
     73c:	7f 93       	push	r23
     73e:	8f 93       	push	r24
     740:	9f 93       	push	r25
     742:	af 93       	push	r26
     744:	bf 93       	push	r27
     746:	ef 93       	push	r30
     748:	ff 93       	push	r31
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     752:	80 91 0e 01 	lds	r24, 0x010E
     756:	90 91 0f 01 	lds	r25, 0x010F
     75a:	89 2b       	or	r24, r25
     75c:	31 f0       	breq	.+12     	; 0x76a <__vector_9+0x44>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     75e:	80 91 0e 01 	lds	r24, 0x010E
     762:	90 91 0f 01 	lds	r25, 0x010F
     766:	fc 01       	movw	r30, r24
     768:	09 95       	icall
}
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	ff 91       	pop	r31
     770:	ef 91       	pop	r30
     772:	bf 91       	pop	r27
     774:	af 91       	pop	r26
     776:	9f 91       	pop	r25
     778:	8f 91       	pop	r24
     77a:	7f 91       	pop	r23
     77c:	6f 91       	pop	r22
     77e:	5f 91       	pop	r21
     780:	4f 91       	pop	r20
     782:	3f 91       	pop	r19
     784:	2f 91       	pop	r18
     786:	0f 90       	pop	r0
     788:	00 92 5f 00 	sts	0x005F, r0
     78c:	0f 90       	pop	r0
     78e:	1f 90       	pop	r1
     790:	18 95       	reti

00000792 <__vector_10>:

//! Interrupt handler for OutputCompare2B match (OC2B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER2_COMPB_vect)
{
     792:	1f 92       	push	r1
     794:	0f 92       	push	r0
     796:	00 90 5f 00 	lds	r0, 0x005F
     79a:	0f 92       	push	r0
     79c:	11 24       	eor	r1, r1
     79e:	2f 93       	push	r18
     7a0:	3f 93       	push	r19
     7a2:	4f 93       	push	r20
     7a4:	5f 93       	push	r21
     7a6:	6f 93       	push	r22
     7a8:	7f 93       	push	r23
     7aa:	8f 93       	push	r24
     7ac:	9f 93       	push	r25
     7ae:	af 93       	push	r26
     7b0:	bf 93       	push	r27
     7b2:	ef 93       	push	r30
     7b4:	ff 93       	push	r31
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
     7be:	80 91 0e 01 	lds	r24, 0x010E
     7c2:	90 91 0f 01 	lds	r25, 0x010F
     7c6:	89 2b       	or	r24, r25
     7c8:	31 f0       	breq	.+12     	; 0x7d6 <__vector_10+0x44>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
     7ca:	80 91 0e 01 	lds	r24, 0x010E
     7ce:	90 91 0f 01 	lds	r25, 0x010F
     7d2:	fc 01       	movw	r30, r24
     7d4:	09 95       	icall
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	ff 91       	pop	r31
     7dc:	ef 91       	pop	r30
     7de:	bf 91       	pop	r27
     7e0:	af 91       	pop	r26
     7e2:	9f 91       	pop	r25
     7e4:	8f 91       	pop	r24
     7e6:	7f 91       	pop	r23
     7e8:	6f 91       	pop	r22
     7ea:	5f 91       	pop	r21
     7ec:	4f 91       	pop	r20
     7ee:	3f 91       	pop	r19
     7f0:	2f 91       	pop	r18
     7f2:	0f 90       	pop	r0
     7f4:	00 92 5f 00 	sts	0x005F, r0
     7f8:	0f 90       	pop	r0
     7fa:	1f 90       	pop	r1
     7fc:	18 95       	reti

000007fe <uartInit>:
typedef void (*voidFuncPtru08)(unsigned char);
volatile static voidFuncPtru08 UartRxFunc;

// enable and initialize the uart
void uartInit(void)
{
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
	// initialize the buffers
	uartInitBuffers();
     806:	0e 94 21 04 	call	0x842	; 0x842 <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
     80a:	10 92 91 01 	sts	0x0191, r1
     80e:	10 92 90 01 	sts	0x0190, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
     812:	81 ec       	ldi	r24, 0xC1	; 193
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	28 ed       	ldi	r18, 0xD8	; 216
     818:	fc 01       	movw	r30, r24
     81a:	20 83       	st	Z, r18

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
     81c:	60 e8       	ldi	r22, 0x80	; 128
     81e:	75 e2       	ldi	r23, 0x25	; 37
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 38 04 	call	0x870	; 0x870 <uartSetBaudRate>
	// initialize states
	uartReadyTx = TRUE;
     828:	8f ef       	ldi	r24, 0xFF	; 255
     82a:	80 93 9e 01 	sts	0x019E, r24
	uartBufferedTx = FALSE;
     82e:	10 92 a7 01 	sts	0x01A7, r1
	// clear overflow count
	uartRxOverflow = 0;
     832:	10 92 b1 01 	sts	0x01B1, r1
     836:	10 92 b0 01 	sts	0x01B0, r1
	// enable interrupts
	sei();
     83a:	78 94       	sei
}
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	08 95       	ret

00000842 <uartInitBuffers>:

// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	cd b7       	in	r28, 0x3d	; 61
     848:	de b7       	in	r29, 0x3e	; 62
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (unsigned char *)uartRxData, UART_RX_BUFFER_SIZE);
     84a:	40 e4       	ldi	r20, 0x40	; 64
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	60 e1       	ldi	r22, 0x10	; 16
     850:	71 e0       	ldi	r23, 0x01	; 1
     852:	8f e9       	ldi	r24, 0x9F	; 159
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	0e 94 5d 00 	call	0xba	; 0xba <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (unsigned char *)uartTxData, UART_TX_BUFFER_SIZE);
     85a:	40 e4       	ldi	r20, 0x40	; 64
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	60 e5       	ldi	r22, 0x50	; 80
     860:	71 e0       	ldi	r23, 0x01	; 1
     862:	88 ea       	ldi	r24, 0xA8	; 168
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	0e 94 5d 00 	call	0xba	; 0xba <bufferInit>
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (u08*) UART_RX_BUFFER_ADDR, UART_RX_BUFFER_SIZE);
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (u08*) UART_TX_BUFFER_ADDR, UART_TX_BUFFER_SIZE);
	#endif
}
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	08 95       	ret

00000870 <uartSetBaudRate>:
	UartRxFunc = rx_func;
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
     870:	ef 92       	push	r14
     872:	ff 92       	push	r15
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	2a 97       	sbiw	r28, 0x0a	; 10
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	f8 94       	cli
     886:	de bf       	out	0x3e, r29	; 62
     888:	0f be       	out	0x3f, r0	; 63
     88a:	cd bf       	out	0x3d, r28	; 61
     88c:	6b 83       	std	Y+3, r22	; 0x03
     88e:	7c 83       	std	Y+4, r23	; 0x04
     890:	8d 83       	std	Y+5, r24	; 0x05
     892:	9e 83       	std	Y+6, r25	; 0x06
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
     894:	8b 81       	ldd	r24, Y+3	; 0x03
     896:	9c 81       	ldd	r25, Y+4	; 0x04
     898:	ad 81       	ldd	r26, Y+5	; 0x05
     89a:	be 81       	ldd	r27, Y+6	; 0x06
     89c:	80 5c       	subi	r24, 0xC0	; 192
     89e:	9d 4b       	sbci	r25, 0xBD	; 189
     8a0:	a0 4f       	sbci	r26, 0xF0	; 240
     8a2:	bf 4f       	sbci	r27, 0xFF	; 255
     8a4:	88 0f       	add	r24, r24
     8a6:	99 1f       	adc	r25, r25
     8a8:	aa 1f       	adc	r26, r26
     8aa:	bb 1f       	adc	r27, r27
     8ac:	88 0f       	add	r24, r24
     8ae:	99 1f       	adc	r25, r25
     8b0:	aa 1f       	adc	r26, r26
     8b2:	bb 1f       	adc	r27, r27
     8b4:	88 0f       	add	r24, r24
     8b6:	99 1f       	adc	r25, r25
     8b8:	aa 1f       	adc	r26, r26
     8ba:	bb 1f       	adc	r27, r27
     8bc:	7c 01       	movw	r14, r24
     8be:	8d 01       	movw	r16, r26
     8c0:	8b 81       	ldd	r24, Y+3	; 0x03
     8c2:	9c 81       	ldd	r25, Y+4	; 0x04
     8c4:	ad 81       	ldd	r26, Y+5	; 0x05
     8c6:	be 81       	ldd	r27, Y+6	; 0x06
     8c8:	88 0f       	add	r24, r24
     8ca:	99 1f       	adc	r25, r25
     8cc:	aa 1f       	adc	r26, r26
     8ce:	bb 1f       	adc	r27, r27
     8d0:	88 0f       	add	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	aa 1f       	adc	r26, r26
     8d6:	bb 1f       	adc	r27, r27
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	aa 1f       	adc	r26, r26
     8de:	bb 1f       	adc	r27, r27
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	aa 1f       	adc	r26, r26
     8e6:	bb 1f       	adc	r27, r27
     8e8:	9c 01       	movw	r18, r24
     8ea:	ad 01       	movw	r20, r26
     8ec:	c8 01       	movw	r24, r16
     8ee:	b7 01       	movw	r22, r14
     8f0:	0e 94 12 09 	call	0x1224	; 0x1224 <__udivmodsi4>
     8f4:	da 01       	movw	r26, r20
     8f6:	c9 01       	movw	r24, r18
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	9a 83       	std	Y+2, r25	; 0x02
     8fc:	89 83       	std	Y+1, r24	; 0x01
	outb(UBRRL, bauddiv);
     8fe:	84 ec       	ldi	r24, 0xC4	; 196
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	29 81       	ldd	r18, Y+1	; 0x01
     904:	fc 01       	movw	r30, r24
     906:	20 83       	st	Z, r18
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
     908:	85 ec       	ldi	r24, 0xC5	; 197
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	29 81       	ldd	r18, Y+1	; 0x01
     90e:	3a 81       	ldd	r19, Y+2	; 0x02
     910:	23 2f       	mov	r18, r19
     912:	33 27       	eor	r19, r19
     914:	fc 01       	movw	r30, r24
     916:	20 83       	st	Z, r18
	#endif
}
     918:	2a 96       	adiw	r28, 0x0a	; 10
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	de bf       	out	0x3e, r29	; 62
     920:	0f be       	out	0x3f, r0	; 63
     922:	cd bf       	out	0x3d, r28	; 61
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	ff 90       	pop	r15
     92e:	ef 90       	pop	r14
     930:	08 95       	ret

00000932 <uartSendByte>:
	return &uartTxBuffer;
}

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	1f 92       	push	r1
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	89 83       	std	Y+1, r24	; 0x01
	// wait for the transmitter to be ready
	while(!uartReadyTx);
     93e:	00 00       	nop
     940:	80 91 9e 01 	lds	r24, 0x019E
     944:	88 23       	and	r24, r24
     946:	e1 f3       	breq	.-8      	; 0x940 <uartSendByte+0xe>
	// send byte
	outb(UDR, txData);
     948:	86 ec       	ldi	r24, 0xC6	; 198
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	29 81       	ldd	r18, Y+1	; 0x01
     94e:	fc 01       	movw	r30, r24
     950:	20 83       	st	Z, r18
	// set ready state to FALSE
	uartReadyTx = FALSE;
     952:	10 92 9e 01 	sts	0x019E, r1
}
     956:	0f 90       	pop	r0
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <__vector_22>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_TRANS)
{
     95e:	1f 92       	push	r1
     960:	0f 92       	push	r0
     962:	00 90 5f 00 	lds	r0, 0x005F
     966:	0f 92       	push	r0
     968:	11 24       	eor	r1, r1
     96a:	0f 93       	push	r16
     96c:	1f 93       	push	r17
     96e:	2f 93       	push	r18
     970:	3f 93       	push	r19
     972:	4f 93       	push	r20
     974:	5f 93       	push	r21
     976:	6f 93       	push	r22
     978:	7f 93       	push	r23
     97a:	8f 93       	push	r24
     97c:	9f 93       	push	r25
     97e:	af 93       	push	r26
     980:	bf 93       	push	r27
     982:	ef 93       	push	r30
     984:	ff 93       	push	r31
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
	// check if buffered tx is enabled
	if(uartBufferedTx)
     98e:	80 91 a7 01 	lds	r24, 0x01A7
     992:	88 23       	and	r24, r24
     994:	a9 f0       	breq	.+42     	; 0x9c0 <__vector_22+0x62>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
     996:	80 91 ac 01 	lds	r24, 0x01AC
     99a:	90 91 ad 01 	lds	r25, 0x01AD
     99e:	89 2b       	or	r24, r25
     9a0:	49 f0       	breq	.+18     	; 0x9b4 <__vector_22+0x56>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
     9a2:	06 ec       	ldi	r16, 0xC6	; 198
     9a4:	10 e0       	ldi	r17, 0x00	; 0
     9a6:	88 ea       	ldi	r24, 0xA8	; 168
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	0e 94 99 00 	call	0x132	; 0x132 <bufferGetFromFront>
     9ae:	f8 01       	movw	r30, r16
     9b0:	80 83       	st	Z, r24
     9b2:	09 c0       	rjmp	.+18     	; 0x9c6 <__vector_22+0x68>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
     9b4:	10 92 a7 01 	sts	0x01A7, r1
			// return to ready state
			uartReadyTx = TRUE;
     9b8:	8f ef       	ldi	r24, 0xFF	; 255
     9ba:	80 93 9e 01 	sts	0x019E, r24
     9be:	03 c0       	rjmp	.+6      	; 0x9c6 <__vector_22+0x68>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
     9c0:	8f ef       	ldi	r24, 0xFF	; 255
     9c2:	80 93 9e 01 	sts	0x019E, r24
	}
}
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	ff 91       	pop	r31
     9cc:	ef 91       	pop	r30
     9ce:	bf 91       	pop	r27
     9d0:	af 91       	pop	r26
     9d2:	9f 91       	pop	r25
     9d4:	8f 91       	pop	r24
     9d6:	7f 91       	pop	r23
     9d8:	6f 91       	pop	r22
     9da:	5f 91       	pop	r21
     9dc:	4f 91       	pop	r20
     9de:	3f 91       	pop	r19
     9e0:	2f 91       	pop	r18
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	0f 90       	pop	r0
     9e8:	00 92 5f 00 	sts	0x005F, r0
     9ec:	0f 90       	pop	r0
     9ee:	1f 90       	pop	r1
     9f0:	18 95       	reti

000009f2 <__vector_20>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_RECV)
{
     9f2:	1f 92       	push	r1
     9f4:	0f 92       	push	r0
     9f6:	00 90 5f 00 	lds	r0, 0x005F
     9fa:	0f 92       	push	r0
     9fc:	11 24       	eor	r1, r1
     9fe:	2f 93       	push	r18
     a00:	3f 93       	push	r19
     a02:	4f 93       	push	r20
     a04:	5f 93       	push	r21
     a06:	6f 93       	push	r22
     a08:	7f 93       	push	r23
     a0a:	8f 93       	push	r24
     a0c:	9f 93       	push	r25
     a0e:	af 93       	push	r26
     a10:	bf 93       	push	r27
     a12:	ef 93       	push	r30
     a14:	ff 93       	push	r31
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	1f 92       	push	r1
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
	u08 c;
	
	// get received char
	c = inb(UDR);
     a20:	86 ec       	ldi	r24, 0xC6	; 198
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	fc 01       	movw	r30, r24
     a26:	80 81       	ld	r24, Z
     a28:	89 83       	std	Y+1, r24	; 0x01

	// if there's a user function to handle this receive event
	if(UartRxFunc)
     a2a:	80 91 90 01 	lds	r24, 0x0190
     a2e:	90 91 91 01 	lds	r25, 0x0191
     a32:	89 2b       	or	r24, r25
     a34:	41 f0       	breq	.+16     	; 0xa46 <__vector_20+0x54>
	{
		// call it and pass the received data
		UartRxFunc(c);
     a36:	20 91 90 01 	lds	r18, 0x0190
     a3a:	30 91 91 01 	lds	r19, 0x0191
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	f9 01       	movw	r30, r18
     a42:	09 95       	icall
     a44:	10 c0       	rjmp	.+32     	; 0xa66 <__vector_20+0x74>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
     a46:	69 81       	ldd	r22, Y+1	; 0x01
     a48:	8f e9       	ldi	r24, 0x9F	; 159
     a4a:	91 e0       	ldi	r25, 0x01	; 1
     a4c:	0e 94 04 01 	call	0x208	; 0x208 <bufferAddToEnd>
     a50:	88 23       	and	r24, r24
     a52:	49 f4       	brne	.+18     	; 0xa66 <__vector_20+0x74>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
     a54:	80 91 b0 01 	lds	r24, 0x01B0
     a58:	90 91 b1 01 	lds	r25, 0x01B1
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	90 93 b1 01 	sts	0x01B1, r25
     a62:	80 93 b0 01 	sts	0x01B0, r24
		}
	}
}
     a66:	0f 90       	pop	r0
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	ff 91       	pop	r31
     a6e:	ef 91       	pop	r30
     a70:	bf 91       	pop	r27
     a72:	af 91       	pop	r26
     a74:	9f 91       	pop	r25
     a76:	8f 91       	pop	r24
     a78:	7f 91       	pop	r23
     a7a:	6f 91       	pop	r22
     a7c:	5f 91       	pop	r21
     a7e:	4f 91       	pop	r20
     a80:	3f 91       	pop	r19
     a82:	2f 91       	pop	r18
     a84:	0f 90       	pop	r0
     a86:	00 92 5f 00 	sts	0x005F, r0
     a8a:	0f 90       	pop	r0
     a8c:	1f 90       	pop	r1
     a8e:	18 95       	reti

00000a90 <ButtonInit>:
* Returns    : none
*********************************************************************************************************
*/

void ButtonInit(void)
{
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
	DDRD  &= ~((1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3));	/* Set PD6-PD3 as input */
     a98:	8a e2       	ldi	r24, 0x2A	; 42
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	2a e2       	ldi	r18, 0x2A	; 42
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	f9 01       	movw	r30, r18
     aa2:	20 81       	ld	r18, Z
     aa4:	27 78       	andi	r18, 0x87	; 135
     aa6:	fc 01       	movw	r30, r24
     aa8:	20 83       	st	Z, r18
	PORTD |= (1<<PD6) | (1<<PD5) | (1<<PD4) | (1<<PD3);			/* Set PD6-PD3 as internal pull up */
     aaa:	8b e2       	ldi	r24, 0x2B	; 43
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	2b e2       	ldi	r18, 0x2B	; 43
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	f9 01       	movw	r30, r18
     ab4:	20 81       	ld	r18, Z
     ab6:	28 67       	ori	r18, 0x78	; 120
     ab8:	fc 01       	movw	r30, r24
     aba:	20 83       	st	Z, r18
	
	/* 
	Set PC7-PC4 as input as internal pull up
	Set PC3-PC0 as Tri-state (Hi-Z) 
	*/
	DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
     abc:	87 e2       	ldi	r24, 0x27	; 39
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	fc 01       	movw	r30, r24
     ac2:	10 82       	st	Z, r1
	PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
     ac4:	88 e2       	ldi	r24, 0x28	; 40
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	20 ef       	ldi	r18, 0xF0	; 240
     aca:	fc 01       	movw	r30, r24
     acc:	20 83       	st	Z, r18
}
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	08 95       	ret

00000ad4 <ButtonCycleUpdate>:
*
*********************************************************************************************************
*/

void ButtonCycleUpdate(void)
{
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
     adc:	2a 97       	sbiw	r28, 0x0a	; 10
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	cd bf       	out	0x3d, r28	; 61
	ButtonDataType b;											/* store last power cycle button value */
	ButtonDataType buttons;
	uint16_t holdTime;
	
	buttons = ButtonGetIO_State();
     ae8:	0e 94 87 06 	call	0xd0e	; 0xd0e <ButtonGetIO_State>
     aec:	dc 01       	movw	r26, r24
     aee:	cb 01       	movw	r24, r22
     af0:	89 83       	std	Y+1, r24	; 0x01
     af2:	9a 83       	std	Y+2, r25	; 0x02
     af4:	ab 83       	std	Y+3, r26	; 0x03
     af6:	bc 83       	std	Y+4, r27	; 0x04
	buttons |= button.buttonsNextCycle.bVal;			/* Add in any buttons asserted by software */	
     af8:	80 91 b2 01 	lds	r24, 0x01B2
     afc:	90 91 b3 01 	lds	r25, 0x01B3
     b00:	a0 91 b4 01 	lds	r26, 0x01B4
     b04:	b0 91 b5 01 	lds	r27, 0x01B5
     b08:	29 81       	ldd	r18, Y+1	; 0x01
     b0a:	3a 81       	ldd	r19, Y+2	; 0x02
     b0c:	4b 81       	ldd	r20, Y+3	; 0x03
     b0e:	5c 81       	ldd	r21, Y+4	; 0x04
     b10:	82 2b       	or	r24, r18
     b12:	93 2b       	or	r25, r19
     b14:	a4 2b       	or	r26, r20
     b16:	b5 2b       	or	r27, r21
     b18:	89 83       	std	Y+1, r24	; 0x01
     b1a:	9a 83       	std	Y+2, r25	; 0x02
     b1c:	ab 83       	std	Y+3, r26	; 0x03
     b1e:	bc 83       	std	Y+4, r27	; 0x04
	button.buttonsNextCycle.bVal = 0;					/* and clear any that may have been set */
     b20:	10 92 b2 01 	sts	0x01B2, r1
     b24:	10 92 b3 01 	sts	0x01B3, r1
     b28:	10 92 b4 01 	sts	0x01B4, r1
     b2c:	10 92 b5 01 	sts	0x01B5, r1
	b = button.buttonsLastCycle.bVal;
     b30:	80 91 b6 01 	lds	r24, 0x01B6
     b34:	90 91 b7 01 	lds	r25, 0x01B7
     b38:	a0 91 b8 01 	lds	r26, 0x01B8
     b3c:	b0 91 b9 01 	lds	r27, 0x01B9
     b40:	8d 83       	std	Y+5, r24	; 0x05
     b42:	9e 83       	std	Y+6, r25	; 0x06
     b44:	af 83       	std	Y+7, r26	; 0x07
     b46:	b8 87       	std	Y+8, r27	; 0x08
	holdTime = button.buttonHoldTime;
     b48:	80 91 ca 01 	lds	r24, 0x01CA
     b4c:	90 91 cb 01 	lds	r25, 0x01CB
     b50:	9a 87       	std	Y+10, r25	; 0x0a
     b52:	89 87       	std	Y+9, r24	; 0x09
	
	if (button.buttonsReleased.bVal != 0) {		
     b54:	80 91 ba 01 	lds	r24, 0x01BA
     b58:	90 91 bb 01 	lds	r25, 0x01BB
     b5c:	a0 91 bc 01 	lds	r26, 0x01BC
     b60:	b0 91 bd 01 	lds	r27, 0x01BD
     b64:	89 2b       	or	r24, r25
     b66:	8a 2b       	or	r24, r26
     b68:	8b 2b       	or	r24, r27
     b6a:	89 f0       	breq	.+34     	; 0xb8e <ButtonCycleUpdate+0xba>
														/* store value of release button */
		button.buttonsReleasedHistory.bVal = button.buttonsReleased.bVal;	
     b6c:	80 91 ba 01 	lds	r24, 0x01BA
     b70:	90 91 bb 01 	lds	r25, 0x01BB
     b74:	a0 91 bc 01 	lds	r26, 0x01BC
     b78:	b0 91 bd 01 	lds	r27, 0x01BD
     b7c:	80 93 c2 01 	sts	0x01C2, r24
     b80:	90 93 c3 01 	sts	0x01C3, r25
     b84:	a0 93 c4 01 	sts	0x01C4, r26
     b88:	b0 93 c5 01 	sts	0x01C5, r27
     b8c:	0c c0       	rjmp	.+24     	; 0xba6 <ButtonCycleUpdate+0xd2>
	}
	else {
		if (holdTime > BTN_DOUBLE_TAP) {
     b8e:	89 85       	ldd	r24, Y+9	; 0x09
     b90:	9a 85       	ldd	r25, Y+10	; 0x0a
     b92:	cd 97       	sbiw	r24, 0x3d	; 61
     b94:	40 f0       	brcs	.+16     	; 0xba6 <ButtonCycleUpdate+0xd2>
														/* Clear history value when interval time out */
			button.buttonsReleasedHistory.bVal = 0;	
     b96:	10 92 c2 01 	sts	0x01C2, r1
     b9a:	10 92 c3 01 	sts	0x01C3, r1
     b9e:	10 92 c4 01 	sts	0x01C4, r1
     ba2:	10 92 c5 01 	sts	0x01C5, r1
		}
	}

	button.buttonsReleased.bVal = 0;					/* Assume no buttons released this time */
     ba6:	10 92 ba 01 	sts	0x01BA, r1
     baa:	10 92 bb 01 	sts	0x01BB, r1
     bae:	10 92 bc 01 	sts	0x01BC, r1
     bb2:	10 92 bd 01 	sts	0x01BD, r1
	button.buttonsTwiceReleased.bVal = 0;				/* Assume no buttons twice released this time */
     bb6:	10 92 c6 01 	sts	0x01C6, r1
     bba:	10 92 c7 01 	sts	0x01C7, r1
     bbe:	10 92 c8 01 	sts	0x01C8, r1
     bc2:	10 92 c9 01 	sts	0x01C9, r1
  
	if (buttons == b) {									/* If the button situation has not changed in this past cycle */ 
     bc6:	29 81       	ldd	r18, Y+1	; 0x01
     bc8:	3a 81       	ldd	r19, Y+2	; 0x02
     bca:	4b 81       	ldd	r20, Y+3	; 0x03
     bcc:	5c 81       	ldd	r21, Y+4	; 0x04
     bce:	8d 81       	ldd	r24, Y+5	; 0x05
     bd0:	9e 81       	ldd	r25, Y+6	; 0x06
     bd2:	af 81       	ldd	r26, Y+7	; 0x07
     bd4:	b8 85       	ldd	r27, Y+8	; 0x08
     bd6:	28 17       	cp	r18, r24
     bd8:	39 07       	cpc	r19, r25
     bda:	4a 07       	cpc	r20, r26
     bdc:	5b 07       	cpc	r21, r27
     bde:	21 f5       	brne	.+72     	; 0xc28 <ButtonCycleUpdate+0x154>
		button.buttonsHeld.bVal = 0;					/* Assume no buttons held */
     be0:	10 92 be 01 	sts	0x01BE, r1
     be4:	10 92 bf 01 	sts	0x01BF, r1
     be8:	10 92 c0 01 	sts	0x01C0, r1
     bec:	10 92 c1 01 	sts	0x01C1, r1
		if ( ++holdTime > BTN_MIN_HOLD_60) {
     bf0:	89 85       	ldd	r24, Y+9	; 0x09
     bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	9a 87       	std	Y+10, r25	; 0x0a
     bf8:	89 87       	std	Y+9, r24	; 0x09
     bfa:	89 85       	ldd	r24, Y+9	; 0x09
     bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfe:	84 97       	sbiw	r24, 0x24	; 36
     c00:	60 f0       	brcs	.+24     	; 0xc1a <ButtonCycleUpdate+0x146>
			button.buttonsHeld.bVal = buttons;
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	9a 81       	ldd	r25, Y+2	; 0x02
     c06:	ab 81       	ldd	r26, Y+3	; 0x03
     c08:	bc 81       	ldd	r27, Y+4	; 0x04
     c0a:	80 93 be 01 	sts	0x01BE, r24
     c0e:	90 93 bf 01 	sts	0x01BF, r25
     c12:	a0 93 c0 01 	sts	0x01C0, r26
     c16:	b0 93 c1 01 	sts	0x01C1, r27
		}	
		button.buttonHoldTime = holdTime;
     c1a:	89 85       	ldd	r24, Y+9	; 0x09
     c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1e:	90 93 cb 01 	sts	0x01CB, r25
     c22:	80 93 ca 01 	sts	0x01CA, r24
     c26:	6a c0       	rjmp	.+212    	; 0xcfc <ButtonCycleUpdate+0x228>
	}
	else {
														/* Here if the buttons have changed since last line cycle */
		button.buttonsLastCycle.bVal = buttons;
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02
     c2c:	ab 81       	ldd	r26, Y+3	; 0x03
     c2e:	bc 81       	ldd	r27, Y+4	; 0x04
     c30:	80 93 b6 01 	sts	0x01B6, r24
     c34:	90 93 b7 01 	sts	0x01B7, r25
     c38:	a0 93 b8 01 	sts	0x01B8, r26
     c3c:	b0 93 b9 01 	sts	0x01B9, r27
		buttons = (buttons ^ b) & b;					/* Select out only the ones that have changed */
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	ab 81       	ldd	r26, Y+3	; 0x03
     c46:	bc 81       	ldd	r27, Y+4	; 0x04
     c48:	9c 01       	movw	r18, r24
     c4a:	ad 01       	movw	r20, r26
     c4c:	20 95       	com	r18
     c4e:	30 95       	com	r19
     c50:	40 95       	com	r20
     c52:	50 95       	com	r21
     c54:	8d 81       	ldd	r24, Y+5	; 0x05
     c56:	9e 81       	ldd	r25, Y+6	; 0x06
     c58:	af 81       	ldd	r26, Y+7	; 0x07
     c5a:	b8 85       	ldd	r27, Y+8	; 0x08
     c5c:	82 23       	and	r24, r18
     c5e:	93 23       	and	r25, r19
     c60:	a4 23       	and	r26, r20
     c62:	b5 23       	and	r27, r21
     c64:	89 83       	std	Y+1, r24	; 0x01
     c66:	9a 83       	std	Y+2, r25	; 0x02
     c68:	ab 83       	std	Y+3, r26	; 0x03
     c6a:	bc 83       	std	Y+4, r27	; 0x04
		
		if ((buttons & button.buttonsHeld.bVal) == 0){													
     c6c:	20 91 be 01 	lds	r18, 0x01BE
     c70:	30 91 bf 01 	lds	r19, 0x01BF
     c74:	40 91 c0 01 	lds	r20, 0x01C0
     c78:	50 91 c1 01 	lds	r21, 0x01C1
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	9a 81       	ldd	r25, Y+2	; 0x02
     c80:	ab 81       	ldd	r26, Y+3	; 0x03
     c82:	bc 81       	ldd	r27, Y+4	; 0x04
     c84:	82 23       	and	r24, r18
     c86:	93 23       	and	r25, r19
     c88:	a4 23       	and	r26, r20
     c8a:	b5 23       	and	r27, r21
     c8c:	89 2b       	or	r24, r25
     c8e:	8a 2b       	or	r24, r26
     c90:	8b 2b       	or	r24, r27
     c92:	a1 f5       	brne	.+104    	; 0xcfc <ButtonCycleUpdate+0x228>
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
     c94:	10 92 cb 01 	sts	0x01CB, r1
     c98:	10 92 ca 01 	sts	0x01CA, r1
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
     c9c:	89 85       	ldd	r24, Y+9	; 0x09
     c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca0:	83 97       	sbiw	r24, 0x23	; 35
     ca2:	60 f5       	brcc	.+88     	; 0xcfc <ButtonCycleUpdate+0x228>
     ca4:	89 85       	ldd	r24, Y+9	; 0x09
     ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca8:	03 97       	sbiw	r24, 0x03	; 3
     caa:	40 f1       	brcs	.+80     	; 0xcfc <ButtonCycleUpdate+0x228>
				button.buttonsReleased.bVal = buttons;	
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	ab 81       	ldd	r26, Y+3	; 0x03
     cb2:	bc 81       	ldd	r27, Y+4	; 0x04
     cb4:	80 93 ba 01 	sts	0x01BA, r24
     cb8:	90 93 bb 01 	sts	0x01BB, r25
     cbc:	a0 93 bc 01 	sts	0x01BC, r26
     cc0:	b0 93 bd 01 	sts	0x01BD, r27
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
     cc4:	20 91 ba 01 	lds	r18, 0x01BA
     cc8:	30 91 bb 01 	lds	r19, 0x01BB
     ccc:	40 91 bc 01 	lds	r20, 0x01BC
     cd0:	50 91 bd 01 	lds	r21, 0x01BD
													button.buttonsReleasedHistory.bVal;
     cd4:	80 91 c2 01 	lds	r24, 0x01C2
     cd8:	90 91 c3 01 	lds	r25, 0x01C3
     cdc:	a0 91 c4 01 	lds	r26, 0x01C4
     ce0:	b0 91 c5 01 	lds	r27, 0x01C5
			button.buttonHoldTime = 0;					/* Ignore the release of any buttons that were previously marked as held down */
		
			if ((holdTime < BTN_MIN_HOLD_60) && (holdTime > BTN_MIN_PRESS_60)){
				button.buttonsReleased.bVal = buttons;	
														/* Calculate twice release button value */
				button.buttonsTwiceReleased.bVal =	button.buttonsReleased.bVal &   
     ce4:	82 23       	and	r24, r18
     ce6:	93 23       	and	r25, r19
     ce8:	a4 23       	and	r26, r20
     cea:	b5 23       	and	r27, r21
     cec:	80 93 c6 01 	sts	0x01C6, r24
     cf0:	90 93 c7 01 	sts	0x01C7, r25
     cf4:	a0 93 c8 01 	sts	0x01C8, r26
     cf8:	b0 93 c9 01 	sts	0x01C9, r27
													button.buttonsReleasedHistory.bVal;
			}       
		}
	}
}
     cfc:	2a 96       	adiw	r28, 0x0a	; 10
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	f8 94       	cli
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	cd bf       	out	0x3d, r28	; 61
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	08 95       	ret

00000d0e <ButtonGetIO_State>:
*	15		14		13		12		11		10		9		8		7		6		5		4		3		2		1		0
*	PB1		PB5		PB9		PB13	PB2		PB6		PB10	PB14	PB3		PB7		PB11	PB15	PB4		PB8		PB12	PB16
*********************************************************************************************************
*/
ButtonDataType ButtonGetIO_State(void)
{
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	2d 97       	sbiw	r28, 0x0d	; 13
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
	ButtonDataType io_state = 0;
     d22:	1e 82       	std	Y+6, r1	; 0x06
     d24:	1f 82       	std	Y+7, r1	; 0x07
     d26:	18 86       	std	Y+8, r1	; 0x08
     d28:	19 86       	std	Y+9, r1	; 0x09
	ButtonDataType tempValue;
	ButtonDataType MatrixButtonValue;
	uint8_t Col;
	
	tempValue = (~PIND) & ((1<<PIND6) | (1<<PIND5) | (1<<PIND4) | (1<<PIND3));	/* Get PD6-PD3 IO state */
     d2a:	89 e2       	ldi	r24, 0x29	; 41
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	fc 01       	movw	r30, r24
     d30:	80 81       	ld	r24, Z
     d32:	88 2f       	mov	r24, r24
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	80 95       	com	r24
     d38:	90 95       	com	r25
     d3a:	09 2e       	mov	r0, r25
     d3c:	00 0c       	add	r0, r0
     d3e:	aa 0b       	sbc	r26, r26
     d40:	bb 0b       	sbc	r27, r27
     d42:	88 77       	andi	r24, 0x78	; 120
     d44:	99 27       	eor	r25, r25
     d46:	aa 27       	eor	r26, r26
     d48:	bb 27       	eor	r27, r27
     d4a:	8a 87       	std	Y+10, r24	; 0x0a
     d4c:	9b 87       	std	Y+11, r25	; 0x0b
     d4e:	ac 87       	std	Y+12, r26	; 0x0c
     d50:	bd 87       	std	Y+13, r27	; 0x0d
	tempValue >>= 3;	/* right rotate to low 4 bits location */
     d52:	8a 85       	ldd	r24, Y+10	; 0x0a
     d54:	9b 85       	ldd	r25, Y+11	; 0x0b
     d56:	ac 85       	ldd	r26, Y+12	; 0x0c
     d58:	bd 85       	ldd	r27, Y+13	; 0x0d
     d5a:	68 94       	set
     d5c:	12 f8       	bld	r1, 2
     d5e:	b6 95       	lsr	r27
     d60:	a7 95       	ror	r26
     d62:	97 95       	ror	r25
     d64:	87 95       	ror	r24
     d66:	16 94       	lsr	r1
     d68:	d1 f7       	brne	.-12     	; 0xd5e <ButtonGetIO_State+0x50>
     d6a:	8a 87       	std	Y+10, r24	; 0x0a
     d6c:	9b 87       	std	Y+11, r25	; 0x0b
     d6e:	ac 87       	std	Y+12, r26	; 0x0c
     d70:	bd 87       	std	Y+13, r27	; 0x0d
	
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
     d72:	1d 82       	std	Y+5, r1	; 0x05
     d74:	19 82       	std	Y+1, r1	; 0x01
     d76:	1a 82       	std	Y+2, r1	; 0x02
     d78:	1b 82       	std	Y+3, r1	; 0x03
     d7a:	1c 82       	std	Y+4, r1	; 0x04
     d7c:	6f c0       	rjmp	.+222    	; 0xe5c <ButtonGetIO_State+0x14e>
	{
		/* 
		Set PC7-PC4 as input as internal pull up
		Set PC3-PC0 as Tri-state (Hi-Z)
		*/
		DDRC   = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
     d7e:	87 e2       	ldi	r24, 0x27	; 39
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	fc 01       	movw	r30, r24
     d84:	10 82       	st	Z, r1
		PORTC  = (1<<PC7) | (1<<PC6) | (1<<PC5) | (1<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
     d86:	88 e2       	ldi	r24, 0x28	; 40
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	20 ef       	ldi	r18, 0xF0	; 240
     d8c:	fc 01       	movw	r30, r24
     d8e:	20 83       	st	Z, r18
	
		/* Set one Column as output with low */
		DDRC  |= 0x08>>Col;			/* Set the column as output */
     d90:	87 e2       	ldi	r24, 0x27	; 39
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	27 e2       	ldi	r18, 0x27	; 39
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	f9 01       	movw	r30, r18
     d9a:	20 81       	ld	r18, Z
     d9c:	62 2f       	mov	r22, r18
     d9e:	2d 81       	ldd	r18, Y+5	; 0x05
     da0:	42 2f       	mov	r20, r18
     da2:	50 e0       	ldi	r21, 0x00	; 0
     da4:	28 e0       	ldi	r18, 0x08	; 8
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	02 c0       	rjmp	.+4      	; 0xdae <ButtonGetIO_State+0xa0>
     daa:	35 95       	asr	r19
     dac:	27 95       	ror	r18
     dae:	4a 95       	dec	r20
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <ButtonGetIO_State+0x9c>
     db2:	26 2b       	or	r18, r22
     db4:	fc 01       	movw	r30, r24
     db6:	20 83       	st	Z, r18
		PORTC &= ~(0x08>>Col);		/* Set the column as low */
     db8:	88 e2       	ldi	r24, 0x28	; 40
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	28 e2       	ldi	r18, 0x28	; 40
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	f9 01       	movw	r30, r18
     dc2:	20 81       	ld	r18, Z
     dc4:	62 2f       	mov	r22, r18
     dc6:	2d 81       	ldd	r18, Y+5	; 0x05
     dc8:	42 2f       	mov	r20, r18
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	28 e0       	ldi	r18, 0x08	; 8
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <ButtonGetIO_State+0xc8>
     dd2:	35 95       	asr	r19
     dd4:	27 95       	ror	r18
     dd6:	4a 95       	dec	r20
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <ButtonGetIO_State+0xc4>
     dda:	20 95       	com	r18
     ddc:	26 23       	and	r18, r22
     dde:	fc 01       	movw	r30, r24
     de0:	20 83       	st	Z, r18
		
		/* read and save button state after the column which active as low */
		MatrixButtonValue <<= 4;	/* newer 4 button state store in lower four bits */
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	9a 81       	ldd	r25, Y+2	; 0x02
     de6:	ab 81       	ldd	r26, Y+3	; 0x03
     de8:	bc 81       	ldd	r27, Y+4	; 0x04
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	aa 1f       	adc	r26, r26
     df0:	bb 1f       	adc	r27, r27
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	aa 1f       	adc	r26, r26
     df8:	bb 1f       	adc	r27, r27
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	aa 1f       	adc	r26, r26
     e00:	bb 1f       	adc	r27, r27
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	aa 1f       	adc	r26, r26
     e08:	bb 1f       	adc	r27, r27
     e0a:	89 83       	std	Y+1, r24	; 0x01
     e0c:	9a 83       	std	Y+2, r25	; 0x02
     e0e:	ab 83       	std	Y+3, r26	; 0x03
     e10:	bc 83       	std	Y+4, r27	; 0x04
		MatrixButtonValue |= ((~PINC) & 0x00f0) >> 4;
     e12:	86 e2       	ldi	r24, 0x26	; 38
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	fc 01       	movw	r30, r24
     e18:	80 81       	ld	r24, Z
     e1a:	88 2f       	mov	r24, r24
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	80 95       	com	r24
     e20:	90 95       	com	r25
     e22:	80 7f       	andi	r24, 0xF0	; 240
     e24:	99 27       	eor	r25, r25
     e26:	95 95       	asr	r25
     e28:	87 95       	ror	r24
     e2a:	95 95       	asr	r25
     e2c:	87 95       	ror	r24
     e2e:	95 95       	asr	r25
     e30:	87 95       	ror	r24
     e32:	95 95       	asr	r25
     e34:	87 95       	ror	r24
     e36:	09 2e       	mov	r0, r25
     e38:	00 0c       	add	r0, r0
     e3a:	aa 0b       	sbc	r26, r26
     e3c:	bb 0b       	sbc	r27, r27
     e3e:	29 81       	ldd	r18, Y+1	; 0x01
     e40:	3a 81       	ldd	r19, Y+2	; 0x02
     e42:	4b 81       	ldd	r20, Y+3	; 0x03
     e44:	5c 81       	ldd	r21, Y+4	; 0x04
     e46:	82 2b       	or	r24, r18
     e48:	93 2b       	or	r25, r19
     e4a:	a4 2b       	or	r26, r20
     e4c:	b5 2b       	or	r27, r21
     e4e:	89 83       	std	Y+1, r24	; 0x01
     e50:	9a 83       	std	Y+2, r25	; 0x02
     e52:	ab 83       	std	Y+3, r26	; 0x03
     e54:	bc 83       	std	Y+4, r27	; 0x04
	uint8_t Col;
	
	tempValue = (~PIND) & ((1<<PIND6) | (1<<PIND5) | (1<<PIND4) | (1<<PIND3));	/* Get PD6-PD3 IO state */
	tempValue >>= 3;	/* right rotate to low 4 bits location */
	
	for(Col = 0, MatrixButtonValue = 0; Col < 4; Col++)
     e56:	8d 81       	ldd	r24, Y+5	; 0x05
     e58:	8f 5f       	subi	r24, 0xFF	; 255
     e5a:	8d 83       	std	Y+5, r24	; 0x05
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
     e5e:	84 30       	cpi	r24, 0x04	; 4
     e60:	08 f4       	brcc	.+2      	; 0xe64 <ButtonGetIO_State+0x156>
     e62:	8d cf       	rjmp	.-230    	; 0xd7e <ButtonGetIO_State+0x70>
		/* read and save button state after the column which active as low */
		MatrixButtonValue <<= 4;	/* newer 4 button state store in lower four bits */
		MatrixButtonValue |= ((~PINC) & 0x00f0) >> 4;
	}
	
	io_state = (tempValue << 16) | MatrixButtonValue;
     e64:	8a 85       	ldd	r24, Y+10	; 0x0a
     e66:	9b 85       	ldd	r25, Y+11	; 0x0b
     e68:	ac 85       	ldd	r26, Y+12	; 0x0c
     e6a:	bd 85       	ldd	r27, Y+13	; 0x0d
     e6c:	ac 01       	movw	r20, r24
     e6e:	33 27       	eor	r19, r19
     e70:	22 27       	eor	r18, r18
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
     e76:	ab 81       	ldd	r26, Y+3	; 0x03
     e78:	bc 81       	ldd	r27, Y+4	; 0x04
     e7a:	82 2b       	or	r24, r18
     e7c:	93 2b       	or	r25, r19
     e7e:	a4 2b       	or	r26, r20
     e80:	b5 2b       	or	r27, r21
     e82:	8e 83       	std	Y+6, r24	; 0x06
     e84:	9f 83       	std	Y+7, r25	; 0x07
     e86:	a8 87       	std	Y+8, r26	; 0x08
     e88:	b9 87       	std	Y+9, r27	; 0x09
	return  io_state;
     e8a:	8e 81       	ldd	r24, Y+6	; 0x06
     e8c:	9f 81       	ldd	r25, Y+7	; 0x07
     e8e:	a8 85       	ldd	r26, Y+8	; 0x08
     e90:	b9 85       	ldd	r27, Y+9	; 0x09
}
     e92:	bc 01       	movw	r22, r24
     e94:	cd 01       	movw	r24, r26
     e96:	2d 96       	adiw	r28, 0x0d	; 13
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	08 95       	ret

00000ea8 <main>:

void timerTest(void);

//----- Begin Code ------------------------------------------------------------
int main(void)
{
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	2e 97       	sbiw	r28, 0x0e	; 14
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
	// initialize our libraries
	// initialize the UART (serial port)
	uartInit();
     ebc:	0e 94 ff 03 	call	0x7fe	; 0x7fe <uartInit>
	// set the baud rate of the UART for our debug/reporting output
	uartSetBaudRate(9600);
     ec0:	60 e8       	ldi	r22, 0x80	; 128
     ec2:	75 e2       	ldi	r23, 0x25	; 37
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 38 04 	call	0x870	; 0x870 <uartSetBaudRate>
	// initialize rprintf system
	rprintfInit(uartSendByte);
     ecc:	89 e9       	ldi	r24, 0x99	; 153
     ece:	94 e0       	ldi	r25, 0x04	; 4
     ed0:	0e 94 04 02 	call	0x408	; 0x408 <rprintfInit>
	//timerTest();
	
	/*
	Calll all initial function
	*/
	ButtonInit();
     ed4:	0e 94 48 05 	call	0xa90	; 0xa90 <ButtonInit>
	glcdInitHW();
     ed8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <glcdInitHW>
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	a0 ea       	ldi	r26, 0xA0	; 160
     ee2:	b1 e4       	ldi	r27, 0x41	; 65
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	9a 83       	std	Y+2, r25	; 0x02
     ee8:	ab 83       	std	Y+3, r26	; 0x03
     eea:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	4a ef       	ldi	r20, 0xFA	; 250
     ef2:	54 e4       	ldi	r21, 0x44	; 68
     ef4:	69 81       	ldd	r22, Y+1	; 0x01
     ef6:	7a 81       	ldd	r23, Y+2	; 0x02
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	9c 81       	ldd	r25, Y+4	; 0x04
     efc:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__mulsf3>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	8d 83       	std	Y+5, r24	; 0x05
     f06:	9e 83       	std	Y+6, r25	; 0x06
     f08:	af 83       	std	Y+7, r26	; 0x07
     f0a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e8       	ldi	r20, 0x80	; 128
     f12:	5f e3       	ldi	r21, 0x3F	; 63
     f14:	6d 81       	ldd	r22, Y+5	; 0x05
     f16:	7e 81       	ldd	r23, Y+6	; 0x06
     f18:	8f 81       	ldd	r24, Y+7	; 0x07
     f1a:	98 85       	ldd	r25, Y+8	; 0x08
     f1c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__cmpsf2>
     f20:	88 23       	and	r24, r24
     f22:	2c f4       	brge	.+10     	; 0xf2e <main+0x86>
		__ticks = 1;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	9a 87       	std	Y+10, r25	; 0x0a
     f2a:	89 87       	std	Y+9, r24	; 0x09
     f2c:	3f c0       	rjmp	.+126    	; 0xfac <main+0x104>
	else if (__tmp > 65535)
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	3f ef       	ldi	r19, 0xFF	; 255
     f32:	4f e7       	ldi	r20, 0x7F	; 127
     f34:	57 e4       	ldi	r21, 0x47	; 71
     f36:	6d 81       	ldd	r22, Y+5	; 0x05
     f38:	7e 81       	ldd	r23, Y+6	; 0x06
     f3a:	8f 81       	ldd	r24, Y+7	; 0x07
     f3c:	98 85       	ldd	r25, Y+8	; 0x08
     f3e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__gesf2>
     f42:	18 16       	cp	r1, r24
     f44:	4c f5       	brge	.+82     	; 0xf98 <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	40 e2       	ldi	r20, 0x20	; 32
     f4c:	51 e4       	ldi	r21, 0x41	; 65
     f4e:	69 81       	ldd	r22, Y+1	; 0x01
     f50:	7a 81       	ldd	r23, Y+2	; 0x02
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	9c 81       	ldd	r25, Y+4	; 0x04
     f56:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__mulsf3>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	bc 01       	movw	r22, r24
     f60:	cd 01       	movw	r24, r26
     f62:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fixunssfsi>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	9a 87       	std	Y+10, r25	; 0x0a
     f6c:	89 87       	std	Y+9, r24	; 0x09
     f6e:	0f c0       	rjmp	.+30     	; 0xf8e <main+0xe6>
     f70:	88 ec       	ldi	r24, 0xC8	; 200
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	9c 87       	std	Y+12, r25	; 0x0c
     f76:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f78:	8b 85       	ldd	r24, Y+11	; 0x0b
     f7a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <main+0xd4>
     f80:	9c 87       	std	Y+12, r25	; 0x0c
     f82:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f84:	89 85       	ldd	r24, Y+9	; 0x09
     f86:	9a 85       	ldd	r25, Y+10	; 0x0a
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	9a 87       	std	Y+10, r25	; 0x0a
     f8c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8e:	89 85       	ldd	r24, Y+9	; 0x09
     f90:	9a 85       	ldd	r25, Y+10	; 0x0a
     f92:	89 2b       	or	r24, r25
     f94:	69 f7       	brne	.-38     	; 0xf70 <main+0xc8>
     f96:	14 c0       	rjmp	.+40     	; 0xfc0 <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f98:	6d 81       	ldd	r22, Y+5	; 0x05
     f9a:	7e 81       	ldd	r23, Y+6	; 0x06
     f9c:	8f 81       	ldd	r24, Y+7	; 0x07
     f9e:	98 85       	ldd	r25, Y+8	; 0x08
     fa0:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fixunssfsi>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	9a 87       	std	Y+10, r25	; 0x0a
     faa:	89 87       	std	Y+9, r24	; 0x09
     fac:	89 85       	ldd	r24, Y+9	; 0x09
     fae:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb0:	9e 87       	std	Y+14, r25	; 0x0e
     fb2:	8d 87       	std	Y+13, r24	; 0x0d
     fb4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <main+0x110>
     fbc:	9e 87       	std	Y+14, r25	; 0x0e
     fbe:	8d 87       	std	Y+13, r24	; 0x0d
	while(1)
	{
		_delay_ms(20);
		ButtonCycleUpdate();
     fc0:	0e 94 6a 05 	call	0xad4	; 0xad4 <ButtonCycleUpdate>
		
		//rprintf("t=%x\n", button.buttonHoldTime);
		//if(button.buttonsReleased.bVal) rprintf("rl=%x\n", button.buttonsReleased.bVal);
		//if(button.buttonsReleased.bVal) rprintf("rh=%x\n", button.buttonsReleased.bVal>>16);
	}
     fc4:	8b cf       	rjmp	.-234    	; 0xedc <main+0x34>

00000fc6 <__cmpsf2>:
     fc6:	0e 94 17 08 	call	0x102e	; 0x102e <__fp_cmp>
     fca:	08 f4       	brcc	.+2      	; 0xfce <__cmpsf2+0x8>
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	08 95       	ret

00000fd0 <__fixunssfsi>:
     fd0:	0e 94 43 08 	call	0x1086	; 0x1086 <__fp_splitA>
     fd4:	88 f0       	brcs	.+34     	; 0xff8 <__fixunssfsi+0x28>
     fd6:	9f 57       	subi	r25, 0x7F	; 127
     fd8:	98 f0       	brcs	.+38     	; 0x1000 <__fixunssfsi+0x30>
     fda:	b9 2f       	mov	r27, r25
     fdc:	99 27       	eor	r25, r25
     fde:	b7 51       	subi	r27, 0x17	; 23
     fe0:	b0 f0       	brcs	.+44     	; 0x100e <__fixunssfsi+0x3e>
     fe2:	e1 f0       	breq	.+56     	; 0x101c <__fixunssfsi+0x4c>
     fe4:	66 0f       	add	r22, r22
     fe6:	77 1f       	adc	r23, r23
     fe8:	88 1f       	adc	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	1a f0       	brmi	.+6      	; 0xff4 <__fixunssfsi+0x24>
     fee:	ba 95       	dec	r27
     ff0:	c9 f7       	brne	.-14     	; 0xfe4 <__fixunssfsi+0x14>
     ff2:	14 c0       	rjmp	.+40     	; 0x101c <__fixunssfsi+0x4c>
     ff4:	b1 30       	cpi	r27, 0x01	; 1
     ff6:	91 f0       	breq	.+36     	; 0x101c <__fixunssfsi+0x4c>
     ff8:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__fp_zero>
     ffc:	b1 e0       	ldi	r27, 0x01	; 1
     ffe:	08 95       	ret
    1000:	0c 94 5d 08 	jmp	0x10ba	; 0x10ba <__fp_zero>
    1004:	67 2f       	mov	r22, r23
    1006:	78 2f       	mov	r23, r24
    1008:	88 27       	eor	r24, r24
    100a:	b8 5f       	subi	r27, 0xF8	; 248
    100c:	39 f0       	breq	.+14     	; 0x101c <__fixunssfsi+0x4c>
    100e:	b9 3f       	cpi	r27, 0xF9	; 249
    1010:	cc f3       	brlt	.-14     	; 0x1004 <__fixunssfsi+0x34>
    1012:	86 95       	lsr	r24
    1014:	77 95       	ror	r23
    1016:	67 95       	ror	r22
    1018:	b3 95       	inc	r27
    101a:	d9 f7       	brne	.-10     	; 0x1012 <__fixunssfsi+0x42>
    101c:	3e f4       	brtc	.+14     	; 0x102c <__fixunssfsi+0x5c>
    101e:	90 95       	com	r25
    1020:	80 95       	com	r24
    1022:	70 95       	com	r23
    1024:	61 95       	neg	r22
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
    1028:	8f 4f       	sbci	r24, 0xFF	; 255
    102a:	9f 4f       	sbci	r25, 0xFF	; 255
    102c:	08 95       	ret

0000102e <__fp_cmp>:
    102e:	99 0f       	add	r25, r25
    1030:	00 08       	sbc	r0, r0
    1032:	55 0f       	add	r21, r21
    1034:	aa 0b       	sbc	r26, r26
    1036:	e0 e8       	ldi	r30, 0x80	; 128
    1038:	fe ef       	ldi	r31, 0xFE	; 254
    103a:	16 16       	cp	r1, r22
    103c:	17 06       	cpc	r1, r23
    103e:	e8 07       	cpc	r30, r24
    1040:	f9 07       	cpc	r31, r25
    1042:	c0 f0       	brcs	.+48     	; 0x1074 <__fp_cmp+0x46>
    1044:	12 16       	cp	r1, r18
    1046:	13 06       	cpc	r1, r19
    1048:	e4 07       	cpc	r30, r20
    104a:	f5 07       	cpc	r31, r21
    104c:	98 f0       	brcs	.+38     	; 0x1074 <__fp_cmp+0x46>
    104e:	62 1b       	sub	r22, r18
    1050:	73 0b       	sbc	r23, r19
    1052:	84 0b       	sbc	r24, r20
    1054:	95 0b       	sbc	r25, r21
    1056:	39 f4       	brne	.+14     	; 0x1066 <__fp_cmp+0x38>
    1058:	0a 26       	eor	r0, r26
    105a:	61 f0       	breq	.+24     	; 0x1074 <__fp_cmp+0x46>
    105c:	23 2b       	or	r18, r19
    105e:	24 2b       	or	r18, r20
    1060:	25 2b       	or	r18, r21
    1062:	21 f4       	brne	.+8      	; 0x106c <__fp_cmp+0x3e>
    1064:	08 95       	ret
    1066:	0a 26       	eor	r0, r26
    1068:	09 f4       	brne	.+2      	; 0x106c <__fp_cmp+0x3e>
    106a:	a1 40       	sbci	r26, 0x01	; 1
    106c:	a6 95       	lsr	r26
    106e:	8f ef       	ldi	r24, 0xFF	; 255
    1070:	81 1d       	adc	r24, r1
    1072:	81 1d       	adc	r24, r1
    1074:	08 95       	ret

00001076 <__fp_split3>:
    1076:	57 fd       	sbrc	r21, 7
    1078:	90 58       	subi	r25, 0x80	; 128
    107a:	44 0f       	add	r20, r20
    107c:	55 1f       	adc	r21, r21
    107e:	59 f0       	breq	.+22     	; 0x1096 <__fp_splitA+0x10>
    1080:	5f 3f       	cpi	r21, 0xFF	; 255
    1082:	71 f0       	breq	.+28     	; 0x10a0 <__fp_splitA+0x1a>
    1084:	47 95       	ror	r20

00001086 <__fp_splitA>:
    1086:	88 0f       	add	r24, r24
    1088:	97 fb       	bst	r25, 7
    108a:	99 1f       	adc	r25, r25
    108c:	61 f0       	breq	.+24     	; 0x10a6 <__fp_splitA+0x20>
    108e:	9f 3f       	cpi	r25, 0xFF	; 255
    1090:	79 f0       	breq	.+30     	; 0x10b0 <__fp_splitA+0x2a>
    1092:	87 95       	ror	r24
    1094:	08 95       	ret
    1096:	12 16       	cp	r1, r18
    1098:	13 06       	cpc	r1, r19
    109a:	14 06       	cpc	r1, r20
    109c:	55 1f       	adc	r21, r21
    109e:	f2 cf       	rjmp	.-28     	; 0x1084 <__fp_split3+0xe>
    10a0:	46 95       	lsr	r20
    10a2:	f1 df       	rcall	.-30     	; 0x1086 <__fp_splitA>
    10a4:	08 c0       	rjmp	.+16     	; 0x10b6 <__fp_splitA+0x30>
    10a6:	16 16       	cp	r1, r22
    10a8:	17 06       	cpc	r1, r23
    10aa:	18 06       	cpc	r1, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	f1 cf       	rjmp	.-30     	; 0x1092 <__fp_splitA+0xc>
    10b0:	86 95       	lsr	r24
    10b2:	71 05       	cpc	r23, r1
    10b4:	61 05       	cpc	r22, r1
    10b6:	08 94       	sec
    10b8:	08 95       	ret

000010ba <__fp_zero>:
    10ba:	e8 94       	clt

000010bc <__fp_szero>:
    10bc:	bb 27       	eor	r27, r27
    10be:	66 27       	eor	r22, r22
    10c0:	77 27       	eor	r23, r23
    10c2:	cb 01       	movw	r24, r22
    10c4:	97 f9       	bld	r25, 7
    10c6:	08 95       	ret

000010c8 <__gesf2>:
    10c8:	0e 94 17 08 	call	0x102e	; 0x102e <__fp_cmp>
    10cc:	08 f4       	brcc	.+2      	; 0x10d0 <__gesf2+0x8>
    10ce:	8f ef       	ldi	r24, 0xFF	; 255
    10d0:	08 95       	ret

000010d2 <__mulsf3>:
    10d2:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__mulsf3x>
    10d6:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__fp_round>
    10da:	0e 94 df 08 	call	0x11be	; 0x11be <__fp_pscA>
    10de:	38 f0       	brcs	.+14     	; 0x10ee <__mulsf3+0x1c>
    10e0:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__fp_pscB>
    10e4:	20 f0       	brcs	.+8      	; 0x10ee <__mulsf3+0x1c>
    10e6:	95 23       	and	r25, r21
    10e8:	11 f0       	breq	.+4      	; 0x10ee <__mulsf3+0x1c>
    10ea:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__fp_inf>
    10ee:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <__fp_nan>
    10f2:	11 24       	eor	r1, r1
    10f4:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__fp_szero>

000010f8 <__mulsf3x>:
    10f8:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fp_split3>
    10fc:	70 f3       	brcs	.-36     	; 0x10da <__mulsf3+0x8>

000010fe <__mulsf3_pse>:
    10fe:	95 9f       	mul	r25, r21
    1100:	c1 f3       	breq	.-16     	; 0x10f2 <__mulsf3+0x20>
    1102:	95 0f       	add	r25, r21
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	55 1f       	adc	r21, r21
    1108:	62 9f       	mul	r22, r18
    110a:	f0 01       	movw	r30, r0
    110c:	72 9f       	mul	r23, r18
    110e:	bb 27       	eor	r27, r27
    1110:	f0 0d       	add	r31, r0
    1112:	b1 1d       	adc	r27, r1
    1114:	63 9f       	mul	r22, r19
    1116:	aa 27       	eor	r26, r26
    1118:	f0 0d       	add	r31, r0
    111a:	b1 1d       	adc	r27, r1
    111c:	aa 1f       	adc	r26, r26
    111e:	64 9f       	mul	r22, r20
    1120:	66 27       	eor	r22, r22
    1122:	b0 0d       	add	r27, r0
    1124:	a1 1d       	adc	r26, r1
    1126:	66 1f       	adc	r22, r22
    1128:	82 9f       	mul	r24, r18
    112a:	22 27       	eor	r18, r18
    112c:	b0 0d       	add	r27, r0
    112e:	a1 1d       	adc	r26, r1
    1130:	62 1f       	adc	r22, r18
    1132:	73 9f       	mul	r23, r19
    1134:	b0 0d       	add	r27, r0
    1136:	a1 1d       	adc	r26, r1
    1138:	62 1f       	adc	r22, r18
    113a:	83 9f       	mul	r24, r19
    113c:	a0 0d       	add	r26, r0
    113e:	61 1d       	adc	r22, r1
    1140:	22 1f       	adc	r18, r18
    1142:	74 9f       	mul	r23, r20
    1144:	33 27       	eor	r19, r19
    1146:	a0 0d       	add	r26, r0
    1148:	61 1d       	adc	r22, r1
    114a:	23 1f       	adc	r18, r19
    114c:	84 9f       	mul	r24, r20
    114e:	60 0d       	add	r22, r0
    1150:	21 1d       	adc	r18, r1
    1152:	82 2f       	mov	r24, r18
    1154:	76 2f       	mov	r23, r22
    1156:	6a 2f       	mov	r22, r26
    1158:	11 24       	eor	r1, r1
    115a:	9f 57       	subi	r25, 0x7F	; 127
    115c:	50 40       	sbci	r21, 0x00	; 0
    115e:	9a f0       	brmi	.+38     	; 0x1186 <__stack+0x87>
    1160:	f1 f0       	breq	.+60     	; 0x119e <__stack+0x9f>
    1162:	88 23       	and	r24, r24
    1164:	4a f0       	brmi	.+18     	; 0x1178 <__stack+0x79>
    1166:	ee 0f       	add	r30, r30
    1168:	ff 1f       	adc	r31, r31
    116a:	bb 1f       	adc	r27, r27
    116c:	66 1f       	adc	r22, r22
    116e:	77 1f       	adc	r23, r23
    1170:	88 1f       	adc	r24, r24
    1172:	91 50       	subi	r25, 0x01	; 1
    1174:	50 40       	sbci	r21, 0x00	; 0
    1176:	a9 f7       	brne	.-22     	; 0x1162 <__stack+0x63>
    1178:	9e 3f       	cpi	r25, 0xFE	; 254
    117a:	51 05       	cpc	r21, r1
    117c:	80 f0       	brcs	.+32     	; 0x119e <__stack+0x9f>
    117e:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__fp_inf>
    1182:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__fp_szero>
    1186:	5f 3f       	cpi	r21, 0xFF	; 255
    1188:	e4 f3       	brlt	.-8      	; 0x1182 <__stack+0x83>
    118a:	98 3e       	cpi	r25, 0xE8	; 232
    118c:	d4 f3       	brlt	.-12     	; 0x1182 <__stack+0x83>
    118e:	86 95       	lsr	r24
    1190:	77 95       	ror	r23
    1192:	67 95       	ror	r22
    1194:	b7 95       	ror	r27
    1196:	f7 95       	ror	r31
    1198:	e7 95       	ror	r30
    119a:	9f 5f       	subi	r25, 0xFF	; 255
    119c:	c1 f7       	brne	.-16     	; 0x118e <__stack+0x8f>
    119e:	fe 2b       	or	r31, r30
    11a0:	88 0f       	add	r24, r24
    11a2:	91 1d       	adc	r25, r1
    11a4:	96 95       	lsr	r25
    11a6:	87 95       	ror	r24
    11a8:	97 f9       	bld	r25, 7
    11aa:	08 95       	ret

000011ac <__fp_inf>:
    11ac:	97 f9       	bld	r25, 7
    11ae:	9f 67       	ori	r25, 0x7F	; 127
    11b0:	80 e8       	ldi	r24, 0x80	; 128
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	08 95       	ret

000011b8 <__fp_nan>:
    11b8:	9f ef       	ldi	r25, 0xFF	; 255
    11ba:	80 ec       	ldi	r24, 0xC0	; 192
    11bc:	08 95       	ret

000011be <__fp_pscA>:
    11be:	00 24       	eor	r0, r0
    11c0:	0a 94       	dec	r0
    11c2:	16 16       	cp	r1, r22
    11c4:	17 06       	cpc	r1, r23
    11c6:	18 06       	cpc	r1, r24
    11c8:	09 06       	cpc	r0, r25
    11ca:	08 95       	ret

000011cc <__fp_pscB>:
    11cc:	00 24       	eor	r0, r0
    11ce:	0a 94       	dec	r0
    11d0:	12 16       	cp	r1, r18
    11d2:	13 06       	cpc	r1, r19
    11d4:	14 06       	cpc	r1, r20
    11d6:	05 06       	cpc	r0, r21
    11d8:	08 95       	ret

000011da <__fp_round>:
    11da:	09 2e       	mov	r0, r25
    11dc:	03 94       	inc	r0
    11de:	00 0c       	add	r0, r0
    11e0:	11 f4       	brne	.+4      	; 0x11e6 <__fp_round+0xc>
    11e2:	88 23       	and	r24, r24
    11e4:	52 f0       	brmi	.+20     	; 0x11fa <__fp_round+0x20>
    11e6:	bb 0f       	add	r27, r27
    11e8:	40 f4       	brcc	.+16     	; 0x11fa <__fp_round+0x20>
    11ea:	bf 2b       	or	r27, r31
    11ec:	11 f4       	brne	.+4      	; 0x11f2 <__fp_round+0x18>
    11ee:	60 ff       	sbrs	r22, 0
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <__fp_round+0x20>
    11f2:	6f 5f       	subi	r22, 0xFF	; 255
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
    11f6:	8f 4f       	sbci	r24, 0xFF	; 255
    11f8:	9f 4f       	sbci	r25, 0xFF	; 255
    11fa:	08 95       	ret

000011fc <__udivmodhi4>:
    11fc:	aa 1b       	sub	r26, r26
    11fe:	bb 1b       	sub	r27, r27
    1200:	51 e1       	ldi	r21, 0x11	; 17
    1202:	07 c0       	rjmp	.+14     	; 0x1212 <__udivmodhi4_ep>

00001204 <__udivmodhi4_loop>:
    1204:	aa 1f       	adc	r26, r26
    1206:	bb 1f       	adc	r27, r27
    1208:	a6 17       	cp	r26, r22
    120a:	b7 07       	cpc	r27, r23
    120c:	10 f0       	brcs	.+4      	; 0x1212 <__udivmodhi4_ep>
    120e:	a6 1b       	sub	r26, r22
    1210:	b7 0b       	sbc	r27, r23

00001212 <__udivmodhi4_ep>:
    1212:	88 1f       	adc	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	5a 95       	dec	r21
    1218:	a9 f7       	brne	.-22     	; 0x1204 <__udivmodhi4_loop>
    121a:	80 95       	com	r24
    121c:	90 95       	com	r25
    121e:	bc 01       	movw	r22, r24
    1220:	cd 01       	movw	r24, r26
    1222:	08 95       	ret

00001224 <__udivmodsi4>:
    1224:	a1 e2       	ldi	r26, 0x21	; 33
    1226:	1a 2e       	mov	r1, r26
    1228:	aa 1b       	sub	r26, r26
    122a:	bb 1b       	sub	r27, r27
    122c:	fd 01       	movw	r30, r26
    122e:	0d c0       	rjmp	.+26     	; 0x124a <__udivmodsi4_ep>

00001230 <__udivmodsi4_loop>:
    1230:	aa 1f       	adc	r26, r26
    1232:	bb 1f       	adc	r27, r27
    1234:	ee 1f       	adc	r30, r30
    1236:	ff 1f       	adc	r31, r31
    1238:	a2 17       	cp	r26, r18
    123a:	b3 07       	cpc	r27, r19
    123c:	e4 07       	cpc	r30, r20
    123e:	f5 07       	cpc	r31, r21
    1240:	20 f0       	brcs	.+8      	; 0x124a <__udivmodsi4_ep>
    1242:	a2 1b       	sub	r26, r18
    1244:	b3 0b       	sbc	r27, r19
    1246:	e4 0b       	sbc	r30, r20
    1248:	f5 0b       	sbc	r31, r21

0000124a <__udivmodsi4_ep>:
    124a:	66 1f       	adc	r22, r22
    124c:	77 1f       	adc	r23, r23
    124e:	88 1f       	adc	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	1a 94       	dec	r1
    1254:	69 f7       	brne	.-38     	; 0x1230 <__udivmodsi4_loop>
    1256:	60 95       	com	r22
    1258:	70 95       	com	r23
    125a:	80 95       	com	r24
    125c:	90 95       	com	r25
    125e:	9b 01       	movw	r18, r22
    1260:	ac 01       	movw	r20, r24
    1262:	bd 01       	movw	r22, r26
    1264:	cf 01       	movw	r24, r30
    1266:	08 95       	ret

00001268 <_exit>:
    1268:	f8 94       	cli

0000126a <__stop_program>:
    126a:	ff cf       	rjmp	.-2      	; 0x126a <__stop_program>
